"use strict";
(function(module) {
    if (typeof define === 'function' && define.amd) {
        define(['exports'], function(exports)  {
            module(exports);
        });
    } else if (typeof exports === 'object' && exports !== null && typeof exports.nodeName !== 'string') {
        module(exports);
    } else {
        module(typeof self !== 'undefined' ? self : this);
}
}(function($rt_exports) {
let $rt_seed = 2463534242,
$rt_nextId = () => {
    let x = $rt_seed;
    x ^= x << 13;
    x ^= x >>> 17;
    x ^= x << 5;
    $rt_seed = x;
    return x;
},
$rt_wrapFunction0 = f => function() {
    return f(this);
},
$rt_wrapFunction1 = f => function(p1) {
    return f(this, p1);
},
$rt_wrapFunction2 = f => function(p1, p2) {
    return f(this, p1, p2);
},
$rt_wrapFunction3 = f => function(p1, p2, p3) {
    return f(this, p1, p2, p3, p3);
},
$rt_wrapFunction4 = f => function(p1, p2, p3, p4) {
    return f(this, p1, p2, p3, p4);
},
$rt_threadStarter = f => function() {
    let args = Array.prototype.slice.apply(arguments);
    $rt_startThread(function() {
        f.apply(this, args);
    });
},
$rt_mainStarter = f => (args, callback) => {
    if (!args) {
        args = [];
    }
    let javaArgs = $rt_createArray($rt_objcls(), args.length);
    for (let i = 0;i < args.length;++i) {
        javaArgs.data[i] = $rt_str(args[i]);
    }
    $rt_startThread(() => {
        f.call(null, javaArgs);
    }, callback);
},
$rt_eraseClinit = target => target.$clinit = () => {
},
$dbg_class = obj => {
    let cls = obj.constructor;
    let arrayDegree = 0;
    while (cls.$meta && cls.$meta.item) {
        ++arrayDegree;
        cls = cls.$meta.item;
    }
    let clsName = "";
    if (cls.$meta.primitive) {
        clsName = cls.$meta.name;
    } else {
        clsName = cls.$meta ? cls.$meta.name || "a/" + cls.name : "@" + cls.name;
    }
    while (arrayDegree-- > 0) {
        clsName += "[]";
    }
    return clsName;
},
$rt_classWithoutFields = superclass => {
    if (superclass === 0) {
        return function() {
        };
    }
    if (superclass === void 0) {
        superclass = $rt_objcls();
    }
    return function() {
        superclass.call(this);
    };
},
$rt_cls = cls => jl_Class_getClass(cls),
$rt_objcls = () => jl_Object,
$rt_getThread = () => {
    {
        return jl_Thread_currentThread0();
    }
},
$rt_setThread = t => {
    {
        return jl_Thread_setCurrentThread(t);
    }
},
$rt_createcls = () => {
    return { $array : null, classObject : null, $meta : { supertypes : [], superclass : null } };
},
$rt_createPrimitiveCls = (name, binaryName) => {
    let cls = $rt_createcls();
    cls.$meta.primitive = true;
    cls.$meta.name = name;
    cls.$meta.binaryName = binaryName;
    cls.$meta.enum = false;
    cls.$meta.item = null;
    cls.$meta.simpleName = null;
    cls.$meta.declaringClass = null;
    cls.$meta.enclosingClass = null;
    return cls;
},
$rt_booleancls = $rt_createPrimitiveCls("boolean", "Z"),
$rt_charcls = $rt_createPrimitiveCls("char", "C"),
$rt_bytecls = $rt_createPrimitiveCls("byte", "B"),
$rt_shortcls = $rt_createPrimitiveCls("short", "S"),
$rt_intcls = $rt_createPrimitiveCls("int", "I"),
$rt_longcls = $rt_createPrimitiveCls("long", "J"),
$rt_floatcls = $rt_createPrimitiveCls("float", "F"),
$rt_doublecls = $rt_createPrimitiveCls("double", "D"),
$rt_voidcls = $rt_createPrimitiveCls("void", "V"),
$rt_numberConversionBuffer = new ArrayBuffer(16),
$rt_numberConversionView = new DataView($rt_numberConversionBuffer),
$rt_numberConversionFloatArray = new Float32Array($rt_numberConversionBuffer),
$rt_numberConversionDoubleArray = new Float64Array($rt_numberConversionBuffer),
$rt_numberConversionIntArray = new Int32Array($rt_numberConversionBuffer),
$rt_doubleToRawLongBits,
$rt_longBitsToDouble;
if (typeof BigInt !== 'function') {
    $rt_doubleToRawLongBits = n => {
        $rt_numberConversionView.setFloat64(0, n, true);
        return new Long($rt_numberConversionView.getInt32(0, true), $rt_numberConversionView.getInt32(4, true));
    };
    $rt_longBitsToDouble = n => {
        $rt_numberConversionView.setInt32(0, n.lo, true);
        $rt_numberConversionView.setInt32(4, n.hi, true);
        return $rt_numberConversionView.getFloat64(0, true);
    };
} else if (typeof BigInt64Array !== 'function') {
    $rt_doubleToRawLongBits = n => {
        $rt_numberConversionView.setFloat64(0, n, true);
        let lo = $rt_numberConversionView.getInt32(0, true);
        let hi = $rt_numberConversionView.getInt32(4, true);
        return BigInt.asIntN(64, BigInt.asUintN(32, BigInt(lo)) | BigInt(hi) << BigInt(32));
    };
    $rt_longBitsToDouble = n => {
        $rt_numberConversionView.setFloat64(0, n, true);
        let lo = $rt_numberConversionView.getInt32(0, true);
        let hi = $rt_numberConversionView.getInt32(4, true);
        return BigInt.asIntN(64, BigInt.asUintN(32, BigInt(lo)) | BigInt(hi) << BigInt(32));
    };
} else {
    let $rt_numberConversionLongArray = new BigInt64Array($rt_numberConversionBuffer);
    $rt_doubleToRawLongBits = n => {
        $rt_numberConversionDoubleArray[0] = n;
        return $rt_numberConversionLongArray[0];
    };
    $rt_longBitsToDouble = n => {
        $rt_numberConversionLongArray[0] = n;
        return $rt_numberConversionDoubleArray[0];
    };
}
let $rt_floatToRawIntBits = n => {
    $rt_numberConversionFloatArray[0] = n;
    return $rt_numberConversionIntArray[0];
},
$rt_intBitsToFloat = n => {
    $rt_numberConversionIntArray[0] = n;
    return $rt_numberConversionFloatArray[0];
},
$rt_equalDoubles = (a, b) => {
    if (a !== a) {
        return b !== b;
    }
    $rt_numberConversionDoubleArray[0] = a;
    $rt_numberConversionDoubleArray[1] = b;
    return $rt_numberConversionIntArray[0] === $rt_numberConversionIntArray[2] && $rt_numberConversionIntArray[1] === $rt_numberConversionIntArray[3];
},
$rt_compare = (a, b) => a > b ? 1 : a < b ?  -1 : a === b ? 0 : 1,
$rt_imul = Math.imul || function(a, b) {
    let ah = a >>> 16 & 0xFFFF;
    let al = a & 0xFFFF;
    let bh = b >>> 16 & 0xFFFF;
    let bl = b & 0xFFFF;
    return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
},
$rt_udiv = (a, b) => (a >>> 0) / (b >>> 0) >>> 0,
$rt_umod = (a, b) => (a >>> 0) % (b >>> 0) >>> 0,
$rt_ucmp = (a, b) => {
    a >>>= 0;
    b >>>= 0;
    return a < b ?  -1 : a > b ? 1 : 0;
};
function Long(lo, hi) {
    this.lo = lo | 0;
    this.hi = hi | 0;
}
Long.prototype.__teavm_class__ = () => {
    return "long";
};
let Long_isPositive = a => (a.hi & 0x80000000) === 0,
Long_isNegative = a => (a.hi & 0x80000000) !== 0,
Long_MAX_NORMAL = 1 << 18,
Long_ZERO,
Long_create,
Long_fromInt,
Long_fromNumber,
Long_toNumber,
Long_lo,
Long_divRem;
if (typeof BigInt !== "function") {
    Long.prototype.toString = function() {
        let result = [];
        let n = this;
        let positive = Long_isPositive(n);
        if (!positive) {
            n = Long_neg(n);
        }
        let radix = new Long(10, 0);
        do  {
            let divRem = Long_divRem(n, radix);
            result.push(String.fromCharCode(48 + divRem[1].lo));
            n = divRem[0];
        }while (n.lo !== 0 || n.hi !== 0);
        result = (result.reverse()).join('');
        return positive ? result : "-" + result;
    };
    Long.prototype.valueOf = function() {
        return Long_toNumber(this);
    };
    Long_ZERO = new Long(0, 0);
    Long_fromInt = val => new Long(val,  -(val < 0) | 0);
    Long_fromNumber = val => val >= 0 ? new Long(val | 0, val / 0x100000000 | 0) : Long_neg(new Long( -val | 0,  -val / 0x100000000 | 0));
    Long_create = (lo, hi) => new Long(lo, hi);
    Long_toNumber = val => 0x100000000 * val.hi + (val.lo >>> 0);
    Long_lo = val => val.lo;
} else {
    Long_ZERO = BigInt(0);
    Long_create = (lo, hi) => BigInt.asIntN(64, BigInt.asUintN(64, BigInt(lo)) | BigInt.asUintN(64, BigInt(hi) << BigInt(32)));
    Long_fromInt = val => BigInt.asIntN(64, BigInt(val | 0));
    Long_fromNumber = val => BigInt.asIntN(64, BigInt(val >= 0 ? Math.floor(val) : Math.ceil(val)));
    Long_toNumber = val => Number(val);
    Long_lo = val => Number(BigInt.asIntN(32, val)) | 0;
}
let Long_eq,
Long_ne,
Long_gt,
Long_ge,
Long_lt,
Long_le,
Long_ucompare,
Long_add,
Long_sub,
Long_inc,
Long_mul,
Long_div,
Long_rem,
Long_udiv,
Long_urem,
Long_neg,
Long_and,
Long_or,
Long_xor,
Long_shl,
Long_shr,
Long_shru;
if (typeof BigInt !== 'function') {
    Long_eq = (a, b) => a.hi === b.hi && a.lo === b.lo;
    Long_ne = (a, b) => a.hi !== b.hi || a.lo !== b.lo;
    Long_gt = (a, b) => {
        if (a.hi < b.hi) {
            return false;
        }
        if (a.hi > b.hi) {
            return true;
        }
        let x = a.lo >>> 1;
        let y = b.lo >>> 1;
        if (x !== y) {
            return x > y;
        }
        return (a.lo & 1) > (b.lo & 1);
    };
    Long_ge = (a, b) => {
        if (a.hi < b.hi) {
            return false;
        }
        if (a.hi > b.hi) {
            return true;
        }
        let x = a.lo >>> 1;
        let y = b.lo >>> 1;
        if (x !== y) {
            return x >= y;
        }
        return (a.lo & 1) >= (b.lo & 1);
    };
    Long_lt = (a, b) => {
        if (a.hi > b.hi) {
            return false;
        }
        if (a.hi < b.hi) {
            return true;
        }
        let x = a.lo >>> 1;
        let y = b.lo >>> 1;
        if (x !== y) {
            return x < y;
        }
        return (a.lo & 1) < (b.lo & 1);
    };
    Long_le = (a, b) => {
        if (a.hi > b.hi) {
            return false;
        }
        if (a.hi < b.hi) {
            return true;
        }
        let x = a.lo >>> 1;
        let y = b.lo >>> 1;
        if (x !== y) {
            return x <= y;
        }
        return (a.lo & 1) <= (b.lo & 1);
    };
    Long_add = (a, b) => {
        if (a.hi === a.lo >> 31 && b.hi === b.lo >> 31) {
            return Long_fromNumber(a.lo + b.lo);
        } else if (Math.abs(a.hi) < Long_MAX_NORMAL && Math.abs(b.hi) < Long_MAX_NORMAL) {
            return Long_fromNumber(Long_toNumber(a) + Long_toNumber(b));
        }
        let a_lolo = a.lo & 0xFFFF;
        let a_lohi = a.lo >>> 16;
        let a_hilo = a.hi & 0xFFFF;
        let a_hihi = a.hi >>> 16;
        let b_lolo = b.lo & 0xFFFF;
        let b_lohi = b.lo >>> 16;
        let b_hilo = b.hi & 0xFFFF;
        let b_hihi = b.hi >>> 16;
        let lolo = a_lolo + b_lolo | 0;
        let lohi = a_lohi + b_lohi + (lolo >> 16) | 0;
        let hilo = a_hilo + b_hilo + (lohi >> 16) | 0;
        let hihi = a_hihi + b_hihi + (hilo >> 16) | 0;
        return new Long(lolo & 0xFFFF | (lohi & 0xFFFF) << 16, hilo & 0xFFFF | (hihi & 0xFFFF) << 16);
    };
    Long_inc = a => {
        let lo = a.lo + 1 | 0;
        let hi = a.hi;
        if (lo === 0) {
            hi = hi + 1 | 0;
        }
        return new Long(lo, hi);
    };
    Long_neg = a => Long_inc(new Long(a.lo ^ 0xFFFFFFFF, a.hi ^ 0xFFFFFFFF));
    Long_sub = (a, b) => {
        if (a.hi === a.lo >> 31 && b.hi === b.lo >> 31) {
            return Long_fromNumber(a.lo - b.lo);
        }
        let a_lolo = a.lo & 0xFFFF;
        let a_lohi = a.lo >>> 16;
        let a_hilo = a.hi & 0xFFFF;
        let a_hihi = a.hi >>> 16;
        let b_lolo = b.lo & 0xFFFF;
        let b_lohi = b.lo >>> 16;
        let b_hilo = b.hi & 0xFFFF;
        let b_hihi = b.hi >>> 16;
        let lolo = a_lolo - b_lolo | 0;
        let lohi = a_lohi - b_lohi + (lolo >> 16) | 0;
        let hilo = a_hilo - b_hilo + (lohi >> 16) | 0;
        let hihi = a_hihi - b_hihi + (hilo >> 16) | 0;
        return new Long(lolo & 0xFFFF | (lohi & 0xFFFF) << 16, hilo & 0xFFFF | (hihi & 0xFFFF) << 16);
    };
    Long_ucompare = (a, b) => {
        let r = $rt_ucmp(a.hi, b.hi);
        if (r !== 0) {
            return r;
        }
        r = (a.lo >>> 1) - (b.lo >>> 1);
        if (r !== 0) {
            return r;
        }
        return (a.lo & 1) - (b.lo & 1);
    };
    Long_mul = (a, b) => {
        let positive = Long_isNegative(a) === Long_isNegative(b);
        if (Long_isNegative(a)) {
            a = Long_neg(a);
        }
        if (Long_isNegative(b)) {
            b = Long_neg(b);
        }
        let a_lolo = a.lo & 0xFFFF;
        let a_lohi = a.lo >>> 16;
        let a_hilo = a.hi & 0xFFFF;
        let a_hihi = a.hi >>> 16;
        let b_lolo = b.lo & 0xFFFF;
        let b_lohi = b.lo >>> 16;
        let b_hilo = b.hi & 0xFFFF;
        let b_hihi = b.hi >>> 16;
        let lolo = 0;
        let lohi = 0;
        let hilo = 0;
        let hihi = 0;
        lolo = a_lolo * b_lolo | 0;
        lohi = lolo >>> 16;
        lohi = (lohi & 0xFFFF) + a_lohi * b_lolo | 0;
        hilo = hilo + (lohi >>> 16) | 0;
        lohi = (lohi & 0xFFFF) + a_lolo * b_lohi | 0;
        hilo = hilo + (lohi >>> 16) | 0;
        hihi = hilo >>> 16;
        hilo = (hilo & 0xFFFF) + a_hilo * b_lolo | 0;
        hihi = hihi + (hilo >>> 16) | 0;
        hilo = (hilo & 0xFFFF) + a_lohi * b_lohi | 0;
        hihi = hihi + (hilo >>> 16) | 0;
        hilo = (hilo & 0xFFFF) + a_lolo * b_hilo | 0;
        hihi = hihi + (hilo >>> 16) | 0;
        hihi = hihi + a_hihi * b_lolo + a_hilo * b_lohi + a_lohi * b_hilo + a_lolo * b_hihi | 0;
        let result = new Long(lolo & 0xFFFF | lohi << 16, hilo & 0xFFFF | hihi << 16);
        return positive ? result : Long_neg(result);
    };
    Long_div = (a, b) => {
        if (Math.abs(a.hi) < Long_MAX_NORMAL && Math.abs(b.hi) < Long_MAX_NORMAL) {
            return Long_fromNumber(Long_toNumber(a) / Long_toNumber(b));
        }
        return (Long_divRem(a, b))[0];
    };
    Long_udiv = (a, b) => {
        if (a.hi >= 0 && a.hi < Long_MAX_NORMAL && b.hi >= 0 && b.hi < Long_MAX_NORMAL) {
            return Long_fromNumber(Long_toNumber(a) / Long_toNumber(b));
        }
        return (Long_udivRem(a, b))[0];
    };
    Long_rem = (a, b) => {
        if (Math.abs(a.hi) < Long_MAX_NORMAL && Math.abs(b.hi) < Long_MAX_NORMAL) {
            return Long_fromNumber(Long_toNumber(a) % Long_toNumber(b));
        }
        return (Long_divRem(a, b))[1];
    };
    Long_urem = (a, b) => {
        if (a.hi >= 0 && a.hi < Long_MAX_NORMAL && b.hi >= 0 && b.hi < Long_MAX_NORMAL) {
            return Long_fromNumber(Long_toNumber(a) / Long_toNumber(b));
        }
        return (Long_udivRem(a, b))[1];
    };
    Long_divRem = (a, b) => {
        if (b.lo === 0 && b.hi === 0) {
            throw new Error("Division by zero");
        }
        let positive = Long_isNegative(a) === Long_isNegative(b);
        if (Long_isNegative(a)) {
            a = Long_neg(a);
        }
        if (Long_isNegative(b)) {
            b = Long_neg(b);
        }
        a = new LongInt(a.lo, a.hi, 0);
        b = new LongInt(b.lo, b.hi, 0);
        let q = LongInt_div(a, b);
        a = new Long(a.lo, a.hi);
        q = new Long(q.lo, q.hi);
        return positive ? [q, a] : [Long_neg(q), Long_neg(a)];
    };
    let Long_udivRem = (a, b) => {
        if (b.lo === 0 && b.hi === 0) {
            throw new Error("Division by zero");
        }
        a = new LongInt(a.lo, a.hi, 0);
        b = new LongInt(b.lo, b.hi, 0);
        let q = LongInt_div(a, b);
        a = new Long(a.lo, a.hi);
        q = new Long(q.lo, q.hi);
        return [q, a];
    };
    Long_and = (a, b) => new Long(a.lo & b.lo, a.hi & b.hi);
    Long_or = (a, b) => new Long(a.lo | b.lo, a.hi | b.hi);
    Long_xor = (a, b) => new Long(a.lo ^ b.lo, a.hi ^ b.hi);
    Long_shl = (a, b) => {
        b &= 63;
        if (b === 0) {
            return a;
        } else if (b < 32) {
            return new Long(a.lo << b, a.lo >>> 32 - b | a.hi << b);
        } else if (b === 32) {
            return new Long(0, a.lo);
        } else {
            return new Long(0, a.lo << b - 32);
        }
    };
    Long_shr = (a, b) => {
        b &= 63;
        if (b === 0) {
            return a;
        } else if (b < 32) {
            return new Long(a.lo >>> b | a.hi << 32 - b, a.hi >> b);
        } else if (b === 32) {
            return new Long(a.hi, a.hi >> 31);
        } else {
            return new Long(a.hi >> b - 32, a.hi >> 31);
        }
    };
    Long_shru = (a, b) => {
        b &= 63;
        if (b === 0) {
            return a;
        } else if (b < 32) {
            return new Long(a.lo >>> b | a.hi << 32 - b, a.hi >>> b);
        } else if (b === 32) {
            return new Long(a.hi, 0);
        } else {
            return new Long(a.hi >>> b - 32, 0);
        }
    };
    function LongInt(lo, hi, sup) {
        this.lo = lo;
        this.hi = hi;
        this.sup = sup;
    }
    let LongInt_mul = (a, b) => {
        let a_lolo = (a.lo & 0xFFFF) * b | 0;
        let a_lohi = (a.lo >>> 16) * b | 0;
        let a_hilo = (a.hi & 0xFFFF) * b | 0;
        let a_hihi = (a.hi >>> 16) * b | 0;
        let sup = a.sup * b | 0;
        a_lohi = a_lohi + (a_lolo >>> 16) | 0;
        a_hilo = a_hilo + (a_lohi >>> 16) | 0;
        a_hihi = a_hihi + (a_hilo >>> 16) | 0;
        sup = sup + (a_hihi >>> 16) | 0;
        a.lo = a_lolo & 0xFFFF | a_lohi << 16;
        a.hi = a_hilo & 0xFFFF | a_hihi << 16;
        a.sup = sup & 0xFFFF;
    };
    let LongInt_sub = (a, b) => {
        let a_lolo = a.lo & 0xFFFF;
        let a_lohi = a.lo >>> 16;
        let a_hilo = a.hi & 0xFFFF;
        let a_hihi = a.hi >>> 16;
        let b_lolo = b.lo & 0xFFFF;
        let b_lohi = b.lo >>> 16;
        let b_hilo = b.hi & 0xFFFF;
        let b_hihi = b.hi >>> 16;
        a_lolo = a_lolo - b_lolo | 0;
        a_lohi = a_lohi - b_lohi + (a_lolo >> 16) | 0;
        a_hilo = a_hilo - b_hilo + (a_lohi >> 16) | 0;
        a_hihi = a_hihi - b_hihi + (a_hilo >> 16) | 0;
        let sup = a.sup - b.sup + (a_hihi >> 16) | 0;
        a.lo = a_lolo & 0xFFFF | a_lohi << 16;
        a.hi = a_hilo & 0xFFFF | a_hihi << 16;
        a.sup = sup;
    };
    let LongInt_add = (a, b) => {
        let a_lolo = a.lo & 0xFFFF;
        let a_lohi = a.lo >>> 16;
        let a_hilo = a.hi & 0xFFFF;
        let a_hihi = a.hi >>> 16;
        let b_lolo = b.lo & 0xFFFF;
        let b_lohi = b.lo >>> 16;
        let b_hilo = b.hi & 0xFFFF;
        let b_hihi = b.hi >>> 16;
        a_lolo = a_lolo + b_lolo | 0;
        a_lohi = a_lohi + b_lohi + (a_lolo >> 16) | 0;
        a_hilo = a_hilo + b_hilo + (a_lohi >> 16) | 0;
        a_hihi = a_hihi + b_hihi + (a_hilo >> 16) | 0;
        let sup = a.sup + b.sup + (a_hihi >> 16) | 0;
        a.lo = a_lolo & 0xFFFF | a_lohi << 16;
        a.hi = a_hilo & 0xFFFF | a_hihi << 16;
        a.sup = sup;
    };
    let LongInt_ucompare = (a, b) => {
        let r = a.sup - b.sup;
        if (r !== 0) {
            return r;
        }
        r = (a.hi >>> 1) - (b.hi >>> 1);
        if (r !== 0) {
            return r;
        }
        r = (a.hi & 1) - (b.hi & 1);
        if (r !== 0) {
            return r;
        }
        r = (a.lo >>> 1) - (b.lo >>> 1);
        if (r !== 0) {
            return r;
        }
        return (a.lo & 1) - (b.lo & 1);
    };
    let LongInt_numOfLeadingZeroBits = a => {
        let n = 0;
        let d = 16;
        while (d > 0) {
            if (a >>> d !== 0) {
                a >>>= d;
                n = n + d | 0;
            }
            d = d / 2 | 0;
        }
        return 31 - n;
    };
    let LongInt_shl = (a, b) => {
        if (b === 0) {
            return;
        }
        if (b < 32) {
            a.sup = (a.hi >>> 32 - b | a.sup << b) & 0xFFFF;
            a.hi = a.lo >>> 32 - b | a.hi << b;
            a.lo <<= b;
        } else if (b === 32) {
            a.sup = a.hi & 0xFFFF;
            a.hi = a.lo;
            a.lo = 0;
        } else if (b < 64) {
            a.sup = (a.lo >>> 64 - b | a.hi << b - 32) & 0xFFFF;
            a.hi = a.lo << b;
            a.lo = 0;
        } else if (b === 64) {
            a.sup = a.lo & 0xFFFF;
            a.hi = 0;
            a.lo = 0;
        } else {
            a.sup = a.lo << b - 64 & 0xFFFF;
            a.hi = 0;
            a.lo = 0;
        }
    };
    let LongInt_shr = (a, b) => {
        if (b === 0) {
            return;
        }
        if (b === 32) {
            a.lo = a.hi;
            a.hi = a.sup;
            a.sup = 0;
        } else if (b < 32) {
            a.lo = a.lo >>> b | a.hi << 32 - b;
            a.hi = a.hi >>> b | a.sup << 32 - b;
            a.sup >>>= b;
        } else if (b === 64) {
            a.lo = a.sup;
            a.hi = 0;
            a.sup = 0;
        } else if (b < 64) {
            a.lo = a.hi >>> b - 32 | a.sup << 64 - b;
            a.hi = a.sup >>> b - 32;
            a.sup = 0;
        } else {
            a.lo = a.sup >>> b - 64;
            a.hi = 0;
            a.sup = 0;
        }
    };
    let LongInt_copy = a => new LongInt(a.lo, a.hi, a.sup);
    let LongInt_div = (a, b) => {
        let bits = b.hi !== 0 ? LongInt_numOfLeadingZeroBits(b.hi) : LongInt_numOfLeadingZeroBits(b.lo) + 32;
        let sz = 1 + (bits / 16 | 0);
        let dividentBits = bits % 16;
        LongInt_shl(b, bits);
        LongInt_shl(a, dividentBits);
        let q = new LongInt(0, 0, 0);
        while (sz-- > 0) {
            LongInt_shl(q, 16);
            let digitA = (a.hi >>> 16) + 0x10000 * a.sup;
            let digitB = b.hi >>> 16;
            let digit = digitA / digitB | 0;
            let t = LongInt_copy(b);
            LongInt_mul(t, digit);
            if (LongInt_ucompare(t, a) >= 0) {
                while (LongInt_ucompare(t, a) > 0) {
                    LongInt_sub(t, b);
                     --digit;
                }
            } else {
                while (true) {
                    let nextT = LongInt_copy(t);
                    LongInt_add(nextT, b);
                    if (LongInt_ucompare(nextT, a) > 0) {
                        break;
                    }
                    t = nextT;
                    ++digit;
                }
            }
            LongInt_sub(a, t);
            q.lo |= digit;
            LongInt_shl(a, 16);
        }
        LongInt_shr(a, bits + 16);
        return q;
    };
} else {
    Long_eq = (a, b) => a === b;
    Long_ne = (a, b) => a !== b;
    Long_gt = (a, b) => a > b;
    Long_ge = (a, b) => a >= b;
    Long_lt = (a, b) => a < b;
    Long_le = (a, b) => a <= b;
    Long_add = (a, b) => BigInt.asIntN(64, a + b);
    Long_inc = a => BigInt.asIntN(64, a + 1);
    Long_neg = a => BigInt.asIntN(64,  -a);
    Long_sub = (a, b) => BigInt.asIntN(64, a - b);
    Long_ucompare = (a, b) => {
        a = BigInt.asUintN(64, a);
        b = BigInt.asUintN(64, b);
        return a < b ?  -1 : a > b ? 1 : 0;
    };
    Long_mul = (a, b) => BigInt.asIntN(64, a * b);
    Long_div = (a, b) => BigInt.asIntN(64, a / b);
    Long_udiv = (a, b) => BigInt.asIntN(64, BigInt.asUintN(64, a) / BigInt.asUintN(64, b));
    Long_rem = (a, b) => BigInt.asIntN(64, a % b);
    Long_urem = (a, b) => BigInt.asIntN(64, BigInt.asUintN(64, a) % BigInt.asUintN(64, b));
    Long_and = (a, b) => BigInt.asIntN(64, a & b);
    Long_or = (a, b) => BigInt.asIntN(64, a | b);
    Long_xor = (a, b) => BigInt.asIntN(64, a ^ b);
    Long_shl = (a, b) => BigInt.asIntN(64, a << BigInt(b & 63));
    Long_shr = (a, b) => BigInt.asIntN(64, a >> BigInt(b & 63));
    Long_shru = (a, b) => BigInt.asIntN(64, BigInt.asUintN(64, a) >> BigInt(b & 63));
}
let $rt_createArray = (cls, sz) => {
    let data = new Array(sz);
    data.fill(null);
    return new ($rt_arraycls(cls))(data);
},
$rt_wrapArray = (cls, data) => new ($rt_arraycls(cls))(data),
$rt_createLongArray,
$rt_createLongArrayFromData;
if (typeof BigInt64Array !== 'function') {
    $rt_createLongArray = sz => {
        let data = new Array(sz);
        let arr = new $rt_longArrayCls(data);
        data.fill(Long_ZERO);
        return arr;
    };
    $rt_createLongArrayFromData = init => new $rt_longArrayCls(init);
} else {
    $rt_createLongArray = sz => new $rt_longArrayCls(new BigInt64Array(sz));
    $rt_createLongArrayFromData = data => {
        let buffer = new BigInt64Array(data.length);
        buffer.set(data);
        return new $rt_longArrayCls(buffer);
    };
}
let $rt_createCharArray = sz => new $rt_charArrayCls(new Uint16Array(sz)),
$rt_createByteArray = sz => new $rt_byteArrayCls(new Int8Array(sz)),
$rt_createByteArrayFromData = data => {
    let buffer = new Int8Array(data.length);
    buffer.set(data);
    return new $rt_byteArrayCls(buffer);
},
$rt_createShortArray = sz => new $rt_shortArrayCls(new Int16Array(sz)),
$rt_createShortArrayFromData = data => {
    let buffer = new Int16Array(data.length);
    buffer.set(data);
    return new $rt_shortArrayCls(buffer);
},
$rt_createIntArray = sz => new $rt_intArrayCls(new Int32Array(sz)),
$rt_createIntArrayFromData = data => {
    let buffer = new Int32Array(data.length);
    buffer.set(data);
    return new $rt_intArrayCls(buffer);
},
$rt_createBooleanArray = sz => new $rt_booleanArrayCls(new Int8Array(sz)),
$rt_createFloatArray = sz => new $rt_floatArrayCls(new Float32Array(sz)),
$rt_createDoubleArray = sz => new $rt_doubleArrayCls(new Float64Array(sz)),
$rt_arraycls = cls => {
    let result = cls.$array;
    if (result === null) {
        function JavaArray(data) {
            ($rt_objcls()).call(this);
            this.data = data;
        }
        JavaArray.prototype = Object.create(($rt_objcls()).prototype);
        JavaArray.prototype.type = cls;
        JavaArray.prototype.constructor = JavaArray;
        JavaArray.prototype.toString = function() {
            let str = "[";
            for (let i = 0;i < this.data.length;++i) {
                if (i > 0) {
                    str += ", ";
                }
                str += this.data[i].toString();
            }
            str += "]";
            return str;
        };
        JavaArray.prototype.$clone0 = function() {
            let dataCopy;
            if ('slice' in this.data) {
                dataCopy = this.data.slice();
            } else {
                dataCopy = new this.data.constructor(this.data.length);
                for (let i = 0;i < dataCopy.length;++i) {
                    dataCopy[i] = this.data[i];
                }
            }
            return new ($rt_arraycls(this.type))(dataCopy);
        };
        let name = "[" + cls.$meta.binaryName;
        JavaArray.$meta = { item : cls, supertypes : [$rt_objcls()], primitive : false, superclass : $rt_objcls(), name : name, binaryName : name, enum : false, simpleName : null, declaringClass : null, enclosingClass : null };
        JavaArray.classObject = null;
        JavaArray.$array = null;
        result = JavaArray;
        cls.$array = JavaArray;
    }
    return result;
},
$rt_stringPool_instance,
$rt_stringPool = strings => {
    $rt_stringClassInit();
    $rt_stringPool_instance = new Array(strings.length);
    for (let i = 0;i < strings.length;++i) {
        $rt_stringPool_instance[i] = $rt_intern($rt_str(strings[i]));
    }
},
$rt_s = index => $rt_stringPool_instance[index],
$rt_charArrayToString = (array, offset, count) => {
    let result = "";
    let limit = offset + count;
    for (let i = offset;i < limit;i = i + 1024 | 0) {
        let next = Math.min(limit, i + 1024 | 0);
        result += String.fromCharCode.apply(null, array.subarray(i, next));
    }
    return result;
},
$rt_fullArrayToString = array => $rt_charArrayToString(array, 0, array.length),
$rt_stringToCharArray = (string, begin, dst, dstBegin, count) => {
    for (let i = 0;i < count;i = i + 1 | 0) {
        dst[dstBegin + i] = string.charCodeAt(begin + i);
    }
},
$rt_str = str => str === null ? null : jl_String__init_1(str),
$rt_ustr = str => str === null ? null : str.$nativeString,
$rt_stringClassInit = () => (() => {})(),
$rt_intern;
{
    $rt_intern = str => str;
}
let $rt_isInstance = (obj, cls) => obj instanceof $rt_objcls() && !!obj.constructor.$meta && $rt_isAssignable(obj.constructor, cls),
$rt_isAssignable = (from, to) => {
    if (from === to) {
        return true;
    }
    let map = from.$meta.assignableCache;
    if (typeof map === 'undefined') {
        map = new Map();
        from.$meta.assignableCache = map;
    }
    let cachedResult = map.get(to);
    if (typeof cachedResult !== 'undefined') {
        return cachedResult;
    }
    if (to.$meta.item !== null) {
        let result = from.$meta.item !== null && $rt_isAssignable(from.$meta.item, to.$meta.item);
        map.set(to, result);
        return result;
    }
    let supertypes = from.$meta.supertypes;
    for (let i = 0;i < supertypes.length;i = i + 1 | 0) {
        if ($rt_isAssignable(supertypes[i], to)) {
            map.set(to, true);
            return true;
        }
    }
    map.set(to, false);
    return false;
},
$rt_throw = ex => {
    throw $rt_exception(ex);
},
$rt_javaExceptionProp = Symbol("javaException"),
$rt_exception = ex => {
    let err = ex.$jsException;
    if (!err) {
        let javaCause = $rt_throwableCause(ex);
        let jsCause = javaCause !== null ? javaCause.$jsException : void 0;
        let cause = typeof jsCause === "object" ? { cause : jsCause } : void 0;
        err = new JavaError("Java exception thrown", cause);
        if (typeof Error.captureStackTrace === "function") {
            Error.captureStackTrace(err);
        }
        err[$rt_javaExceptionProp] = ex;
        ex.$jsException = err;
        $rt_fillStack(err, ex);
    }
    return err;
},
$rt_fillStack = (err, ex) => {
    if (typeof $rt_decodeStack === "function" && err.stack) {
        let stack = $rt_decodeStack(err.stack);
        let javaStack = $rt_createArray($rt_stecls(), stack.length);
        let elem;
        let noStack = false;
        for (let i = 0;i < stack.length;++i) {
            let element = stack[i];
            elem = $rt_createStackElement($rt_str(element.className), $rt_str(element.methodName), $rt_str(element.fileName), element.lineNumber);
            if (elem == null) {
                noStack = true;
                break;
            }
            javaStack.data[i] = elem;
        }
        if (!noStack) {
            $rt_setStack(ex, javaStack);
        }
    }
},
JavaError;
if (typeof Reflect === 'object') {
    let defaultMessage = Symbol("defaultMessage");
    JavaError = function JavaError(message, cause) {
        let self = Reflect.construct(Error, [void 0, cause], JavaError);
        Object.setPrototypeOf(self, JavaError.prototype);
        self[defaultMessage] = message;
        return self;
    }
    ;
    JavaError.prototype = Object.create(Error.prototype, { constructor : { configurable : true, writable : true, value : JavaError }, message : { get() {
        try {
            let javaException = this[$rt_javaExceptionProp];
            if (typeof javaException === 'object') {
                let javaMessage = $rt_throwableMessage(javaException);
                if (typeof javaMessage === "object") {
                    return javaMessage !== null ? javaMessage.toString() : null;
                }
            }
            return this[defaultMessage];
        } catch (e){
            return "Exception occurred trying to extract Java exception message: " + e;
        }
    } } });
} else {
    JavaError = Error;
}
let $rt_javaException = e => e instanceof Error && typeof e[$rt_javaExceptionProp] === 'object' ? e[$rt_javaExceptionProp] : null,
$rt_wrapException = err => {
    let ex = err[$rt_javaExceptionProp];
    if (!ex) {
        ex = $rt_createException($rt_str("(JavaScript) " + err.toString()));
        err[$rt_javaExceptionProp] = ex;
        ex.$jsException = err;
        $rt_fillStack(err, ex);
    }
    return ex;
},
$rt_createException = message => jl_RuntimeException__init_1(message),
$rt_throwableMessage = t => jl_Throwable_getMessage(t),
$rt_throwableCause = t => jl_Throwable_getCause(t),
$rt_stecls = () => $rt_objcls(),
$rt_createStackElement = (className, methodName, fileName, lineNumber) => {
    {
        return null;
    }
},
$rt_setStack = (e, stack) => {
},
$rt_createOutputFunction = outputFunction => {
    let buffer = "";
    return msg => {
        let index = 0;
        while (true) {
            let next = msg.indexOf('\n', index);
            if (next < 0) {
                break;
            }
            outputFunction(buffer + msg.substring(index, next));
            buffer = "";
            index = next + 1;
        }
        buffer += msg.substring(index);
    };
},
$rt_putStdout = typeof $rt_putStdoutCustom === "function" ? $rt_putStdoutCustom : typeof console === "object" ? $rt_createOutputFunction(msg => console.info(msg)) : () => {
},
$rt_putStderr = typeof $rt_putStderrCustom === "function" ? $rt_putStderrCustom : typeof console === "object" ? $rt_createOutputFunction(msg => console.error(msg)) : () => {
},
$rt_packageData = null,
$rt_packages = data => {
    let i = 0;
    let packages = new Array(data.length);
    for (let j = 0;j < data.length;++j) {
        let prefixIndex = data[i++];
        let prefix = prefixIndex >= 0 ? packages[prefixIndex] : "";
        packages[j] = prefix + data[i++] + ".";
    }
    $rt_packageData = packages;
},
$rt_metadata = data => {
    let packages = $rt_packageData;
    let i = 0;
    while (i < data.length) {
        let cls = data[i++];
        cls.$meta = {  };
        let m = cls.$meta;
        let className = data[i++];
        m.name = className !== 0 ? className : null;
        if (m.name !== null) {
            let packageIndex = data[i++];
            if (packageIndex >= 0) {
                m.name = packages[packageIndex] + m.name;
            }
        }
        m.binaryName = "L" + m.name + ";";
        let superclass = data[i++];
        m.superclass = superclass !== 0 ? superclass : null;
        m.supertypes = data[i++];
        if (m.superclass) {
            m.supertypes.push(m.superclass);
            cls.prototype = Object.create(m.superclass.prototype);
        } else {
            cls.prototype = {  };
        }
        let flags = data[i++];
        m.enum = (flags & 8) !== 0;
        m.flags = flags;
        m.primitive = false;
        m.item = null;
        cls.prototype.constructor = cls;
        cls.classObject = null;
        m.accessLevel = data[i++];
        let innerClassInfo = data[i++];
        if (innerClassInfo === 0) {
            m.simpleName = null;
            m.declaringClass = null;
            m.enclosingClass = null;
        } else {
            let enclosingClass = innerClassInfo[0];
            m.enclosingClass = enclosingClass !== 0 ? enclosingClass : null;
            let declaringClass = innerClassInfo[1];
            m.declaringClass = declaringClass !== 0 ? declaringClass : null;
            let simpleName = innerClassInfo[2];
            m.simpleName = simpleName !== 0 ? simpleName : null;
        }
        let clinit = data[i++];
        cls.$clinit = clinit !== 0 ? clinit : function() {
        };
        let virtualMethods = data[i++];
        if (virtualMethods !== 0) {
            for (let j = 0;j < virtualMethods.length;j += 2) {
                let name = virtualMethods[j];
                let func = virtualMethods[j + 1];
                if (typeof name === 'string') {
                    name = [name];
                }
                for (let k = 0;k < name.length;++k) {
                    cls.prototype[name[k]] = func;
                }
            }
        }
        cls.$array = null;
    }
},
$rt_startThread = (runner, callback) => {
    let result;
    try {
        result = runner();
    } catch (e){
        result = e;
    }
    if (typeof callback !== 'undefined') {
        callback(result);
    } else if (result instanceof Error) {
        throw result;
    }
},
$rt_nativeThread = () => null;
function jl_Object() {
    this.$monitor = null;
    this.$id$ = 0;
}
let jl_Object_monitorEnterSync = $o => {
    let var$2;
    if ($o.$monitor === null)
        jl_Object_createMonitor($o);
    $o = $o.$monitor;
    var$2 = $o.$owner;
    if (var$2 === null)
        $o.$owner = jl_Thread_currentThread;
    else if (var$2 !== jl_Thread_currentThread) {
        var$2 = new jl_IllegalStateException;
        jl_Throwable__init_0(var$2, $rt_s(0));
        $rt_throw(var$2);
    }
    $o.$count = $o.$count + 1 | 0;
},
jl_Object_monitorExitSync = $o => {
    let var$2, var$3;
    if (!jl_Object_isEmptyMonitor($o)) {
        var$2 = $o.$monitor;
        if (var$2.$owner === jl_Thread_currentThread) {
            var$3 = var$2.$count - 1 | 0;
            var$2.$count = var$3;
            if (!var$3)
                var$2.$owner = null;
            jl_Object_isEmptyMonitor($o);
            return;
        }
    }
    $o = new jl_IllegalMonitorStateException;
    jl_Throwable__init_($o);
    $rt_throw($o);
},
jl_Object_monitorEnter = $o => {
    let var$2;
    if ($o.$monitor === null)
        jl_Object_createMonitor($o);
    var$2 = $o.$monitor;
    if (var$2.$owner === null)
        var$2.$owner = jl_Thread_currentThread;
    if (var$2.$owner !== jl_Thread_currentThread)
        jl_Object_monitorEnterWait$_asyncCall_$($o, 1);
    else
        var$2.$count = var$2.$count + 1 | 0;
},
jl_Object_createMonitor = $o => {
    let var$2;
    var$2 = new jl_Object$Monitor;
    var$2.$owner = jl_Thread_currentThread;
    $o.$monitor = var$2;
},
jl_Object_monitorEnterWait = ($o, $count, $callback) => {
    let $thread_0, $monitor, var$6;
    $thread_0 = jl_Thread_currentThread;
    $monitor = $o.$monitor;
    if ($monitor === null) {
        jl_Object_createMonitor($o);
        jl_Thread_setCurrentThread($thread_0);
        $o = $o.$monitor;
        $o.$count = $o.$count + $count | 0;
        otpp_AsyncCallbackWrapper_complete($callback, null);
        return;
    }
    if ($monitor.$owner === null) {
        $monitor.$owner = $thread_0;
        jl_Thread_setCurrentThread($thread_0);
        $o = $o.$monitor;
        $o.$count = $o.$count + $count | 0;
        otpp_AsyncCallbackWrapper_complete($callback, null);
        return;
    }
    if ($monitor.$enteringThreads === null)
        $monitor.$enteringThreads = otp_Platform_createQueueJs$js_body$_30();
    $monitor = $monitor.$enteringThreads;
    var$6 = new jl_Object$monitorEnterWait$lambda$_6_0;
    var$6.$_01 = $thread_0;
    var$6.$_10 = $o;
    var$6.$_2 = $count;
    var$6.$_3 = $callback;
    $callback = var$6;
    $monitor.push($callback);
},
jl_Object_monitorExit = $o => {
    let var$2, var$3;
    if (!jl_Object_isEmptyMonitor($o)) {
        var$2 = $o.$monitor;
        if (var$2.$owner === jl_Thread_currentThread) {
            var$3 = var$2.$count - 1 | 0;
            var$2.$count = var$3;
            if (var$3 <= 0) {
                var$2.$owner = null;
                var$2 = var$2.$enteringThreads;
                if (var$2 !== null && !otp_PlatformQueue_isEmpty$static(var$2)) {
                    var$2 = new jl_Object$monitorExit$lambda$_8_0;
                    var$2.$_04 = $o;
                    otp_Platform_postpone(var$2);
                } else
                    jl_Object_isEmptyMonitor($o);
            }
            return;
        }
    }
    $o = new jl_IllegalMonitorStateException;
    jl_Throwable__init_($o);
    $rt_throw($o);
},
jl_Object_isEmptyMonitor = $this => {
    let $monitor, var$2;
    $monitor = $this.$monitor;
    if ($monitor === null)
        return 1;
    a: {
        if ($monitor.$owner === null) {
            var$2 = $monitor.$enteringThreads;
            if (!(var$2 !== null && !otp_PlatformQueue_isEmpty$static(var$2))) {
                $monitor = $monitor.$notifyListeners;
                if ($monitor === null)
                    break a;
                if (otp_PlatformQueue_isEmpty$static($monitor))
                    break a;
            }
        }
        return 0;
    }
    $this.$monitor = null;
    return 1;
},
jl_Object__init_ = $this => {
    return;
},
jl_Object__init_0 = () => {
    let var_0 = new jl_Object();
    jl_Object__init_(var_0);
    return var_0;
},
jl_Object_getClass = $this => {
    return jl_Class_getClass($this.constructor);
},
jl_Object_hashCode = $this => {
    return jl_Object_identity($this);
},
jl_Object_equals = ($this, $other) => {
    return $this !== $other ? 0 : 1;
},
jl_Object_toString = $this => {
    let var$1, var$2, var$3, var$4, var$5, var$6, var$7, var$8, var$9;
    var$1 = jl_Class_getName(jl_Object_getClass($this));
    var$2 = jl_Object_identity($this);
    if (!var$2)
        var$3 = $rt_s(1);
    else {
        var$4 = (((32 - jl_Integer_numberOfLeadingZeros(var$2) | 0) + 4 | 0) - 1 | 0) / 4 | 0;
        var$5 = $rt_createCharArray(var$4);
        var$6 = var$5.data;
        var$7 = (var$4 - 1 | 0) * 4 | 0;
        var$8 = 0;
        while (var$7 >= 0) {
            var$4 = var$8 + 1 | 0;
            var$6[var$8] = jl_Character_forDigit((var$2 >>> var$7 | 0) & 15, 16);
            var$7 = var$7 - 4 | 0;
            var$8 = var$4;
        }
        var$3 = jl_String__init_0(var$5);
    }
    var$9 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$9);
    var$1 = jl_StringBuilder_append(var$9, var$1);
    jl_AbstractStringBuilder_append(var$1, 64);
    jl_StringBuilder_append(var$1, var$3);
    return jl_AbstractStringBuilder_toString(var$9);
},
jl_Object_identity = $this => {
    let $platformThis;
    $platformThis = $this;
    if (!$platformThis.$id$)
        $platformThis.$id$ = $rt_nextId();
    return $this.$id$;
},
jl_Object_clone = $this => {
    let $result, var$2, var$3;
    if (!$rt_isInstance($this, jl_Cloneable) && $this.constructor.$meta.item === null) {
        $result = new jl_CloneNotSupportedException;
        jl_Throwable__init_($result);
        $rt_throw($result);
    }
    $result = otp_Platform_clone($this);
    var$2 = $result;
    var$3 = $rt_nextId();
    var$2.$id$ = var$3;
    return $result;
},
jl_Object_notifyAll = $this => {
    let $listeners, $listener;
    $listeners = $this.$monitor;
    if (!($listeners !== null && $listeners.$owner === jl_Thread_currentThread ? 1 : 0)) {
        $listeners = new jl_IllegalMonitorStateException;
        jl_Throwable__init_($listeners);
        $rt_throw($listeners);
    }
    $listeners = $listeners.$notifyListeners;
    if ($listeners === null)
        return;
    while (!otp_PlatformQueue_isEmpty$static($listeners)) {
        $listener = otp_PlatformQueue_remove$static($listeners);
        if (!$listener.$expired())
            otp_Platform_postpone($listener);
    }
    $this.$monitor.$notifyListeners = null;
},
jl_Object_monitorEnterWait$_asyncCall_$ = (var$1, var$2) => {
    let thread = $rt_nativeThread();
    let javaThread = $rt_getThread();
    if (thread.isResuming()) {
        thread.status = 0;
        let result = thread.attribute;
        if (result instanceof Error) {
            throw result;
        }
        return result;
    }
    let callback = function() {
    };
    callback.$complete = val => {
        thread.attribute = val;
        $rt_setThread(javaThread);
        thread.resume();
    };
    callback.$error = e => {
        thread.attribute = $rt_exception(e);
        $rt_setThread(javaThread);
        thread.resume();
    };
    callback = otpp_AsyncCallbackWrapper_create(callback);
    thread.suspend(() => {
        try {
            jl_Object_monitorEnterWait(var$1, var$2, callback);
            ;
        } catch ($e){
            callback.$error($e);
        }
    });
    return null;
},
igbc_CompilerMain = $rt_classWithoutFields(),
igbc_CompilerMain_$callClinit = () => {
    igbc_CompilerMain_$callClinit = $rt_eraseClinit(igbc_CompilerMain);
    igbc_CompilerMain__clinit_();
},
igbc_CompilerMain_main = var$1 => {
    let var$2, var$3, var$4, var$5;
    igbc_CompilerMain_$callClinit();
    var$2 = jl_System_out();
    var$3 = new ji_PrintStream;
    var$4 = new igbc_CompilerMain$1;
    var$4.$val$old = var$2;
    ji_PrintStream__init_(var$3, var$4);
    jl_System_outCache = var$3;
    var$4 = window.document.getElementById("SIGMA_BUTTON_RUN_CODE");
    var$5 = new igbc_CompilerMain$main$lambda$_1_0;
    var$4.addEventListener("click", otji_JS_function(var$5, "handleEvent"));
},
igbc_CompilerMain__clinit_ = () => {
    jl_String__clinit_();
    jl_Integer__clinit_();
    jl_Character__clinit_();
    jnci_UTF8Charset__clinit_();
    jl_Thread__clinit_();
    igbcs_JavaStandardLibrariesUtil__clinit_();
    igbcw_CodeRunner__clinit_();
    igbcat_VisibilityType__clinit_();
    otci_Base64Impl__clinit_();
    igbca_APILoader__clinit_();
    ooa_Type__clinit_();
    jlr_Modifier__clinit_();
    jl_Boolean__clinit_();
    cjj_CRC32__clinit_();
    jnc_CodingErrorAction__clinit_();
    jl_Long__clinit_();
    cjj_Inflate__clinit_();
    jn_ByteOrder__clinit_();
    jnc_CoderResult__clinit_();
    ju_Hashtable__clinit_();
    cjj_InfBlocks__clinit_();
    cjj_InfTree__clinit_();
    cjj_InfCodes__clinit_();
    jur_AbstractSet__clinit_();
    jur_AbstractCharClass$PredefinedCharacterClasses__clinit_();
    jur_AbstractCharClass__clinit_();
    igbcu_CommentUtils__clinit_();
    igbcm_MethodCodeCompiler__clinit_();
    jus_Collector$Characteristics__clinit_();
    jl_Float__clinit_();
    jl_Double__clinit_();
    otcit_FloatSynthesizer__clinit_();
    otcit_DoubleSynthesizer__clinit_();
    otcit_FloatAnalyzer__clinit_();
    otcit_DoubleAnalyzer__clinit_();
    igbcat_ClassType__clinit_();
    jl_AbstractStringBuilder$Constants__clinit_();
    ooa_Label__clinit_();
    ooa_MethodWriter__clinit_();
    jl_Byte__clinit_();
    jl_Short__clinit_();
},
jlr_AnnotatedElement = $rt_classWithoutFields(0),
jlr_Type = $rt_classWithoutFields(0);
function jl_Class() {
    let a = this; jl_Object.call(a);
    a.$name5 = null;
    a.$platformClass = null;
}
let jl_Class_getClass = $cls => {
    let $result;
    if ($cls === null)
        return null;
    $result = $cls.classObject;
    if ($result === null) {
        $result = new jl_Class;
        $result.$platformClass = $cls;
        $cls.classObject = $result;
    }
    return $result;
},
jl_Class_getName = $this => {
    if ($this.$name5 === null)
        $this.$name5 = $rt_str($this.$platformClass.$meta.name);
    return $this.$name5;
},
jl_Class_isPrimitive = $this => {
    return $this.$platformClass.$meta.primitive ? 1 : 0;
},
jl_Class_getComponentType = $this => {
    return jl_Class_getClass($this.$platformClass.$meta.item);
},
jl_Class_getSuperclass = $this => {
    return jl_Class_getClass($this.$platformClass.$meta.superclass);
},
jl_Class_forName = $name => {
    let $cls;
    $cls = otp_Platform_lookupClass($name);
    if ($cls !== null)
        return jl_Class_getClass($cls);
    $name = new jl_ClassNotFoundException;
    jl_Throwable__init_($name);
    $rt_throw($name);
},
otji_JS = $rt_classWithoutFields(),
otji_JS_function = (var$1, var$2) => {
    let name = 'jso$functor$' + var$2;
    let result = var$1[name];
    if (typeof result !== 'function') {
        let fn = function() {
            return var$1[var$2].apply(var$1, arguments);
        };
        result = () => fn;
        var$1[name] = result;
    }
    return result();
},
otp_Platform = $rt_classWithoutFields(),
otp_Platform_clone = var$1 => {
    let copy = new var$1.constructor();
    for (let field in var$1) {
        if (var$1.hasOwnProperty(field)) {
            copy[field] = var$1[field];
        }
    }
    return copy;
},
otp_Platform_isAssignable = (var$1, var$2) => {
    let $supertypes, $i;
    if (var$1 === var$2)
        return 1;
    $supertypes = var$1.$meta.supertypes;
    $i = 0;
    while ($i < $supertypes.length) {
        if (otp_Platform_isAssignable($supertypes[$i], var$2))
            return 1;
        $i = $i + 1 | 0;
    }
    return 0;
},
otp_Platform_lookupClass = var$1 => {
    switch ($rt_ustr(var$1)) {
        case "io.github.betterclient.compiler.CompilerMain": igbc_CompilerMain.$clinit(); return igbc_CompilerMain;
        case "java.lang.Object": jl_Object.$clinit(); return jl_Object;
        case "java.lang.Class": jl_Class.$clinit(); return jl_Class;
        case "java.lang.reflect.AnnotatedElement": jlr_AnnotatedElement.$clinit(); return jlr_AnnotatedElement;
        case "java.lang.reflect.Type": jlr_Type.$clinit(); return jlr_Type;
        case "org.teavm.jso.impl.JS": otji_JS.$clinit(); return otji_JS;
        case "org.teavm.platform.Platform": otp_Platform.$clinit(); return otp_Platform;
        case "java.lang.ClassCastException": jl_ClassCastException.$clinit(); return jl_ClassCastException;
        case "java.lang.RuntimeException": jl_RuntimeException.$clinit(); return jl_RuntimeException;
        case "java.lang.Exception": jl_Exception.$clinit(); return jl_Exception;
        case "java.lang.Throwable": jl_Throwable.$clinit(); return jl_Throwable;
        case "java.lang.String": jl_String.$clinit(); return jl_String;
        case "java.io.Serializable": ji_Serializable.$clinit(); return ji_Serializable;
        case "java.lang.Comparable": jl_Comparable.$clinit(); return jl_Comparable;
        case "java.lang.CharSequence": jl_CharSequence.$clinit(); return jl_CharSequence;
        case "java.lang.Integer": jl_Integer.$clinit(); return jl_Integer;
        case "java.lang.Number": jl_Number.$clinit(); return jl_Number;
        case "java.lang.StringBuilder": jl_StringBuilder.$clinit(); return jl_StringBuilder;
        case "java.lang.AbstractStringBuilder": jl_AbstractStringBuilder.$clinit(); return jl_AbstractStringBuilder;
        case "java.lang.Appendable": jl_Appendable.$clinit(); return jl_Appendable;
        case "java.lang.System": jl_System.$clinit(); return jl_System;
        case "java.io.PrintStream": ji_PrintStream.$clinit(); return ji_PrintStream;
        case "java.io.FilterOutputStream": ji_FilterOutputStream.$clinit(); return ji_FilterOutputStream;
        case "java.io.OutputStream": ji_OutputStream.$clinit(); return ji_OutputStream;
        case "java.io.Closeable": ji_Closeable.$clinit(); return ji_Closeable;
        case "java.lang.AutoCloseable": jl_AutoCloseable.$clinit(); return jl_AutoCloseable;
        case "java.io.Flushable": ji_Flushable.$clinit(); return ji_Flushable;
        case "io.github.betterclient.compiler.CompilerMain$1": igbc_CompilerMain$1.$clinit(); return igbc_CompilerMain$1;
        case "org.teavm.jso.dom.html.HTMLDocument": otjdh_HTMLDocument.$clinit(); return otjdh_HTMLDocument;
        case "org.teavm.jso.dom.xml.Document": otjdx_Document.$clinit(); return otjdx_Document;
        case "org.teavm.jso.dom.xml.Node": otjdx_Node.$clinit(); return otjdx_Node;
        case "org.teavm.jso.JSObject": otj_JSObject.$clinit(); return otj_JSObject;
        case "org.teavm.jso.dom.events.EventTarget": otjde_EventTarget.$clinit(); return otjde_EventTarget;
        case "io.github.betterclient.compiler.CompilerMain$main$lambda$_1_0": igbc_CompilerMain$main$lambda$_1_0.$clinit(); return igbc_CompilerMain$main$lambda$_1_0;
        case "org.teavm.jso.dom.events.EventListener": otjde_EventListener.$clinit(); return otjde_EventListener;
        case "org.teavm.classlib.impl.IntegerUtil": otci_IntegerUtil.$clinit(); return otci_IntegerUtil;
        case "org.teavm.classlib.impl.console.JSStdoutPrintStream": otcic_JSStdoutPrintStream.$clinit(); return otcic_JSStdoutPrintStream;
        case "org.teavm.classlib.impl.console.JsConsolePrintStream": otcic_JsConsolePrintStream.$clinit(); return otcic_JsConsolePrintStream;
        case "java.lang.String$<clinit>$lambda$_115_0": jl_String$_clinit_$lambda$_115_0.$clinit(); return jl_String$_clinit_$lambda$_115_0;
        case "java.util.Comparator": ju_Comparator.$clinit(); return ju_Comparator;
        case "java.lang.Character": jl_Character.$clinit(); return jl_Character;
        case "java.nio.charset.impl.UTF8Charset": jnci_UTF8Charset.$clinit(); return jnci_UTF8Charset;
        case "java.nio.charset.Charset": jnc_Charset.$clinit(); return jnc_Charset;
        case "java.util.Objects": ju_Objects.$clinit(); return ju_Objects;
        case "java.io.ByteArrayOutputStream": ji_ByteArrayOutputStream.$clinit(); return ji_ByteArrayOutputStream;
        case "java.lang.IndexOutOfBoundsException": jl_IndexOutOfBoundsException.$clinit(); return jl_IndexOutOfBoundsException;
        case "java.nio.charset.IllegalCharsetNameException": jnc_IllegalCharsetNameException.$clinit(); return jnc_IllegalCharsetNameException;
        case "java.lang.IllegalArgumentException": jl_IllegalArgumentException.$clinit(); return jl_IllegalArgumentException;
        case "java.lang.Cloneable": jl_Cloneable.$clinit(); return jl_Cloneable;
        case "java.lang.CloneNotSupportedException": jl_CloneNotSupportedException.$clinit(); return jl_CloneNotSupportedException;
        case "java.lang.StringIndexOutOfBoundsException": jl_StringIndexOutOfBoundsException.$clinit(); return jl_StringIndexOutOfBoundsException;
        case "java.lang.Thread": jl_Thread.$clinit(); return jl_Thread;
        case "java.lang.Runnable": jl_Runnable.$clinit(); return jl_Runnable;
        case "io.github.betterclient.compiler.CompilerMain$lambda$main$0$lambda$_6_0": igbc_CompilerMain$lambda$main$0$lambda$_6_0.$clinit(); return igbc_CompilerMain$lambda$main$0$lambda$_6_0;
        case "java.lang.DefaultUncaughtExceptionHandler": jl_DefaultUncaughtExceptionHandler.$clinit(); return jl_DefaultUncaughtExceptionHandler;
        case "java.lang.Thread$UncaughtExceptionHandler": jl_Thread$UncaughtExceptionHandler.$clinit(); return jl_Thread$UncaughtExceptionHandler;
        case "java.lang.Thread$start$lambda$_4_0": jl_Thread$start$lambda$_4_0.$clinit(); return jl_Thread$start$lambda$_4_0;
        case "org.teavm.platform.PlatformRunnable": otp_PlatformRunnable.$clinit(); return otp_PlatformRunnable;
        case "java.lang.Math": jl_Math.$clinit(); return jl_Math;
        case "java.util.Arrays": ju_Arrays.$clinit(); return ju_Arrays;
        case "java.lang.Object$Monitor": jl_Object$Monitor.$clinit(); return jl_Object$Monitor;
        case "java.lang.IllegalMonitorStateException": jl_IllegalMonitorStateException.$clinit(); return jl_IllegalMonitorStateException;
        case "org.teavm.platform.PlatformQueue": otp_PlatformQueue.$clinit(); return otp_PlatformQueue;
        case "java.lang.Object$NotifyListener": jl_Object$NotifyListener.$clinit(); return jl_Object$NotifyListener;
        case "org.teavm.runtime.EventQueue$Event": otr_EventQueue$Event.$clinit(); return otr_EventQueue$Event;
        case "java.lang.IllegalStateException": jl_IllegalStateException.$clinit(); return jl_IllegalStateException;
        case "org.teavm.jso.impl.JSWrapper": otji_JSWrapper.$clinit(); return otji_JSWrapper;
        case "java.lang.Object$monitorExit$lambda$_8_0": jl_Object$monitorExit$lambda$_8_0.$clinit(); return jl_Object$monitorExit$lambda$_8_0;
        case "org.teavm.jso.core.JSWeakRef": otjc_JSWeakRef.$clinit(); return otjc_JSWeakRef;
        case "org.teavm.jso.impl.JSWrapper$<clinit>$lambda$_33_0": otji_JSWrapper$_clinit_$lambda$_33_0.$clinit(); return otji_JSWrapper$_clinit_$lambda$_33_0;
        case "org.teavm.jso.core.JSFinalizationRegistryConsumer": otjc_JSFinalizationRegistryConsumer.$clinit(); return otjc_JSFinalizationRegistryConsumer;
        case "org.teavm.jso.impl.JSWrapper$<clinit>$lambda$_33_1": otji_JSWrapper$_clinit_$lambda$_33_1.$clinit(); return otji_JSWrapper$_clinit_$lambda$_33_1;
        case "org.teavm.jso.core.JSObjects": otjc_JSObjects.$clinit(); return otjc_JSObjects;
        case "org.teavm.jso.core.JSUndefined": otjc_JSUndefined.$clinit(); return otjc_JSUndefined;
        case "org.teavm.platform.plugin.AsyncCallbackWrapper": otpp_AsyncCallbackWrapper.$clinit(); return otpp_AsyncCallbackWrapper;
        case "org.teavm.interop.AsyncCallback": oti_AsyncCallback.$clinit(); return oti_AsyncCallback;
        case "java.lang.Object$monitorEnterWait$lambda$_6_0": jl_Object$monitorEnterWait$lambda$_6_0.$clinit(); return jl_Object$monitorEnterWait$lambda$_6_0;
        case "io.github.betterclient.compiler.storage.JavaStandardLibrariesUtil": igbcs_JavaStandardLibrariesUtil.$clinit(); return igbcs_JavaStandardLibrariesUtil;
        case "io.github.betterclient.compiler.Compiler": igbc_Compiler.$clinit(); return igbc_Compiler;
        case "io.github.betterclient.compiler.web.CodeRunner": igbcw_CodeRunner.$clinit(); return igbcw_CodeRunner;
        case "java.util.ArrayList": ju_ArrayList.$clinit(); return ju_ArrayList;
        case "java.util.AbstractList": ju_AbstractList.$clinit(); return ju_AbstractList;
        case "java.util.AbstractCollection": ju_AbstractCollection.$clinit(); return ju_AbstractCollection;
        case "java.util.Collection": ju_Collection.$clinit(); return ju_Collection;
        case "java.lang.Iterable": jl_Iterable.$clinit(); return jl_Iterable;
        case "java.util.List": ju_List.$clinit(); return ju_List;
        case "java.util.SequencedCollection": ju_SequencedCollection.$clinit(); return ju_SequencedCollection;
        case "java.util.RandomAccess": ju_RandomAccess.$clinit(); return ju_RandomAccess;
        case "java.util.Base64": ju_Base64.$clinit(); return ju_Base64;
        case "io.github.betterclient.compiler.api.APIClass": igbca_APIClass.$clinit(); return igbca_APIClass;
        case "java.lang.AssertionError": jl_AssertionError.$clinit(); return jl_AssertionError;
        case "java.lang.Error": jl_Error.$clinit(); return jl_Error;
        case "org.objectweb.asm.tree.MethodNode": ooat_MethodNode.$clinit(); return ooat_MethodNode;
        case "org.objectweb.asm.MethodVisitor": ooa_MethodVisitor.$clinit(); return ooa_MethodVisitor;
        case "io.github.betterclient.compiler.api.APIMethod": igbca_APIMethod.$clinit(); return igbca_APIMethod;
        case "io.github.betterclient.compiler.api.APIField": igbca_APIField.$clinit(); return igbca_APIField;
        case "io.github.betterclient.compiler.api.type.AccessType": igbcat_AccessType.$clinit(); return igbcat_AccessType;
        case "java.lang.Record": jl_Record.$clinit(); return jl_Record;
        case "io.github.betterclient.compiler.api.type.VisibilityType": igbcat_VisibilityType.$clinit(); return igbcat_VisibilityType;
        case "java.lang.Enum": jl_Enum.$clinit(); return jl_Enum;
        case "io.github.betterclient.compiler.api.code.APIMethodCode": igbcac_APIMethodCode.$clinit(); return igbcac_APIMethodCode;
        case "org.objectweb.asm.Opcodes": ooa_Opcodes.$clinit(); return ooa_Opcodes;
        case "io.github.betterclient.compiler.api.code.impl.ReturnCode": igbcaci_ReturnCode.$clinit(); return igbcaci_ReturnCode;
        case "java.util.Base64$Decoder": ju_Base64$Decoder.$clinit(); return ju_Base64$Decoder;
        case "org.teavm.classlib.impl.Base64Impl": otci_Base64Impl.$clinit(); return otci_Base64Impl;
        case "java.util.zip.ZipInputStream": juz_ZipInputStream.$clinit(); return juz_ZipInputStream;
        case "java.util.zip.InflaterInputStream": juz_InflaterInputStream.$clinit(); return juz_InflaterInputStream;
        case "java.io.FilterInputStream": ji_FilterInputStream.$clinit(); return ji_FilterInputStream;
        case "java.io.InputStream": ji_InputStream.$clinit(); return ji_InputStream;
        case "java.util.zip.ZipConstants": juz_ZipConstants.$clinit(); return juz_ZipConstants;
        case "java.io.ByteArrayInputStream": ji_ByteArrayInputStream.$clinit(); return ji_ByteArrayInputStream;
        case "io.github.betterclient.compiler.api.APILoader": igbca_APILoader.$clinit(); return igbca_APILoader;
        case "org.objectweb.asm.Type": ooa_Type.$clinit(); return ooa_Type;
        case "io.github.betterclient.compiler.api.type.Argument": igbcat_Argument.$clinit(); return igbcat_Argument;
        case "io.github.betterclient.compiler.api.util.ASMUtil": igbcau_ASMUtil.$clinit(); return igbcau_ASMUtil;
        case "java.lang.reflect.Modifier": jlr_Modifier.$clinit(); return jlr_Modifier;
        case "java.util.HashMap": ju_HashMap.$clinit(); return ju_HashMap;
        case "java.util.AbstractMap": ju_AbstractMap.$clinit(); return ju_AbstractMap;
        case "java.util.Map": ju_Map.$clinit(); return ju_Map;
        case "io.github.betterclient.compiler.api.code.impl.DisbandReturn": igbcaci_DisbandReturn.$clinit(); return igbcaci_DisbandReturn;
        case "io.github.betterclient.compiler.api.code.impl.get.ValueReturnCode": igbcacig_ValueReturnCode.$clinit(); return igbcacig_ValueReturnCode;
        case "io.github.betterclient.compiler.api.code.impl.get.load.SetFieldCode": igbcacigl_SetFieldCode.$clinit(); return igbcacigl_SetFieldCode;
        case "io.github.betterclient.compiler.web.SetRunner": igbcw_SetRunner.$clinit(); return igbcw_SetRunner;
        case "io.github.betterclient.compiler.api.code.impl.get.call.MethodCallCode": igbcacigc_MethodCallCode.$clinit(); return igbcacigc_MethodCallCode;
        case "io.github.betterclient.compiler.web.CallRunner": igbcw_CallRunner.$clinit(); return igbcw_CallRunner;
        case "io.github.betterclient.compiler.api.code.impl.get.load.LoadConstantCode": igbcacigl_LoadConstantCode.$clinit(); return igbcacigl_LoadConstantCode;
        case "io.github.betterclient.compiler.api.code.impl.get.call.FieldGetCode": igbcacigc_FieldGetCode.$clinit(); return igbcacigc_FieldGetCode;
        case "io.github.betterclient.compiler.web.GetRunner": igbcw_GetRunner.$clinit(); return igbcw_GetRunner;
        case "io.github.betterclient.compiler.api.code.impl.IfStatementCode": igbcaci_IfStatementCode.$clinit(); return igbcaci_IfStatementCode;
        case "io.github.betterclient.compiler.web.IfStatementHandler": igbcw_IfStatementHandler.$clinit(); return igbcw_IfStatementHandler;
        case "java.io.PushbackInputStream": ji_PushbackInputStream.$clinit(); return ji_PushbackInputStream;
        case "java.util.zip.Inflater": juz_Inflater.$clinit(); return juz_Inflater;
        case "java.util.zip.CRC32": juz_CRC32.$clinit(); return juz_CRC32;
        case "java.util.zip.Checksum": juz_Checksum.$clinit(); return juz_Checksum;
        case "java.lang.NullPointerException": jl_NullPointerException.$clinit(); return jl_NullPointerException;
        case "java.util.zip.ZipEntry": juz_ZipEntry.$clinit(); return juz_ZipEntry;
        case "org.objectweb.asm.tree.Util": ooat_Util.$clinit(); return ooat_Util;
        case "org.objectweb.asm.tree.InsnList": ooat_InsnList.$clinit(); return ooat_InsnList;
        case "java.lang.UnsupportedOperationException": jl_UnsupportedOperationException.$clinit(); return jl_UnsupportedOperationException;
        case "io.github.betterclient.compiler.web.CallRunner$run$lambda$_1_0": igbcw_CallRunner$run$lambda$_1_0.$clinit(); return igbcw_CallRunner$run$lambda$_1_0;
        case "java.util.function.Function": juf_Function.$clinit(); return juf_Function;
        case "io.github.betterclient.compiler.web.proxy.SupportedMethodCalls": igbcwp_SupportedMethodCalls.$clinit(); return igbcwp_SupportedMethodCalls;
        case "io.github.betterclient.compiler.web.proxy.FailedToRunCodeException": igbcwp_FailedToRunCodeException.$clinit(); return igbcwp_FailedToRunCodeException;
        case "io.github.betterclient.compiler.web.proxy.SupportedFieldGets": igbcwp_SupportedFieldGets.$clinit(); return igbcwp_SupportedFieldGets;
        case "java.lang.Boolean": jl_Boolean.$clinit(); return jl_Boolean;
        case "com.jcraft.jzlib.Inflater": cjj_Inflater.$clinit(); return cjj_Inflater;
        case "com.jcraft.jzlib.ZStream": cjj_ZStream.$clinit(); return cjj_ZStream;
        case "com.jcraft.jzlib.GZIPException": cjj_GZIPException.$clinit(); return cjj_GZIPException;
        case "java.io.IOException": ji_IOException.$clinit(); return ji_IOException;
        case "com.jcraft.jzlib.CRC32": cjj_CRC32.$clinit(); return cjj_CRC32;
        case "com.jcraft.jzlib.Checksum": cjj_Checksum.$clinit(); return cjj_Checksum;
        case "java.nio.ByteBuffer": jn_ByteBuffer.$clinit(); return jn_ByteBuffer;
        case "java.nio.Buffer": jn_Buffer.$clinit(); return jn_Buffer;
        case "java.nio.CharBuffer": jn_CharBuffer.$clinit(); return jn_CharBuffer;
        case "java.lang.Readable": jl_Readable.$clinit(); return jl_Readable;
        case "java.lang.ClassNotFoundException": jl_ClassNotFoundException.$clinit(); return jl_ClassNotFoundException;
        case "java.lang.ReflectiveOperationException": jl_ReflectiveOperationException.$clinit(); return jl_ReflectiveOperationException;
        case "java.nio.ByteBufferImpl": jn_ByteBufferImpl.$clinit(); return jn_ByteBufferImpl;
        case "java.nio.charset.CodingErrorAction": jnc_CodingErrorAction.$clinit(); return jnc_CodingErrorAction;
        case "java.nio.charset.CharsetDecoder": jnc_CharsetDecoder.$clinit(); return jnc_CharsetDecoder;
        case "java.nio.charset.CharacterCodingException": jnc_CharacterCodingException.$clinit(); return jnc_CharacterCodingException;
        case "org.objectweb.asm.Constants": ooa_Constants.$clinit(); return ooa_Constants;
        case "java.lang.Long": jl_Long.$clinit(); return jl_Long;
        case "org.teavm.classlib.impl.console.JSStderrPrintStream": otcic_JSStderrPrintStream.$clinit(); return otcic_JSStderrPrintStream;
        case "java.lang.ConsoleInputStream": jl_ConsoleInputStream.$clinit(); return jl_ConsoleInputStream;
        case "com.jcraft.jzlib.Adler32": cjj_Adler32.$clinit(); return cjj_Adler32;
        case "com.jcraft.jzlib.Inflate": cjj_Inflate.$clinit(); return cjj_Inflate;
        case "java.nio.ByteOrder": jn_ByteOrder.$clinit(); return jn_ByteOrder;
        case "java.nio.CharBufferOverArray": jn_CharBufferOverArray.$clinit(); return jn_CharBufferOverArray;
        case "java.nio.CharBufferImpl": jn_CharBufferImpl.$clinit(); return jn_CharBufferImpl;
        case "java.nio.charset.CoderResult": jnc_CoderResult.$clinit(); return jnc_CoderResult;
        case "java.nio.charset.CoderMalfunctionError": jnc_CoderMalfunctionError.$clinit(); return jnc_CoderMalfunctionError;
        case "java.util.regex.Pattern": jur_Pattern.$clinit(); return jur_Pattern;
        case "java.lang.ClassLoader": jl_ClassLoader.$clinit(); return jl_ClassLoader;
        case "java.io.DataInputStream": ji_DataInputStream.$clinit(); return ji_DataInputStream;
        case "java.io.DataInput": ji_DataInput.$clinit(); return ji_DataInput;
        case "java.util.Properties": ju_Properties.$clinit(); return ju_Properties;
        case "java.util.Hashtable": ju_Hashtable.$clinit(); return ju_Hashtable;
        case "java.util.Dictionary": ju_Dictionary.$clinit(); return ju_Dictionary;
        case "com.jcraft.jzlib.InfBlocks": cjj_InfBlocks.$clinit(); return cjj_InfBlocks;
        case "java.util.regex.Matcher": jur_Matcher.$clinit(); return jur_Matcher;
        case "java.util.regex.MatchResult": jur_MatchResult.$clinit(); return jur_MatchResult;
        case "java.io.EOFException": ji_EOFException.$clinit(); return ji_EOFException;
        case "com.jcraft.jzlib.InfTree": cjj_InfTree.$clinit(); return cjj_InfTree;
        case "com.jcraft.jzlib.InfCodes": cjj_InfCodes.$clinit(); return cjj_InfCodes;
        case "java.lang.SystemClassLoader": jl_SystemClassLoader.$clinit(); return jl_SystemClassLoader;
        case "java.util.Hashtable$1": ju_Hashtable$1.$clinit(); return ju_Hashtable$1;
        case "java.util.Enumeration": ju_Enumeration.$clinit(); return ju_Enumeration;
        case "java.util.Hashtable$2": ju_Hashtable$2.$clinit(); return ju_Hashtable$2;
        case "java.util.Iterator": ju_Iterator.$clinit(); return ju_Iterator;
        case "java.util.regex.AbstractSet": jur_AbstractSet.$clinit(); return jur_AbstractSet;
        case "java.util.regex.MatchResultImpl": jur_MatchResultImpl.$clinit(); return jur_MatchResultImpl;
        case "java.util.regex.FSet": jur_FSet.$clinit(); return jur_FSet;
        case "java.util.regex.Lexer": jur_Lexer.$clinit(); return jur_Lexer;
        case "java.util.regex.PatternSyntaxException": jur_PatternSyntaxException.$clinit(); return jur_PatternSyntaxException;
        case "java.util.Hashtable$Entry": ju_Hashtable$Entry.$clinit(); return ju_Hashtable$Entry;
        case "java.util.MapEntry": ju_MapEntry.$clinit(); return ju_MapEntry;
        case "java.util.Map$Entry": ju_Map$Entry.$clinit(); return ju_Map$Entry;
        case "java.util.regex.NonCapFSet": jur_NonCapFSet.$clinit(); return jur_NonCapFSet;
        case "java.util.regex.AheadFSet": jur_AheadFSet.$clinit(); return jur_AheadFSet;
        case "java.util.regex.BehindFSet": jur_BehindFSet.$clinit(); return jur_BehindFSet;
        case "java.util.regex.AtomicFSet": jur_AtomicFSet.$clinit(); return jur_AtomicFSet;
        case "java.util.regex.FinalSet": jur_FinalSet.$clinit(); return jur_FinalSet;
        case "java.util.regex.EmptySet": jur_EmptySet.$clinit(); return jur_EmptySet;
        case "java.util.regex.LeafSet": jur_LeafSet.$clinit(); return jur_LeafSet;
        case "java.util.regex.NonCapJointSet": jur_NonCapJointSet.$clinit(); return jur_NonCapJointSet;
        case "java.util.regex.JointSet": jur_JointSet.$clinit(); return jur_JointSet;
        case "java.util.regex.PositiveLookAhead": jur_PositiveLookAhead.$clinit(); return jur_PositiveLookAhead;
        case "java.util.regex.AtomicJointSet": jur_AtomicJointSet.$clinit(); return jur_AtomicJointSet;
        case "java.util.regex.NegativeLookAhead": jur_NegativeLookAhead.$clinit(); return jur_NegativeLookAhead;
        case "java.util.regex.PositiveLookBehind": jur_PositiveLookBehind.$clinit(); return jur_PositiveLookBehind;
        case "java.util.regex.NegativeLookBehind": jur_NegativeLookBehind.$clinit(); return jur_NegativeLookBehind;
        case "java.util.regex.SingleSet": jur_SingleSet.$clinit(); return jur_SingleSet;
        case "java.lang.reflect.Array": jlr_Array.$clinit(); return jlr_Array;
        case "java.lang.ArrayStoreException": jl_ArrayStoreException.$clinit(); return jl_ArrayStoreException;
        case "java.util.regex.AbstractCharClass": jur_AbstractCharClass.$clinit(); return jur_AbstractCharClass;
        case "java.util.regex.SpecialToken": jur_SpecialToken.$clinit(); return jur_SpecialToken;
        case "java.util.MissingResourceException": ju_MissingResourceException.$clinit(); return ju_MissingResourceException;
        case "java.util.regex.CharClass": jur_CharClass.$clinit(); return jur_CharClass;
        case "java.util.regex.LeafQuantifierSet": jur_LeafQuantifierSet.$clinit(); return jur_LeafQuantifierSet;
        case "java.util.regex.QuantifierSet": jur_QuantifierSet.$clinit(); return jur_QuantifierSet;
        case "java.util.regex.CompositeQuantifierSet": jur_CompositeQuantifierSet.$clinit(); return jur_CompositeQuantifierSet;
        case "java.util.regex.GroupQuantifierSet": jur_GroupQuantifierSet.$clinit(); return jur_GroupQuantifierSet;
        case "java.util.regex.AltQuantifierSet": jur_AltQuantifierSet.$clinit(); return jur_AltQuantifierSet;
        case "java.util.regex.UnifiedQuantifierSet": jur_UnifiedQuantifierSet.$clinit(); return jur_UnifiedQuantifierSet;
        case "java.util.regex.AbstractCharClass$PredefinedCharacterClasses": jur_AbstractCharClass$PredefinedCharacterClasses.$clinit(); return jur_AbstractCharClass$PredefinedCharacterClasses;
        case "java.util.regex.AbstractCharClass$LazyCharClass": jur_AbstractCharClass$LazyCharClass.$clinit(); return jur_AbstractCharClass$LazyCharClass;
        case "java.lang.NumberFormatException": jl_NumberFormatException.$clinit(); return jl_NumberFormatException;
        case "java.util.regex.Quantifier": jur_Quantifier.$clinit(); return jur_Quantifier;
        case "java.util.regex.FSet$PossessiveFSet": jur_FSet$PossessiveFSet.$clinit(); return jur_FSet$PossessiveFSet;
        case "java.util.BitSet": ju_BitSet.$clinit(); return ju_BitSet;
        case "java.util.regex.LowHighSurrogateRangeSet": jur_LowHighSurrogateRangeSet.$clinit(); return jur_LowHighSurrogateRangeSet;
        case "java.util.regex.CompositeRangeSet": jur_CompositeRangeSet.$clinit(); return jur_CompositeRangeSet;
        case "java.util.regex.UCISupplRangeSet": jur_UCISupplRangeSet.$clinit(); return jur_UCISupplRangeSet;
        case "java.util.regex.SupplRangeSet": jur_SupplRangeSet.$clinit(); return jur_SupplRangeSet;
        case "java.util.regex.UCIRangeSet": jur_UCIRangeSet.$clinit(); return jur_UCIRangeSet;
        case "java.util.regex.RangeSet": jur_RangeSet.$clinit(); return jur_RangeSet;
        case "java.util.regex.HangulDecomposedCharSet": jur_HangulDecomposedCharSet.$clinit(); return jur_HangulDecomposedCharSet;
        case "java.util.regex.CharSet": jur_CharSet.$clinit(); return jur_CharSet;
        case "java.util.regex.UCICharSet": jur_UCICharSet.$clinit(); return jur_UCICharSet;
        case "java.util.regex.CICharSet": jur_CICharSet.$clinit(); return jur_CICharSet;
        case "java.util.regex.DecomposedCharSet": jur_DecomposedCharSet.$clinit(); return jur_DecomposedCharSet;
        case "java.util.regex.UCIDecomposedCharSet": jur_UCIDecomposedCharSet.$clinit(); return jur_UCIDecomposedCharSet;
        case "java.util.regex.CIDecomposedCharSet": jur_CIDecomposedCharSet.$clinit(); return jur_CIDecomposedCharSet;
        case "java.util.regex.PossessiveGroupQuantifierSet": jur_PossessiveGroupQuantifierSet.$clinit(); return jur_PossessiveGroupQuantifierSet;
        case "java.util.regex.PosPlusGroupQuantifierSet": jur_PosPlusGroupQuantifierSet.$clinit(); return jur_PosPlusGroupQuantifierSet;
        case "java.util.regex.PosAltGroupQuantifierSet": jur_PosAltGroupQuantifierSet.$clinit(); return jur_PosAltGroupQuantifierSet;
        case "java.util.regex.AltGroupQuantifierSet": jur_AltGroupQuantifierSet.$clinit(); return jur_AltGroupQuantifierSet;
        case "java.util.regex.PosCompositeGroupQuantifierSet": jur_PosCompositeGroupQuantifierSet.$clinit(); return jur_PosCompositeGroupQuantifierSet;
        case "java.util.regex.CompositeGroupQuantifierSet": jur_CompositeGroupQuantifierSet.$clinit(); return jur_CompositeGroupQuantifierSet;
        case "java.util.regex.ReluctantGroupQuantifierSet": jur_ReluctantGroupQuantifierSet.$clinit(); return jur_ReluctantGroupQuantifierSet;
        case "java.util.regex.RelAltGroupQuantifierSet": jur_RelAltGroupQuantifierSet.$clinit(); return jur_RelAltGroupQuantifierSet;
        case "java.util.regex.RelCompositeGroupQuantifierSet": jur_RelCompositeGroupQuantifierSet.$clinit(); return jur_RelCompositeGroupQuantifierSet;
        case "java.util.regex.DotAllQuantifierSet": jur_DotAllQuantifierSet.$clinit(); return jur_DotAllQuantifierSet;
        case "java.util.regex.DotQuantifierSet": jur_DotQuantifierSet.$clinit(); return jur_DotQuantifierSet;
        case "java.util.regex.AbstractLineTerminator": jur_AbstractLineTerminator.$clinit(); return jur_AbstractLineTerminator;
        case "java.util.regex.PossessiveQuantifierSet": jur_PossessiveQuantifierSet.$clinit(); return jur_PossessiveQuantifierSet;
        case "java.util.regex.PossessiveAltQuantifierSet": jur_PossessiveAltQuantifierSet.$clinit(); return jur_PossessiveAltQuantifierSet;
        case "java.util.regex.PossessiveCompositeQuantifierSet": jur_PossessiveCompositeQuantifierSet.$clinit(); return jur_PossessiveCompositeQuantifierSet;
        case "java.util.regex.ReluctantQuantifierSet": jur_ReluctantQuantifierSet.$clinit(); return jur_ReluctantQuantifierSet;
        case "java.util.regex.ReluctantAltQuantifierSet": jur_ReluctantAltQuantifierSet.$clinit(); return jur_ReluctantAltQuantifierSet;
        case "java.util.regex.ReluctantCompositeQuantifierSet": jur_ReluctantCompositeQuantifierSet.$clinit(); return jur_ReluctantCompositeQuantifierSet;
        case "java.util.regex.SOLSet": jur_SOLSet.$clinit(); return jur_SOLSet;
        case "java.util.regex.WordBoundary": jur_WordBoundary.$clinit(); return jur_WordBoundary;
        case "java.util.regex.PreviousMatch": jur_PreviousMatch.$clinit(); return jur_PreviousMatch;
        case "java.util.regex.EOLSet": jur_EOLSet.$clinit(); return jur_EOLSet;
        case "java.util.regex.EOISet": jur_EOISet.$clinit(); return jur_EOISet;
        case "java.util.regex.MultiLineSOLSet": jur_MultiLineSOLSet.$clinit(); return jur_MultiLineSOLSet;
        case "java.util.regex.DotAllSet": jur_DotAllSet.$clinit(); return jur_DotAllSet;
        case "java.util.regex.DotSet": jur_DotSet.$clinit(); return jur_DotSet;
        case "java.util.regex.UEOLSet": jur_UEOLSet.$clinit(); return jur_UEOLSet;
        case "java.util.regex.UMultiLineEOLSet": jur_UMultiLineEOLSet.$clinit(); return jur_UMultiLineEOLSet;
        case "java.util.regex.MultiLineEOLSet": jur_MultiLineEOLSet.$clinit(); return jur_MultiLineEOLSet;
        case "java.util.regex.BackReferenceSet": jur_BackReferenceSet.$clinit(); return jur_BackReferenceSet;
        case "java.util.regex.CIBackReferenceSet": jur_CIBackReferenceSet.$clinit(); return jur_CIBackReferenceSet;
        case "java.util.regex.UCIBackReferenceSet": jur_UCIBackReferenceSet.$clinit(); return jur_UCIBackReferenceSet;
        case "java.lang.StringBuffer": jl_StringBuffer.$clinit(); return jl_StringBuffer;
        case "java.util.regex.SequenceSet": jur_SequenceSet.$clinit(); return jur_SequenceSet;
        case "java.util.regex.UCISequenceSet": jur_UCISequenceSet.$clinit(); return jur_UCISequenceSet;
        case "java.util.regex.CISequenceSet": jur_CISequenceSet.$clinit(); return jur_CISequenceSet;
        case "java.util.regex.UCISupplCharSet": jur_UCISupplCharSet.$clinit(); return jur_UCISupplCharSet;
        case "java.util.regex.LowSurrogateCharSet": jur_LowSurrogateCharSet.$clinit(); return jur_LowSurrogateCharSet;
        case "java.util.regex.HighSurrogateCharSet": jur_HighSurrogateCharSet.$clinit(); return jur_HighSurrogateCharSet;
        case "java.util.regex.SupplCharSet": jur_SupplCharSet.$clinit(); return jur_SupplCharSet;
        case "java.util.regex.AbstractLineTerminator$1": jur_AbstractLineTerminator$1.$clinit(); return jur_AbstractLineTerminator$1;
        case "java.util.regex.AbstractLineTerminator$2": jur_AbstractLineTerminator$2.$clinit(); return jur_AbstractLineTerminator$2;
        case "java.util.regex.SequenceSet$IntHash": jur_SequenceSet$IntHash.$clinit(); return jur_SequenceSet$IntHash;
        case "java.util.regex.AbstractCharClass$LazySpace": jur_AbstractCharClass$LazySpace.$clinit(); return jur_AbstractCharClass$LazySpace;
        case "java.util.regex.AbstractCharClass$LazyDigit": jur_AbstractCharClass$LazyDigit.$clinit(); return jur_AbstractCharClass$LazyDigit;
        case "java.util.regex.AbstractCharClass$LazyLower": jur_AbstractCharClass$LazyLower.$clinit(); return jur_AbstractCharClass$LazyLower;
        case "java.util.regex.AbstractCharClass$LazyUpper": jur_AbstractCharClass$LazyUpper.$clinit(); return jur_AbstractCharClass$LazyUpper;
        case "java.util.regex.AbstractCharClass$LazyASCII": jur_AbstractCharClass$LazyASCII.$clinit(); return jur_AbstractCharClass$LazyASCII;
        case "java.util.regex.AbstractCharClass$LazyAlpha": jur_AbstractCharClass$LazyAlpha.$clinit(); return jur_AbstractCharClass$LazyAlpha;
        case "java.util.regex.AbstractCharClass$LazyAlnum": jur_AbstractCharClass$LazyAlnum.$clinit(); return jur_AbstractCharClass$LazyAlnum;
        case "java.util.regex.AbstractCharClass$LazyPunct": jur_AbstractCharClass$LazyPunct.$clinit(); return jur_AbstractCharClass$LazyPunct;
        case "java.util.regex.AbstractCharClass$LazyGraph": jur_AbstractCharClass$LazyGraph.$clinit(); return jur_AbstractCharClass$LazyGraph;
        case "java.util.regex.AbstractCharClass$LazyPrint": jur_AbstractCharClass$LazyPrint.$clinit(); return jur_AbstractCharClass$LazyPrint;
        case "java.util.regex.AbstractCharClass$LazyBlank": jur_AbstractCharClass$LazyBlank.$clinit(); return jur_AbstractCharClass$LazyBlank;
        case "java.util.regex.AbstractCharClass$LazyCntrl": jur_AbstractCharClass$LazyCntrl.$clinit(); return jur_AbstractCharClass$LazyCntrl;
        case "java.util.regex.AbstractCharClass$LazyXDigit": jur_AbstractCharClass$LazyXDigit.$clinit(); return jur_AbstractCharClass$LazyXDigit;
        case "java.util.regex.AbstractCharClass$LazyJavaLowerCase": jur_AbstractCharClass$LazyJavaLowerCase.$clinit(); return jur_AbstractCharClass$LazyJavaLowerCase;
        case "java.util.regex.AbstractCharClass$LazyJavaUpperCase": jur_AbstractCharClass$LazyJavaUpperCase.$clinit(); return jur_AbstractCharClass$LazyJavaUpperCase;
        case "java.util.regex.AbstractCharClass$LazyJavaWhitespace": jur_AbstractCharClass$LazyJavaWhitespace.$clinit(); return jur_AbstractCharClass$LazyJavaWhitespace;
        case "java.util.regex.AbstractCharClass$LazyJavaMirrored": jur_AbstractCharClass$LazyJavaMirrored.$clinit(); return jur_AbstractCharClass$LazyJavaMirrored;
        case "java.util.regex.AbstractCharClass$LazyJavaDefined": jur_AbstractCharClass$LazyJavaDefined.$clinit(); return jur_AbstractCharClass$LazyJavaDefined;
        case "java.util.regex.AbstractCharClass$LazyJavaDigit": jur_AbstractCharClass$LazyJavaDigit.$clinit(); return jur_AbstractCharClass$LazyJavaDigit;
        case "java.util.regex.AbstractCharClass$LazyJavaIdentifierIgnorable": jur_AbstractCharClass$LazyJavaIdentifierIgnorable.$clinit(); return jur_AbstractCharClass$LazyJavaIdentifierIgnorable;
        case "java.util.regex.AbstractCharClass$LazyJavaISOControl": jur_AbstractCharClass$LazyJavaISOControl.$clinit(); return jur_AbstractCharClass$LazyJavaISOControl;
        case "java.util.regex.AbstractCharClass$LazyJavaJavaIdentifierPart": jur_AbstractCharClass$LazyJavaJavaIdentifierPart.$clinit(); return jur_AbstractCharClass$LazyJavaJavaIdentifierPart;
        case "java.util.regex.AbstractCharClass$LazyJavaJavaIdentifierStart": jur_AbstractCharClass$LazyJavaJavaIdentifierStart.$clinit(); return jur_AbstractCharClass$LazyJavaJavaIdentifierStart;
        case "java.util.regex.AbstractCharClass$LazyJavaLetter": jur_AbstractCharClass$LazyJavaLetter.$clinit(); return jur_AbstractCharClass$LazyJavaLetter;
        case "java.util.regex.AbstractCharClass$LazyJavaLetterOrDigit": jur_AbstractCharClass$LazyJavaLetterOrDigit.$clinit(); return jur_AbstractCharClass$LazyJavaLetterOrDigit;
        case "java.util.regex.AbstractCharClass$LazyJavaSpaceChar": jur_AbstractCharClass$LazyJavaSpaceChar.$clinit(); return jur_AbstractCharClass$LazyJavaSpaceChar;
        case "java.util.regex.AbstractCharClass$LazyJavaTitleCase": jur_AbstractCharClass$LazyJavaTitleCase.$clinit(); return jur_AbstractCharClass$LazyJavaTitleCase;
        case "java.util.regex.AbstractCharClass$LazyJavaUnicodeIdentifierPart": jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart.$clinit(); return jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart;
        case "java.util.regex.AbstractCharClass$LazyJavaUnicodeIdentifierStart": jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart.$clinit(); return jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart;
        case "java.util.regex.AbstractCharClass$LazyWord": jur_AbstractCharClass$LazyWord.$clinit(); return jur_AbstractCharClass$LazyWord;
        case "java.util.regex.AbstractCharClass$LazyNonWord": jur_AbstractCharClass$LazyNonWord.$clinit(); return jur_AbstractCharClass$LazyNonWord;
        case "java.util.regex.AbstractCharClass$LazyNonSpace": jur_AbstractCharClass$LazyNonSpace.$clinit(); return jur_AbstractCharClass$LazyNonSpace;
        case "java.util.regex.AbstractCharClass$LazyNonDigit": jur_AbstractCharClass$LazyNonDigit.$clinit(); return jur_AbstractCharClass$LazyNonDigit;
        case "java.util.regex.AbstractCharClass$LazyRange": jur_AbstractCharClass$LazyRange.$clinit(); return jur_AbstractCharClass$LazyRange;
        case "java.util.regex.AbstractCharClass$LazySpecialsBlock": jur_AbstractCharClass$LazySpecialsBlock.$clinit(); return jur_AbstractCharClass$LazySpecialsBlock;
        case "java.util.regex.AbstractCharClass$LazyCategory": jur_AbstractCharClass$LazyCategory.$clinit(); return jur_AbstractCharClass$LazyCategory;
        case "java.util.regex.AbstractCharClass$LazyCategoryScope": jur_AbstractCharClass$LazyCategoryScope.$clinit(); return jur_AbstractCharClass$LazyCategoryScope;
        case "java.lang.NegativeArraySizeException": jl_NegativeArraySizeException.$clinit(); return jl_NegativeArraySizeException;
        case "java.util.regex.IntHash": jur_IntHash.$clinit(); return jur_IntHash;
        case "org.teavm.platform.plugin.ResourceAccessor": otpp_ResourceAccessor.$clinit(); return otpp_ResourceAccessor;
        case "org.teavm.classlib.impl.unicode.UnicodeHelper": otciu_UnicodeHelper.$clinit(); return otciu_UnicodeHelper;
        case "org.teavm.classlib.impl.unicode.CharMapping": otciu_CharMapping.$clinit(); return otciu_CharMapping;
        case "org.teavm.classlib.impl.unicode.UnicodeHelper$Range": otciu_UnicodeHelper$Range.$clinit(); return otciu_UnicodeHelper$Range;
        case "org.teavm.classlib.impl.CharFlow": otci_CharFlow.$clinit(); return otci_CharFlow;
        case "org.teavm.classlib.impl.Base46": otci_Base46.$clinit(); return otci_Base46;
        case "java.util.AbstractList$1": ju_AbstractList$1.$clinit(); return ju_AbstractList$1;
        case "java.lang.ArrayIndexOutOfBoundsException": jl_ArrayIndexOutOfBoundsException.$clinit(); return jl_ArrayIndexOutOfBoundsException;
        case "java.nio.ReadOnlyBufferException": jn_ReadOnlyBufferException.$clinit(); return jn_ReadOnlyBufferException;
        case "java.nio.BufferOverflowException": jn_BufferOverflowException.$clinit(); return jn_BufferOverflowException;
        case "java.nio.charset.BufferUnderflowException": jnc_BufferUnderflowException.$clinit(); return jnc_BufferUnderflowException;
        case "java.nio.charset.BufferOverflowException": jnc_BufferOverflowException.$clinit(); return jnc_BufferOverflowException;
        case "java.nio.charset.MalformedInputException": jnc_MalformedInputException.$clinit(); return jnc_MalformedInputException;
        case "java.nio.charset.UnmappableCharacterException": jnc_UnmappableCharacterException.$clinit(); return jnc_UnmappableCharacterException;
        case "io.github.betterclient.compiler.Compiler$compile$lambda$_2_0": igbc_Compiler$compile$lambda$_2_0.$clinit(); return igbc_Compiler$compile$lambda$_2_0;
        case "java.util.function.UnaryOperator": juf_UnaryOperator.$clinit(); return juf_UnaryOperator;
        case "io.github.betterclient.compiler.Compiler$compile$lambda$_2_1": igbc_Compiler$compile$lambda$_2_1.$clinit(); return igbc_Compiler$compile$lambda$_2_1;
        case "io.github.betterclient.compiler.Compiler$compile$lambda$_2_2": igbc_Compiler$compile$lambda$_2_2.$clinit(); return igbc_Compiler$compile$lambda$_2_2;
        case "java.util.function.Predicate": juf_Predicate.$clinit(); return juf_Predicate;
        case "io.github.betterclient.compiler.Compiler$compile$lambda$_2_3": igbc_Compiler$compile$lambda$_2_3.$clinit(); return igbc_Compiler$compile$lambda$_2_3;
        case "io.github.betterclient.compiler.util.CommentUtils": igbcu_CommentUtils.$clinit(); return igbcu_CommentUtils;
        case "io.github.betterclient.compiler.util.BracketUtil": igbcu_BracketUtil.$clinit(); return igbcu_BracketUtil;
        case "io.github.betterclient.compiler.util.SymbolParser": igbcu_SymbolParser.$clinit(); return igbcu_SymbolParser;
        case "io.github.betterclient.compiler.symbol.UsesSymbol": igbcs_UsesSymbol.$clinit(); return igbcs_UsesSymbol;
        case "io.github.betterclient.compiler.symbol.Symbol": igbcs_Symbol.$clinit(); return igbcs_Symbol;
        case "io.github.betterclient.compiler.exception.CompilerException": igbce_CompilerException.$clinit(); return igbce_CompilerException;
        case "io.github.betterclient.compiler.method.MethodCompiler": igbcm_MethodCompiler.$clinit(); return igbcm_MethodCompiler;
        case "java.util.zip.ZipException": juz_ZipException.$clinit(); return juz_ZipException;
        case "java.nio.charset.impl.UTF8Decoder": jnci_UTF8Decoder.$clinit(); return jnci_UTF8Decoder;
        case "java.nio.charset.impl.BufferedDecoder": jnci_BufferedDecoder.$clinit(); return jnci_BufferedDecoder;
        case "java.util.HashMap$HashEntry": ju_HashMap$HashEntry.$clinit(); return ju_HashMap$HashEntry;
        case "java.util.regex.AbstractCharClass$1": jur_AbstractCharClass$1.$clinit(); return jur_AbstractCharClass$1;
        case "java.util.regex.AbstractCharClass$2": jur_AbstractCharClass$2.$clinit(); return jur_AbstractCharClass$2;
        case "java.util.regex.CharClass$18": jur_CharClass$18.$clinit(); return jur_CharClass$18;
        case "java.util.regex.CharClass$1": jur_CharClass$1.$clinit(); return jur_CharClass$1;
        case "java.util.regex.CharClass$3": jur_CharClass$3.$clinit(); return jur_CharClass$3;
        case "java.util.regex.CharClass$2": jur_CharClass$2.$clinit(); return jur_CharClass$2;
        case "java.util.regex.CharClass$5": jur_CharClass$5.$clinit(); return jur_CharClass$5;
        case "java.util.regex.CharClass$4": jur_CharClass$4.$clinit(); return jur_CharClass$4;
        case "java.util.regex.CharClass$7": jur_CharClass$7.$clinit(); return jur_CharClass$7;
        case "java.util.regex.CharClass$6": jur_CharClass$6.$clinit(); return jur_CharClass$6;
        case "java.util.regex.CharClass$9": jur_CharClass$9.$clinit(); return jur_CharClass$9;
        case "java.util.regex.CharClass$8": jur_CharClass$8.$clinit(); return jur_CharClass$8;
        case "java.util.regex.CharClass$11": jur_CharClass$11.$clinit(); return jur_CharClass$11;
        case "java.util.regex.CharClass$10": jur_CharClass$10.$clinit(); return jur_CharClass$10;
        case "java.util.regex.CharClass$13": jur_CharClass$13.$clinit(); return jur_CharClass$13;
        case "java.util.regex.CharClass$12": jur_CharClass$12.$clinit(); return jur_CharClass$12;
        case "java.util.regex.CharClass$15": jur_CharClass$15.$clinit(); return jur_CharClass$15;
        case "java.util.regex.CharClass$14": jur_CharClass$14.$clinit(); return jur_CharClass$14;
        case "java.util.regex.CharClass$17": jur_CharClass$17.$clinit(); return jur_CharClass$17;
        case "java.util.regex.CharClass$16": jur_CharClass$16.$clinit(); return jur_CharClass$16;
        case "java.util.TemplateCollections$ImmutableArrayList": ju_TemplateCollections$ImmutableArrayList.$clinit(); return ju_TemplateCollections$ImmutableArrayList;
        case "java.util.TemplateCollections$AbstractImmutableList": ju_TemplateCollections$AbstractImmutableList.$clinit(); return ju_TemplateCollections$AbstractImmutableList;
        case "io.github.betterclient.compiler.exception.WrongIndentationException": igbce_WrongIndentationException.$clinit(); return igbce_WrongIndentationException;
        case "io.github.betterclient.compiler.exception.WrongBracketUsageException": igbce_WrongBracketUsageException.$clinit(); return igbce_WrongBracketUsageException;
        case "io.github.betterclient.compiler.util.SymbolParser$parseSymbols$lambda$_1_0": igbcu_SymbolParser$parseSymbols$lambda$_1_0.$clinit(); return igbcu_SymbolParser$parseSymbols$lambda$_1_0;
        case "java.util.stream.Collectors": jus_Collectors.$clinit(); return jus_Collectors;
        case "io.github.betterclient.compiler.symbol.ImplementingSymbol": igbcs_ImplementingSymbol.$clinit(); return igbcs_ImplementingSymbol;
        case "io.github.betterclient.compiler.symbol.ExtendingSymbol": igbcs_ExtendingSymbol.$clinit(); return igbcs_ExtendingSymbol;
        case "io.github.betterclient.compiler.symbol.FieldSymbol": igbcs_FieldSymbol.$clinit(); return igbcs_FieldSymbol;
        case "io.github.betterclient.compiler.method.MethodCodeCompiler": igbcm_MethodCodeCompiler.$clinit(); return igbcm_MethodCodeCompiler;
        case "java.util.stream.impl.ArrayStreamImpl": jusi_ArrayStreamImpl.$clinit(); return jusi_ArrayStreamImpl;
        case "java.util.stream.impl.SimpleStreamImpl": jusi_SimpleStreamImpl.$clinit(); return jusi_SimpleStreamImpl;
        case "java.util.stream.Stream": jus_Stream.$clinit(); return jus_Stream;
        case "java.util.stream.BaseStream": jus_BaseStream.$clinit(); return jus_BaseStream;
        case "io.github.betterclient.compiler.symbol.ImplementingSymbol$<init>$lambda$_0_0": igbcs_ImplementingSymbol$_init_$lambda$_0_0.$clinit(); return igbcs_ImplementingSymbol$_init_$lambda$_0_0;
        case "java.util.function.IntPredicate": juf_IntPredicate.$clinit(); return juf_IntPredicate;
        case "io.github.betterclient.compiler.exception.StandardCodeExceptions": igbce_StandardCodeExceptions.$clinit(); return igbce_StandardCodeExceptions;
        case "io.github.betterclient.compiler.method.MethodCodeCompiler$compile$lambda$_1_0": igbcm_MethodCodeCompiler$compile$lambda$_1_0.$clinit(); return igbcm_MethodCodeCompiler$compile$lambda$_1_0;
        case "java.nio.charset.Charset$Charsets": jnc_Charset$Charsets.$clinit(); return jnc_Charset$Charsets;
        case "java.nio.charset.UnsupportedCharsetException": jnc_UnsupportedCharsetException.$clinit(); return jnc_UnsupportedCharsetException;
        case "java.util.regex.Matcher$1": jur_Matcher$1.$clinit(); return jur_Matcher$1;
        case "java.util.stream.Collectors$joining$lambda$_8_0": jus_Collectors$joining$lambda$_8_0.$clinit(); return jus_Collectors$joining$lambda$_8_0;
        case "java.util.function.BiConsumer": juf_BiConsumer.$clinit(); return juf_BiConsumer;
        case "java.util.stream.Collectors$joining$lambda$_8_1": jus_Collectors$joining$lambda$_8_1.$clinit(); return jus_Collectors$joining$lambda$_8_1;
        case "java.util.function.BinaryOperator": juf_BinaryOperator.$clinit(); return juf_BinaryOperator;
        case "java.util.function.BiFunction": juf_BiFunction.$clinit(); return juf_BiFunction;
        case "java.util.stream.Collectors$joining$lambda$_8_2": jus_Collectors$joining$lambda$_8_2.$clinit(); return jus_Collectors$joining$lambda$_8_2;
        case "java.util.function.Supplier": juf_Supplier.$clinit(); return juf_Supplier;
        case "java.util.stream.Collectors$joining$lambda$_8_3": jus_Collectors$joining$lambda$_8_3.$clinit(); return jus_Collectors$joining$lambda$_8_3;
        case "java.util.stream.Collector$Characteristics": jus_Collector$Characteristics.$clinit(); return jus_Collector$Characteristics;
        case "java.util.stream.Collector": jus_Collector.$clinit(); return jus_Collector;
        case "io.github.betterclient.compiler.exception.SymbolNotFoundException": igbce_SymbolNotFoundException.$clinit(); return igbce_SymbolNotFoundException;
        case "io.github.betterclient.compiler.method.MethodCodeCompiler$recursiveCompilation$lambda$_2_0": igbcm_MethodCodeCompiler$recursiveCompilation$lambda$_2_0.$clinit(); return igbcm_MethodCodeCompiler$recursiveCompilation$lambda$_2_0;
        case "java.util.function.Consumer": juf_Consumer.$clinit(); return juf_Consumer;
        case "io.github.betterclient.compiler.exception.NoReturnException": igbce_NoReturnException.$clinit(); return igbce_NoReturnException;
        case "java.util.EnumSet": ju_EnumSet.$clinit(); return ju_EnumSet;
        case "java.util.AbstractSet": ju_AbstractSet.$clinit(); return ju_AbstractSet;
        case "java.util.Set": ju_Set.$clinit(); return ju_Set;
        case "java.util.stream.CollectorImpl": jus_CollectorImpl.$clinit(); return jus_CollectorImpl;
        case "io.github.betterclient.compiler.method.code.StatementCompiler": igbcmc_StatementCompiler.$clinit(); return igbcmc_StatementCompiler;
        case "io.github.betterclient.compiler.method.IfStatementHandler": igbcm_IfStatementHandler.$clinit(); return igbcm_IfStatementHandler;
        case "java.nio.charset.StandardCharsets": jnc_StandardCharsets.$clinit(); return jnc_StandardCharsets;
        case "java.util.GenericEnumSet": ju_GenericEnumSet.$clinit(); return ju_GenericEnumSet;
        case "java.util.Arrays$ArrayAsList": ju_Arrays$ArrayAsList.$clinit(); return ju_Arrays$ArrayAsList;
        case "io.github.betterclient.compiler.util.StringParser": igbcu_StringParser.$clinit(); return igbcu_StringParser;
        case "io.github.betterclient.compiler.method.code.StringConstantMethodCompiler": igbcmc_StringConstantMethodCompiler.$clinit(); return igbcmc_StringConstantMethodCompiler;
        case "io.github.betterclient.compiler.method.code.FieldGetCompiler": igbcmc_FieldGetCompiler.$clinit(); return igbcmc_FieldGetCompiler;
        case "io.github.betterclient.compiler.util.CodeCompilerUtils": igbcu_CodeCompilerUtils.$clinit(); return igbcu_CodeCompilerUtils;
        case "io.github.betterclient.compiler.method.code.MethodCallCompiler": igbcmc_MethodCallCompiler.$clinit(); return igbcmc_MethodCallCompiler;
        case "io.github.betterclient.compiler.method.code.FieldSetCompiler": igbcmc_FieldSetCompiler.$clinit(); return igbcmc_FieldSetCompiler;
        case "io.github.betterclient.compiler.method.IfStatementHandler$compile$lambda$_1_0": igbcm_IfStatementHandler$compile$lambda$_1_0.$clinit(); return igbcm_IfStatementHandler$compile$lambda$_1_0;
        case "java.util.function.IntFunction": juf_IntFunction.$clinit(); return juf_IntFunction;
        case "io.github.betterclient.compiler.api.code.impl.get.pre.NullCode": igbcacigp_NullCode.$clinit(); return igbcacigp_NullCode;
        case "io.github.betterclient.compiler.api.code.impl.get.load.GetArgumentCode": igbcacigl_GetArgumentCode.$clinit(); return igbcacigl_GetArgumentCode;
        case "io.github.betterclient.compiler.api.code.impl.get.pre.ThisCode": igbcacigp_ThisCode.$clinit(); return igbcacigp_ThisCode;
        case "java.nio.charset.impl.AsciiCharset": jnci_AsciiCharset.$clinit(); return jnci_AsciiCharset;
        case "java.nio.charset.impl.Iso8859Charset": jnci_Iso8859Charset.$clinit(); return jnci_Iso8859Charset;
        case "java.nio.charset.impl.UTF16Charset": jnci_UTF16Charset.$clinit(); return jnci_UTF16Charset;
        case "java.util.Random": ju_Random.$clinit(); return ju_Random;
        case "java.util.random.RandomGenerator": jur_RandomGenerator.$clinit(); return jur_RandomGenerator;
        case "io.github.betterclient.compiler.api.util.Either": igbcau_Either.$clinit(); return igbcau_Either;
        case "io.github.betterclient.compiler.api.APILoader$get$lambda$_2_0": igbca_APILoader$get$lambda$_2_0.$clinit(); return igbca_APILoader$get$lambda$_2_0;
        case "java.util.Optional": ju_Optional.$clinit(); return ju_Optional;
        case "java.lang.Float": jl_Float.$clinit(); return jl_Float;
        case "java.lang.Double": jl_Double.$clinit(); return jl_Double;
        case "io.github.betterclient.compiler.util.DefaultFunctions": igbcu_DefaultFunctions.$clinit(); return igbcu_DefaultFunctions;
        case "io.github.betterclient.compiler.api.code.impl.get.call.NewInstanceCode": igbcacigc_NewInstanceCode.$clinit(); return igbcacigc_NewInstanceCode;
        case "org.teavm.classlib.impl.text.FloatSynthesizer": otcit_FloatSynthesizer.$clinit(); return otcit_FloatSynthesizer;
        case "org.teavm.classlib.impl.text.DoubleSynthesizer": otcit_DoubleSynthesizer.$clinit(); return otcit_DoubleSynthesizer;
        case "org.teavm.classlib.impl.text.FloatAnalyzer": otcit_FloatAnalyzer.$clinit(); return otcit_FloatAnalyzer;
        case "org.teavm.classlib.impl.text.DoubleAnalyzer": otcit_DoubleAnalyzer.$clinit(); return otcit_DoubleAnalyzer;
        case "io.github.betterclient.compiler.api.APILoader$getOrMake$lambda$_1_0": igbca_APILoader$getOrMake$lambda$_1_0.$clinit(); return igbca_APILoader$getOrMake$lambda$_1_0;
        case "io.github.betterclient.compiler.api.APILoader$getOrMake$lambda$_1_1": igbca_APILoader$getOrMake$lambda$_1_1.$clinit(); return igbca_APILoader$getOrMake$lambda$_1_1;
        case "org.teavm.classlib.impl.text.DoubleAnalyzer$Result": otcit_DoubleAnalyzer$Result.$clinit(); return otcit_DoubleAnalyzer$Result;
        case "java.util.regex.BackReferencedSingleSet": jur_BackReferencedSingleSet.$clinit(); return jur_BackReferencedSingleSet;
        case "java.nio.charset.impl.BufferedDecoder$Controller": jnci_BufferedDecoder$Controller.$clinit(); return jnci_BufferedDecoder$Controller;
        case "java.util.stream.impl.FilteringStreamImpl": jusi_FilteringStreamImpl.$clinit(); return jusi_FilteringStreamImpl;
        case "java.util.stream.impl.WrappingStreamImpl": jusi_WrappingStreamImpl.$clinit(); return jusi_WrappingStreamImpl;
        case "java.util.stream.impl.StreamOverSpliterator": jusi_StreamOverSpliterator.$clinit(); return jusi_StreamOverSpliterator;
        case "java.nio.BufferUnderflowException": jn_BufferUnderflowException.$clinit(); return jn_BufferUnderflowException;
        case "java.util.regex.AbstractCharClass$LazyJavaLowerCase$1": jur_AbstractCharClass$LazyJavaLowerCase$1.$clinit(); return jur_AbstractCharClass$LazyJavaLowerCase$1;
        case "java.util.regex.AbstractCharClass$LazyJavaUpperCase$1": jur_AbstractCharClass$LazyJavaUpperCase$1.$clinit(); return jur_AbstractCharClass$LazyJavaUpperCase$1;
        case "java.util.regex.AbstractCharClass$LazyJavaWhitespace$1": jur_AbstractCharClass$LazyJavaWhitespace$1.$clinit(); return jur_AbstractCharClass$LazyJavaWhitespace$1;
        case "java.util.regex.AbstractCharClass$LazyJavaMirrored$1": jur_AbstractCharClass$LazyJavaMirrored$1.$clinit(); return jur_AbstractCharClass$LazyJavaMirrored$1;
        case "java.util.regex.AbstractCharClass$LazyJavaDefined$1": jur_AbstractCharClass$LazyJavaDefined$1.$clinit(); return jur_AbstractCharClass$LazyJavaDefined$1;
        case "java.util.regex.AbstractCharClass$LazyJavaDigit$1": jur_AbstractCharClass$LazyJavaDigit$1.$clinit(); return jur_AbstractCharClass$LazyJavaDigit$1;
        case "java.util.regex.AbstractCharClass$LazyJavaIdentifierIgnorable$1": jur_AbstractCharClass$LazyJavaIdentifierIgnorable$1.$clinit(); return jur_AbstractCharClass$LazyJavaIdentifierIgnorable$1;
        case "java.util.regex.AbstractCharClass$LazyJavaISOControl$1": jur_AbstractCharClass$LazyJavaISOControl$1.$clinit(); return jur_AbstractCharClass$LazyJavaISOControl$1;
        case "java.util.regex.AbstractCharClass$LazyJavaJavaIdentifierPart$1": jur_AbstractCharClass$LazyJavaJavaIdentifierPart$1.$clinit(); return jur_AbstractCharClass$LazyJavaJavaIdentifierPart$1;
        case "java.util.regex.AbstractCharClass$LazyJavaJavaIdentifierStart$1": jur_AbstractCharClass$LazyJavaJavaIdentifierStart$1.$clinit(); return jur_AbstractCharClass$LazyJavaJavaIdentifierStart$1;
        case "java.util.regex.AbstractCharClass$LazyJavaLetter$1": jur_AbstractCharClass$LazyJavaLetter$1.$clinit(); return jur_AbstractCharClass$LazyJavaLetter$1;
        case "java.util.regex.AbstractCharClass$LazyJavaLetterOrDigit$1": jur_AbstractCharClass$LazyJavaLetterOrDigit$1.$clinit(); return jur_AbstractCharClass$LazyJavaLetterOrDigit$1;
        case "java.util.regex.AbstractCharClass$LazyJavaSpaceChar$1": jur_AbstractCharClass$LazyJavaSpaceChar$1.$clinit(); return jur_AbstractCharClass$LazyJavaSpaceChar$1;
        case "java.util.regex.AbstractCharClass$LazyJavaTitleCase$1": jur_AbstractCharClass$LazyJavaTitleCase$1.$clinit(); return jur_AbstractCharClass$LazyJavaTitleCase$1;
        case "java.util.regex.AbstractCharClass$LazyJavaUnicodeIdentifierPart$1": jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart$1.$clinit(); return jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart$1;
        case "java.util.regex.AbstractCharClass$LazyJavaUnicodeIdentifierStart$1": jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart$1.$clinit(); return jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart$1;
        case "java.util.regex.UnicodeCategory": jur_UnicodeCategory.$clinit(); return jur_UnicodeCategory;
        case "java.util.regex.UnicodeCategoryScope": jur_UnicodeCategoryScope.$clinit(); return jur_UnicodeCategoryScope;
        case "java.nio.charset.impl.Iso8859Decoder": jnci_Iso8859Decoder.$clinit(); return jnci_Iso8859Decoder;
        case "java.nio.charset.impl.UTF16Decoder": jnci_UTF16Decoder.$clinit(); return jnci_UTF16Decoder;
        case "java.nio.charset.impl.AsciiDecoder": jnci_AsciiDecoder.$clinit(); return jnci_AsciiDecoder;
        case "java.util.ConcurrentModificationException": ju_ConcurrentModificationException.$clinit(); return ju_ConcurrentModificationException;
        case "java.util.NoSuchElementException": ju_NoSuchElementException.$clinit(); return ju_NoSuchElementException;
        case "java.nio.charset.CharsetEncoder": jnc_CharsetEncoder.$clinit(); return jnc_CharsetEncoder;
        case "java.util.regex.IntArrHash": jur_IntArrHash.$clinit(); return jur_IntArrHash;
        case "org.objectweb.asm.ClassReader": ooa_ClassReader.$clinit(); return ooa_ClassReader;
        case "org.objectweb.asm.tree.ClassNode": ooat_ClassNode.$clinit(); return ooat_ClassNode;
        case "org.objectweb.asm.ClassVisitor": ooa_ClassVisitor.$clinit(); return ooa_ClassVisitor;
        case "org.objectweb.asm.tree.FieldNode": ooat_FieldNode.$clinit(); return ooat_FieldNode;
        case "org.objectweb.asm.FieldVisitor": ooa_FieldVisitor.$clinit(); return ooa_FieldVisitor;
        case "io.github.betterclient.compiler.api.type.ClassType": igbcat_ClassType.$clinit(); return igbcat_ClassType;
        case "org.objectweb.asm.ConstantDynamic": ooa_ConstantDynamic.$clinit(); return ooa_ConstantDynamic;
        case "java.util.stream.impl.SimpleStreamImpl$collect$lambda$_26_0": jusi_SimpleStreamImpl$collect$lambda$_26_0.$clinit(); return jusi_SimpleStreamImpl$collect$lambda$_26_0;
        case "java.util.stream.impl.MappingStreamImpl": jusi_MappingStreamImpl.$clinit(); return jusi_MappingStreamImpl;
        case "java.util.stream.impl.FindFirstConsumer": jusi_FindFirstConsumer.$clinit(); return jusi_FindFirstConsumer;
        case "io.github.betterclient.compiler.api.APIMethod$compileDesc$lambda$_3_0": igbca_APIMethod$compileDesc$lambda$_3_0.$clinit(); return igbca_APIMethod$compileDesc$lambda$_3_0;
        case "io.github.betterclient.compiler.api.APIMethod$compileDesc$lambda$_3_1": igbca_APIMethod$compileDesc$lambda$_3_1.$clinit(); return igbca_APIMethod$compileDesc$lambda$_3_1;
        case "java.util.stream.impl.SpliteratorOverCollection": jusi_SpliteratorOverCollection.$clinit(); return jusi_SpliteratorOverCollection;
        case "java.util.Spliterator": ju_Spliterator.$clinit(); return ju_Spliterator;
        case "java.util.HashMap$2": ju_HashMap$2.$clinit(); return ju_HashMap$2;
        case "java.util.zip.DataFormatException": juz_DataFormatException.$clinit(); return juz_DataFormatException;
        case "java.util.stream.impl.SimpleStreamImpl$toArray$lambda$_20_0": jusi_SimpleStreamImpl$toArray$lambda$_20_0.$clinit(); return jusi_SimpleStreamImpl$toArray$lambda$_20_0;
        case "java.nio.charset.impl.UTF8Encoder": jnci_UTF8Encoder.$clinit(); return jnci_UTF8Encoder;
        case "java.nio.charset.impl.BufferedEncoder": jnci_BufferedEncoder.$clinit(); return jnci_BufferedEncoder;
        case "org.objectweb.asm.Attribute": ooa_Attribute.$clinit(); return ooa_Attribute;
        case "java.lang.AbstractStringBuilder$Constants": jl_AbstractStringBuilder$Constants.$clinit(); return jl_AbstractStringBuilder$Constants;
        case "org.teavm.classlib.impl.text.FloatAnalyzer$Result": otcit_FloatAnalyzer$Result.$clinit(); return otcit_FloatAnalyzer$Result;
        case "org.teavm.classlib.impl.console.JsConsolePrintStream$ByteEncoder": otcic_JsConsolePrintStream$ByteEncoder.$clinit(); return otcic_JsConsolePrintStream$ByteEncoder;
        case "java.util.stream.impl.SimpleStreamImpl$ArrayFillingConsumer": jusi_SimpleStreamImpl$ArrayFillingConsumer.$clinit(); return jusi_SimpleStreamImpl$ArrayFillingConsumer;
        case "java.util.stream.impl.SimpleStreamImpl$toArray$lambda$_21_0": jusi_SimpleStreamImpl$toArray$lambda$_21_0.$clinit(); return jusi_SimpleStreamImpl$toArray$lambda$_21_0;
        case "java.util.HashMap$ValueIterator": ju_HashMap$ValueIterator.$clinit(); return ju_HashMap$ValueIterator;
        case "java.util.HashMap$AbstractMapIterator": ju_HashMap$AbstractMapIterator.$clinit(); return ju_HashMap$AbstractMapIterator;
        case "java.nio.charset.impl.BufferedEncoder$Controller": jnci_BufferedEncoder$Controller.$clinit(); return jnci_BufferedEncoder$Controller;
        case "java.util.stream.impl.AnyMatchConsumer": jusi_AnyMatchConsumer.$clinit(); return jusi_AnyMatchConsumer;
        case "org.objectweb.asm.Context": ooa_Context.$clinit(); return ooa_Context;
        case "org.objectweb.asm.Label": ooa_Label.$clinit(); return ooa_Label;
        case "org.objectweb.asm.TypePath": ooa_TypePath.$clinit(); return ooa_TypePath;
        case "org.objectweb.asm.MethodWriter": ooa_MethodWriter.$clinit(); return ooa_MethodWriter;
        case "com.jcraft.jzlib.Inflate$Return": cjj_Inflate$Return.$clinit(); return cjj_Inflate$Return;
        case "com.jcraft.jzlib.GZIPHeader": cjj_GZIPHeader.$clinit(); return cjj_GZIPHeader;
        case "org.objectweb.asm.ModuleVisitor": ooa_ModuleVisitor.$clinit(); return ooa_ModuleVisitor;
        case "java.lang.Byte": jl_Byte.$clinit(); return jl_Byte;
        case "java.lang.Short": jl_Short.$clinit(); return jl_Short;
        case "org.objectweb.asm.AnnotationVisitor": ooa_AnnotationVisitor.$clinit(); return ooa_AnnotationVisitor;
        case "org.objectweb.asm.RecordComponentVisitor": ooa_RecordComponentVisitor.$clinit(); return ooa_RecordComponentVisitor;
        case "org.objectweb.asm.SymbolTable": ooa_SymbolTable.$clinit(); return ooa_SymbolTable;
        case "org.objectweb.asm.Handle": ooa_Handle.$clinit(); return ooa_Handle;
        case "java.util.stream.impl.MappingStreamImpl$wrap$lambda$_1_0": jusi_MappingStreamImpl$wrap$lambda$_1_0.$clinit(); return jusi_MappingStreamImpl$wrap$lambda$_1_0;
        case "org.teavm.classlib.impl.console.JsConsolePrintStream$ByteEncoder$postponeFlush$lambda$_3_0": otcic_JsConsolePrintStream$ByteEncoder$postponeFlush$lambda$_3_0.$clinit(); return otcic_JsConsolePrintStream$ByteEncoder$postponeFlush$lambda$_3_0;
        case "java.util.stream.impl.FilteringStreamImpl$wrap$lambda$_1_0": jusi_FilteringStreamImpl$wrap$lambda$_1_0.$clinit(); return jusi_FilteringStreamImpl$wrap$lambda$_1_0;
        case "java.util.stream.impl.StreamOverSpliterator$AdapterAction": jusi_StreamOverSpliterator$AdapterAction.$clinit(); return jusi_StreamOverSpliterator$AdapterAction;
        case "org.objectweb.asm.tree.AnnotationNode": ooat_AnnotationNode.$clinit(); return ooat_AnnotationNode;
        case "org.objectweb.asm.tree.TypeAnnotationNode": ooat_TypeAnnotationNode.$clinit(); return ooat_TypeAnnotationNode;
        case "org.objectweb.asm.tree.InnerClassNode": ooat_InnerClassNode.$clinit(); return ooat_InnerClassNode;
        case "org.objectweb.asm.tree.ModuleNode": ooat_ModuleNode.$clinit(); return ooat_ModuleNode;
        case "org.objectweb.asm.tree.RecordComponentNode": ooat_RecordComponentNode.$clinit(); return ooat_RecordComponentNode;
        case "org.objectweb.asm.tree.ModuleRequireNode": ooat_ModuleRequireNode.$clinit(); return ooat_ModuleRequireNode;
        case "org.objectweb.asm.tree.ModuleExportNode": ooat_ModuleExportNode.$clinit(); return ooat_ModuleExportNode;
        case "org.objectweb.asm.tree.ModuleOpenNode": ooat_ModuleOpenNode.$clinit(); return ooat_ModuleOpenNode;
        case "org.objectweb.asm.tree.ModuleProvideNode": ooat_ModuleProvideNode.$clinit(); return ooat_ModuleProvideNode;
        case "org.objectweb.asm.tree.ParameterNode": ooat_ParameterNode.$clinit(); return ooat_ParameterNode;
        case "org.objectweb.asm.tree.MethodNode$1": ooat_MethodNode$1.$clinit(); return ooat_MethodNode$1;
        case "org.objectweb.asm.tree.LineNumberNode": ooat_LineNumberNode.$clinit(); return ooat_LineNumberNode;
        case "org.objectweb.asm.tree.AbstractInsnNode": ooat_AbstractInsnNode.$clinit(); return ooat_AbstractInsnNode;
        case "org.objectweb.asm.tree.TryCatchBlockNode": ooat_TryCatchBlockNode.$clinit(); return ooat_TryCatchBlockNode;
        case "org.objectweb.asm.tree.FrameNode": ooat_FrameNode.$clinit(); return ooat_FrameNode;
        case "org.objectweb.asm.tree.InsnNode": ooat_InsnNode.$clinit(); return ooat_InsnNode;
        case "org.objectweb.asm.tree.IntInsnNode": ooat_IntInsnNode.$clinit(); return ooat_IntInsnNode;
        case "org.objectweb.asm.tree.LdcInsnNode": ooat_LdcInsnNode.$clinit(); return ooat_LdcInsnNode;
        case "org.objectweb.asm.tree.VarInsnNode": ooat_VarInsnNode.$clinit(); return ooat_VarInsnNode;
        case "org.objectweb.asm.tree.IincInsnNode": ooat_IincInsnNode.$clinit(); return ooat_IincInsnNode;
        case "org.objectweb.asm.tree.JumpInsnNode": ooat_JumpInsnNode.$clinit(); return ooat_JumpInsnNode;
        case "org.objectweb.asm.tree.TypeInsnNode": ooat_TypeInsnNode.$clinit(); return ooat_TypeInsnNode;
        case "org.objectweb.asm.tree.MultiANewArrayInsnNode": ooat_MultiANewArrayInsnNode.$clinit(); return ooat_MultiANewArrayInsnNode;
        case "org.objectweb.asm.tree.InvokeDynamicInsnNode": ooat_InvokeDynamicInsnNode.$clinit(); return ooat_InvokeDynamicInsnNode;
        case "org.objectweb.asm.tree.FieldInsnNode": ooat_FieldInsnNode.$clinit(); return ooat_FieldInsnNode;
        case "org.objectweb.asm.tree.MethodInsnNode": ooat_MethodInsnNode.$clinit(); return ooat_MethodInsnNode;
        case "org.objectweb.asm.tree.LookupSwitchInsnNode": ooat_LookupSwitchInsnNode.$clinit(); return ooat_LookupSwitchInsnNode;
        case "org.objectweb.asm.tree.TableSwitchInsnNode": ooat_TableSwitchInsnNode.$clinit(); return ooat_TableSwitchInsnNode;
        case "org.objectweb.asm.tree.LocalVariableNode": ooat_LocalVariableNode.$clinit(); return ooat_LocalVariableNode;
        case "org.objectweb.asm.tree.LocalVariableAnnotationNode": ooat_LocalVariableAnnotationNode.$clinit(); return ooat_LocalVariableAnnotationNode;
        case "org.objectweb.asm.tree.LabelNode": ooat_LabelNode.$clinit(); return ooat_LabelNode;
        case "java.util.stream.intimpl.StringCharsStream": jusi_StringCharsStream.$clinit(); return jusi_StringCharsStream;
        case "java.util.stream.intimpl.SimpleIntStreamImpl": jusi_SimpleIntStreamImpl.$clinit(); return jusi_SimpleIntStreamImpl;
        case "java.util.stream.IntStream": jus_IntStream.$clinit(); return jus_IntStream;
        case "java.util.stream.intimpl.FilteringIntStreamImpl": jusi_FilteringIntStreamImpl.$clinit(); return jusi_FilteringIntStreamImpl;
        case "java.util.stream.intimpl.WrappingIntStreamImpl": jusi_WrappingIntStreamImpl.$clinit(); return jusi_WrappingIntStreamImpl;
        case "java.util.stream.intimpl.CountingIntConsumer": jusi_CountingIntConsumer.$clinit(); return jusi_CountingIntConsumer;
        case "java.util.stream.intimpl.FilteringIntStreamImpl$wrap$lambda$_1_0": jusi_FilteringIntStreamImpl$wrap$lambda$_1_0.$clinit(); return jusi_FilteringIntStreamImpl$wrap$lambda$_1_0;
        default: return null;
    }
},
otp_Platform_getEnumConstants = var$1 => {
    let c = '$$enumConstants$$';
    igbcat_VisibilityType[c] = igbcat_VisibilityType_values;
    jus_Collector$Characteristics[c] = jus_Collector$Characteristics_values;
    igbcat_ClassType[c] = igbcat_ClassType_values;
    otp_Platform_getEnumConstants = cls => {
        if (!cls.hasOwnProperty(c)) {
            return null;
        }
        if (typeof cls[c] === "function") {
            cls[c] = cls[c]();
        }
        return cls[c];
    };
    return otp_Platform_getEnumConstants(var$1);
},
otp_Platform_startThread = var$1 => {
    setTimeout(() => {
        $rt_threadStarter(otp_Platform_launchThread)(var$1);
    }, 0);
},
otp_Platform_launchThread = var$1 => {
    var$1.$run();
},
otp_Platform_postpone = $runnable => {
    otp_Platform_schedule($runnable, 0);
},
otp_Platform_schedule = (var$1, var$2) => {
    setTimeout(() => {
        otp_Platform_launchThread(var$1);
    }, var$2);
},
otp_Platform_createQueueJs$js_body$_30 = () => {
    return [];
};
function jl_Throwable() {
    let a = this; jl_Object.call(a);
    a.$message = null;
    a.$cause = null;
    a.$suppressionEnabled = 0;
    a.$writableStackTrace = 0;
    a.$stackTrace = null;
}
let jl_Throwable__init_ = $this => {
    $this.$suppressionEnabled = 1;
    $this.$writableStackTrace = 1;
},
jl_Throwable__init_6 = () => {
    let var_0 = new jl_Throwable();
    jl_Throwable__init_(var_0);
    return var_0;
},
jl_Throwable__init_0 = ($this, $message) => {
    $this.$suppressionEnabled = 1;
    $this.$writableStackTrace = 1;
    $this.$message = $message;
},
jl_Throwable__init_3 = var_0 => {
    let var_1 = new jl_Throwable();
    jl_Throwable__init_0(var_1, var_0);
    return var_1;
},
jl_Throwable__init_1 = ($this, $message, $cause) => {
    $this.$suppressionEnabled = 1;
    $this.$writableStackTrace = 1;
    $this.$message = $message;
    $this.$cause = $cause;
},
jl_Throwable__init_5 = (var_0, var_1) => {
    let var_2 = new jl_Throwable();
    jl_Throwable__init_1(var_2, var_0, var_1);
    return var_2;
},
jl_Throwable__init_2 = ($this, $cause) => {
    $this.$suppressionEnabled = 1;
    $this.$writableStackTrace = 1;
    $this.$cause = $cause;
},
jl_Throwable__init_4 = var_0 => {
    let var_1 = new jl_Throwable();
    jl_Throwable__init_2(var_1, var_0);
    return var_1;
},
jl_Throwable_fillInStackTrace = $this => {
    return $this;
},
jl_Throwable_getMessage = $this => {
    return $this.$message;
},
jl_Throwable_getLocalizedMessage = $this => {
    return $this.$getMessage();
},
jl_Throwable_getCause = $this => {
    let var$1;
    var$1 = $this.$cause;
    if (var$1 === $this)
        var$1 = null;
    return var$1;
},
jl_Throwable_toString = $this => {
    let $message, var$2, var$3, var$4;
    $message = $this.$getMessage();
    var$2 = jl_Class_getName(jl_Object_getClass($this));
    if ($message === null)
        var$3 = $rt_s(2);
    else {
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(3)), $message);
        var$3 = jl_AbstractStringBuilder_toString(var$3);
    }
    var$4 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$4);
    jl_StringBuilder_append(jl_StringBuilder_append(var$4, var$2), var$3);
    return jl_AbstractStringBuilder_toString(var$4);
},
jl_Throwable_printStackTrace0 = $this => {
    jl_Throwable_printStackTrace($this, jl_System_err());
},
jl_Throwable_printStackTrace = ($this, $stream) => {
    let $message, var$3, var$4, var$5, var$6, $element;
    otcic_JSStderrPrintStream_print($stream, jl_Class_getName(jl_Object_getClass($this)));
    $message = $this.$getMessage();
    if ($message !== null) {
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(3)), $message);
        otcic_JSStderrPrintStream_print($stream, jl_AbstractStringBuilder_toString(var$3));
    }
    a: {
        otcic_JSStderrPrintStream_print($stream, $rt_s(4));
        var$4 = $this.$stackTrace;
        if (var$4 !== null) {
            var$4 = var$4.data;
            var$5 = var$4.length;
            var$6 = 0;
            while (true) {
                if (var$6 >= var$5)
                    break a;
                $element = var$4[var$6];
                otcic_JSStderrPrintStream_print($stream, $rt_s(5));
                otcic_JsConsolePrintStream_println($stream, $element);
                var$6 = var$6 + 1 | 0;
            }
        }
    }
    var$3 = $this.$cause;
    if (var$3 !== null && var$3 !== $this) {
        otcic_JSStderrPrintStream_print($stream, $rt_s(6));
        jl_Throwable_printStackTrace($this.$cause, $stream);
    }
},
jl_Exception = $rt_classWithoutFields(jl_Throwable),
jl_Exception__init_ = ($this, $message) => {
    jl_Throwable__init_0($this, $message);
},
jl_Exception__init_0 = var_0 => {
    let var_1 = new jl_Exception();
    jl_Exception__init_(var_1, var_0);
    return var_1;
},
jl_RuntimeException = $rt_classWithoutFields(jl_Exception),
jl_RuntimeException__init_ = $this => {
    jl_Throwable__init_($this);
},
jl_RuntimeException__init_2 = () => {
    let var_0 = new jl_RuntimeException();
    jl_RuntimeException__init_(var_0);
    return var_0;
},
jl_RuntimeException__init_0 = ($this, $message) => {
    jl_Throwable__init_0($this, $message);
},
jl_RuntimeException__init_1 = var_0 => {
    let var_1 = new jl_RuntimeException();
    jl_RuntimeException__init_0(var_1, var_0);
    return var_1;
},
jl_ClassCastException = $rt_classWithoutFields(jl_RuntimeException),
ji_Serializable = $rt_classWithoutFields(0),
jl_Comparable = $rt_classWithoutFields(0),
jl_CharSequence = $rt_classWithoutFields(0);
function jl_String() {
    jl_Object.call(this);
    this.$hashCode0 = 0;
}
let jl_String_EMPTY_CHARS = null,
jl_String_EMPTY = null,
jl_String_CASE_INSENSITIVE_ORDER = null,
jl_String__init_5 = $this => {
    $this.$nativeString = "";
},
jl_String__init_3 = () => {
    let var_0 = new jl_String();
    jl_String__init_5(var_0);
    return var_0;
},
jl_String__init_2 = ($this, $characters) => {
    $this.$nativeString = $rt_charArrayToString($characters.data, 0, $characters.data.length);
},
jl_String__init_0 = var_0 => {
    let var_1 = new jl_String();
    jl_String__init_2(var_1, var_0);
    return var_1;
},
jl_String__init_6 = (var$0, var$1) => {
    var$0.$nativeString = var$1;
},
jl_String__init_1 = var_0 => {
    let var_1 = new jl_String();
    jl_String__init_6(var_1, var_0);
    return var_1;
},
jl_String__init_4 = (var$0, var$1, $offset, $count) => {
    ju_Objects_checkFromIndexSize($offset, $count, var$1.data.length);
    var$0.$nativeString = $rt_charArrayToString(var$1.data, $offset, $count);
},
jl_String__init_ = (var_0, var_1, var_2) => {
    let var_3 = new jl_String();
    jl_String__init_4(var_3, var_0, var_1, var_2);
    return var_3;
},
jl_String_fromArray = $characters => {
    let $s;
    $s = jl_String__init_3();
    $s.$nativeString = $rt_fullArrayToString($characters.data);
    return $s;
},
jl_String__init_7 = ($this, $bytes) => {
    jl_String_initWithBytes($this, $bytes, 0, $bytes.data.length, jnci_UTF8Charset_INSTANCE);
},
jl_String__init_8 = var_0 => {
    let var_1 = new jl_String();
    jl_String__init_7(var_1, var_0);
    return var_1;
},
jl_String_initWithBytes = ($this, $bytes, $offset, $length, $charset) => {
    let $buffer, var$6, $characters, $$je;
    $buffer = jn_ByteBuffer_wrap0($bytes, $offset, $length);
    a: {
        try {
            $buffer = jnc_CharsetDecoder_decode0(jnc_CharsetDecoder_onUnmappableCharacter(jnc_CharsetDecoder_onMalformedInput($charset.$newDecoder(), jnc_CodingErrorAction_REPLACE), jnc_CodingErrorAction_REPLACE), $buffer);
            break a;
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jnc_CharacterCodingException) {
                $buffer = $$je;
            } else {
                throw $$e;
            }
        }
        var$6 = new jl_AssertionError;
        jl_Throwable__init_1(var$6, $rt_s(7), $buffer);
        $rt_throw(var$6);
    }
    if (!$buffer.$position0 && $buffer.$limit == $buffer.$capacity)
        $characters = $buffer.$array0;
    else {
        $characters = $rt_createCharArray(jn_Buffer_remaining($buffer));
        jn_CharBuffer_get($buffer, $characters, 0, $characters.data.length);
    }
    $this.$nativeString = $rt_fullArrayToString($characters.data);
},
jl_String_charAt = ($this, $index) => {
    let var$2;
    if ($index >= 0 && $index < $this.$nativeString.length)
        return $this.$nativeString.charCodeAt($index);
    var$2 = new jl_StringIndexOutOfBoundsException;
    jl_Throwable__init_(var$2);
    $rt_throw(var$2);
},
jl_String_length = $this => {
    return $this.$nativeString.length;
},
jl_String_isEmpty = $this => {
    return $this.$nativeString.length ? 0 : 1;
},
jl_String_startsWith0 = ($this, $prefix, $toffset) => {
    let $i, var$4, var$5;
    if (($toffset + $prefix.$nativeString.length | 0) > $this.$nativeString.length)
        return 0;
    $i = 0;
    while ($i < $prefix.$nativeString.length) {
        var$4 = jl_String_charAt($prefix, $i);
        var$5 = $toffset + 1 | 0;
        if (var$4 != jl_String_charAt($this, $toffset))
            return 0;
        $i = $i + 1 | 0;
        $toffset = var$5;
    }
    return 1;
},
jl_String_startsWith = ($this, $prefix) => {
    if ($this === $prefix)
        return 1;
    return jl_String_startsWith0($this, $prefix, 0);
},
jl_String_endsWith = ($this, $suffix) => {
    let $j, $i, var$4, var$5;
    if ($this === $suffix)
        return 1;
    if ($suffix.$nativeString.length > $this.$nativeString.length)
        return 0;
    $j = 0;
    $i = $this.$nativeString.length - $suffix.$nativeString.length | 0;
    while ($i < $this.$nativeString.length) {
        var$4 = jl_String_charAt($this, $i);
        var$5 = $j + 1 | 0;
        if (var$4 != jl_String_charAt($suffix, $j))
            return 0;
        $i = $i + 1 | 0;
        $j = var$5;
    }
    return 1;
},
jl_String_indexOf = ($this, $ch, $fromIndex) => {
    let $i, $bmpChar, $hi, $lo;
    $i = jl_Math_max(0, $fromIndex);
    if ($ch < 65536) {
        $bmpChar = $ch & 65535;
        while (true) {
            if ($i >= $this.$nativeString.length)
                return (-1);
            if ($this.$nativeString.charCodeAt($i) == $bmpChar)
                break;
            $i = $i + 1 | 0;
        }
        return $i;
    }
    $hi = jl_Character_highSurrogate($ch);
    $lo = jl_Character_lowSurrogate($ch);
    while (true) {
        if ($i >= ($this.$nativeString.length - 1 | 0))
            return (-1);
        if ($this.$nativeString.charCodeAt($i) == $hi && $this.$nativeString.charCodeAt(($i + 1 | 0)) == $lo)
            break;
        $i = $i + 1 | 0;
    }
    return $i;
},
jl_String_indexOf0 = ($this, $ch) => {
    return jl_String_indexOf($this, $ch, 0);
},
jl_String_lastIndexOf0 = ($this, $ch, $fromIndex) => {
    let $i, $bmpChar, $hi, $lo;
    $i = jl_Math_min($fromIndex, $this.$nativeString.length - 1 | 0);
    if ($ch < 65536) {
        $bmpChar = $ch & 65535;
        while (true) {
            if ($i < 0)
                return (-1);
            if ($this.$nativeString.charCodeAt($i) == $bmpChar)
                break;
            $i = $i + (-1) | 0;
        }
        return $i;
    }
    $hi = jl_Character_highSurrogate($ch);
    $lo = jl_Character_lowSurrogate($ch);
    while (true) {
        if ($i < 1)
            return (-1);
        if ($this.$nativeString.charCodeAt($i) == $lo) {
            $fromIndex = $i - 1 | 0;
            if ($this.$nativeString.charCodeAt($fromIndex) == $hi)
                break;
        }
        $i = $i + (-1) | 0;
    }
    return $fromIndex;
},
jl_String_lastIndexOf = ($this, $ch) => {
    return jl_String_lastIndexOf0($this, $ch, $this.$nativeString.length - 1 | 0);
},
jl_String_indexOf1 = ($this, $str, $fromIndex) => {
    let $i, $toIndex, $j;
    $i = jl_Math_max(0, $fromIndex);
    $toIndex = $this.$nativeString.length - $str.$nativeString.length | 0;
    a: while (true) {
        if ($i > $toIndex)
            return (-1);
        $j = 0;
        while (true) {
            if ($j >= $str.$nativeString.length)
                break a;
            if (jl_String_charAt($this, $i + $j | 0) != jl_String_charAt($str, $j))
                break;
            $j = $j + 1 | 0;
        }
        $i = $i + 1 | 0;
    }
    return $i;
},
jl_String_substring = ($this, $beginIndex, $endIndex) => {
    let $length, var$4, var$5;
    $length = $this.$nativeString.length;
    var$4 = $rt_compare($beginIndex, $endIndex);
    if (!var$4)
        return jl_String_EMPTY;
    if (!$beginIndex && $endIndex == $length)
        return $this;
    if ($beginIndex >= 0 && var$4 <= 0 && $endIndex <= $length)
        return jl_String__init_1($this.$nativeString.substring($beginIndex, $endIndex));
    var$5 = new jl_StringIndexOutOfBoundsException;
    jl_Throwable__init_(var$5);
    $rt_throw(var$5);
},
jl_String_substring0 = ($this, $beginIndex) => {
    return jl_String_substring($this, $beginIndex, $this.$nativeString.length);
},
jl_String_concat = ($this, $str) => {
    let $buffer, var$3, $index, $i, $i_0, var$7;
    if (jl_String_isEmpty($str))
        return $this;
    if (jl_String_isEmpty($this))
        return $str;
    $buffer = $rt_createCharArray($this.$nativeString.length + $str.$nativeString.length | 0);
    var$3 = $buffer.data;
    $index = 0;
    $i = 0;
    while ($i < $this.$nativeString.length) {
        $i_0 = $index + 1 | 0;
        var$3[$index] = jl_String_charAt($this, $i);
        $i = $i + 1 | 0;
        $index = $i_0;
    }
    $i_0 = 0;
    while ($i_0 < $str.$nativeString.length) {
        var$7 = $index + 1 | 0;
        var$3[$index] = jl_String_charAt($str, $i_0);
        $i_0 = $i_0 + 1 | 0;
        $index = var$7;
    }
    return jl_String_fromArray($buffer);
},
jl_String_replace0 = ($this, $oldChar, $newChar) => {
    let $buffer, var$4, $i;
    if ($oldChar == $newChar)
        return $this;
    $buffer = $rt_createCharArray($this.$nativeString.length);
    var$4 = $buffer.data;
    $i = 0;
    while ($i < $this.$nativeString.length) {
        var$4[$i] = jl_String_charAt($this, $i) != $oldChar ? jl_String_charAt($this, $i) : $newChar;
        $i = $i + 1 | 0;
    }
    return jl_String_fromArray($buffer);
},
jl_String_contains = ($this, $s) => {
    let $sz, $i, $j;
    $sz = $this.$nativeString.length - $s.$nativeString.length | 0;
    $i = 0;
    while ($i <= $sz) {
        $j = 0;
        while (true) {
            if ($j >= $s.$nativeString.length)
                return 1;
            if (jl_String_charAt($this, $i + $j | 0) != jl_String_charAt($s, $j))
                break;
            $j = $j + 1 | 0;
        }
        $i = $i + 1 | 0;
    }
    return 0;
},
jl_String_replace = ($this, $target, $replacement) => {
    let $sb, $i, $sz, $i_0, $j;
    if ($target === $replacement)
        return $this;
    if (jl_String_isEmpty($target)) {
        $sb = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($sb);
        $i = 0;
        while ($i < $this.$nativeString.length) {
            jl_StringBuilder_append($sb, $replacement);
            jl_AbstractStringBuilder_append($sb, jl_String_charAt($this, $i));
            $i = $i + 1 | 0;
        }
        jl_StringBuilder_append($sb, $replacement);
        return jl_AbstractStringBuilder_toString($sb);
    }
    if ($target.$nativeString.length == 1 && $replacement.$nativeString.length == 1)
        return jl_String_replace0($this, jl_String_charAt($target, 0), jl_String_charAt($replacement, 0));
    $sb = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($sb);
    $sz = $this.$nativeString.length - $target.$nativeString.length | 0;
    $i_0 = 0;
    while ($i_0 <= $sz) {
        $j = 0;
        a: {
            while (true) {
                if ($j >= $target.$nativeString.length) {
                    jl_StringBuilder_append($sb, $replacement);
                    $i_0 = $i_0 + ($target.$nativeString.length - 1 | 0) | 0;
                    break a;
                }
                if (jl_String_charAt($this, $i_0 + $j | 0) != jl_String_charAt($target, $j))
                    break;
                $j = $j + 1 | 0;
            }
            jl_AbstractStringBuilder_append($sb, jl_String_charAt($this, $i_0));
        }
        $i_0 = $i_0 + 1 | 0;
    }
    jl_StringBuilder_append($sb, jl_String_substring0($this, $i_0));
    return jl_AbstractStringBuilder_toString($sb);
},
jl_String_trim = $this => {
    let $lower, $upper;
    $lower = 0;
    $upper = $this.$nativeString.length - 1 | 0;
    a: {
        while ($lower <= $upper) {
            if (jl_String_charAt($this, $lower) > 32)
                break a;
            $lower = $lower + 1 | 0;
        }
    }
    while ($lower <= $upper && jl_String_charAt($this, $upper) <= 32) {
        $upper = $upper + (-1) | 0;
    }
    return jl_String_substring($this, $lower, $upper + 1 | 0);
},
jl_String_toString = $this => {
    return $this;
},
jl_String_toCharArray = $this => {
    let $array, var$2, $i, var$4;
    $array = $rt_createCharArray($this.$nativeString.length);
    var$2 = $array.data;
    $i = 0;
    var$4 = var$2.length;
    while ($i < var$4) {
        var$2[$i] = jl_String_charAt($this, $i);
        $i = $i + 1 | 0;
    }
    return $array;
},
jl_String_valueOf = $i => {
    let var$2;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    return jl_AbstractStringBuilder_toString(jl_StringBuilder_append0(var$2, $i));
},
jl_String_equals = ($this, $other) => {
    let $str;
    if ($this === $other)
        return 1;
    if (!($other instanceof jl_String))
        return 0;
    $str = $other;
    return $this.$nativeString !== $str.$nativeString ? 0 : 1;
},
jl_String_hashCode = $this => {
    let $i;
    a: {
        if (!$this.$hashCode0) {
            $i = 0;
            while (true) {
                if ($i >= $this.$nativeString.length)
                    break a;
                $this.$hashCode0 = (31 * $this.$hashCode0 | 0) + $this.$nativeString.charCodeAt($i) | 0;
                $i = $i + 1 | 0;
            }
        }
    }
    return $this.$hashCode0;
},
jl_String_split = ($this, $regex) => {
    return jur_Pattern_split(jur_Pattern_compile($regex), $this, 0);
},
jl_String_split0 = ($this, $regex, $limit) => {
    return jur_Pattern_split(jur_Pattern_compile($regex), $this, $limit);
},
jl_String_replaceAll = ($this, $regex, $replacement) => {
    let var$3;
    $regex = jur_Pattern_matcher(jur_Pattern_compile($regex), $this);
    var$3 = new jl_StringBuffer;
    jl_AbstractStringBuilder__init_(var$3);
    jur_Matcher_reset($regex);
    while (jur_Matcher_find($regex)) {
        jur_Matcher_appendReplacement($regex, var$3, $replacement);
    }
    return jl_AbstractStringBuilder_toString(jur_Matcher_appendTail($regex, var$3));
},
jl_String_replaceFirst = ($this, $regex, $replacement) => {
    let var$3;
    $regex = jur_Pattern_matcher(jur_Pattern_compile($regex), $this);
    jur_Matcher_reset($regex);
    if (!jur_Matcher_find($regex))
        $regex = $regex.$string0;
    else {
        var$3 = new jl_StringBuffer;
        jl_AbstractStringBuilder__init_(var$3);
        jur_Matcher_appendReplacement($regex, var$3, $replacement);
        $regex = jl_AbstractStringBuilder_toString(jur_Matcher_appendTail($regex, var$3));
    }
    return $regex;
},
jl_String_join0 = ($delimiter, $elements) => {
    let var$3, $resultLength, $i, $chars, var$7, $index, $firstElement, $j, $element;
    $elements = $elements.data;
    var$3 = $elements.length;
    if (!var$3)
        return jl_String_EMPTY;
    $resultLength = 0;
    $i = 0;
    while ($i < var$3) {
        $resultLength = $resultLength + $elements[$i].$nativeString.length | 0;
        $i = $i + 1 | 0;
    }
    $chars = $rt_createCharArray($resultLength + $rt_imul(var$3 - 1 | 0, $delimiter.$nativeString.length) | 0);
    var$7 = $chars.data;
    $index = 0;
    $firstElement = $elements[0];
    $i = 0;
    while ($i < $firstElement.$nativeString.length) {
        $j = $index + 1 | 0;
        var$7[$index] = jl_String_charAt($firstElement, $i);
        $i = $i + 1 | 0;
        $index = $j;
    }
    $i = 1;
    while ($i < var$3) {
        $j = 0;
        while ($j < $delimiter.$nativeString.length) {
            $resultLength = $index + 1 | 0;
            var$7[$index] = jl_String_charAt($delimiter, $j);
            $j = $j + 1 | 0;
            $index = $resultLength;
        }
        $element = $elements[$i];
        $j = 0;
        while ($j < $element.$nativeString.length) {
            $resultLength = $index + 1 | 0;
            var$7[$index] = jl_String_charAt($element, $j);
            $j = $j + 1 | 0;
            $index = $resultLength;
        }
        $i = $i + 1 | 0;
    }
    return jl_String_fromArray($chars);
},
jl_String_join = ($delimiter, $elements) => {
    let $iter, $sb;
    $iter = ju_AbstractList_iterator($elements);
    if (!ju_AbstractList$1_hasNext($iter))
        return $rt_s(2);
    $sb = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($sb);
    jl_AbstractStringBuilder_append1($sb, ju_AbstractList$1_next($iter));
    while (ju_AbstractList$1_hasNext($iter)) {
        jl_AbstractStringBuilder_append1($sb, $delimiter);
        jl_AbstractStringBuilder_append1($sb, ju_AbstractList$1_next($iter));
    }
    return jl_AbstractStringBuilder_toString($sb);
},
jl_String_repeat = ($this, $count) => {
    let var$2, $chars, var$4, $j, $i, var$7, var$8;
    if ($count < 0) {
        var$2 = new jl_IllegalArgumentException;
        jl_Throwable__init_(var$2);
        $rt_throw(var$2);
    }
    if ($count == 1)
        return $this;
    if ($this.$nativeString.length && $count) {
        $chars = $rt_createCharArray($rt_imul($this.$nativeString.length, $count));
        var$4 = $chars.data;
        $j = 0;
        $i = 0;
        a: {
            while ($i < $count) {
                var$7 = $this.$nativeString.length;
                if (0 > var$7)
                    break a;
                if (var$7 > $this.$nativeString.length)
                    break a;
                if ($j < 0)
                    break a;
                var$8 = var$7 - 0 | 0;
                if (($j + var$8 | 0) > var$4.length)
                    break a;
                $rt_stringToCharArray($this.$nativeString, 0, $chars.data, $j, var$8);
                $j = $j + $this.$nativeString.length | 0;
                $i = $i + 1 | 0;
            }
            return jl_String_fromArray($chars);
        }
        var$2 = new jl_IndexOutOfBoundsException;
        jl_Throwable__init_(var$2);
        $rt_throw(var$2);
    }
    return jl_String_EMPTY;
},
jl_String__clinit_ = () => {
    jl_String_EMPTY_CHARS = $rt_createCharArray(0);
    jl_String_EMPTY = jl_String__init_3();
    jl_String_CASE_INSENSITIVE_ORDER = new jl_String$_clinit_$lambda$_115_0;
},
jl_Number = $rt_classWithoutFields();
function jl_Integer() {
    jl_Number.call(this);
    this.$value0 = 0;
}
let jl_Integer_TYPE = null,
jl_Integer_integerCache = null,
jl_Integer__init_0 = ($this, $value) => {
    $this.$value0 = $value;
},
jl_Integer__init_ = var_0 => {
    let var_1 = new jl_Integer();
    jl_Integer__init_0(var_1, var_0);
    return var_1;
},
jl_Integer_toString = $i => {
    return (jl_AbstractStringBuilder_append4(jl_AbstractStringBuilder__init_1(20), $i, 10)).$toString();
},
jl_Integer_parseInt = ($s, $radix) => {
    if ($s !== null)
        return jl_Integer_parseIntImpl($s, 0, $s.$nativeString.length, $radix);
    $s = new jl_NumberFormatException;
    jl_Throwable__init_0($s, $rt_s(8));
    $rt_throw($s);
},
jl_Integer_parseIntImpl = ($s, $beginIndex, $endIndex, $radix) => {
    let $negative, $digit, $value, $maxValue, var$9, var$10, var$11, var$12;
    if ($beginIndex == $endIndex) {
        $s = new jl_NumberFormatException;
        jl_Throwable__init_0($s, $rt_s(9));
        $rt_throw($s);
    }
    if ($radix >= 2 && $radix <= 36) {
        a: {
            $negative = 0;
            switch (jl_String_charAt($s, $beginIndex)) {
                case 43:
                    $digit = $beginIndex + 1 | 0;
                    break a;
                case 45:
                    $negative = 1;
                    $digit = $beginIndex + 1 | 0;
                    break a;
                default:
            }
            $digit = $beginIndex;
        }
        $value = 0;
        $maxValue = 1 + (2147483647 / $radix | 0) | 0;
        if ($digit == $endIndex) {
            $s = new jl_NumberFormatException;
            jl_Throwable__init_($s);
            $rt_throw($s);
        }
        while ($digit < $endIndex) {
            var$9 = $digit + 1 | 0;
            $digit = jl_String_charAt($s, $digit);
            $digit = $digit >= 48 && $digit <= 57 ? $digit - 48 | 0 : $digit >= 97 && $digit <= 122 ? ($digit - 97 | 0) + 10 | 0 : $digit >= 65 && $digit <= 90 ? ($digit - 65 | 0) + 10 | 0 : (-1);
            if ($digit < 0) {
                var$10 = new jl_NumberFormatException;
                var$11 = jl_String_substring($s, $beginIndex, $endIndex);
                $s = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_($s);
                jl_StringBuilder_append(jl_StringBuilder_append($s, $rt_s(10)), var$11);
                jl_Throwable__init_0(var$10, jl_AbstractStringBuilder_toString($s));
                $rt_throw(var$10);
            }
            if ($digit >= $radix) {
                var$10 = new jl_NumberFormatException;
                var$11 = jl_String_substring($s, $beginIndex, $endIndex);
                $s = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_($s);
                jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append($s, $rt_s(11)), $radix), $rt_s(3)), var$11);
                jl_Throwable__init_0(var$10, jl_AbstractStringBuilder_toString($s));
                $rt_throw(var$10);
            }
            if ($value > $maxValue) {
                $s = new jl_NumberFormatException;
                jl_Throwable__init_0($s, $rt_s(12));
                $rt_throw($s);
            }
            $value = $rt_imul($radix, $value) + $digit | 0;
            if ($value < 0) {
                if (var$9 == $endIndex && $value == (-2147483648) && $negative)
                    return (-2147483648);
                var$10 = new jl_NumberFormatException;
                var$11 = jl_String_substring($s, $beginIndex, $endIndex);
                $s = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_($s);
                jl_StringBuilder_append(jl_StringBuilder_append($s, $rt_s(13)), var$11);
                jl_Throwable__init_0(var$10, jl_AbstractStringBuilder_toString($s));
                $rt_throw(var$10);
            }
            $digit = var$9;
        }
        if ($negative)
            $value =  -$value | 0;
        return $value;
    }
    var$12 = new jl_NumberFormatException;
    $s = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($s);
    jl_StringBuilder_append0(jl_StringBuilder_append($s, $rt_s(14)), $radix);
    jl_Throwable__init_0(var$12, jl_AbstractStringBuilder_toString($s));
    $rt_throw(var$12);
},
jl_Integer_parseInt0 = $s => {
    return jl_Integer_parseInt($s, 10);
},
jl_Integer_valueOf = $i => {
    let var$2, var$3;
    if ($i >= (-128) && $i <= 127) {
        a: {
            if (jl_Integer_integerCache === null) {
                jl_Integer_integerCache = $rt_createArray(jl_Integer, 256);
                var$2 = 0;
                while (true) {
                    var$3 = jl_Integer_integerCache.data;
                    if (var$2 >= var$3.length)
                        break a;
                    var$3[var$2] = jl_Integer__init_(var$2 - 128 | 0);
                    var$2 = var$2 + 1 | 0;
                }
            }
        }
        return jl_Integer_integerCache.data[$i + 128 | 0];
    }
    return jl_Integer__init_($i);
},
jl_Integer_toString0 = $this => {
    return jl_Integer_toString($this.$value0);
},
jl_Integer_equals = ($this, $other) => {
    if ($this === $other)
        return 1;
    return $other instanceof jl_Integer && $other.$value0 == $this.$value0 ? 1 : 0;
},
jl_Integer_numberOfLeadingZeros = $i => {
    let $n, var$3;
    if (!$i)
        return 32;
    $n = 0;
    var$3 = $i >>> 16 | 0;
    if (var$3)
        $n = 16;
    else
        var$3 = $i;
    $i = var$3 >>> 8 | 0;
    if (!$i)
        $i = var$3;
    else
        $n = $n | 8;
    var$3 = $i >>> 4 | 0;
    if (!var$3)
        var$3 = $i;
    else
        $n = $n | 4;
    $i = var$3 >>> 2 | 0;
    if (!$i)
        $i = var$3;
    else
        $n = $n | 2;
    if ($i >>> 1 | 0)
        $n = $n | 1;
    return (32 - $n | 0) - 1 | 0;
},
jl_Integer_numberOfTrailingZeros = $i => {
    let $n, var$3;
    if (!$i)
        return 32;
    $n = 0;
    var$3 = $i << 16;
    if (var$3)
        $n = 16;
    else
        var$3 = $i;
    $i = var$3 << 8;
    if (!$i)
        $i = var$3;
    else
        $n = $n | 8;
    var$3 = $i << 4;
    if (!var$3)
        var$3 = $i;
    else
        $n = $n | 4;
    $i = var$3 << 2;
    if (!$i)
        $i = var$3;
    else
        $n = $n | 2;
    if ($i << 1)
        $n = $n | 1;
    return (32 - $n | 0) - 1 | 0;
},
jl_Integer__clinit_ = () => {
    jl_Integer_TYPE = $rt_cls($rt_intcls);
};
function jl_AbstractStringBuilder() {
    let a = this; jl_Object.call(a);
    a.$buffer = null;
    a.$length0 = 0;
}
let jl_AbstractStringBuilder__init_ = $this => {
    jl_AbstractStringBuilder__init_0($this, 16);
},
jl_AbstractStringBuilder__init_2 = () => {
    let var_0 = new jl_AbstractStringBuilder();
    jl_AbstractStringBuilder__init_(var_0);
    return var_0;
},
jl_AbstractStringBuilder__init_0 = ($this, $capacity) => {
    $this.$buffer = $rt_createCharArray($capacity);
},
jl_AbstractStringBuilder__init_1 = var_0 => {
    let var_1 = new jl_AbstractStringBuilder();
    jl_AbstractStringBuilder__init_0(var_1, var_0);
    return var_1;
},
jl_AbstractStringBuilder_append0 = ($this, $string) => {
    return $this.$insert($this.$length0, $string);
},
jl_AbstractStringBuilder_insert0 = ($this, $index, $string) => {
    let $i, $i_0, var$5, var$6;
    if ($index >= 0 && $index <= $this.$length0) {
        if ($string === null)
            $string = $rt_s(15);
        else if (jl_String_isEmpty($string))
            return $this;
        $this.$ensureCapacity($this.$length0 + $string.$nativeString.length | 0);
        $i = $this.$length0 - 1 | 0;
        while ($i >= $index) {
            $this.$buffer.data[$i + $string.$nativeString.length | 0] = $this.$buffer.data[$i];
            $i = $i + (-1) | 0;
        }
        $this.$length0 = $this.$length0 + $string.$nativeString.length | 0;
        $i_0 = 0;
        while ($i_0 < $string.$nativeString.length) {
            var$5 = $this.$buffer.data;
            var$6 = $index + 1 | 0;
            var$5[$index] = jl_String_charAt($string, $i_0);
            $i_0 = $i_0 + 1 | 0;
            $index = var$6;
        }
        return $this;
    }
    $string = new jl_StringIndexOutOfBoundsException;
    jl_Throwable__init_($string);
    $rt_throw($string);
},
jl_AbstractStringBuilder_append4 = ($this, $value, $radix) => {
    return jl_AbstractStringBuilder_insert4($this, $this.$length0, $value, $radix);
},
jl_AbstractStringBuilder_insert4 = ($this, $target, $value, $radix) => {
    let $positive, var$5, var$6, $pos, $sz, $posLimit, var$10;
    $positive = 1;
    if ($value < 0) {
        $positive = 0;
        $value =  -$value | 0;
    }
    a: {
        if ($rt_ucmp($value, $radix) < 0) {
            if ($positive)
                jl_AbstractStringBuilder_insertSpace($this, $target, $target + 1 | 0);
            else {
                jl_AbstractStringBuilder_insertSpace($this, $target, $target + 2 | 0);
                var$5 = $this.$buffer.data;
                var$6 = $target + 1 | 0;
                var$5[$target] = 45;
                $target = var$6;
            }
            $this.$buffer.data[$target] = jl_Character_forDigit($value, $radix);
        } else {
            $pos = 1;
            $sz = 1;
            $posLimit = $rt_udiv((-1), $radix);
            b: {
                while (true) {
                    var$10 = $rt_imul($pos, $radix);
                    if ($rt_ucmp(var$10, $value) > 0) {
                        var$10 = $pos;
                        break b;
                    }
                    $sz = $sz + 1 | 0;
                    if ($rt_ucmp(var$10, $posLimit) > 0)
                        break;
                    $pos = var$10;
                }
            }
            if (!$positive)
                $sz = $sz + 1 | 0;
            jl_AbstractStringBuilder_insertSpace($this, $target, $target + $sz | 0);
            if ($positive)
                $positive = $target;
            else {
                var$5 = $this.$buffer.data;
                $positive = $target + 1 | 0;
                var$5[$target] = 45;
            }
            while (true) {
                if (!var$10)
                    break a;
                var$5 = $this.$buffer.data;
                $target = $positive + 1 | 0;
                var$5[$positive] = jl_Character_forDigit($rt_udiv($value, var$10), $radix);
                $value = $rt_umod($value, var$10);
                var$10 = $rt_udiv(var$10, $radix);
                $positive = $target;
            }
        }
    }
    return $this;
},
jl_AbstractStringBuilder_insert5 = ($this, $target, $value) => {
    let $mantissa, var$4, $number, $exp, $negative, $intPart, $sz, $digits, $zeros, $leadingZeros, $leadingZero, $pos, $intDigit, $i;
    $mantissa = $rt_compare($value, 0.0);
    if (!$mantissa) {
        if (1.0 / $value === Infinity) {
            jl_AbstractStringBuilder_insertSpace($this, $target, $target + 3 | 0);
            var$4 = $this.$buffer.data;
            $mantissa = $target + 1 | 0;
            var$4[$target] = 48;
            $target = $mantissa + 1 | 0;
            var$4[$mantissa] = 46;
            var$4[$target] = 48;
            return $this;
        }
        jl_AbstractStringBuilder_insertSpace($this, $target, $target + 4 | 0);
        var$4 = $this.$buffer.data;
        $mantissa = $target + 1 | 0;
        var$4[$target] = 45;
        $target = $mantissa + 1 | 0;
        var$4[$mantissa] = 48;
        $mantissa = $target + 1 | 0;
        var$4[$target] = 46;
        var$4[$mantissa] = 48;
        return $this;
    }
    if (isNaN($value) ? 1 : 0) {
        jl_AbstractStringBuilder_insertSpace($this, $target, $target + 3 | 0);
        var$4 = $this.$buffer.data;
        $mantissa = $target + 1 | 0;
        var$4[$target] = 78;
        $target = $mantissa + 1 | 0;
        var$4[$mantissa] = 97;
        var$4[$target] = 78;
        return $this;
    }
    if (!isFinite($value) ? 1 : 0) {
        if ($mantissa > 0) {
            jl_AbstractStringBuilder_insertSpace($this, $target, $target + 8 | 0);
            $mantissa = $target;
        } else {
            jl_AbstractStringBuilder_insertSpace($this, $target, $target + 9 | 0);
            var$4 = $this.$buffer.data;
            $mantissa = $target + 1 | 0;
            var$4[$target] = 45;
        }
        var$4 = $this.$buffer.data;
        $target = $mantissa + 1 | 0;
        var$4[$mantissa] = 73;
        $mantissa = $target + 1 | 0;
        var$4[$target] = 110;
        $target = $mantissa + 1 | 0;
        var$4[$mantissa] = 102;
        $mantissa = $target + 1 | 0;
        var$4[$target] = 105;
        $target = $mantissa + 1 | 0;
        var$4[$mantissa] = 110;
        $mantissa = $target + 1 | 0;
        var$4[$target] = 105;
        $target = $mantissa + 1 | 0;
        var$4[$mantissa] = 116;
        var$4[$target] = 121;
        return $this;
    }
    $number = jl_AbstractStringBuilder$Constants_floatAnalysisResult;
    otcit_FloatAnalyzer_analyze($value, $number);
    $mantissa = $number.$mantissa;
    $exp = $number.$exponent0;
    $negative = $number.$sign0;
    $intPart = 1;
    $sz = 1;
    if ($negative)
        $sz = 2;
    $digits = 9;
    $zeros = jl_AbstractStringBuilder_trailingDecimalZeros0($mantissa);
    if ($zeros > 0)
        $digits = $digits - $zeros | 0;
    $leadingZeros = 0;
    $leadingZero = 0;
    if ($exp < 7 && $exp >= (-3)) {
        if ($exp >= 0) {
            $intPart = $exp + 1 | 0;
            $digits = jl_Math_max($digits, $intPart + 1 | 0);
            $exp = 0;
        } else {
            $intPart = 0;
            $leadingZeros = ( -$exp | 0) - 1 | 0;
            $leadingZero = 1;
            $sz = $sz + 1 | 0;
            $exp = 0;
        }
    }
    if ($exp) {
        $sz = $sz + 2 | 0;
        if (!($exp > (-10) && $exp < 10))
            $sz = $sz + 1 | 0;
        if ($exp < 0)
            $sz = $sz + 1 | 0;
    }
    if ($exp && $digits == $intPart)
        $digits = $digits + 1 | 0;
    jl_AbstractStringBuilder_insertSpace($this, $target, $target + ($sz + ($digits + $leadingZeros | 0) | 0) | 0);
    if (!$negative)
        $negative = $target;
    else {
        var$4 = $this.$buffer.data;
        $negative = $target + 1 | 0;
        var$4[$target] = 45;
    }
    $pos = 100000000;
    if ($leadingZero) {
        var$4 = $this.$buffer.data;
        $target = $negative + 1 | 0;
        var$4[$negative] = 48;
        $negative = $target + 1 | 0;
        var$4[$target] = 46;
        while (true) {
            $target = $leadingZeros + (-1) | 0;
            if ($leadingZeros <= 0)
                break;
            $intDigit = $negative + 1 | 0;
            var$4[$negative] = 48;
            $leadingZeros = $target;
            $negative = $intDigit;
        }
    }
    $i = 0;
    while ($i < $digits) {
        if ($pos <= 0)
            $intDigit = 0;
        else {
            $intDigit = $mantissa / $pos | 0;
            $mantissa = $mantissa % $pos | 0;
        }
        var$4 = $this.$buffer.data;
        $target = $negative + 1 | 0;
        var$4[$negative] = (48 + $intDigit | 0) & 65535;
        $intPart = $intPart + (-1) | 0;
        if ($intPart)
            $negative = $target;
        else {
            $negative = $target + 1 | 0;
            var$4[$target] = 46;
        }
        $pos = $pos / 10 | 0;
        $i = $i + 1 | 0;
    }
    if ($exp) {
        var$4 = $this.$buffer.data;
        $target = $negative + 1 | 0;
        var$4[$negative] = 69;
        if ($exp >= 0)
            $mantissa = $target;
        else {
            $exp =  -$exp | 0;
            $mantissa = $target + 1 | 0;
            var$4[$target] = 45;
        }
        if ($exp < 10)
            $intDigit = $mantissa;
        else {
            $intDigit = $mantissa + 1 | 0;
            var$4[$mantissa] = (48 + ($exp / 10 | 0) | 0) & 65535;
        }
        var$4[$intDigit] = (48 + ($exp % 10 | 0) | 0) & 65535;
    }
    return $this;
},
jl_AbstractStringBuilder_insert3 = ($this, $target, $value) => {
    let $intDigit, var$4, $number, $mantissa, $exp, $negative, $intPart, $sz, $digits, $zeros, $leadingZeros, $leadingZero, $pos, $i;
    $intDigit = $rt_compare($value, 0.0);
    if (!$intDigit) {
        if (1.0 / $value === Infinity) {
            jl_AbstractStringBuilder_insertSpace($this, $target, $target + 3 | 0);
            var$4 = $this.$buffer.data;
            $intDigit = $target + 1 | 0;
            var$4[$target] = 48;
            $target = $intDigit + 1 | 0;
            var$4[$intDigit] = 46;
            var$4[$target] = 48;
            return $this;
        }
        jl_AbstractStringBuilder_insertSpace($this, $target, $target + 4 | 0);
        var$4 = $this.$buffer.data;
        $intDigit = $target + 1 | 0;
        var$4[$target] = 45;
        $target = $intDigit + 1 | 0;
        var$4[$intDigit] = 48;
        $intDigit = $target + 1 | 0;
        var$4[$target] = 46;
        var$4[$intDigit] = 48;
        return $this;
    }
    if (isNaN($value) ? 1 : 0) {
        jl_AbstractStringBuilder_insertSpace($this, $target, $target + 3 | 0);
        var$4 = $this.$buffer.data;
        $intDigit = $target + 1 | 0;
        var$4[$target] = 78;
        $target = $intDigit + 1 | 0;
        var$4[$intDigit] = 97;
        var$4[$target] = 78;
        return $this;
    }
    if (!isFinite($value) ? 1 : 0) {
        if ($intDigit > 0) {
            jl_AbstractStringBuilder_insertSpace($this, $target, $target + 8 | 0);
            $intDigit = $target;
        } else {
            jl_AbstractStringBuilder_insertSpace($this, $target, $target + 9 | 0);
            var$4 = $this.$buffer.data;
            $intDigit = $target + 1 | 0;
            var$4[$target] = 45;
        }
        var$4 = $this.$buffer.data;
        $target = $intDigit + 1 | 0;
        var$4[$intDigit] = 73;
        $intDigit = $target + 1 | 0;
        var$4[$target] = 110;
        $target = $intDigit + 1 | 0;
        var$4[$intDigit] = 102;
        $intDigit = $target + 1 | 0;
        var$4[$target] = 105;
        $target = $intDigit + 1 | 0;
        var$4[$intDigit] = 110;
        $intDigit = $target + 1 | 0;
        var$4[$target] = 105;
        $target = $intDigit + 1 | 0;
        var$4[$intDigit] = 116;
        var$4[$target] = 121;
        return $this;
    }
    $number = jl_AbstractStringBuilder$Constants_doubleAnalysisResult;
    otcit_DoubleAnalyzer_analyze($value, $number);
    $mantissa = $number.$mantissa0;
    $exp = $number.$exponent;
    $negative = $number.$sign;
    $intPart = 1;
    $sz = 1;
    if ($negative)
        $sz = 2;
    $digits = 18;
    $zeros = jl_AbstractStringBuilder_trailingDecimalZeros($mantissa);
    if ($zeros > 0)
        $digits = $digits - $zeros | 0;
    $leadingZeros = 0;
    $leadingZero = 0;
    if ($exp < 7 && $exp >= (-3)) {
        if ($exp >= 0) {
            $intPart = $exp + 1 | 0;
            $digits = jl_Math_max($digits, $intPart + 1 | 0);
            $exp = 0;
        } else {
            $intPart = 0;
            $leadingZeros = ( -$exp | 0) - 1 | 0;
            $leadingZero = 1;
            $sz = $sz + 1 | 0;
            $exp = 0;
        }
    }
    if ($exp) {
        $sz = $sz + 2 | 0;
        if (!($exp > (-10) && $exp < 10))
            $sz = $sz + 1 | 0;
        if (!($exp > (-100) && $exp < 100))
            $sz = $sz + 1 | 0;
        if ($exp < 0)
            $sz = $sz + 1 | 0;
    }
    if ($exp && $digits == $intPart)
        $digits = $digits + 1 | 0;
    jl_AbstractStringBuilder_insertSpace($this, $target, $target + ($sz + ($digits + $leadingZeros | 0) | 0) | 0);
    if (!$negative)
        $sz = $target;
    else {
        var$4 = $this.$buffer.data;
        $sz = $target + 1 | 0;
        var$4[$target] = 45;
    }
    $pos = Long_create(1569325056, 23283064);
    if ($leadingZero) {
        var$4 = $this.$buffer.data;
        $target = $sz + 1 | 0;
        var$4[$sz] = 48;
        $sz = $target + 1 | 0;
        var$4[$target] = 46;
        while (true) {
            $target = $leadingZeros + (-1) | 0;
            if ($leadingZeros <= 0)
                break;
            $intDigit = $sz + 1 | 0;
            var$4[$sz] = 48;
            $leadingZeros = $target;
            $sz = $intDigit;
        }
    }
    $i = 0;
    while ($i < $digits) {
        if (Long_le($pos, Long_ZERO))
            $intDigit = 0;
        else {
            $intDigit = Long_lo(Long_div($mantissa, $pos));
            $mantissa = Long_rem($mantissa, $pos);
        }
        var$4 = $this.$buffer.data;
        $target = $sz + 1 | 0;
        var$4[$sz] = (48 + $intDigit | 0) & 65535;
        $intPart = $intPart + (-1) | 0;
        if ($intPart)
            $sz = $target;
        else {
            $sz = $target + 1 | 0;
            var$4[$target] = 46;
        }
        $pos = Long_div($pos, Long_fromInt(10));
        $i = $i + 1 | 0;
    }
    if ($exp) {
        var$4 = $this.$buffer.data;
        $negative = $sz + 1 | 0;
        var$4[$sz] = 69;
        if ($exp >= 0)
            $intDigit = $negative;
        else {
            $exp =  -$exp | 0;
            $intDigit = $negative + 1 | 0;
            var$4[$negative] = 45;
        }
        if ($exp >= 100) {
            $target = $intDigit + 1 | 0;
            var$4[$intDigit] = (48 + ($exp / 100 | 0) | 0) & 65535;
            $exp = $exp % 100 | 0;
            $negative = $target + 1 | 0;
            var$4[$target] = (48 + ($exp / 10 | 0) | 0) & 65535;
        } else if ($exp < 10)
            $negative = $intDigit;
        else {
            $negative = $intDigit + 1 | 0;
            var$4[$intDigit] = (48 + ($exp / 10 | 0) | 0) & 65535;
        }
        var$4[$negative] = (48 + ($exp % 10 | 0) | 0) & 65535;
    }
    return $this;
},
jl_AbstractStringBuilder_trailingDecimalZeros0 = $n => {
    let $result, $zeros, var$4;
    if (!($n % 1000000000 | 0))
        return 9;
    $result = 0;
    $zeros = 1;
    if (!($n % 100000000 | 0)) {
        $result = 8;
        $zeros = 100000000;
    }
    var$4 = $zeros * 10000 | 0;
    if ($n % var$4 | 0)
        var$4 = $zeros;
    else
        $result = $result | 4;
    $zeros = var$4 * 100 | 0;
    if ($n % $zeros | 0)
        $zeros = var$4;
    else
        $result = $result | 2;
    if (!($n % ($zeros * 10 | 0) | 0))
        $result = $result | 1;
    return $result;
},
jl_AbstractStringBuilder_trailingDecimalZeros = $n => {
    let $zeros, $result, $bit, var$5, $i;
    $zeros = Long_fromInt(1);
    $result = 0;
    $bit = 16;
    var$5 = jl_AbstractStringBuilder$Constants_longLogPowersOfTen.data;
    $i = var$5.length - 1 | 0;
    while ($i >= 0) {
        if (Long_eq(Long_rem($n, Long_mul($zeros, var$5[$i])), Long_ZERO)) {
            $result = $result | $bit;
            $zeros = Long_mul($zeros, var$5[$i]);
        }
        $bit = $bit >>> 1 | 0;
        $i = $i + (-1) | 0;
    }
    return $result;
},
jl_AbstractStringBuilder_append = ($this, $c) => {
    return $this.$insert1($this.$length0, $c);
},
jl_AbstractStringBuilder_insert2 = ($this, $index, $c) => {
    jl_AbstractStringBuilder_insertSpace($this, $index, $index + 1 | 0);
    $this.$buffer.data[$index] = $c;
    return $this;
},
jl_AbstractStringBuilder_ensureCapacity = ($this, $capacity) => {
    let var$2, $newLength;
    var$2 = $this.$buffer.data.length;
    if (var$2 >= $capacity)
        return;
    $newLength = var$2 >= 1073741823 ? 2147483647 : jl_Math_max($capacity, jl_Math_max(var$2 * 2 | 0, 5));
    $this.$buffer = ju_Arrays_copyOf1($this.$buffer, $newLength);
},
jl_AbstractStringBuilder_toString = $this => {
    return jl_String__init_($this.$buffer, 0, $this.$length0);
},
jl_AbstractStringBuilder_append2 = ($this, $s, $start, $end) => {
    return $this.$insert2($this.$length0, $s, $start, $end);
},
jl_AbstractStringBuilder_insert = ($this, $index, $s, $i, $end) => {
    let var$5, var$6;
    if ($i <= $end && $end <= $s.$nativeString.length && $i >= 0) {
        jl_AbstractStringBuilder_insertSpace($this, $index, ($index + $end | 0) - $i | 0);
        while ($i < $end) {
            var$5 = $this.$buffer.data;
            var$6 = $index + 1 | 0;
            var$5[$index] = jl_String_charAt($s, $i);
            $i = $i + 1 | 0;
            $index = var$6;
        }
        return $this;
    }
    $s = new jl_IndexOutOfBoundsException;
    jl_Throwable__init_($s);
    $rt_throw($s);
},
jl_AbstractStringBuilder_append1 = ($this, $s) => {
    return $this.$append4($s, 0, $s.$nativeString.length);
},
jl_AbstractStringBuilder_append5 = ($this, $chars, $offset, $len) => {
    return $this.$insert3($this.$length0, $chars, $offset, $len);
},
jl_AbstractStringBuilder_insert1 = ($this, $index, $chars, $offset, $len) => {
    let var$5, var$6, var$7, var$8;
    jl_AbstractStringBuilder_insertSpace($this, $index, $index + $len | 0);
    var$5 = $len + $offset | 0;
    while ($offset < var$5) {
        var$6 = $chars.data;
        var$7 = $this.$buffer.data;
        $len = $index + 1 | 0;
        var$8 = $offset + 1 | 0;
        var$7[$index] = var$6[$offset];
        $index = $len;
        $offset = var$8;
    }
    return $this;
},
jl_AbstractStringBuilder_append3 = ($this, $chars) => {
    return $this.$append5($chars, 0, $chars.data.length);
},
jl_AbstractStringBuilder_insertSpace = ($this, $start, $end) => {
    let var$3, $sz, $i, var$6;
    var$3 = $this.$length0;
    $sz = var$3 - $start | 0;
    $this.$ensureCapacity((var$3 + $end | 0) - $start | 0);
    $i = $sz - 1 | 0;
    while ($i >= 0) {
        var$6 = $this.$buffer.data;
        var$6[$end + $i | 0] = var$6[$start + $i | 0];
        $i = $i + (-1) | 0;
    }
    $this.$length0 = $this.$length0 + ($end - $start | 0) | 0;
},
jl_Appendable = $rt_classWithoutFields(0),
jl_StringBuilder = $rt_classWithoutFields(jl_AbstractStringBuilder),
jl_StringBuilder__init_2 = $this => {
    jl_AbstractStringBuilder__init_($this);
},
jl_StringBuilder__init_0 = () => {
    let var_0 = new jl_StringBuilder();
    jl_StringBuilder__init_2(var_0);
    return var_0;
},
jl_StringBuilder__init_1 = ($this, $value) => {
    let var$2, var$3;
    $this.$buffer = $rt_createCharArray($value.$nativeString.length);
    var$2 = 0;
    while (true) {
        var$3 = $this.$buffer.data;
        if (var$2 >= var$3.length)
            break;
        var$3[var$2] = jl_String_charAt($value, var$2);
        var$2 = var$2 + 1 | 0;
    }
    $this.$length0 = $value.$nativeString.length;
},
jl_StringBuilder__init_ = var_0 => {
    let var_1 = new jl_StringBuilder();
    jl_StringBuilder__init_1(var_1, var_0);
    return var_1;
},
jl_StringBuilder_append = ($this, $obj) => {
    jl_AbstractStringBuilder_insert0($this, $this.$length0, $obj === null ? $rt_s(15) : $obj.$toString());
    return $this;
},
jl_StringBuilder_append2 = ($this, $string) => {
    jl_AbstractStringBuilder_append0($this, $string);
    return $this;
},
jl_StringBuilder_append0 = ($this, $value) => {
    jl_AbstractStringBuilder_append4($this, $value, 10);
    return $this;
},
jl_StringBuilder_append1 = ($this, $value) => {
    jl_AbstractStringBuilder_insert5($this, $this.$length0, $value);
    return $this;
},
jl_StringBuilder_append5 = ($this, $s) => {
    jl_AbstractStringBuilder_append1($this, $s);
    return $this;
},
jl_StringBuilder_insert = ($this, $index, $s) => {
    jl_AbstractStringBuilder_insert($this, $index, $s, 0, $s.$nativeString.length);
    return $this;
},
jl_StringBuilder_delete = ($this, $start, $end) => {
    let var$3, var$4, var$5, var$6, var$7, var$8;
    if ($start >= 0) {
        var$3 = $rt_compare($start, $end);
        if (var$3 <= 0) {
            var$4 = $this.$length0;
            if ($start <= var$4) {
                if (var$3) {
                    if ($end > var$4)
                        $end = var$4;
                    var$5 = var$4 - $end | 0;
                    $this.$length0 = var$4 - ($end - $start | 0) | 0;
                    var$4 = 0;
                    while (var$4 < var$5) {
                        var$6 = $this.$buffer.data;
                        var$3 = $start + 1 | 0;
                        var$7 = $end + 1 | 0;
                        var$6[$start] = var$6[$end];
                        var$4 = var$4 + 1 | 0;
                        $start = var$3;
                        $end = var$7;
                    }
                }
                return $this;
            }
        }
    }
    var$8 = new jl_StringIndexOutOfBoundsException;
    jl_Throwable__init_(var$8);
    $rt_throw(var$8);
},
jl_StringBuilder_deleteCharAt = ($this, $index) => {
    let var$2, var$3, var$4, var$5;
    if ($index >= 0) {
        var$2 = $this.$length0;
        if ($index < var$2) {
            var$2 = var$2 - 1 | 0;
            $this.$length0 = var$2;
            while ($index < var$2) {
                var$3 = $this.$buffer.data;
                var$4 = $index + 1 | 0;
                var$3[$index] = var$3[var$4];
                $index = var$4;
            }
            return $this;
        }
    }
    var$5 = new jl_StringIndexOutOfBoundsException;
    jl_Throwable__init_(var$5);
    $rt_throw(var$5);
},
jl_StringBuilder_substring = ($this, var$1, var$2) => {
    let var$3;
    if (var$1 <= var$2 && var$1 >= 0 && var$2 <= $this.$length0)
        return jl_String__init_($this.$buffer, var$1, var$2 - var$1 | 0);
    var$3 = new jl_IndexOutOfBoundsException;
    jl_Throwable__init_(var$3);
    $rt_throw(var$3);
},
jl_StringBuilder_subSequence = ($this, var$1, var$2) => {
    return jl_StringBuilder_substring($this, var$1, var$2);
},
jl_StringBuilder_insert0 = ($this, var$1, var$2, var$3, var$4) => {
    jl_AbstractStringBuilder_insert1($this, var$1, var$2, var$3, var$4);
    return $this;
},
jl_StringBuilder_append4 = ($this, var$1, var$2, var$3) => {
    jl_AbstractStringBuilder_append5($this, var$1, var$2, var$3);
    return $this;
},
jl_StringBuilder_insert2 = ($this, var$1, var$2, var$3, var$4) => {
    jl_AbstractStringBuilder_insert($this, var$1, var$2, var$3, var$4);
    return $this;
},
jl_StringBuilder_append3 = ($this, var$1, var$2, var$3) => {
    jl_AbstractStringBuilder_append2($this, var$1, var$2, var$3);
    return $this;
},
jl_StringBuilder_length = $this => {
    return $this.$length0;
},
jl_StringBuilder_toString = $this => {
    return jl_AbstractStringBuilder_toString($this);
},
jl_StringBuilder_ensureCapacity = ($this, var$1) => {
    jl_AbstractStringBuilder_ensureCapacity($this, var$1);
},
jl_StringBuilder_insert1 = ($this, var$1, var$2) => {
    jl_AbstractStringBuilder_insert2($this, var$1, var$2);
    return $this;
},
jl_StringBuilder_insert3 = ($this, var$1, var$2) => {
    jl_AbstractStringBuilder_insert0($this, var$1, var$2);
    return $this;
},
jl_System = $rt_classWithoutFields(),
jl_System_outCache = null;
let jl_System_errCache = null,
jl_System_inCache = null,
jl_System_properties = null,
jl_System_out = () => {
    let var$1;
    if (jl_System_outCache === null) {
        var$1 = new otcic_JSStdoutPrintStream;
        otcic_JsConsolePrintStream__init_(var$1);
        jl_System_outCache = var$1;
    }
    return jl_System_outCache;
},
jl_System_err = () => {
    let var$1;
    if (jl_System_errCache === null) {
        var$1 = new otcic_JSStderrPrintStream;
        otcic_JsConsolePrintStream__init_(var$1);
        jl_System_errCache = var$1;
    }
    return jl_System_errCache;
},
jl_System_arraycopy = ($src, $srcPos, $dest, $destPos, $length) => {
    let $srcType, $targetType, $srcArray, $i, var$10, var$11, var$12, $elem, var$14;
    if ($src !== null && $dest !== null) {
        if ($srcPos >= 0 && $destPos >= 0 && $length >= 0 && ($srcPos + $length | 0) <= jlr_Array_getLength($src) && ($destPos + $length | 0) <= jlr_Array_getLength($dest)) {
            a: {
                b: {
                    if ($src !== $dest) {
                        $srcType = jl_Class_getComponentType(jl_Object_getClass($src));
                        $targetType = jl_Class_getComponentType(jl_Object_getClass($dest));
                        if ($srcType !== null && $targetType !== null) {
                            if ($srcType === $targetType)
                                break b;
                            if (!jl_Class_isPrimitive($srcType) && !jl_Class_isPrimitive($targetType)) {
                                $srcArray = $src;
                                $i = 0;
                                var$10 = $srcPos;
                                while ($i < $length) {
                                    var$11 = $srcArray.data;
                                    var$12 = var$10 + 1 | 0;
                                    $elem = var$11[var$10];
                                    var$14 = $targetType.$platformClass;
                                    if (!($elem !== null && !(typeof $elem.constructor.$meta === 'undefined' ? 1 : 0) && otp_Platform_isAssignable($elem.constructor, var$14) ? 1 : 0)) {
                                        jl_System_doArrayCopy($src, $srcPos, $dest, $destPos, $i);
                                        $src = new jl_ArrayStoreException;
                                        jl_Throwable__init_($src);
                                        $rt_throw($src);
                                    }
                                    $i = $i + 1 | 0;
                                    var$10 = var$12;
                                }
                                jl_System_doArrayCopy($src, $srcPos, $dest, $destPos, $length);
                                return;
                            }
                            if (!jl_Class_isPrimitive($srcType))
                                break a;
                            if (jl_Class_isPrimitive($targetType))
                                break b;
                            else
                                break a;
                        }
                        $src = new jl_ArrayStoreException;
                        jl_Throwable__init_($src);
                        $rt_throw($src);
                    }
                }
                jl_System_doArrayCopy($src, $srcPos, $dest, $destPos, $length);
                return;
            }
            $src = new jl_ArrayStoreException;
            jl_Throwable__init_($src);
            $rt_throw($src);
        }
        $src = new jl_IndexOutOfBoundsException;
        jl_Throwable__init_($src);
        $rt_throw($src);
    }
    $dest = new jl_NullPointerException;
    jl_Throwable__init_0($dest, $rt_s(16));
    $rt_throw($dest);
},
jl_System_fastArraycopy = ($src, $srcPos, $dest, $destPos, $length) => {
    if ($srcPos >= 0 && $destPos >= 0 && $length >= 0 && ($srcPos + $length | 0) <= jlr_Array_getLength($src) && ($destPos + $length | 0) <= jlr_Array_getLength($dest)) {
        jl_System_doArrayCopy($src, $srcPos, $dest, $destPos, $length);
        return;
    }
    $src = new jl_IndexOutOfBoundsException;
    jl_Throwable__init_($src);
    $rt_throw($src);
},
jl_System_doArrayCopy = (var$1, var$2, var$3, var$4, var$5) => {
    if (var$5 !== 0) {
        if (typeof var$1.data.buffer !== 'undefined') {
            var$3.data.set(var$1.data.subarray(var$2, var$2 + var$5), var$4);
        } else if (var$1 !== var$3 || var$4 < var$2) {
            for (let i = 0;i < var$5;i = i + 1 | 0) {
                var$3.data[var$4++] = var$1.data[var$2++];
            }
        } else {
            var$2 = var$2 + var$5 | 0;
            var$4 = var$4 + var$5 | 0;
            for (let i = 0;i < var$5;i = i + 1 | 0) {
                var$3.data[ --var$4] = var$1.data[ --var$2];
            }
        }
    }
},
jl_System_currentTimeMillis = () => {
    return Long_fromNumber((new Date()).getTime());
},
jl_AutoCloseable = $rt_classWithoutFields(0),
ji_Closeable = $rt_classWithoutFields(0),
ji_Flushable = $rt_classWithoutFields(0),
ji_OutputStream = $rt_classWithoutFields(),
ji_OutputStream_close = $this => {
    return;
},
ji_OutputStream_flush = $this => {
    return;
};
function ji_FilterOutputStream() {
    ji_OutputStream.call(this);
    this.$out2 = null;
}
function ji_PrintStream() {
    let a = this; ji_FilterOutputStream.call(a);
    a.$autoFlush = 0;
    a.$errorState = 0;
    a.$sb = null;
    a.$buffer1 = null;
    a.$charset = null;
}
let ji_PrintStream__init_ = ($this, $out) => {
    $this.$out2 = $out;
    $out = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($out);
    $this.$sb = $out;
    $this.$buffer1 = $rt_createCharArray(32);
    $this.$autoFlush = 0;
    $this.$charset = jnci_UTF8Charset_INSTANCE;
},
ji_PrintStream__init_0 = var_0 => {
    let var_1 = new ji_PrintStream();
    ji_PrintStream__init_(var_1, var_0);
    return var_1;
},
ji_PrintStream_write = ($this, $b, $off, $len) => {
    let var$4, $$je;
    var$4 = $this.$out2;
    if (var$4 === null)
        $this.$errorState = 1;
    if (!($this.$errorState ? 0 : 1))
        return;
    a: {
        try {
            var$4.$write($b, $off, $len);
            break a;
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof ji_IOException) {
            } else {
                throw $$e;
            }
        }
        $this.$errorState = 1;
    }
},
ji_PrintStream_print = ($this, $s, $begin, $end) => {
    let var$4, var$5, var$6, var$7, var$8, var$9, var$10, var$11, $$je;
    $end = $end - $begin | 0;
    var$4 = jn_CharBuffer_wrap($s, $begin, $end);
    $s = $rt_createByteArray(jl_Math_max(16, jl_Math_min($end, 1024)));
    var$5 = jn_ByteBuffer_wrap($s);
    var$6 = $this.$charset;
    var$7 = new jnci_UTF8Encoder;
    var$8 = $rt_createByteArray(1);
    var$9 = var$8.data;
    var$9[0] = 63;
    var$10 = jnc_CodingErrorAction_REPORT;
    var$7.$malformedAction0 = var$10;
    var$7.$unmappableAction = var$10;
    $begin = var$9.length;
    if ($begin && $begin >= var$7.$maxBytesPerChar) {
        var$7.$charset0 = var$6;
        var$7.$replacement1 = var$8.$clone0();
        var$7.$averageBytesPerChar = 2.0;
        var$7.$maxBytesPerChar = 4.0;
        var$7.$inArray0 = $rt_createCharArray(512);
        var$7.$outArray = $rt_createByteArray(512);
        var$10 = jnc_CodingErrorAction_REPLACE;
        if (var$10 === null) {
            var$7 = new jl_IllegalArgumentException;
            jl_Throwable__init_0(var$7, $rt_s(17));
            $rt_throw(var$7);
        }
        var$7.$malformedAction0 = var$10;
        var$7.$unmappableAction = var$10;
        while (var$7.$status != 3) {
            var$7.$status = 2;
            a: {
                while (true) {
                    try {
                        var$10 = jnci_BufferedEncoder_encodeLoop(var$7, var$4, var$5);
                    } catch ($$e) {
                        $$je = $rt_wrapException($$e);
                        if ($$je instanceof jl_RuntimeException) {
                            var$4 = $$je;
                            var$7 = new jnc_CoderMalfunctionError;
                            jl_Throwable__init_2(var$7, var$4);
                            $rt_throw(var$7);
                        } else {
                            throw $$e;
                        }
                    }
                    if (jnc_CoderResult_isUnderflow(var$10)) {
                        $end = jn_Buffer_remaining(var$4);
                        if ($end <= 0)
                            break a;
                        var$10 = jnc_CoderResult_malformedForLength($end);
                    } else if (jnc_CoderResult_isOverflow(var$10))
                        break;
                    var$6 = !jnc_CoderResult_isUnmappable(var$10) ? var$7.$malformedAction0 : var$7.$unmappableAction;
                    b: {
                        if (var$6 !== jnc_CodingErrorAction_REPLACE) {
                            if (var$6 === jnc_CodingErrorAction_IGNORE)
                                break b;
                            else
                                break a;
                        }
                        $end = jn_Buffer_remaining(var$5);
                        var$8 = var$7.$replacement1;
                        var$11 = var$8.data.length;
                        if ($end < var$11) {
                            var$10 = jnc_CoderResult_OVERFLOW;
                            break a;
                        }
                        jn_ByteBuffer_put(var$5, var$8, 0, var$11);
                    }
                    jn_Buffer_position(var$4, var$4.$position0 + jnc_CoderResult_length(var$10) | 0);
                }
            }
            $end = jnc_CoderResult_isOverflow(var$10);
            $this.$write($s, 0, var$5.$position0);
            jn_ByteBuffer_clear(var$5);
            if (!$end) {
                while (true) {
                    $end = var$7.$status;
                    if ($end != 2 && $end != 4) {
                        var$4 = new jl_IllegalStateException;
                        jl_Throwable__init_(var$4);
                        $rt_throw(var$4);
                    }
                    var$4 = jnc_CoderResult_UNDERFLOW;
                    if (var$4 === var$4)
                        var$7.$status = 3;
                    $begin = jnc_CoderResult_isOverflow(var$4);
                    $this.$write($s, 0, var$5.$position0);
                    jn_ByteBuffer_clear(var$5);
                    if (!$begin)
                        break;
                }
                return;
            }
        }
        var$4 = new jl_IllegalStateException;
        jl_Throwable__init_(var$4);
        $rt_throw(var$4);
    }
    var$7 = new jl_IllegalArgumentException;
    jl_RuntimeException__init_0(var$7, $rt_s(18));
    $rt_throw(var$7);
},
ji_PrintStream_print0 = ($this, $s) => {
    jl_StringBuilder_append($this.$sb, $s);
    ji_PrintStream_printSB($this);
},
ji_PrintStream_println = ($this, $s) => {
    let var$2;
    var$2 = $this.$sb;
    jl_AbstractStringBuilder_append0(var$2, $s);
    jl_AbstractStringBuilder_append(var$2, 10);
    ji_PrintStream_printSB($this);
},
ji_PrintStream_println0 = ($this, $s) => {
    jl_AbstractStringBuilder_append(jl_StringBuilder_append($this.$sb, $s), 10);
    ji_PrintStream_printSB($this);
},
ji_PrintStream_printSB = $this => {
    let var$1, var$2, $buffer, var$4, var$5, var$6, var$7, var$8, var$9;
    var$1 = $this.$sb;
    var$2 = var$1.$length0;
    $buffer = $this.$buffer1;
    if (var$2 > $buffer.data.length)
        $buffer = $rt_createCharArray(var$2);
    var$4 = 0;
    var$5 = 0;
    if (var$4 > var$2) {
        var$1 = new jl_IndexOutOfBoundsException;
        jl_Throwable__init_0(var$1, $rt_s(19));
        $rt_throw(var$1);
    }
    while (var$4 < var$2) {
        var$6 = $buffer.data;
        var$7 = var$5 + 1 | 0;
        var$8 = var$1.$buffer.data;
        var$9 = var$4 + 1 | 0;
        var$6[var$5] = var$8[var$4];
        var$5 = var$7;
        var$4 = var$9;
    }
    $this.$print0($buffer, 0, var$2);
    $this.$sb.$length0 = 0;
};
function igbc_CompilerMain$1() {
    ji_OutputStream.call(this);
    this.$val$old = null;
}
let igbc_CompilerMain$1_write = ($this, $b, $off, $len) => {
    let var$4;
    var$4 = new jl_String;
    jl_String_initWithBytes(var$4, $b, $off, $len, jnci_UTF8Charset_INSTANCE);
    (document.getElementById('consoleOutput')).innerText += $rt_ustr(var$4);
    $this.$val$old.$write($b, $off, $len);
},
otj_JSObject = $rt_classWithoutFields(0),
otjdx_Node = $rt_classWithoutFields(0),
otjdx_Document = $rt_classWithoutFields(0),
otjde_EventTarget = $rt_classWithoutFields(0),
otjdh_HTMLDocument = $rt_classWithoutFields(),
otjde_EventListener = $rt_classWithoutFields(0),
igbc_CompilerMain$main$lambda$_1_0 = $rt_classWithoutFields(),
igbc_CompilerMain$main$lambda$_1_0_handleEvent$exported$0 = (var$0, var$1) => {
    let var$2;
    igbc_CompilerMain_$callClinit();
    var$1 = jl_Thread__init_(new igbc_CompilerMain$lambda$main$0$lambda$_6_0, null);
    var$2 = new jl_Thread$start$lambda$_4_0;
    var$2.$_03 = var$1;
    otp_Platform_startThread(var$2);
},
otci_IntegerUtil = $rt_classWithoutFields();
function otcic_JsConsolePrintStream() {
    let a = this; ji_PrintStream.call(a);
    a.$byteEncoder = null;
    a.$flushAction = null;
}
let otcic_JsConsolePrintStream__init_ = $this => {
    ji_PrintStream__init_($this, ji_ByteArrayOutputStream__init_());
},
otcic_JsConsolePrintStream_println0 = ($this, $s) => {
    $this.$print($s);
    $this.$print($rt_s(4));
},
otcic_JsConsolePrintStream_print = ($this, $s) => {
    $this.$print(ju_Objects_toString($s));
},
otcic_JsConsolePrintStream_println = ($this, $s) => {
    otcic_JsConsolePrintStream_println0($this, ju_Objects_toString($s));
},
otcic_JsConsolePrintStream_write = ($this, $b, $off, $len) => {
    let var$4, var$5, var$6, var$7, var$8, var$9, var$10, var$11, var$12, var$13, var$14;
    if ($this.$byteEncoder === null) {
        var$4 = new otcic_JsConsolePrintStream$ByteEncoder;
        var$4.$this$00 = $this;
        var$4.$buffer0 = jn_ByteBuffer_wrap($rt_createByteArray(32));
        var$5 = $rt_createCharArray(32);
        var$4.$outChars = var$5;
        var$4.$outBuffer = jn_CharBuffer_wrap0(var$5);
        jnc_StandardCharsets_$callClinit();
        var$4.$decoder = jnc_CharsetDecoder_onUnmappableCharacter(jnc_CharsetDecoder_onMalformedInput(jnci_UTF8Charset_newDecoder(jnc_StandardCharsets_UTF_8), jnc_CodingErrorAction_REPLACE), jnc_CodingErrorAction_REPLACE);
        $this.$byteEncoder = var$4;
    }
    var$6 = $this.$byteEncoder;
    var$7 = var$6.$this$00;
    if (var$7.$flushAction === null) {
        var$8 = new otcic_JsConsolePrintStream$ByteEncoder$postponeFlush$lambda$_3_0;
        var$8.$_010 = var$6;
        var$7.$flushAction = var$8;
    }
    while ($len > 0) {
        var$9 = jl_Math_min($len, jn_Buffer_remaining(var$6.$buffer0));
        jn_ByteBuffer_put(var$6.$buffer0, $b, $off, var$9);
        $len = $len - var$9 | 0;
        jn_Buffer_flip(var$6.$buffer0);
        while (true) {
            var$7 = jnc_CharsetDecoder_decode(var$6.$decoder, var$6.$buffer0, var$6.$outBuffer, 0);
            var$6.$this$00.$print(jl_String__init_(var$6.$outChars, 0, var$6.$outBuffer.$position0));
            var$8 = var$6.$outBuffer;
            var$8.$mark = (-1);
            var$8.$position0 = 0;
            if (var$7 !== jnc_CoderResult_OVERFLOW)
                break;
        }
        var$7 = var$6.$buffer0;
        if (var$7.$readOnly) {
            var$7 = new jn_ReadOnlyBufferException;
            jl_Throwable__init_(var$7);
            $rt_throw(var$7);
        }
        a: {
            var$10 = jn_Buffer_remaining(var$7);
            var$9 = var$7.$position0;
            if (var$9 > 0) {
                var$11 = var$7.$start1;
                var$12 = var$11 + var$9 | 0;
                var$13 = 0;
                while (true) {
                    if (var$13 >= var$10)
                        break a;
                    var$5 = var$7.$array1.data;
                    var$14 = var$11 + 1 | 0;
                    var$9 = var$12 + 1 | 0;
                    var$5[var$11] = var$5[var$12];
                    var$13 = var$13 + 1 | 0;
                    var$11 = var$14;
                    var$12 = var$9;
                }
            }
        }
        var$7.$position0 = var$10;
        var$7.$limit = var$7.$capacity;
        var$7.$mark = (-1);
    }
},
otcic_JsConsolePrintStream_print0 = ($this, $s, $begin, $end) => {
    $this.$print(jl_String__init_($s, $begin, $end));
},
otcic_JSStdoutPrintStream = $rt_classWithoutFields(otcic_JsConsolePrintStream),
otcic_JSStdoutPrintStream_print = ($this, $s) => {
    if ($s === null)
        $s = $rt_s(15);
    $rt_putStdout($rt_ustr($s));
},
ju_Comparator = $rt_classWithoutFields(0),
jl_String$_clinit_$lambda$_115_0 = $rt_classWithoutFields();
function jl_Character() {
    jl_Object.call(this);
    this.$value3 = 0;
}
let jl_Character_TYPE = null,
jl_Character_digitMapping = null,
jl_Character_upperCaseMapping = null,
jl_Character_lowerCaseMapping = null,
jl_Character_classMapping = null,
jl_Character_characterCache = null,
jl_Character_$$metadata$$0 = null,
jl_Character_$$metadata$$1 = null,
jl_Character_$$metadata$$3 = null,
jl_Character_$$metadata$$4 = null,
jl_Character__init_0 = ($this, $value) => {
    $this.$value3 = $value;
},
jl_Character__init_ = var_0 => {
    let var_1 = new jl_Character();
    jl_Character__init_0(var_1, var_0);
    return var_1;
},
jl_Character_valueOf = $value => {
    let var$2, $result;
    var$2 = jl_Character_characterCache.data;
    if ($value >= var$2.length)
        return jl_Character__init_($value);
    $result = var$2[$value];
    if ($result === null) {
        $result = jl_Character__init_($value);
        jl_Character_characterCache.data[$value] = $result;
    }
    return $result;
},
jl_Character_toString0 = $this => {
    return jl_Character_toString($this.$value3);
},
jl_Character_equals = ($this, $other) => {
    if ($this === $other)
        return 1;
    return $other instanceof jl_Character && $other.$value3 == $this.$value3 ? 1 : 0;
},
jl_Character_toString = $c => {
    let var$2, var$3;
    var$2 = new jl_String;
    var$3 = $rt_createCharArray(1);
    var$3.data[0] = $c;
    jl_String__init_2(var$2, var$3);
    return var$2;
},
jl_Character_isSupplementaryCodePoint = $codePoint => {
    return $codePoint >= 65536 && $codePoint <= 1114111 ? 1 : 0;
},
jl_Character_isHighSurrogate = $ch => {
    return ($ch & 64512) != 55296 ? 0 : 1;
},
jl_Character_isLowSurrogate = $ch => {
    return ($ch & 64512) != 56320 ? 0 : 1;
},
jl_Character_isSurrogate = $ch => {
    return !jl_Character_isHighSurrogate($ch) && !jl_Character_isLowSurrogate($ch) ? 0 : 1;
},
jl_Character_isSurrogatePair = ($high, $low) => {
    return jl_Character_isHighSurrogate($high) && jl_Character_isLowSurrogate($low) ? 1 : 0;
},
jl_Character_toCodePoint = ($high, $low) => {
    return (($high & 1023) << 10 | $low & 1023) + 65536 | 0;
},
jl_Character_highSurrogate = $codePoint => {
    return (55296 | ($codePoint - 65536 | 0) >> 10 & 1023) & 65535;
},
jl_Character_lowSurrogate = $codePoint => {
    return (56320 | $codePoint & 1023) & 65535;
},
jl_Character_toLowerCase = $ch => {
    return jl_Character_toLowerCase0($ch) & 65535;
},
jl_Character_toLowerCase0 = $ch => {
    if (jl_Character_lowerCaseMapping === null) {
        if (jl_Character_$$metadata$$0 === null)
            jl_Character_$$metadata$$0 = jl_Character_acquireLowerCaseMapping$$create();
        jl_Character_lowerCaseMapping = otciu_UnicodeHelper_createCharMapping(otciu_UnicodeHelper_decodeCaseMapping((jl_Character_$$metadata$$0.value !== null ? $rt_str(jl_Character_$$metadata$$0.value) : null)));
    }
    return jl_Character_mapChar(jl_Character_lowerCaseMapping, $ch);
},
jl_Character_toUpperCase = $ch => {
    return jl_Character_toUpperCase0($ch) & 65535;
},
jl_Character_toUpperCase0 = $codePoint => {
    if (jl_Character_upperCaseMapping === null) {
        if (jl_Character_$$metadata$$1 === null)
            jl_Character_$$metadata$$1 = jl_Character_acquireUpperCaseMapping$$create();
        jl_Character_upperCaseMapping = otciu_UnicodeHelper_createCharMapping(otciu_UnicodeHelper_decodeCaseMapping((jl_Character_$$metadata$$1.value !== null ? $rt_str(jl_Character_$$metadata$$1.value) : null)));
    }
    return jl_Character_mapChar(jl_Character_upperCaseMapping, $codePoint);
},
jl_Character_mapChar = ($table, $codePoint) => {
    let $binSearchTable, var$4, var$5, var$6, $index, var$8;
    $binSearchTable = $table.$fastTable.data;
    if ($codePoint < $binSearchTable.length)
        return $codePoint + $binSearchTable[$codePoint] | 0;
    $binSearchTable = $table.$binarySearchTable.data;
    var$4 = 0;
    var$5 = $binSearchTable.length;
    var$6 = (var$5 / 2 | 0) - 1 | 0;
    a: {
        while (true) {
            $index = (var$4 + var$6 | 0) / 2 | 0;
            var$8 = $rt_compare($binSearchTable[$index * 2 | 0], $codePoint);
            if (!var$8)
                break;
            if (var$8 <= 0) {
                var$4 = $index + 1 | 0;
                if (var$4 > var$6)
                    break a;
            } else {
                $index = $index - 1 | 0;
                if ($index < var$4)
                    break a;
                var$6 = $index;
            }
        }
    }
    if ($index >= 0) {
        $index = $index * 2 | 0;
        if ($index < var$5)
            return $codePoint + $binSearchTable[$index + 1 | 0] | 0;
    }
    return 0;
},
jl_Character_digit = ($ch, $radix) => {
    let var$3, var$4, var$5, var$6, var$7, var$8, var$9, var$10, var$11, var$12;
    if ($radix >= 2 && $radix <= 36) {
        if (jl_Character_digitMapping === null) {
            if (jl_Character_$$metadata$$3 === null)
                jl_Character_$$metadata$$3 = jl_Character_obtainDigitMapping$$create();
            var$3 = (jl_Character_$$metadata$$3.value !== null ? $rt_str(jl_Character_$$metadata$$3.value) : null);
            var$4 = otci_CharFlow__init_(jl_String_toCharArray(var$3));
            var$5 = otci_Base46_decodeUnsigned(var$4);
            var$6 = $rt_createIntArray(var$5 * 2 | 0);
            var$7 = var$6.data;
            var$8 = 0;
            var$9 = 0;
            var$10 = 0;
            var$11 = 0;
            while (var$11 < var$5) {
                var$9 = var$9 + otci_Base46_decode(var$4) | 0;
                var$10 = var$10 + otci_Base46_decode(var$4) | 0;
                var$12 = var$8 + 1 | 0;
                var$7[var$8] = var$9;
                var$8 = var$12 + 1 | 0;
                var$7[var$12] = var$10;
                var$11 = var$11 + 1 | 0;
            }
            jl_Character_digitMapping = var$6;
        }
        var$6 = jl_Character_digitMapping.data;
        var$8 = 0;
        var$9 = (var$6.length / 2 | 0) - 1 | 0;
        a: {
            while (var$9 >= var$8) {
                var$10 = (var$8 + var$9 | 0) / 2 | 0;
                var$11 = var$10 * 2 | 0;
                var$5 = $rt_compare($ch, var$6[var$11]);
                if (var$5 > 0)
                    var$8 = var$10 + 1 | 0;
                else {
                    if (var$5 >= 0) {
                        $ch = var$6[var$11 + 1 | 0];
                        break a;
                    }
                    var$9 = var$10 - 1 | 0;
                }
            }
            $ch = (-1);
        }
        if ($ch >= $radix)
            $ch = (-1);
    } else
        $ch = (-1);
    return $ch;
},
jl_Character_forDigit = ($digit, $radix) => {
    if ($radix >= 2 && $radix <= 36 && $digit >= 0 && $digit < $radix)
        return $digit < 10 ? (48 + $digit | 0) & 65535 : ((97 + $digit | 0) - 10 | 0) & 65535;
    return 0;
},
jl_Character_toChars = $codePoint => {
    let var$2, var$3, var$4;
    if (!($codePoint >= 0 && $codePoint <= 1114111 ? 1 : 0)) {
        var$2 = new jl_IllegalArgumentException;
        jl_Throwable__init_(var$2);
        $rt_throw(var$2);
    }
    if ($codePoint < 65536) {
        var$3 = $rt_createCharArray(1);
        var$3.data[0] = $codePoint & 65535;
        return var$3;
    }
    var$3 = $rt_createCharArray(2);
    var$4 = var$3.data;
    var$4[0] = jl_Character_highSurrogate($codePoint);
    var$4[1] = jl_Character_lowSurrogate($codePoint);
    return var$3;
},
jl_Character_getType = $codePoint => {
    let $u, $range, $classes, var$5, var$6, var$7, var$8, var$9, $i, var$11, var$12, var$13, var$14, $l;
    $u = $codePoint > 0 && $codePoint <= 65535 ? 1 : 0;
    if ($u && jl_Character_isSurrogate($codePoint & 65535))
        return 19;
    if (jl_Character_classMapping === null) {
        if (jl_Character_$$metadata$$4 === null)
            jl_Character_$$metadata$$4 = jl_Character_obtainClasses$$create();
        $range = (jl_Character_$$metadata$$4.value !== null ? $rt_str(jl_Character_$$metadata$$4.value) : null);
        $classes = $rt_createArray(otciu_UnicodeHelper$Range, 16384);
        var$5 = $classes.data;
        var$6 = $rt_createByteArray(16384);
        var$7 = var$6.data;
        var$8 = 0;
        var$9 = 0;
        $i = 0;
        var$11 = 0;
        while (var$11 < $range.$nativeString.length) {
            var$12 = otciu_UnicodeHelper_decodeByte(jl_String_charAt($range, var$11));
            if (var$12 == 64) {
                var$11 = var$11 + 1 | 0;
                var$12 = otciu_UnicodeHelper_decodeByte(jl_String_charAt($range, var$11));
                var$13 = 0;
                var$14 = 1;
                $u = 0;
                while ($u < 3) {
                    var$11 = var$11 + 1 | 0;
                    var$13 = var$13 | $rt_imul(var$14, otciu_UnicodeHelper_decodeByte(jl_String_charAt($range, var$11)));
                    var$14 = var$14 * 64 | 0;
                    $u = $u + 1 | 0;
                }
            } else if (var$12 < 32)
                var$13 = 1;
            else {
                var$12 = (var$12 - 32 | 0) << 24 >> 24;
                var$11 = var$11 + 1 | 0;
                var$13 = otciu_UnicodeHelper_decodeByte(jl_String_charAt($range, var$11));
            }
            if (!var$12 && var$13 >= 128) {
                if (var$8 > 0) {
                    $u = var$9 + 1 | 0;
                    var$5[var$9] = otciu_UnicodeHelper$Range__init_($i, $i + var$8 | 0, ju_Arrays_copyOf(var$6, var$8));
                    var$9 = $u;
                }
                $i = $i + (var$8 + var$13 | 0) | 0;
                var$8 = 0;
            } else {
                $u = var$8 + var$13 | 0;
                if ($u < var$7.length)
                    $l = var$9;
                else {
                    $l = var$9 + 1 | 0;
                    var$5[var$9] = otciu_UnicodeHelper$Range__init_($i, $i + var$8 | 0, ju_Arrays_copyOf(var$6, var$8));
                    $i = $i + $u | 0;
                    var$8 = 0;
                }
                while (true) {
                    $u = var$13 + (-1) | 0;
                    if (var$13 <= 0)
                        break;
                    var$13 = var$8 + 1 | 0;
                    var$7[var$8] = var$12;
                    var$8 = var$13;
                    var$13 = $u;
                }
                var$9 = $l;
            }
            var$11 = var$11 + 1 | 0;
        }
        jl_Character_classMapping = ju_Arrays_copyOf0($classes, var$9);
    }
    $classes = jl_Character_classMapping.data;
    $l = 0;
    $u = $classes.length - 1 | 0;
    while ($l <= $u) {
        $i = ($l + $u | 0) / 2 | 0;
        $range = $classes[$i];
        if ($codePoint >= $range.$end4)
            $l = $i + 1 | 0;
        else {
            $u = $range.$start5;
            if ($codePoint >= $u)
                return $range.$data0.data[$codePoint - $u | 0];
            $u = $i - 1 | 0;
        }
    }
    return 0;
},
jl_Character_isLetterOrDigit = $codePoint => {
    a: {
        switch (jl_Character_getType($codePoint)) {
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 9:
                break;
            case 6:
            case 7:
            case 8:
                break a;
            default:
                break a;
        }
        return 1;
    }
    return 0;
},
jl_Character_isIdentifierIgnorable = $codePoint => {
    a: {
        if (!($codePoint >= 0 && $codePoint <= 8) && !($codePoint >= 14 && $codePoint <= 27)) {
            if ($codePoint < 127)
                break a;
            if ($codePoint > 159)
                break a;
        }
        return 1;
    }
    return jl_Character_getType($codePoint) != 16 ? 0 : 1;
},
jl_Character_isSpaceChar = $codePoint => {
    switch (jl_Character_getType($codePoint)) {
        case 12:
        case 13:
        case 14:
            break;
        default:
            return 0;
    }
    return 1;
},
jl_Character_isWhitespace = $codePoint => {
    switch ($codePoint) {
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 28:
        case 29:
        case 30:
        case 31:
            break;
        case 160:
        case 8199:
        case 8239:
            return 0;
        default:
            return jl_Character_isSpaceChar($codePoint);
    }
    return 1;
},
jl_Character__clinit_ = () => {
    jl_Character_TYPE = $rt_cls($rt_charcls);
    jl_Character_characterCache = $rt_createArray(jl_Character, 128);
},
jl_Character_acquireLowerCaseMapping$$create = () => {
    return {"value" : ">W  H#F#U 4%F#O #F#/ d%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #a1# #%# #%# #%# %%# #%# #%# #%# #%# #%# #%# #%# %%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #<+#%# #%# #%# \'.3#%# #%# #{1#%# #w1%%# %J\'#k1#o1#%# #w1#!3# #23#*3#%# \'23#:3# #>3#%# #%# #%# #N3#%# #N3# %%# #N3#%# #J3%%# #%# #R3#%# \'%# /)#%# #)#%# #)#%# #%# #%# #%# #%# #%# #%# #%# #%# %%# #%# #%# #%# #%# #%# #%# #%# #%# %)#%# #%# #8)#L%#%# #%# #%# #"
    + "%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #a+# #%# #%# #%# #%# #%# #%# #%# #%# #%# /B45#%# #,/#645# %%# #P1#!\'#*\'#%# #%# #%# #%# #%# <-%# #%# \'%# 1&++ %_## #Z#)k%%g%% #F#W hA# 1%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# +]%# %%# #?#%# %a+\'N\'AF#b &#%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# 3%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #^#%# #%# #%# #%# #%# #%# #%# %%# #%# #%# #%# #%# #%# #%# #%"
    + "# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# %*%r iB#oq-&# _?gejg#A1 o$#mo%&# {-%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# 3,4/# #%# #%# #%"
    + "# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# 3C1 1C1 1C1 1C1 1C1 3C/ 1C1 QC1 1C1 1C1 1C%8\'%G# 7i\')G# 7C%D)\' 7C%u)%?# 7X+%P+%G# L-q*/# \'Pw/#8m/# -6## |bA G%# kC.#U !r*%&# &#%# #,05#qX\'#H.5# %%# #%# #%# #e25#D05#q25#m25# #%# %%# 1865%%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# "
    + "#%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# 1%# #%# )%# (a=%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# G%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# y%%# #%# #%# #%# #%# #%# #%# \'%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# 5%# #%# #4Fd#%# #%# #%# #%# #%# )%# #<{p# %%# #%# \'%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #P}p#}}p#m}p#D}p#P}p# #@yp#D{p#Lyp#Br#%# #%# #%# #%"
    + "# #%# #%# #%# #%# #,%#L}p#LJd#%# #%# -%# +%# #%# Y%# ,T5F#U TUg#r {%g#r >\'c#p Lnk%F# *J#F#b o@5F#b Jo=N#f "};
},
jl_Character_acquireUpperCaseMapping$$create = () => {
    return {"value" : "<Y  ,%H#U :#>b# v
    + " #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# \'\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# 1\'# %665% #\'# )\'# #\'# #\'# #\'# #\'#o25#c25#k25#03#}1# #y1% #m1# #q1#{}p# \'y1#k}p# #$3# #:{p#N}p# #,3#43#N}p#*05#B}p# %43# #B05#<3# %@3# /F.5# %P3# #J}p#P3# \'B{p#P3#$\'#L3%,\'# +T3# 5Jyp#>yp# Z\'_\'# x\'# #\'# \'\'\' #_+\' !#a##]#\' #H#CD##H#3m%#i%% #e%#P%# \'(%#D%#C# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'#i\'#P\'#=#(+# #4)# %\'# %\'# .#H#bP\'A #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# 3\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# "
    + "#\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# %\'# #\'# #\'# #\'# #\'# #\'# #\'#`# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'% &#,%n mB#ko%x %ko%\' RAC1 >$#yu+#uu+#Pu+#Hu+%Lu+#0u+#io+#>@d1 (+2Fd# \'oX\'# AJJd# N%\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #"
    + "\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# +X%# +\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'#A1 1A1 1A1 1A1 1A1 3A# #A# #A# #A% /A1 16\'%g\')B)%V+%s)%N+)A1 1A1 1A1 1A% #E# 5<m-# )E# 9A% =A% \'=# ;E# R/8## ddA )\'# @E0#U Nr,%&# #\'# \'D45#845# #\'# #\'# #\'# -"
    + "\'# %\'# 5\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# 1\'# #\'# )\'- /qq-&# i]=\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# G\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# y%\'# #\'# #\'# #\'# #\'# #\'# #\'# \'\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'#"
    + " #\'# #\'# #\'# #\'# 5\'# #\'# %\'# #\'# #\'# #\'# #\'# )\'# )\'# #\'#*%# %\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# 7\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# )\'# #\'- #\'% )\'# #\'S )\'# cEDr# Yiejg# e*5H#U eUi#r {%i#r <\'e#<% Vlm%:# RH#H#b o@5H#b No=P#f "};
},
jl_Character_obtainDigitMapping$$create = () => {
    return {"value" : "&C*% %%%%%%%%%%%%%%%%%%A%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%=,#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%_H#T#%%%%%%%%%%%%%%%%%%s+G%%%%%%%%%%%%%%%%%%_1G%%%%%%%%%%%%%%%%%%{CG%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%6)G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%*\'G%%%%%%%%%%%%%%%%%%.9G%%%%%%%%%%%%%%%%%%*\'G%%%%%%%%%%%%%%%%%%!i#G"
    + "%%%%%%%%%%%%%%%%%%c#G%%%%%%%%%%%%%%%%%%*;G%%%%%%%%%%%%%%%%%%Z+G%%%%%%%%%%%%%%%%%%:/G%%%%%%%%%%%%%%%%%%=G%%%%%%%%%%%%%%%%%%{/G%%%%%%%%%%%%%%%%%%k\'G%%%%%%%%%%%%%%%%%%s+G%%%%%%%%%%%%%%%%%%=G%%%%%%%%%%%%%%%%%%R@dG%%%%%%%%%%%%%%%%%%R[G%%%%%%%%%%%%%%%%%%c#G%%%%%%%%%%%%%%%%%%_1G%%%%%%%%%%%%%%%%%%!#G%%%%%%%%%%%%%%%%%%k\'G%%%%%%%%%%%%%%%%%%cCG%%%%%%%%%%%%%%%%%%o*IG%%%%%%%%%%%%%%%%%%A%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%=,#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%c:#T#%%%%%%%%%%%%%%%%%%w&%G%%%%%"
    + "%%%%%%%%%%%%%BhG%%%%%%%%%%%%%%%%%%Z+G%%%%%%%%%%%%%%%%%%_%G%%%%%%%%%%%%%%%%%%>-G%%%%%%%%%%%%%%%%%%.9G%%%%%%%%%%%%%%%%%%w=G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%>AG%%%%%%%%%%%%%%%%%%N)G%%%%%%%%%%%%%%%%%%N)G%%%%%%%%%%%%%%%%%%FEG%%%%%%%%%%%%%%%%%%N)G%%%%%%%%%%%%%%%%%%!dG%%%%%%%%%%%%%%%%%%g5G%%%%%%%%%%%%%%%%%%*\'G%%%%%%%%%%%%%%%%%%FEG%%%%%%%%%%%%%%%%%%*0EG%%%%%%%%%%%%%%%%%%k\'G%%%%%%%%%%%%%%%%%%s+G%%%%%%%%%%%%%%%%%%28UG%%%%%%%%%%%%%%%%%%%G%%%%%%%%%%%%%%%%%%%G%%%%%%%%%%%%%%%%%%%G%%%%%%%%%%%%%%%%%%%G%%%%%%%%%%%%%%%"
    + "%%%!8%G%%%%%%%%%%%%%%%%%%FEG%%%%%%%%%%%%%%%%%%sKG%%%%%%%%%%%%%%%%%%>&#G%%%%%%%%%%%%%%%%%%wN)G%%%%%%%%%%%%%%%%%%"};
},
jl_Character_obtainClasses$$create = () => {
    return {"value" : "PA-Y$;Y$679:95Y#J+Y#Z$Y#B;697<8<C;6:7:PB-9[%=9<=&>:1=<=:L#<#Y#<,&?L$9B8:B(C9:C)!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!C#!#!#!#!#!#!#!#!C#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#B##!#!C$B##!#B##B$C#B%#B##B$C$B##B##!#!#B##!C#!#B##B$#!#B#C#&!C$F%!$#!$#!$#!#!#!#!#!#!#!#!C#!#!#!#!#!#!#!#!#!C#!$#!#B$#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!C(B##B#C#!#B%#!#!#!#!Cg&C<E3]%E-]/E&](%<%]2b\'Q! !#!#%<!#A#%C$9!A%]#!9B$ ! B##B2 B*CD!C#B$C$!#!#!#!#!#!#!#!#!#!#!#!C&!#:!#B#C#BTCQ!#!#!#!#"
    + "!#!#!#!#!#!#!#!#!#!#!#!#!#=G&H#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#B##!#!#!#!#!#!C#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!# BGA#%Y\'CJ95A#^#; GN5\'9G#9G#9\'A)F<A%F%Y#A,Q\'Z$Y#;Y#^#G,91Y$FA%F+G6J+Y%F#\'b&D! 9&G(1=G\'E#G#=G%F#J+F$^#&Y/ 1&\'F?G<A#b&:! G,&A/J+FBG*E#=Y$%A#\'[#F7G%%G*%G$%G&A#Y0 F:G$A#9 F,A&F9<F\' Q#A\'G)FJ%G91GA)FW\')\'&I$G)I%\'I#&G(F+G#Y#J+9%F0\'I# F)A#F#A#F7 F( &A$F%A#\'&I$G%A#I#A#I#\'&A))A%F# F$G#A#J+F#[#L\'=;&9\'A#G#) F\'A%F#A#F7 F( F# F#"

    + "L+=\'=\'=\'6767I#F) FEA%G/)G&9G#F&G, GE ^)\'^\' ^#Y&^%Y#AFFLI#G%)G\')G#I#G#&J+Y\'F\'I#G#F%G$&I$F#I(F$G%F.\'I#G#I\'\'&)J+I$\'^#BG !A&!A#CL9%C$b&*&  F%A#F( & F%A#FJ F%A#FB F%A#F( & F%A#F0 FZ F%A#FeA#G$Y*L5A$F1^+A\'b!7! A#C\'A#5b&M* =9F2-F;67A$FmY$K$F)A(F3G$)A*F4G#)Y#A*F3G#A-F. F$ G#A-FUG#)G(I)\'I#G,Y$%Y$;&\'A#J+A\'L+A\'Y\'5Y%G$1\'J+A\'FD%FVA(F&G#FC\'&A&FhA+F@ G$I%G#I$A%I#\'I\'G$A%=A$Y#J+F?A#F&A,FMA%F;A\'J+,A$^CF8G#I#\'A#Y#FV)\')G( \')\'I#G)I\'G+A#\'J+A\'J+A\'Y(%Y\'A#G/(G1ARG%)FP\')G&)\'I&\'I#F)A$J+Y(^+G*^*Y# G#)F?)G%I#G#)G$F#J+FM\')G#I$\')G$I#A)Y%"
    + "FEI)G)I#G#A$Y&J+A$F$J+F?E\'Y#C*A(BLA#B$Y)A)G$9G.)G(F%\'F\'\'F#)G#&A&CMEaC.%CCEFGb!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!C*!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!C*B)C\'A#B\'A#C)B)C)B)C\'A#B\'A#C) ! ! ! !C)B)C/A#C)D)C)D)C)D)C& C#B%$<#]$C$ C#B%$]$C%A#C#B% ]$C)B&]$A#C$ C#B%$]# M,Q&U\'Y#>?6_#?6>Y)./Q&-Y*>?Y%X#Y$:67Y,:98Y+-Q& Q+,%A#L\'Z$67%L+Z$67 E.A$[BA0G."
    + "H%\'H$G-A0^#!^%!^##B$C#B$#=!^#:B&^\'!=!=!=B%=#B%#F%#^#C#B#Z&!C%=:^##=L1KD!#K%,^#A%Z&^&Z#^%:^#:^#:^(:^@Z#^#:=:^@b:-% ^)6767^5Z#^(67b=2! :^?Z:^IZ\'^gA:^,A6L^^pL7b=X# :^*:^WZ)b=P! :b=Y$ 67676767676767L?^MZ&67Z@6767676767Z1b= % b:$# 6767676767676767676767Za6767ZA67b:#% ^QZ6^#Z\'^HA#^A b=J! BQCQ!#B$C#!#!#!#B%#!C#!C\'E#B$#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!C#^\'!#!#G$!#A&Y%,Y#CG #A&#A#FYA(%9A/\'F8A*F( F( F( F( F( F( F( F( GAY#>?>?Y$>?9>?Y*5Y#59>?Y#>?67676767Y"
    + "&%Y+U#Y%596Y.^#Y$676767675AC^; b=:! A-b=7$ A;^1-Y$=%&+6767676767^#6767676756W#=K*G%I#5E&^#K$%&9^# b&7! A#G#]#E#&5b&;! 9E$&A&FL b&?!  ^#L%^+FA^EA,=F1^@ L+^?L)=L0^AL+^HL0b= & &b `G!&^b&b   %b `(!F7%b&X2 A$^XA*FIE\'Y#b&-% %Y$F1J+F#A5!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#&\'H$9G+9%!#!#!#!#!#!#!#!#!#!#!#!#!#!#E#G#FhK+G#Y\'A)]8E*]#!#!#!#!#!#!#!C$!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#%C)!#!#B##!#!#!#!#%]#!#!#&!#!C$!#!#!#!#!#!#!#!#!#!#B&#B&#!#!#!#!#!#!#!#B%#!#A&!# # #!#!#A9E$!#&E##F(\'F$"
    + "\'F%\'F8I#G#)^%\'A$L\'^#;=A\'FUY%A)I#FSI1G#A)Y#J+A\'G3F\'Y$&9F#\'J+F=G)Y#F8G,I#A,9F>A$G$)FP\'I#G%I#G#I$Y. %J+A%Y#F&\'%F*J+F& FJG\'I#G#I#G#A*F$\'F)\')A#J+A#Y%F1%F\'^$&)\')FS\'&G$F#G#F&G#&\'&A9F#%Y#F,)G#I#Y#&E#)\'A+F\'A#F\'A#F\'A*F( F( CL<E%C*%]#A%b#1! FDI#\'I#\'I#9)\'A#J+A\'&b CO#&A-F8A%FRA%4b `. T#b `! T#b `0 43b `D!3b&O& A#b&K! AGC(A-C&A&&\'F+:F. F& & F# F# b&M! ]2A1b&L& 76^1FbA#FWA(=AAF-;^$G1Y(679A\'G19U#X#6767676767676767Y#67Y%X$Y$ Y%5676767Y$:5Z$ 9;Y#A%F& b&(# A#1 Y$;Y$679:95Y#J+Y#Z$Y#B;697<8<C;6:7:67967Y#F+%FNE#F@A$F\'A#F\'A#F\'A#F"
    + "$A$[#:<=[# =Z%^#A+Q$^#A#F- F; F4 F# F0A#F/ACb&]! A&Y$A%LNA$^*KVL%^2L#^$ ^.A$=AP^N\'b ## F>A$FRA0\'L<A%FAL%A*F5+F)+A&FGG&A&F? 9FEA%F)9K&AKBICIFpA#J+A\'BEA%CEA%FIA)FUA,9B, B0 B( B# C, C0 C( C#Aeb&X% A*F7A+F)A9E\' EK E*AgF\'A#& FM F#A$&A#F8 9L)F8^#L(F@A)L*AQF4 F#A&L&F7L\'A$9F;A&9AbFYA%L#F#L1A#LO&G$ G#A&G%F% F$ F>A#G$A%\'L*A(Y*A(F>L#9F>L$AAF)=F=G#A%L&Y(A*FWA$Y(F7A#L)F4A&L)F3A(Y%A-L(b 1! FkAXBTA.CTA(L\'FEG%A)J+b G% L@ FK G#5A#F#AmG$F>L+&A)F7G,L%Y&A7F3G%Y%AGF6L(A5F8A*)\')FVG0Y(A%L5J+\'F#G#&A*G$)FNI$G%I#G#Y#1Y%\'A+1A#F:A(J+A"
    + "\'G$FEG&)G) J+Y%&I#&A)FD\'Y#&A*G#)FQI$G*I#F%Y%G%9)\'J+&9&Y$ L5A,F3 F:I$G$I#\')G#Y\'\'F#\'A`F( & F% F0 F+9A\'FP\'I$G)A&J+A\'G#I# F)A#F#A#F7 F( F# F& G#&I#\'I%A#I#A#I$A#&A\')A&F&I#A#G(A$G&b ,# FVI$G)I#G$)\'F%Y&J+Y# 9\'F$A?FQI$G\')\'I%G#)G#F#9&A)J+b G# FPI$G%A#I%G#)G#Y8F%G#ACFQI$G)I#\')G#Y$&A,J+A\'Y.A4FL\')\'I#G\')\'&9A\'J+AWF<A#G$I#G%)G&A%J+L#Y$=F(b Z# FMI$G*)G#9b E! BACAJ+L*A-F)A#&A#F) F# F9I\' I#A#G#)\'&)&)\'Y$A*J+AhF)A#FHI$G%A#G#I%\'&9&)A<&G+FIG\')&G%Y)\'A)&G\'I#G$FOG.)G#Y$&Y&A.FkA(Y+b W$ F* FF)G( G\')\'&Y&A+J+L4A$Y#F?A#G7 )G()G#)G#AkF( "
    + "F# FGG\'A$\' G# G(&\'A)J+A\'F\' F# FAI& G# I#\')\'&A(J+b W% F4G#I#Y#A(G#&)F. FCI#G&A$I#\')\'Y.J+b 7! &A0L6^)[%^2A.9b&;/ b G! b+P!  Y&A,b&%$ b -J b&B! Y#A.b&Q1 Q1\'F\'G0b K` b&(* b Z\'#b&Z) A(F@ J+A%Y#Fq J+A\'F?A#G&9A+FQG(Y&^%E%9=A+J+ L( F6A&F4b Q+ BACAL8Y%b F! FmA%\'&IXA(G%E.AbE#9%\'A,I#A/&b W@!&A)b&74 AK&A(&b H,#E% E( E# b&D% A0&A>F$A#&A/F%A)b&-\' b %E b&L! A&F.A$F*A(F+A#=G#9Q%b =*!GOA#G8A*b=U! A^b=W$ A+^HA#^^I#G$^$I\'Q)G)^#G(^?G%^_A6^dG$=b [! L5A-L5A-b=8! A*L:b (# B;C;B;C( C3B;C;! B#A#!A#B#A#B% B)C% # C( C,B;C;B# B%A#B) B"
    + "( C;B# B% B& !A$B( C;B;C;B;C;B;C;B;C;B;C;B;C=A#B::C::C\'B::C::C\'B::C::C\'B::C::C\'B::C::C\'!#A#JSb= ) GX^%GS^)\'^/\'^#Y&A0G& G0b 12 C+&C5A\'C\'b 6$ G( G2A#G( G# G&A&E`AB\'b Q! FNA$G(E(A#J+A%&=b  & F?\'A2FMG%J+A&;b 1( F<%G%J+b G, F( F% F# F0 b&&$ A#L*G(AJBCCCG(%A%J+A%Y#b 2- L]=L$;L%AnLN=L0b #$ F% F< F# &A#& F+ F% & &A\'&A%& & & F$ F# &A#& & & & & F# &A#F% F( F% F% & F+ F2A&F$ F& F2AUZ#b /% ^MA%b=E! A-^0A#^0 ^0 ^FA+L.b=B# AY^>A.^MA%^*A(^#A/^\'b ;# b=]$ ]&b=9, A%^2A$^.A$b=X! A%b=@! A\'^-A%=A0^-A%^YA)^+A\'^IA)^?A#^#Apb=5& A-"
    + "^/A#^.A$^*A(^O ^(A)^/A%^*A(^*A(b=4#  ^XAFJ+b \'1 &b   %b   %b ?<#&AA&b Y !&A\'&b =$ &A#&b  ;!&A/&b PU!&A0&b M* &b CG b&?) b C8 &b *.!&A&&b ?!!&b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b 2R!1A?b1A! b  # b\'Q$ b   %b   %b   %b 1Y$3b   %b   %b   %b ^a$3A#3b   %b   %b   %b ^a$3"};
};
function jnc_Charset() {
    let a = this; jl_Object.call(a);
    a.$canonicalName = null;
    a.$aliases = null;
}
let jnc_Charset__init_ = ($this, $canonicalName, $aliases) => {
    let var$3, var$4, var$5;
    var$3 = $aliases.data;
    jnc_Charset_checkCanonicalName($canonicalName);
    var$4 = var$3.length;
    var$5 = 0;
    while (var$5 < var$4) {
        jnc_Charset_checkCanonicalName(var$3[var$5]);
        var$5 = var$5 + 1 | 0;
    }
    $this.$canonicalName = $canonicalName;
    $this.$aliases = $aliases.$clone0();
},
jnc_Charset_checkCanonicalName = $name => {
    let $i, $c;
    if (jl_String_isEmpty($name))
        $rt_throw(jnc_IllegalCharsetNameException__init_($name));
    if (!jnc_Charset_isValidCharsetStart(jl_String_charAt($name, 0)))
        $rt_throw(jnc_IllegalCharsetNameException__init_($name));
    $i = 1;
    while ($i < $name.$nativeString.length) {
        a: {
            $c = jl_String_charAt($name, $i);
            switch ($c) {
                case 43:
                case 45:
                case 46:
                case 58:
                case 95:
                    break;
                default:
                    if (jnc_Charset_isValidCharsetStart($c))
                        break a;
                    else
                        $rt_throw(jnc_IllegalCharsetNameException__init_($name));
            }
        }
        $i = $i + 1 | 0;
    }
},
jnc_Charset_isValidCharsetStart = $c => {
    a: {
        b: {
            if (!($c >= 48 && $c <= 57) && !($c >= 97 && $c <= 122)) {
                if ($c < 65)
                    break b;
                if ($c > 90)
                    break b;
            }
            $c = 1;
            break a;
        }
        $c = 0;
    }
    return $c;
},
jnci_UTF8Charset = $rt_classWithoutFields(jnc_Charset),
jnci_UTF8Charset_INSTANCE = null,
jnci_UTF8Charset_newDecoder = $this => {
    let var$1;
    var$1 = new jnci_UTF8Decoder;
    jnci_BufferedDecoder__init_(var$1, $this, 0.3333333432674408, 0.5);
    return var$1;
},
jnci_UTF8Charset__clinit_ = () => {
    let var$1;
    var$1 = new jnci_UTF8Charset;
    jnc_Charset__init_(var$1, $rt_s(20), $rt_createArray(jl_String, 0));
    jnci_UTF8Charset_INSTANCE = var$1;
},
ju_Objects = $rt_classWithoutFields(),
ju_Objects_equals = ($a, $b) => {
    if ($a === $b)
        return 1;
    return $a !== null ? $a.$equals($b) : $b !== null ? 0 : 1;
},
ju_Objects_toString = $o => {
    let var$2;
    var$2 = $rt_s(15);
    if ($o !== null)
        var$2 = $o.$toString();
    return var$2;
},
ju_Objects_requireNonNull = $obj => {
    if ($obj !== null)
        return $obj;
    $obj = new jl_NullPointerException;
    jl_Throwable__init_0($obj, $rt_s(2));
    $rt_throw($obj);
},
ju_Objects_checkFromIndexSize = ($fromIndex, $size, $length) => {
    let var$4;
    if ($fromIndex >= 0 && $size >= 0 && $size <= ($length - $fromIndex | 0))
        return $fromIndex;
    var$4 = new jl_IndexOutOfBoundsException;
    jl_Throwable__init_(var$4);
    $rt_throw(var$4);
};
function ji_ByteArrayOutputStream() {
    let a = this; ji_OutputStream.call(a);
    a.$buf = null;
    a.$count0 = 0;
}
let ji_ByteArrayOutputStream__init_0 = $this => {
    $this.$buf = $rt_createByteArray(32);
},
ji_ByteArrayOutputStream__init_ = () => {
    let var_0 = new ji_ByteArrayOutputStream();
    ji_ByteArrayOutputStream__init_0(var_0);
    return var_0;
},
ji_ByteArrayOutputStream_write = ($this, $b, $off, $len) => {
    let $i, var$5, var$6, var$7, var$8;
    $i = $this.$count0 + $len | 0;
    var$5 = $this.$buf.data.length;
    if (var$5 < $i) {
        var$6 = jl_Math_max($i, (var$5 * 3 | 0) / 2 | 0);
        $this.$buf = ju_Arrays_copyOf($this.$buf, var$6);
    }
    $i = 0;
    while ($i < $len) {
        var$7 = $b.data;
        var$8 = $this.$buf.data;
        var$6 = $this.$count0;
        $this.$count0 = var$6 + 1 | 0;
        var$5 = $off + 1 | 0;
        var$8[var$6] = var$7[$off];
        $i = $i + 1 | 0;
        $off = var$5;
    }
},
ji_ByteArrayOutputStream_toByteArray = $this => {
    return ju_Arrays_copyOf($this.$buf, $this.$count0);
},
jl_IndexOutOfBoundsException = $rt_classWithoutFields(jl_RuntimeException),
jl_IllegalArgumentException = $rt_classWithoutFields(jl_RuntimeException),
jl_IllegalArgumentException__init_0 = $this => {
    jl_Throwable__init_($this);
},
jl_IllegalArgumentException__init_ = () => {
    let var_0 = new jl_IllegalArgumentException();
    jl_IllegalArgumentException__init_0(var_0);
    return var_0;
},
jl_IllegalArgumentException__init_1 = ($this, $message) => {
    jl_Throwable__init_0($this, $message);
},
jl_IllegalArgumentException__init_2 = var_0 => {
    let var_1 = new jl_IllegalArgumentException();
    jl_IllegalArgumentException__init_1(var_1, var_0);
    return var_1;
};
function jnc_IllegalCharsetNameException() {
    jl_IllegalArgumentException.call(this);
    this.$charsetName = null;
}
let jnc_IllegalCharsetNameException__init_0 = ($this, $charsetName) => {
    jl_Throwable__init_($this);
    $this.$charsetName = $charsetName;
},
jnc_IllegalCharsetNameException__init_ = var_0 => {
    let var_1 = new jnc_IllegalCharsetNameException();
    jnc_IllegalCharsetNameException__init_0(var_1, var_0);
    return var_1;
},
jl_Cloneable = $rt_classWithoutFields(0),
jl_CloneNotSupportedException = $rt_classWithoutFields(jl_Exception),
jl_StringIndexOutOfBoundsException = $rt_classWithoutFields(jl_IndexOutOfBoundsException),
jl_Runnable = $rt_classWithoutFields(0);
function jl_Thread() {
    let a = this; jl_Object.call(a);
    a.$uncaughtExceptionHandler = null;
    a.$id = Long_ZERO;
    a.$timeSliceStart = Long_ZERO;
    a.$finishedLock = null;
    a.$key0 = null;
    a.$name17 = null;
    a.$alive = 0;
    a.$target1 = null;
}
let jl_Thread_mainThread = null,
jl_Thread_currentThread = null,
jl_Thread_nextId = 0,
jl_Thread_activeCount = 0,
jl_Thread_defaultUncaughtExceptionHandler = null,
jl_Thread__init_0 = ($this, $target, $name) => {
    let var$3;
    $this.$finishedLock = new jl_Object;
    $this.$alive = 1;
    $this.$name17 = $name;
    $this.$target1 = $target;
    var$3 = jl_Thread_nextId;
    jl_Thread_nextId = var$3 + 1 | 0;
    $this.$id = Long_fromInt(var$3);
},
jl_Thread__init_ = (var_0, var_1) => {
    let var_2 = new jl_Thread();
    jl_Thread__init_0(var_2, var_0, var_1);
    return var_2;
},
jl_Thread_setCurrentThread = $thread_0 => {
    if (jl_Thread_currentThread !== $thread_0)
        jl_Thread_currentThread = $thread_0;
    jl_Thread_currentThread.$timeSliceStart = jl_System_currentTimeMillis();
},
jl_Thread_run = $this => {
    let var$1, var$2, var$3, var$4, $$je;
    if ($this.$target1 !== null) {
        igbc_CompilerMain_$callClinit();
        var$1 = $rt_str((document.getElementById('codeInput')).value);
        (document.getElementById('consoleOutput')).innerText = "";
        a: {
            try {
                igbcs_JavaStandardLibrariesUtil_download();
                igbcw_CodeRunner_run(igbc_Compiler_compile(jl_String_trim(var$1), $rt_s(21)));
                break a;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_Exception) {
                    var$1 = $$je;
                } else {
                    throw $$e;
                }
            }
            var$2 = jl_System_out();
            var$3 = var$1.$getMessage();
            var$1 = jl_Class_getName(jl_Object_getClass(var$1));
            var$4 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$4);
            jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$4, $rt_s(22)), var$3), $rt_s(23)), var$1);
            var$2.$println0(jl_AbstractStringBuilder_toString(var$4));
        }
    }
},
jl_Thread_currentThread0 = () => {
    return jl_Thread_currentThread;
},
jl_Thread_getUncaughtExceptionHandler = $this => {
    let var$1;
    var$1 = $this.$uncaughtExceptionHandler;
    if (var$1 !== null)
        return var$1;
    return jl_Thread_defaultUncaughtExceptionHandler;
},
jl_Thread__clinit_ = () => {
    let var$1;
    var$1 = jl_Thread__init_(null, $rt_s(24));
    jl_Thread_mainThread = var$1;
    jl_Thread_currentThread = var$1;
    jl_Thread_nextId = 1;
    jl_Thread_activeCount = 1;
    jl_Thread_defaultUncaughtExceptionHandler = new jl_DefaultUncaughtExceptionHandler;
},
igbc_CompilerMain$lambda$main$0$lambda$_6_0 = $rt_classWithoutFields(),
jl_Thread$UncaughtExceptionHandler = $rt_classWithoutFields(0),
jl_DefaultUncaughtExceptionHandler = $rt_classWithoutFields(),
jl_DefaultUncaughtExceptionHandler_uncaughtException = ($this, $t, $e) => {
    jl_Throwable_printStackTrace0($e);
},
otp_PlatformRunnable = $rt_classWithoutFields(0);
function jl_Thread$start$lambda$_4_0() {
    jl_Object.call(this);
    this.$_03 = null;
}
let jl_Thread$start$lambda$_4_0_run = var$0 => {
    let var$1, var$2, var$3, $$je;
    var$1 = var$0.$_03;
    a: {
        b: {
            c: {
                d: {
                    try {
                        jl_Thread_activeCount = jl_Thread_activeCount + 1 | 0;
                        jl_Thread_setCurrentThread(var$1);
                        var$1.$key0 = jl_Object__init_0();
                        jl_Thread_run(var$1);
                    } catch ($$e) {
                        $$je = $rt_wrapException($$e);
                        if ($$je instanceof jl_Throwable) {
                            var$2 = $$je;
                            break d;
                        } else{
                            var$2 = $$je;
                            break c;
                        }
                    }
                    var$2 = var$1.$finishedLock;
                    jl_Object_monitorEnterSync(var$2);
                    e: {
                        try {
                            jl_Object_notifyAll(var$2);
                            jl_Object_monitorExitSync(var$2);
                            break e;
                        } catch ($$e) {
                            $$je = $rt_wrapException($$e);
                            var$1 = $$je;

                        }
                        jl_Object_monitorExitSync(var$2);
                        $rt_throw(var$1);
                    }
                    var$1.$alive = 0;
                    jl_Thread_activeCount = jl_Thread_activeCount - 1 | 0;
                    var$1.$key0 = null;
                    jl_Thread_setCurrentThread(jl_Thread_mainThread);
                    break a;
                }
                try {
                    jl_DefaultUncaughtExceptionHandler_uncaughtException(jl_Thread_getUncaughtExceptionHandler(var$1), var$1, var$2);
                    break b;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    var$2 = $$je;

                }
            }
            var$3 = var$1.$finishedLock;
            jl_Object_monitorEnterSync(var$3);
            f: {
                try {
                    jl_Object_notifyAll(var$3);
                    jl_Object_monitorExitSync(var$3);
                    break f;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    var$1 = $$je;

                }
                jl_Object_monitorExitSync(var$3);
                $rt_throw(var$1);
            }
            var$1.$alive = 0;
            jl_Thread_activeCount = jl_Thread_activeCount - 1 | 0;
            var$1.$key0 = null;
            jl_Thread_setCurrentThread(jl_Thread_mainThread);
            $rt_throw(var$2);
        }
        var$2 = var$1.$finishedLock;
        jl_Object_monitorEnterSync(var$2);
        g: {
            try {
                jl_Object_notifyAll(var$2);
                jl_Object_monitorExitSync(var$2);
                break g;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                var$1 = $$je;

            }
            jl_Object_monitorExitSync(var$2);
            $rt_throw(var$1);
        }
        var$1.$alive = 0;
        jl_Thread_activeCount = jl_Thread_activeCount - 1 | 0;
        var$1.$key0 = null;
        jl_Thread_setCurrentThread(jl_Thread_mainThread);
    }
},
jl_Math = $rt_classWithoutFields(),
jl_Math_randomImpl = () => {
    return Math.random();
},
jl_Math_min = ($a, $b) => {
    if ($a < $b)
        $b = $a;
    return $b;
},
jl_Math_max = ($a, $b) => {
    if ($a > $b)
        $b = $a;
    return $b;
},
ju_Arrays = $rt_classWithoutFields(),
ju_Arrays_copyOf1 = ($array, $length) => {
    let $result, var$4, $sz, $i;
    $array = $array.data;
    $result = $rt_createCharArray($length);
    var$4 = $result.data;
    $sz = jl_Math_min($length, $array.length);
    $i = 0;
    while ($i < $sz) {
        var$4[$i] = $array[$i];
        $i = $i + 1 | 0;
    }
    return $result;
},
ju_Arrays_copyOf = ($array, $length) => {
    let $result, var$4, $sz, $i;
    $array = $array.data;
    $result = $rt_createByteArray($length);
    var$4 = $result.data;
    $sz = jl_Math_min($length, $array.length);
    $i = 0;
    while ($i < $sz) {
        var$4[$i] = $array[$i];
        $i = $i + 1 | 0;
    }
    return $result;
},
ju_Arrays_copyOf0 = ($original, $newLength) => {
    let var$3, $result, $sz, $i;
    var$3 = $original.data;
    $result = jlr_Array_newInstance(jl_Class_getComponentType(jl_Object_getClass($original)), $newLength);
    $sz = jl_Math_min($newLength, var$3.length);
    $i = 0;
    while ($i < $sz) {
        $result.data[$i] = var$3[$i];
        $i = $i + 1 | 0;
    }
    return $result;
},
ju_Arrays_fill0 = ($a, $fromIndex, $toIndex, $val) => {
    let var$5, var$6, var$7;
    if ($fromIndex > $toIndex) {
        var$5 = new jl_IllegalArgumentException;
        jl_Throwable__init_(var$5);
        $rt_throw(var$5);
    }
    while ($fromIndex < $toIndex) {
        var$6 = $a.data;
        var$7 = $fromIndex + 1 | 0;
        var$6[$fromIndex] = $val;
        $fromIndex = var$7;
    }
},
ju_Arrays_fill = ($a, $val) => {
    ju_Arrays_fill0($a, 0, $a.data.length, $val);
},
ju_Arrays_stream = $array => {
    let var$2, var$3, var$4;
    var$2 = $array.data;
    var$3 = new jusi_ArrayStreamImpl;
    var$4 = var$2.length;
    var$3.$array4 = $array;
    var$3.$index3 = 0;
    var$3.$end2 = var$4;
    var$3.$size4 = var$4 - 0 | 0;
    return var$3;
};
function jl_Object$Monitor() {
    let a = this; jl_Object.call(a);
    a.$enteringThreads = null;
    a.$notifyListeners = null;
    a.$owner = null;
    a.$count = 0;
}
let jl_IllegalMonitorStateException = $rt_classWithoutFields(jl_RuntimeException),
otp_PlatformQueue = $rt_classWithoutFields(),
otp_PlatformQueue_isEmpty$static = $this => {
    return $this.length ? 0 : 1;
},
otp_PlatformQueue_remove$static = $this => {
    $this = $this.shift();
    otji_JSWrapper_$callClinit();
    if ($this !== null && !($this instanceof $rt_objcls()))
        $this = otji_JSWrapper_wrap($this);
    return $this;
},
otr_EventQueue$Event = $rt_classWithoutFields(0),
jl_Object$NotifyListener = $rt_classWithoutFields(0),
jl_IllegalStateException = $rt_classWithoutFields(jl_RuntimeException);
function otji_JSWrapper() {
    jl_Object.call(this);
    this.$js = null;
}
let otji_JSWrapper_hashCodes = null,
otji_JSWrapper_wrappers = null,
otji_JSWrapper_stringWrappers = null,
otji_JSWrapper_numberWrappers = null,
otji_JSWrapper_undefinedWrapper = null,
otji_JSWrapper_stringFinalizationRegistry = null,
otji_JSWrapper_numberFinalizationRegistry = null,
otji_JSWrapper_$callClinit = () => {
    otji_JSWrapper_$callClinit = $rt_eraseClinit(otji_JSWrapper);
    otji_JSWrapper__clinit_();
},
otji_JSWrapper__init_0 = ($this, $js) => {
    otji_JSWrapper_$callClinit();
    $this.$js = $js;
},
otji_JSWrapper__init_ = var_0 => {
    let var_1 = new otji_JSWrapper();
    otji_JSWrapper__init_0(var_1, var_0);
    return var_1;
},
otji_JSWrapper_wrap = $o => {
    let $jsNumber, $type, $isObject, $existingRef, $existing, $wrapper, $wrapperAsJs;
    otji_JSWrapper_$callClinit();
    if ($o === null)
        return null;
    $jsNumber = $o;
    $type = $rt_str(typeof $jsNumber);
    $isObject = !jl_String_equals($type, $rt_s(25)) && !jl_String_equals($type, $rt_s(26)) ? 0 : 1;
    if ($isObject && $o[$rt_jso_marker] === true)
        return $o;
    $o = otji_JSWrapper_wrappers;
    if ($o !== null) {
        if ($isObject) {
            $existingRef = $o.get($jsNumber);
            $existing = (typeof $existingRef == 'undefined' ? 1 : 0) ? void 0 : $existingRef.deref();
            if (!(typeof $existing == 'undefined' ? 1 : 0))
                return $existing;
            $wrapper = otji_JSWrapper__init_($jsNumber);
            otji_JSWrapper_wrappers.set($jsNumber, new WeakRef($wrapper));
            return $wrapper;
        }
        if (jl_String_equals($type, $rt_s(27))) {
            $existingRef = otji_JSWrapper_stringWrappers.get($jsNumber);
            $existing = (typeof $existingRef == 'undefined' ? 1 : 0) ? void 0 : $existingRef.deref();
            if (!(typeof $existing == 'undefined' ? 1 : 0))
                return $existing;
            $wrapper = otji_JSWrapper__init_($jsNumber);
            $wrapperAsJs = $wrapper;
            otji_JSWrapper_stringWrappers.set($jsNumber, new WeakRef($wrapperAsJs));
            otji_JSWrapper_register$js_body$_4(otji_JSWrapper_stringFinalizationRegistry, $wrapperAsJs, $jsNumber);
            return $wrapper;
        }
        if (jl_String_equals($type, $rt_s(28))) {
            $existingRef = otji_JSWrapper_numberWrappers.get($jsNumber);
            $existing = (typeof $existingRef == 'undefined' ? 1 : 0) ? void 0 : $existingRef.deref();
            if (!(typeof $existing == 'undefined' ? 1 : 0))
                return $existing;
            $wrapper = otji_JSWrapper__init_($jsNumber);
            $wrapperAsJs = $wrapper;
            otji_JSWrapper_numberWrappers.set($jsNumber, new WeakRef($wrapperAsJs));
            otji_JSWrapper_register$js_body$_4(otji_JSWrapper_numberFinalizationRegistry, $wrapperAsJs, $jsNumber);
            return $wrapper;
        }
        if (jl_String_equals($type, $rt_s(29))) {
            $existingRef = otji_JSWrapper_undefinedWrapper;
            $existing = $existingRef === null ? void 0 : $existingRef.deref();
            if (!(typeof $existing == 'undefined' ? 1 : 0))
                return $existing;
            $wrapper = otji_JSWrapper__init_($jsNumber);
            otji_JSWrapper_undefinedWrapper = new WeakRef($wrapper);
            return $wrapper;
        }
    }
    return otji_JSWrapper__init_($jsNumber);
},
otji_JSWrapper_unwrap = $o => {
    otji_JSWrapper_$callClinit();
    if ($o === null)
        return null;
    return $o[$rt_jso_marker] === true ? $o : $o.$js;
},
otji_JSWrapper_jsToJava = $o => {
    otji_JSWrapper_$callClinit();
    if ($o === null)
        return null;
    return $o instanceof $rt_objcls() ? $o : otji_JSWrapper_wrap($o);
},
otji_JSWrapper__clinit_ = () => {
    let var$1, var$2;
    otji_JSWrapper_hashCodes = new WeakMap();
    otji_JSWrapper_wrappers = !(typeof WeakRef !== 'undefined' ? 1 : 0) ? null : new WeakMap();
    otji_JSWrapper_stringWrappers = !(typeof WeakRef !== 'undefined' ? 1 : 0) ? null : new Map();
    otji_JSWrapper_numberWrappers = !(typeof WeakRef !== 'undefined' ? 1 : 0) ? null : new Map();
    if (otji_JSWrapper_stringWrappers === null)
        var$1 = null;
    else {
        var$2 = new otji_JSWrapper$_clinit_$lambda$_33_0;
        var$1 = new FinalizationRegistry(otji_JS_function(var$2, "accept"));
    }
    otji_JSWrapper_stringFinalizationRegistry = var$1;
    if (otji_JSWrapper_numberWrappers === null)
        var$1 = null;
    else {
        var$2 = new otji_JSWrapper$_clinit_$lambda$_33_1;
        var$1 = new FinalizationRegistry(otji_JS_function(var$2, "accept"));
    }
    otji_JSWrapper_numberFinalizationRegistry = var$1;
},
otji_JSWrapper_register$js_body$_4 = (var$1, var$2, var$3) => {
    return var$1.register(var$2, var$3);
};
function jl_Object$monitorExit$lambda$_8_0() {
    jl_Object.call(this);
    this.$_04 = null;
}
let jl_Object$monitorExit$lambda$_8_0_run = var$0 => {
    let var$1, var$2, var$3, var$4;
    var$1 = var$0.$_04;
    if (!jl_Object_isEmptyMonitor(var$1)) {
        var$2 = var$1.$monitor;
        if (var$2.$owner === null) {
            var$1 = var$2.$enteringThreads;
            if (var$1 !== null && !otp_PlatformQueue_isEmpty$static(var$1)) {
                var$3 = otp_PlatformQueue_remove$static(var$2.$enteringThreads);
                var$2.$enteringThreads = null;
                var$1 = var$3.$_01;
                var$2 = var$3.$_10;
                var$4 = var$3.$_2;
                var$3 = var$3.$_3;
                jl_Thread_setCurrentThread(var$1);
                var$2 = var$2.$monitor;
                var$2.$owner = var$1;
                var$2.$count = var$2.$count + var$4 | 0;
                otpp_AsyncCallbackWrapper_complete(var$3, null);
            }
        }
    }
},
otjc_JSWeakRef = $rt_classWithoutFields(),
otjc_JSFinalizationRegistryConsumer = $rt_classWithoutFields(0),
otji_JSWrapper$_clinit_$lambda$_33_0 = $rt_classWithoutFields(),
otji_JSWrapper$_clinit_$lambda$_33_0_accept$exported$0 = (var$0, var$1) => {
    let var$2;
    var$1 = otji_JSWrapper_jsToJava(var$1);
    var$2 = otji_JSWrapper_stringWrappers;
    var$1 = otji_JSWrapper_unwrap(var$1);
    var$2.delete(var$1);
},
otji_JSWrapper$_clinit_$lambda$_33_1 = $rt_classWithoutFields(),
otji_JSWrapper$_clinit_$lambda$_33_1_accept$exported$0 = (var$0, var$1) => {
    let var$2;
    var$1 = otji_JSWrapper_jsToJava(var$1);
    var$2 = otji_JSWrapper_numberWrappers;
    var$1 = otji_JSWrapper_unwrap(var$1);
    var$2.delete(var$1);
},
otjc_JSObjects = $rt_classWithoutFields(),
otjc_JSUndefined = $rt_classWithoutFields(),
oti_AsyncCallback = $rt_classWithoutFields(0);
function otpp_AsyncCallbackWrapper() {
    jl_Object.call(this);
    this.$realAsyncCallback = null;
}
let otpp_AsyncCallbackWrapper_create = $realAsyncCallback => {
    let var$2;
    var$2 = new otpp_AsyncCallbackWrapper;
    var$2.$realAsyncCallback = $realAsyncCallback;
    return var$2;
},
otpp_AsyncCallbackWrapper_complete = ($this, $result) => {
    $this.$realAsyncCallback.$complete($result);
},
otpp_AsyncCallbackWrapper_error = ($this, $e) => {
    $this.$realAsyncCallback.$error($e);
};
function jl_Object$monitorEnterWait$lambda$_6_0() {
    let a = this; jl_Object.call(a);
    a.$_01 = null;
    a.$_10 = null;
    a.$_2 = 0;
    a.$_3 = null;
}
let igbcs_JavaStandardLibrariesUtil = $rt_classWithoutFields(),
igbcs_JavaStandardLibrariesUtil_pregen = null,
igbcs_JavaStandardLibrariesUtil_$assertionsDisabled = 0,
igbcs_JavaStandardLibrariesUtil_download = () => {
    let $window, $strings, $code, var$4, var$5, $data, var$7, var$8, $code0, $currentClass, $s, var$12, $node, $$je;
    if (!ju_AbstractCollection_isEmpty(igbcs_JavaStandardLibrariesUtil_pregen))
        return igbcs_JavaStandardLibrariesUtil_pregen;
    a: {
        $window = window;
        if (jl_String_isEmpty($rt_str($window.localStorage.getItem("data"))))
            while (true) {
                if (!jl_String_isEmpty($rt_str($window.localStorage.getItem("data"))))
                    break a;
            }
    }
    $strings = ju_ArrayList__init_();
    $code = $rt_str($window.localStorage.getItem("data"));
    var$4 = otci_Base64Impl_reverse;
    var$5 = $rt_createByteArray($code.$nativeString.length);
    $data = var$5.data;
    var$7 = 0;
    var$8 = $data.length;
    while (var$7 < var$8) {
        $data[var$7] = jl_String_charAt($code, var$7) << 24 >> 24;
        var$7 = var$7 + 1 | 0;
    }
    var$5 = otci_Base64Impl_decode0(var$5, var$4);
    $code0 = $rt_s(2);
    $currentClass = new juz_ZipInputStream;
    $window = ji_ByteArrayInputStream__init_(var$5);
    $s = new ji_PushbackInputStream;
    ji_FilterInputStream__init_($s, $window);
    $s.$buf1 = $rt_createByteArray(512);
    $s.$pos = 512;
    $window = new juz_Inflater;
    $window.$nowrap = 1;
    b: {
        try {
            $window.$impl = cjj_Inflater__init_0(1);
            break b;
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof cjj_GZIPException) {
            } else {
                throw $$e;
            }
        }
    }
    ji_FilterInputStream__init_($currentClass, $s);
    $currentClass.$inf = $window;
    $currentClass.$buf0 = $rt_createByteArray(512);
    $currentClass.$hdrBuf = $rt_createByteArray(26);
    $window = new juz_CRC32;
    $window.$impl0 = cjj_CRC32__init_();
    $currentClass.$crc = $window;
    $currentClass.$nameBuf = $rt_createByteArray(256);
    $currentClass.$charBuf = $rt_createCharArray(256);
    c: {
        while (true) {
            $window = juz_ZipInputStream_getNextEntry($currentClass);
            if ($window === null)
                break;
            if (!jl_String_equals($window.$name9, $rt_s(30)))
                continue;
            else {
                $code0 = jl_String__init_8(ji_InputStream_readNBytes($currentClass, 2147483647));
                break c;
            }
        }
    }
    if (!$currentClass.$closed) {
        juz_ZipInputStream_closeEntry($currentClass);
        if (!$currentClass.$closed) {
            $window = $currentClass.$inf;
            $window.$inRead = 0;
            $window.$inLength = 0;
            $window.$impl = null;
            $currentClass.$closed = 1;
            $currentClass.$eof = 1;
            ji_FilterInputStream_close($currentClass);
        }
    }
    if (jl_String_isEmpty($code0)) {
        $strings = new jl_IllegalStateException;
        jl_Throwable__init_0($strings, $rt_s(31));
        $rt_throw($strings);
    }
    $currentClass = null;
    var$5 = (jl_String_split($code0, $rt_s(4))).data;
    var$8 = var$5.length;
    var$12 = 0;
    while (var$12 < var$8) {
        $s = var$5[var$12];
        if (!jl_String_isEmpty($s)) {
            $data = jl_String_split($s, $rt_s(32));
            if (jl_String_startsWith($s, $rt_s(33))) {
                $data = $data.data;
                $currentClass = igbca_APIClass__init_($data[1]);
                ju_ArrayList_add($strings, $data[1]);
            } else if (jl_String_startsWith($s, $rt_s(34))) {
                if (!igbcs_JavaStandardLibrariesUtil_$assertionsDisabled && $currentClass === null) {
                    $strings = new jl_AssertionError;
                    jl_Throwable__init_($strings);
                    $rt_throw($strings);
                }
                $currentClass.$extendingClass = $data.data[1];
            } else if (jl_String_startsWith($s, $rt_s(35))) {
                if (!igbcs_JavaStandardLibrariesUtil_$assertionsDisabled && $currentClass === null) {
                    $strings = new jl_AssertionError;
                    jl_Error__init_($strings);
                    $rt_throw($strings);
                }
                $data = $data.data;
                $node = ooat_MethodNode__init_(1 + (!jl_String_equals($data[4], $rt_s(36)) ? 0 : 8) | 0, $data[2], $data[3], null, null);
                ju_ArrayList_add($currentClass.$methods, igbca_APIMethod__init_0($node, $currentClass));
            } else if (jl_String_startsWith($s, $rt_s(37))) {
                if (!igbcs_JavaStandardLibrariesUtil_$assertionsDisabled && $currentClass === null)
                    $rt_throw(jl_AssertionError__init_());
                $data = $data.data;
                ju_ArrayList_add($currentClass.$fields, igbca_APIField__init_($currentClass, $data[2], $data[3], igbcat_AccessType__init_(igbcat_VisibilityType_PUBLIC, 0), jl_String_equals($data[4], $rt_s(36))));
            }
        }
        var$12 = var$12 + 1 | 0;
    }
    ju_AbstractCollection_addAll(igbcs_JavaStandardLibrariesUtil_pregen, $strings);
    return $strings;
},
igbcs_JavaStandardLibrariesUtil__clinit_ = () => {
    igbcs_JavaStandardLibrariesUtil_$assertionsDisabled = 0;
    igbcs_JavaStandardLibrariesUtil_pregen = ju_ArrayList__init_();
},
igbc_Compiler = $rt_classWithoutFields(),
igbc_Compiler_compile = ($code, $className) => {
    let $compiled, var$4, var$5, var$6, var$7, var$8, var$9, var$10, var$11, var$12, $$je;
    $compiled = igbca_APIClass__init_($className);
    $className = jl_System_out();
    var$4 = !jl_String_isEmpty($compiled.$packageName) ? $rt_s(38) : $rt_s(39);
    var$5 = $compiled.$fullName;
    var$6 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$6);
    jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$6, $rt_s(40)), var$4), var$5), 34);
    $className.$println0(jl_AbstractStringBuilder_toString(var$6));
    var$4 = new ju_ArrayList;
    $code = ju_List_of(jl_String_split($code, $rt_s(4)));
    ju_ArrayList__init_1(var$4, ju_TemplateCollections$ImmutableArrayList_size($code));
    $code = ju_AbstractList_iterator($code);
    var$7 = 0;
    while (true) {
        var$8 = var$4.$array.data;
        var$9 = var$8.length;
        if (var$7 >= var$9)
            break;
        var$8[var$7] = ju_AbstractList$1_next($code);
        var$7 = var$7 + 1 | 0;
    }
    var$4.$size0 = var$9;
    ju_ArrayList_replaceAll(var$4, new igbc_Compiler$compile$lambda$_2_0);
    ju_ArrayList_replaceAll(var$4, new igbc_Compiler$compile$lambda$_2_1);
    $code = ju_AbstractList_iterator(var$4);
    while (true) {
        if (!ju_AbstractList$1_hasNext($code)) {
            ju_ArrayList_replaceAll(var$4, new igbc_Compiler$compile$lambda$_2_3);
            if (igbcu_CommentUtils_IS_IN_MULTILINE_COMMENT) {
                $code = new igbce_CompilerException;
                jl_Throwable__init_0($code, $rt_s(41));
                $rt_throw($code);
            }
            $code = igbcu_BracketUtil_parseBrackets(jl_String_join($rt_s(4), var$4));
            $className = igbcu_SymbolParser_parseSymbols(jl_String_join($rt_s(4), var$4));
            var$5 = igbcs_UsesSymbol__init_();
            if (!ju_AbstractCollection_isEmpty($className)) {
                var$4 = ju_ArrayList_get($className, 0);
                if (var$4 instanceof igbcs_UsesSymbol)
                    var$5 = var$4;
            }
            var$10 = jl_System_currentTimeMillis();
            a: {
                try {
                    ju_AbstractCollection_addAll(var$5.$validClassesFull, igbcs_JavaStandardLibrariesUtil_download());
                    break a;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_Exception) {
                        $code = $$je;
                    } else {
                        throw $$e;
                    }
                }
                $className = new jl_RuntimeException;
                jl_Throwable__init_2($className, $code);
                $rt_throw($className);
            }
            var$4 = var$5.$mappings;
            if (var$4.$cachedValues === null) {
                var$6 = new ju_HashMap$2;
                var$6.$this$08 = var$4;
                var$4.$cachedValues = var$6;
            }
            var$4 = var$4.$cachedValues;
            var$6 = new ju_HashMap$ValueIterator;
            var$4 = var$4.$this$08;
            var$6.$associatedMap = var$4;
            var$6.$expectedModCount = var$4.$modCount0;
            var$6.$futureEntry = null;
            while (true) {
                if (!ju_HashMap$AbstractMapIterator_hasNext(var$6)) {
                    var$6 = jl_System_out();
                    var$11 = Long_toNumber(Long_sub(jl_System_currentTimeMillis(), var$10)) / 1000.0;
                    var$4 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$4);
                    jl_StringBuilder_append(jl_StringBuilder_append1(jl_StringBuilder_append(var$4, $rt_s(42)), var$11), $rt_s(43));
                    var$6.$println0(jl_AbstractStringBuilder_toString(var$4));
                    $className = ju_AbstractList_iterator($className);
                    while (ju_AbstractList$1_hasNext($className)) {
                        (ju_AbstractList$1_next($className)).$applyChanges($compiled, var$5);
                    }
                    $className = ju_HashMap__init_();
                    var$4 = ju_AbstractList_iterator($code.$contains2);
                    while (ju_AbstractList$1_hasNext(var$4)) {
                        var$6 = ju_AbstractList$1_next(var$4);
                        var$12 = igbcm_MethodCompiler_parseMethodTypes(var$6.$beforeBracket, var$5, $compiled);
                        ju_ArrayList_add($compiled.$methods, var$12);
                        ju_HashMap_put($className, var$6, var$12);
                    }
                    $code = ju_AbstractList_iterator($code.$contains2);
                    while (ju_AbstractList$1_hasNext($code)) {
                        var$4 = ju_AbstractList$1_next($code);
                        igbcm_MethodCompiler_compile(var$4, var$5, $compiled, ju_HashMap_get($className, var$4));
                    }
                    igbca_APIClass_addDefaultInit($compiled);
                    (jl_System_out()).$println0($rt_s(44));
                    return $compiled;
                }
                if (var$6.$expectedModCount != var$6.$associatedMap.$modCount0) {
                    $code = new ju_ConcurrentModificationException;
                    jl_Throwable__init_($code);
                    $rt_throw($code);
                }
                if (!ju_HashMap$AbstractMapIterator_hasNext(var$6))
                    break;
                var$4 = var$6.$futureEntry;
                if (var$4 === null) {
                    var$8 = var$6.$associatedMap.$elementData.data;
                    var$9 = var$6.$position1;
                    var$6.$position1 = var$9 + 1 | 0;
                    var$4 = var$8[var$9];
                    var$6.$currentEntry0 = var$4;
                    var$6.$futureEntry = var$4.$next4;
                    var$6.$prevEntry = null;
                } else {
                    var$12 = var$6.$currentEntry0;
                    if (var$12 !== null)
                        var$6.$prevEntry = var$12;
                    var$6.$currentEntry0 = var$4;
                    var$6.$futureEntry = var$4.$next4;
                }
                var$4 = var$6.$currentEntry0.$value;
                if (!ju_AbstractCollection_contains(var$5.$validClassesFull, var$4)) {
                    $code = new igbce_SymbolNotFoundException;
                    $className = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_($className);
                    jl_StringBuilder_append(jl_StringBuilder_append($className, var$4), $rt_s(45));
                    jl_Throwable__init_0($code, jl_AbstractStringBuilder_toString($className));
                    $rt_throw($code);
                }
            }
            $code = new ju_NoSuchElementException;
            jl_Throwable__init_($code);
            $rt_throw($code);
        }
        if (jl_String_isEmpty(jl_String_trim(ju_AbstractList$1_next($code)))) {
            if ($code.$removeIndex < 0)
                break;
            ju_AbstractList$1_checkConcurrentModification($code);
            $code.$this$0.$remove($code.$removeIndex);
            $code.$modCount2 = $code.$this$0.$modCount;
            var$7 = $code.$removeIndex;
            var$9 = $code.$index1;
            if (var$7 < var$9)
                $code.$index1 = var$9 - 1 | 0;
            $code.$size2 = $code.$size2 - 1 | 0;
            $code.$removeIndex = (-1);
        }
    }
    $code = new jl_IllegalStateException;
    jl_Throwable__init_($code);
    $rt_throw($code);
},
igbcw_CodeRunner = $rt_classWithoutFields(),
igbcw_CodeRunner_FIELD_VALUES = null,
igbcw_CodeRunner_run = $compiled => {
    let $main, $apiMethodCode, var$4;
    (jl_System_out()).$println0($rt_s(46));
    $main = igbca_APIClass_getMethod($compiled, $rt_s(24), $rt_s(47));
    $apiMethodCode = ju_AbstractList_iterator($compiled.$fields);
    while (ju_AbstractList$1_hasNext($apiMethodCode)) {
        var$4 = ju_AbstractList$1_next($apiMethodCode);
        ju_HashMap_put(igbcw_CodeRunner_FIELD_VALUES, var$4, null);
    }
    $compiled = ju_AbstractList_iterator($main.$code);
    a: {
        while (true) {
            if (!ju_AbstractList$1_hasNext($compiled))
                break a;
            $apiMethodCode = ju_AbstractList$1_next($compiled);
            if ($apiMethodCode instanceof igbcaci_ReturnCode)
                break;
            igbcw_CodeRunner_execute($apiMethodCode, $main);
        }
    }
},
igbcw_CodeRunner_execute = ($code, $method) => {
    let var$3, $setFieldCode, $disbandReturn, $callCode, var$7, $$je;
    a: {
        ju_Objects_requireNonNull($code);
        if ($code === null)
            var$3 = (-1);
        else {
            b: {
                c: {
                    d: {
                        e: {
                            f: {
                                g: {
                                    switch (0) {
                                        case 0:
                                            break;
                                        case 1:
                                            break g;
                                        case 2:
                                            break f;
                                        case 3:
                                            break e;
                                        case 4:
                                            break d;
                                        case 5:
                                            break c;
                                        default:
                                            break b;
                                    }
                                    if ($code instanceof igbcaci_DisbandReturn) {
                                        var$3 = 0;
                                        break a;
                                    }
                                }
                                if ($code instanceof igbcacigl_SetFieldCode) {
                                    var$3 = 1;
                                    break a;
                                }
                            }
                            if ($code instanceof igbcacigc_MethodCallCode) {
                                var$3 = 2;
                                break a;
                            }
                        }
                        if ($code instanceof igbcacigl_LoadConstantCode) {
                            var$3 = 3;
                            break a;
                        }
                    }
                    if ($code instanceof igbcacigc_FieldGetCode) {
                        var$3 = 4;
                        break a;
                    }
                }
                if ($code instanceof igbcaci_IfStatementCode) {
                    var$3 = 5;
                    break a;
                }
            }
            var$3 = 6;
        }
    }
    h: {
        switch (var$3) {
            case 0:
                igbcw_CodeRunner_execute($code.$code2, $method);
                $code = null;
                break h;
            case 1:
                $setFieldCode = $code;
                $code = igbcw_CodeRunner_FIELD_VALUES;
                $disbandReturn = $setFieldCode.$field;
                if ($disbandReturn.$owner3 === $method.$owner0) {
                    $code = ju_HashMap_put($code, $disbandReturn, igbcw_CodeRunner_execute($setFieldCode.$value9, $method));
                    break h;
                }
                $code = new jl_UnsupportedOperationException;
                jl_Throwable__init_0($code, $rt_s(48));
                $rt_throw($code);
            case 2:
                $callCode = $code;
                $code = $callCode.$target0;
                if ($code.$isStatic0)
                    $disbandReturn = null;
                else {
                    $disbandReturn = $callCode.$arguments0;
                    if (ju_AbstractCollection_isEmpty($disbandReturn)) {
                        $code = new ju_NoSuchElementException;
                        jl_Throwable__init_($code);
                        $rt_throw($code);
                    }
                    $disbandReturn = igbcw_CodeRunner_execute(ju_ArrayList_remove($disbandReturn, 0), $code);
                }
                $setFieldCode = ju_Collection_stream($callCode.$arguments0);
                $callCode = new igbcw_CallRunner$run$lambda$_1_0;
                $callCode.$_08 = $code;
                var$7 = jusi_SimpleStreamImpl_toArray0(jusi_SimpleStreamImpl_map($setFieldCode, $callCode));
                $setFieldCode = jl_String_replace0($code.$owner0.$fullName, 47, 46);
                if (jl_String_equals($setFieldCode, $method.$owner0.$fullName)) {
                    $code = new jl_UnsupportedOperationException;
                    jl_Throwable__init_0($code, $rt_s(49));
                    $rt_throw($code);
                }
                i: {
                    try {
                        $method = jl_Class_forName($setFieldCode);
                        break i;
                    } catch ($$e) {
                        $$je = $rt_wrapException($$e);
                        if ($$je instanceof jl_Exception) {
                        } else {
                            throw $$e;
                        }
                    }
                    $code = new igbcwp_FailedToRunCodeException;
                    $method = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_($method);
                    jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($method, $rt_s(50)), $setFieldCode), 34);
                    jl_Throwable__init_0($code, jl_AbstractStringBuilder_toString($method));
                    $rt_throw($code);
                }
                j: {
                    $code = $code.$name;
                    if ($method !== $rt_cls(jl_System)) {
                        if ($method === $rt_cls(ji_PrintStream)) {
                            igbcwp_SupportedMethodCalls_handlePrintStream($code, $disbandReturn, var$7);
                            $code = null;
                            break j;
                        }
                        if ($method === $rt_cls(jl_String)) {
                            $code = igbcwp_SupportedMethodCalls_handleString($disbandReturn, $code, var$7);
                            break j;
                        }
                        $disbandReturn = new jl_UnsupportedOperationException;
                        $method = jl_Class_getName($method);
                        $setFieldCode = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_($setFieldCode);
                        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($setFieldCode, $method), $rt_s(51)), $code), $rt_s(52));
                        jl_Throwable__init_0($disbandReturn, jl_AbstractStringBuilder_toString($setFieldCode));
                        $rt_throw($disbandReturn);
                    }
                    k: {
                        var$3 = (-1);
                        switch (jl_String_hashCode($code)) {
                            case -1731372222:
                                if (!jl_String_equals($code, $rt_s(53)))
                                    break k;
                                var$3 = 3;
                                break k;
                            case 1084758859:
                                if (!jl_String_equals($code, $rt_s(54)))
                                    break k;
                                var$3 = 2;
                                break k;
                            case 1555800524:
                                if (!jl_String_equals($code, $rt_s(55)))
                                    break k;
                                var$3 = 0;
                                break k;
                            case 1878443937:
                                if (!jl_String_equals($code, $rt_s(56)))
                                    break k;
                                var$3 = 1;
                                break k;
                            default:
                        }
                    }
                    l: {
                        switch (var$3) {
                            case 0:
                                break;
                            case 1:
                                $code = jl_Long_valueOf(Long_fromNumber(performance.now() * 1000000.0));
                                break l;
                            case 2:
                                $code = var$7.data[0];
                                if (jl_System_properties === null) {
                                    $disbandReturn = new ju_Properties;
                                    ju_Hashtable__init_($disbandReturn);
                                    ju_Hashtable_put($disbandReturn, $rt_s(57), $rt_s(58));
                                    ju_Hashtable_put($disbandReturn, $rt_s(59), $rt_s(60));
                                    ju_Hashtable_put($disbandReturn, $rt_s(61), $rt_s(62));
                                    ju_Hashtable_put($disbandReturn, $rt_s(63), $rt_s(64));
                                    ju_Hashtable_put($disbandReturn, $rt_s(65), $rt_s(4));
                                    ju_Hashtable_put($disbandReturn, $rt_s(66), $rt_s(67));
                                    ju_Hashtable_put($disbandReturn, $rt_s(68), $rt_s(58));
                                    ju_Hashtable_put($disbandReturn, $rt_s(69), $rt_s(62));
                                    $method = new ju_Properties;
                                    ju_Hashtable__init_($method);
                                    $method.$defaults = $disbandReturn;
                                    jl_System_properties = $method;
                                }
                                $code = ju_Properties_getProperty(jl_System_properties, $code);
                                break l;
                            case 3:
                                $code = var$7.data[0];
                                $code = ju_Hashtable_remove(jl_System_properties, $code);
                                break l;
                            default:
                                $method = new jl_UnsupportedOperationException;
                                $disbandReturn = new jl_StringBuilder;
                                jl_AbstractStringBuilder__init_($disbandReturn);
                                jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($disbandReturn, $rt_s(70)), $code), $rt_s(71));
                                jl_Throwable__init_0($method, jl_AbstractStringBuilder_toString($disbandReturn));
                                $rt_throw($method);
                        }
                        $code = jl_Long_valueOf(jl_System_currentTimeMillis());
                    }
                }
                break h;
            case 3:
                $code = $code.$value10;
                break h;
            case 4:
                $code = igbcw_GetRunner_run($code, $method);
                break h;
            case 5:
                $code = igbcw_IfStatementHandler_run($code, $method);
                break h;
            default:
        }
        $code = null;
    }
    return $code;
},
igbcw_CodeRunner__clinit_ = () => {
    igbcw_CodeRunner_FIELD_VALUES = ju_HashMap__init_();
},
jl_Iterable = $rt_classWithoutFields(0),
ju_Collection = $rt_classWithoutFields(0),
ju_Collection_stream = $this => {
    let var$1, var$2;
    var$1 = new jusi_StreamOverSpliterator;
    var$2 = new jusi_SpliteratorOverCollection;
    var$2.$collection = $this;
    var$1.$spliterator = var$2;
    return var$1;
},
ju_AbstractCollection = $rt_classWithoutFields(),
ju_AbstractCollection_isEmpty = $this => {
    return $this.$size0 ? 0 : 1;
},
ju_AbstractCollection_contains = ($this, $o) => {
    let $iter;
    $iter = ju_AbstractList_iterator($this);
    while (ju_AbstractList$1_hasNext($iter)) {
        if (ju_Objects_equals(ju_AbstractList$1_next($iter), $o))
            return 1;
    }
    return 0;
},
ju_AbstractCollection_toArray = ($this, $a) => {
    let var$2, $i, $i_0, $iter, var$6, var$7;
    var$2 = $a.data;
    $i = $this.$size0;
    $i_0 = var$2.length;
    if ($i_0 < $i)
        $a = jlr_Array_newInstance(jl_Class_getComponentType(jl_Object_getClass($a)), $i);
    else
        while ($i < $i_0) {
            var$2[$i] = null;
            $i = $i + 1 | 0;
        }
    $i_0 = 0;
    $iter = ju_AbstractList_iterator($this);
    while (ju_AbstractList$1_hasNext($iter)) {
        var$6 = $a.data;
        var$7 = $i_0 + 1 | 0;
        var$6[$i_0] = ju_AbstractList$1_next($iter);
        $i_0 = var$7;
    }
    return $a;
},
ju_AbstractCollection_addAll = ($this, $c) => {
    let $changed, $iter;
    $changed = 0;
    $iter = ju_AbstractList_iterator($c);
    while (ju_AbstractList$1_hasNext($iter)) {
        if (!$this.$add(ju_AbstractList$1_next($iter)))
            continue;
        $changed = 1;
    }
    return $changed;
},
ju_SequencedCollection = $rt_classWithoutFields(0),
ju_List = $rt_classWithoutFields(0),
ju_List_of = $elements => {
    let var$2, var$3, var$4;
    var$2 = $elements.data;
    var$3 = var$2.length;
    var$4 = 0;
    while (var$4 < var$3) {
        ju_Objects_requireNonNull(var$2[var$4]);
        var$4 = var$4 + 1 | 0;
    }
    return ju_TemplateCollections$ImmutableArrayList__init_($elements.$clone0());
};
function ju_AbstractList() {
    ju_AbstractCollection.call(this);
    this.$modCount = 0;
}
let ju_AbstractList_iterator = $this => {
    let var$1;
    var$1 = new ju_AbstractList$1;
    var$1.$this$0 = $this;
    var$1.$modCount2 = $this.$modCount;
    var$1.$size2 = $this.$size();
    var$1.$removeIndex = (-1);
    return var$1;
},
ju_AbstractList_remove = ($this, $index) => {
    let var$2;
    var$2 = new jl_UnsupportedOperationException;
    jl_Throwable__init_(var$2);
    $rt_throw(var$2);
},
ju_AbstractList_indexOf = ($this, $o) => {
    let $sz, $i;
    $sz = $this.$size0;
    $i = 0;
    while (true) {
        if ($i >= $sz)
            return (-1);
        if (ju_Objects_equals($o, ju_ArrayList_get($this, $i)))
            break;
        $i = $i + 1 | 0;
    }
    return $i;
},
ju_AbstractList_equals = ($this, $other) => {
    let $list, $i;
    if (!$rt_isInstance($other, ju_List))
        return 0;
    $list = $other;
    if ($this.$size0 != $list.$size0)
        return 0;
    $i = 0;
    while ($i < $list.$size0) {
        if (!ju_Objects_equals(ju_ArrayList_get($this, $i), ju_ArrayList_get($list, $i)))
            return 0;
        $i = $i + 1 | 0;
    }
    return 1;
},
ju_RandomAccess = $rt_classWithoutFields(0);
function ju_ArrayList() {
    let a = this; ju_AbstractList.call(a);
    a.$array = null;
    a.$size0 = 0;
}
let ju_ArrayList__init_2 = $this => {
    ju_ArrayList__init_1($this, 10);
},
ju_ArrayList__init_ = () => {
    let var_0 = new ju_ArrayList();
    ju_ArrayList__init_2(var_0);
    return var_0;
},
ju_ArrayList__init_1 = ($this, $initialCapacity) => {
    let var$2;
    if ($initialCapacity >= 0) {
        $this.$array = $rt_createArray(jl_Object, $initialCapacity);
        return;
    }
    var$2 = new jl_IllegalArgumentException;
    jl_Throwable__init_(var$2);
    $rt_throw(var$2);
},
ju_ArrayList__init_0 = var_0 => {
    let var_1 = new ju_ArrayList();
    ju_ArrayList__init_1(var_1, var_0);
    return var_1;
},
ju_ArrayList_ensureCapacity = ($this, $minCapacity) => {
    let var$2, $newLength;
    var$2 = $this.$array.data.length;
    if (var$2 < $minCapacity) {
        $newLength = var$2 >= 1073741823 ? 2147483647 : jl_Math_max($minCapacity, jl_Math_max(var$2 * 2 | 0, 5));
        $this.$array = ju_Arrays_copyOf0($this.$array, $newLength);
    }
},
ju_ArrayList_get = ($this, $index) => {
    ju_ArrayList_checkIndex($this, $index);
    return $this.$array.data[$index];
},
ju_ArrayList_size = $this => {
    return $this.$size0;
},
ju_ArrayList_add = ($this, $element) => {
    let var$2, var$3;
    ju_ArrayList_ensureCapacity($this, $this.$size0 + 1 | 0);
    var$2 = $this.$array.data;
    var$3 = $this.$size0;
    $this.$size0 = var$3 + 1 | 0;
    var$2[var$3] = $element;
    $this.$modCount = $this.$modCount + 1 | 0;
    return 1;
},
ju_ArrayList_add0 = ($this, $index, $element) => {
    let var$3, var$4, $i, var$6;
    if ($index >= 0) {
        var$3 = $this.$size0;
        if ($index <= var$3) {
            ju_ArrayList_ensureCapacity($this, var$3 + 1 | 0);
            var$4 = $this.$size0;
            $i = var$4;
            while ($i > $index) {
                var$6 = $this.$array.data;
                var$6[$i] = var$6[$i - 1 | 0];
                $i = $i + (-1) | 0;
            }
            $this.$array.data[$index] = $element;
            $this.$size0 = var$4 + 1 | 0;
            $this.$modCount = $this.$modCount + 1 | 0;
            return;
        }
    }
    $element = new jl_IndexOutOfBoundsException;
    jl_Throwable__init_($element);
    $rt_throw($element);
},
ju_ArrayList_remove = ($this, $i) => {
    let var$2, $old, var$4, $i_0;
    ju_ArrayList_checkIndex($this, $i);
    var$2 = $this.$array.data;
    $old = var$2[$i];
    var$4 = $this.$size0 - 1 | 0;
    $this.$size0 = var$4;
    while ($i < var$4) {
        $i_0 = $i + 1 | 0;
        var$2[$i] = var$2[$i_0];
        $i = $i_0;
    }
    var$2[var$4] = null;
    $this.$modCount = $this.$modCount + 1 | 0;
    return $old;
},
ju_ArrayList_checkIndex = ($this, $index) => {
    let var$2;
    if ($index >= 0 && $index < $this.$size0)
        return;
    var$2 = new jl_IndexOutOfBoundsException;
    jl_Throwable__init_(var$2);
    $rt_throw(var$2);
},
ju_ArrayList_replaceAll = ($this, $operator) => {
    let $i, var$3;
    $i = 0;
    while ($i < $this.$size0) {
        var$3 = $this.$array.data;
        var$3[$i] = $operator.$apply(var$3[$i]);
        $i = $i + 1 | 0;
    }
},
ju_ArrayList_toString = $this => {
    let $i, $length, $buffer, var$4;
    $i = $this.$size0;
    if (!$i)
        return $rt_s(72);
    $length = $i - 1 | 0;
    $buffer = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_0($buffer, $i * 16 | 0);
    jl_AbstractStringBuilder_append($buffer, 91);
    $i = 0;
    while ($i < $length) {
        var$4 = $this.$array.data;
        jl_AbstractStringBuilder_append0(jl_StringBuilder_append($buffer, var$4[$i] !== $this ? var$4[$i] : $rt_s(73)), $rt_s(74));
        $i = $i + 1 | 0;
    }
    var$4 = $this.$array.data;
    jl_StringBuilder_append($buffer, var$4[$length] !== $this ? var$4[$length] : $rt_s(73));
    jl_AbstractStringBuilder_append($buffer, 93);
    return jl_AbstractStringBuilder_toString($buffer);
},
ju_Base64 = $rt_classWithoutFields();
function igbca_APIClass() {
    let a = this; jl_Object.call(a);
    a.$name0 = null;
    a.$packageName = null;
    a.$fullName = null;
    a.$type4 = null;
    a.$access2 = null;
    a.$isAbstract = 0;
    a.$extendingClass = null;
    a.$interfaces = null;
    a.$fields = null;
    a.$methods = null;
}
let igbca_APIClass__init_0 = ($this, $className) => {
    $this.$extendingClass = $rt_s(75);
    $this.$interfaces = ju_ArrayList__init_();
    $this.$fields = ju_ArrayList__init_();
    $this.$methods = ju_ArrayList__init_();
    $this.$fullName = $className;
    $this.$name0 = jl_String_substring0($className, jl_String_lastIndexOf($className, 47) + 1 | 0);
    $className = $this.$fullName;
    $this.$packageName = jl_String_substring($className, 0, jl_String_lastIndexOf($className, 47) + 1 | 0);
    $this.$access2 = igbcat_AccessType__init_(igbcat_VisibilityType_PUBLIC, 0);
    ju_ArrayList_add(igbca_APILoader_allClasses, $this);
},
igbca_APIClass__init_ = var_0 => {
    let var_1 = new igbca_APIClass();
    igbca_APIClass__init_0(var_1, var_0);
    return var_1;
},
igbca_APIClass_getMethod = ($this, $name, $desc) => {
    let var$3, $method;
    var$3 = ju_AbstractList_iterator($this.$methods);
    while (true) {
        if (!ju_AbstractList$1_hasNext(var$3)) {
            $desc = new jl_NullPointerException;
            jl_Throwable__init_0($desc, $rt_s(76));
            $rt_throw($desc);
        }
        $method = ju_AbstractList$1_next(var$3);
        if (jl_String_equals($method.$name, $name) && jl_String_equals(igbca_APIMethod_compileDesc($method), $desc))
            break;
    }
    return $method;
},
igbca_APIClass_getField = ($this, $name, $desc) => {
    let var$3, $field;
    var$3 = ju_AbstractList_iterator($this.$fields);
    while (true) {
        if (!ju_AbstractList$1_hasNext(var$3)) {
            $desc = new jl_NullPointerException;
            jl_Throwable__init_0($desc, $rt_s(77));
            $rt_throw($desc);
        }
        $field = ju_AbstractList$1_next(var$3);
        if (jl_String_equals($field.$name1, $name) && jl_String_equals($field.$desc0, $desc))
            break;
    }
    return $field;
},
igbca_APIClass_addDefaultInit = $this => {
    let var$1, $method, $call, var$4, var$5;
    var$1 = ju_AbstractList_iterator($this.$methods);
    while (true) {
        if (!ju_AbstractList$1_hasNext(var$1)) {
            $method = igbca_APIMethod__init_($rt_s(78), $this);
            $method.$outputType = igbcat_Argument__init_(ooa_Type_VOID_TYPE);
            $method.$isStatic0 = 0;
            $method.$type1 = igbcat_AccessType__init_(igbcat_VisibilityType_PUBLIC, 0);
            $call = new igbcacigc_MethodCallCode;
            var$4 = igbca_APIClass_getMethod(igbca_APILoader_getOrMake($rt_s(75)), $rt_s(78), $rt_s(79));
            var$5 = $rt_createArray(igbcacig_ValueReturnCode, 1);
            var$5.data[0] = new igbcacigp_ThisCode;
            igbcacigc_MethodCallCode__init_($call, var$4, 0, var$5);
            $call.$opcode0 = 183;
            ju_ArrayList_add($method.$code, $call);
            ju_ArrayList_add($method.$code, new igbcaci_ReturnCode);
            ju_ArrayList_add($this.$methods, $method);
            return;
        }
        if (jl_String_equals((ju_AbstractList$1_next(var$1)).$name, $rt_s(78)))
            break;
    }
},
jl_Error = $rt_classWithoutFields(jl_Throwable),
jl_Error__init_ = $this => {
    jl_Throwable__init_($this);
},
jl_Error__init_0 = () => {
    let var_0 = new jl_Error();
    jl_Error__init_(var_0);
    return var_0;
},
jl_AssertionError = $rt_classWithoutFields(jl_Error),
jl_AssertionError__init_0 = $this => {
    jl_Throwable__init_($this);
},
jl_AssertionError__init_ = () => {
    let var_0 = new jl_AssertionError();
    jl_AssertionError__init_0(var_0);
    return var_0;
};
function ooa_MethodVisitor() {
    let a = this; jl_Object.call(a);
    a.$api = 0;
    a.$mv = null;
}
function ooat_MethodNode() {
    let a = this; ooa_MethodVisitor.call(a);
    a.$access1 = 0;
    a.$name7 = null;
    a.$desc1 = null;
    a.$signature3 = null;
    a.$exceptions = null;
    a.$parameters = null;
    a.$visibleAnnotations = null;
    a.$invisibleAnnotations2 = null;
    a.$visibleTypeAnnotations4 = null;
    a.$invisibleTypeAnnotations3 = null;
    a.$attrs1 = null;
    a.$annotationDefault = null;
    a.$visibleAnnotableParameterCount = 0;
    a.$visibleParameterAnnotations = null;
    a.$invisibleAnnotableParameterCount = 0;
    a.$invisibleParameterAnnotations = null;
    a.$instructions = null;
    a.$tryCatchBlocks = null;
    a.$maxStack = 0;
    a.$maxLocals = 0;
    a.$localVariables = null;
    a.$visibleLocalVariableAnnotations = null;
    a.$invisibleLocalVariableAnnotations = null;
}
let ooat_MethodNode__init_0 = ($this, $access, $name, $descriptor, $signature, $exceptions) => {
    let var$6;
    var$6 = null;
    $this.$api = 589824;
    $this.$mv = var$6;
    $this.$access1 = $access;
    $this.$name7 = $name;
    $this.$desc1 = $descriptor;
    $this.$signature3 = $signature;
    $this.$exceptions = ooat_Util_asArrayList($exceptions);
    if (!($access & 1024))
        $this.$localVariables = ju_ArrayList__init_0(5);
    $this.$tryCatchBlocks = ju_ArrayList__init_();
    $this.$instructions = new ooat_InsnList;
    if (jl_Object_getClass($this) === $rt_cls(ooat_MethodNode))
        return;
    $name = new jl_IllegalStateException;
    jl_Throwable__init_($name);
    $rt_throw($name);
},
ooat_MethodNode__init_ = (var_0, var_1, var_2, var_3, var_4) => {
    let var_5 = new ooat_MethodNode();
    ooat_MethodNode__init_0(var_5, var_0, var_1, var_2, var_3, var_4);
    return var_5;
},
ooat_MethodNode_visitAnnotationDefault = $this => {
    let var$1, var$2;
    var$1 = new ooat_AnnotationNode;
    var$2 = new ooat_MethodNode$1;
    var$2.$this$03 = $this;
    ju_ArrayList__init_1(var$2, 0);
    ooat_AnnotationNode__init_1(var$1, var$2);
    return var$1;
},
ooat_MethodNode_visitAnnotation = ($this, $descriptor, $visible) => {
    let $annotation;
    $annotation = ooat_AnnotationNode__init_($descriptor);
    if (!$visible)
        $this.$invisibleAnnotations2 = ooat_Util_add($this.$invisibleAnnotations2, $annotation);
    else
        $this.$visibleAnnotations = ooat_Util_add($this.$visibleAnnotations, $annotation);
    return $annotation;
},
ooat_MethodNode_visitTypeAnnotation = ($this, $typeRef, $typePath, $descriptor, $visible) => {
    let $typeAnnotation;
    $typeAnnotation = ooat_TypeAnnotationNode__init_($typeRef, $typePath, $descriptor);
    if (!$visible)
        $this.$invisibleTypeAnnotations3 = ooat_Util_add($this.$invisibleTypeAnnotations3, $typeAnnotation);
    else
        $this.$visibleTypeAnnotations4 = ooat_Util_add($this.$visibleTypeAnnotations4, $typeAnnotation);
    return $typeAnnotation;
},
ooat_MethodNode_visitAttribute = ($this, $attribute) => {
    $this.$attrs1 = ooat_Util_add($this.$attrs1, $attribute);
},
ooat_MethodNode_visitFrame = ($this, $type, $numLocal, $local, $numStack, $stack) => {
    let var$6, var$7, var$8, var$9;
    var$6 = $this.$instructions;
    var$7 = new ooat_FrameNode;
    var$8 = $local !== null ? ooat_MethodNode_getLabelNodes0($this, $local) : null;
    $local = $stack !== null ? ooat_MethodNode_getLabelNodes0($this, $stack) : null;
    a: {
        ooat_AbstractInsnNode__init_(var$7, (-1));
        var$7.$type5 = $type;
        switch ($type) {
            case -1:
            case 0:
                var$7.$local = ooat_Util_asArrayList0($numLocal, var$8);
                var$7.$stack = ooat_Util_asArrayList0($numStack, $local);
                break a;
            case 1:
                var$7.$local = ooat_Util_asArrayList0($numLocal, var$8);
                break a;
            case 2:
                var$9 = ju_ArrayList__init_0($numLocal);
                $type = 0;
                while ($type < $numLocal) {
                    ju_ArrayList_add(var$9, null);
                    $type = $type + 1 | 0;
                }
                var$7.$local = var$9;
                break a;
            case 3:
                break;
            case 4:
                var$7.$stack = ooat_Util_asArrayList0(1, $local);
                break a;
            default:
                var$7 = new jl_IllegalArgumentException;
                jl_Throwable__init_(var$7);
                $rt_throw(var$7);
        }
    }
    ooat_InsnList_add(var$6, var$7);
},
ooat_MethodNode_visitInsn = ($this, $opcode) => {
    let var$2, var$3;
    var$2 = $this.$instructions;
    var$3 = new ooat_InsnNode;
    ooat_AbstractInsnNode__init_(var$3, $opcode);
    ooat_InsnList_add(var$2, var$3);
},
ooat_MethodNode_visitIntInsn = ($this, $opcode, $operand) => {
    let var$3, var$4;
    var$3 = $this.$instructions;
    var$4 = new ooat_IntInsnNode;
    ooat_AbstractInsnNode__init_(var$4, $opcode);
    var$4.$operand = $operand;
    ooat_InsnList_add(var$3, var$4);
},
ooat_MethodNode_visitVarInsn = ($this, $opcode, $varIndex) => {
    let var$3, var$4;
    var$3 = $this.$instructions;
    var$4 = new ooat_VarInsnNode;
    ooat_AbstractInsnNode__init_(var$4, $opcode);
    var$4.$var = $varIndex;
    ooat_InsnList_add(var$3, var$4);
},
ooat_MethodNode_visitTypeInsn = ($this, $opcode, $type) => {
    let var$3, var$4;
    var$3 = $this.$instructions;
    var$4 = new ooat_TypeInsnNode;
    ooat_AbstractInsnNode__init_(var$4, $opcode);
    var$4.$desc7 = $type;
    ooat_InsnList_add(var$3, var$4);
},
ooat_MethodNode_visitFieldInsn = ($this, $opcode, $owner, $name, $descriptor) => {
    let var$5, var$6;
    var$5 = $this.$instructions;
    var$6 = new ooat_FieldInsnNode;
    ooat_AbstractInsnNode__init_(var$6, $opcode);
    var$6.$owner5 = $owner;
    var$6.$name13 = $name;
    var$6.$desc6 = $descriptor;
    ooat_InsnList_add(var$5, var$6);
},
ooat_MethodNode_visitMethodInsn = ($this, $opcodeAndSource, $owner, $name, $descriptor, $isInterface) => {
    let var$6, $opcode, var$8, var$9;
    var$6 = $rt_compare($this.$api, 327680);
    if (var$6 < 0) {
        $opcode = $opcodeAndSource & 256;
        if (!$opcode) {
            if (var$6 < 0 && !$opcode) {
                $opcode = $rt_compare($opcodeAndSource, 185);
                if ($isInterface != ($opcode ? 0 : 1)) {
                    $owner = new jl_UnsupportedOperationException;
                    jl_Throwable__init_0($owner, $rt_s(80));
                    $rt_throw($owner);
                }
                ooat_MethodNode_visitMethodInsn($this, $opcodeAndSource | (var$6 >= 0 ? 0 : 256), $owner, $name, $descriptor, $opcode ? 0 : 1);
            } else {
                var$8 = $this.$mv;
                if (var$8 !== null)
                    var$8.$visitMethodInsn($opcodeAndSource & (-257), $owner, $name, $descriptor, $isInterface);
            }
            return;
        }
    }
    $opcode = $opcodeAndSource & (-257);
    var$8 = $this.$instructions;
    var$9 = new ooat_MethodInsnNode;
    ooat_AbstractInsnNode__init_(var$9, $opcode);
    var$9.$owner6 = $owner;
    var$9.$name19 = $name;
    var$9.$desc10 = $descriptor;
    var$9.$itf = $isInterface;
    ooat_InsnList_add(var$8, var$9);
},
ooat_MethodNode_visitInvokeDynamicInsn = ($this, $name, $descriptor, $bootstrapMethodHandle, $bootstrapMethodArguments) => {
    let var$5, var$6;
    var$5 = $this.$instructions;
    var$6 = new ooat_InvokeDynamicInsnNode;
    ooat_AbstractInsnNode__init_(var$6, 186);
    var$6.$name16 = $name;
    var$6.$desc5 = $descriptor;
    var$6.$bsm = $bootstrapMethodHandle;
    var$6.$bsmArgs = $bootstrapMethodArguments;
    ooat_InsnList_add(var$5, var$6);
},
ooat_MethodNode_visitJumpInsn = ($this, $opcode, $label) => {
    let var$3, var$4;
    var$3 = $this.$instructions;
    var$4 = new ooat_JumpInsnNode;
    $label = ooat_MethodNode_getLabelNode($this, $label);
    ooat_AbstractInsnNode__init_(var$4, $opcode);
    var$4.$label = $label;
    ooat_InsnList_add(var$3, var$4);
},
ooat_MethodNode_visitLabel = ($this, $label) => {
    ooat_InsnList_add($this.$instructions, ooat_MethodNode_getLabelNode($this, $label));
},
ooat_MethodNode_visitLdcInsn = ($this, $value) => {
    let var$2, var$3;
    var$2 = $this.$instructions;
    var$3 = new ooat_LdcInsnNode;
    ooat_AbstractInsnNode__init_(var$3, 18);
    var$3.$cst = $value;
    ooat_InsnList_add(var$2, var$3);
},
ooat_MethodNode_visitIincInsn = ($this, $varIndex, $increment) => {
    let var$3, var$4;
    var$3 = $this.$instructions;
    var$4 = new ooat_IincInsnNode;
    ooat_AbstractInsnNode__init_(var$4, 132);
    var$4.$var0 = $varIndex;
    var$4.$incr = $increment;
    ooat_InsnList_add(var$3, var$4);
},
ooat_MethodNode_visitTableSwitchInsn = ($this, $min, $max, $dflt, $labels) => {
    let var$5, var$6;
    var$5 = $this.$instructions;
    var$6 = new ooat_TableSwitchInsnNode;
    $dflt = ooat_MethodNode_getLabelNode($this, $dflt);
    $labels = ooat_MethodNode_getLabelNodes($this, $labels);
    ooat_AbstractInsnNode__init_(var$6, 170);
    var$6.$min1 = $min;
    var$6.$max1 = $max;
    var$6.$dflt = $dflt;
    var$6.$labels = ooat_Util_asArrayList($labels);
    ooat_InsnList_add(var$5, var$6);
},
ooat_MethodNode_visitLookupSwitchInsn = ($this, $dflt, $keys, $labels) => {
    let var$4, var$5;
    var$4 = $this.$instructions;
    var$5 = new ooat_LookupSwitchInsnNode;
    $dflt = ooat_MethodNode_getLabelNode($this, $dflt);
    $labels = ooat_MethodNode_getLabelNodes($this, $labels);
    ooat_AbstractInsnNode__init_(var$5, 171);
    var$5.$dflt0 = $dflt;
    var$5.$keys = ooat_Util_asArrayList1($keys);
    var$5.$labels0 = ooat_Util_asArrayList($labels);
    ooat_InsnList_add(var$4, var$5);
},
ooat_MethodNode_visitMultiANewArrayInsn = ($this, $descriptor, $numDimensions) => {
    let var$3, var$4;
    var$3 = $this.$instructions;
    var$4 = new ooat_MultiANewArrayInsnNode;
    ooat_AbstractInsnNode__init_(var$4, 197);
    var$4.$desc8 = $descriptor;
    var$4.$dims = $numDimensions;
    ooat_InsnList_add(var$3, var$4);
},
ooat_MethodNode_visitInsnAnnotation = ($this, $typeRef, $typePath, $descriptor, $visible) => {
    let $currentInsn, $typeAnnotation;
    $currentInsn = $this.$instructions.$lastInsn;
    while ($currentInsn.$opcode == (-1)) {
        $currentInsn = $currentInsn.$previousInsn;
    }
    $typeAnnotation = ooat_TypeAnnotationNode__init_($typeRef, $typePath, $descriptor);
    if (!$visible)
        $currentInsn.$invisibleTypeAnnotations4 = ooat_Util_add($currentInsn.$invisibleTypeAnnotations4, $typeAnnotation);
    else
        $currentInsn.$visibleTypeAnnotations = ooat_Util_add($currentInsn.$visibleTypeAnnotations, $typeAnnotation);
    return $typeAnnotation;
},
ooat_MethodNode_visitTryCatchBlock = ($this, $start, $end, $handler, $type) => {
    let $tryCatchBlock, var$6;
    $tryCatchBlock = new ooat_TryCatchBlockNode;
    var$6 = ooat_MethodNode_getLabelNode($this, $start);
    $start = ooat_MethodNode_getLabelNode($this, $end);
    $end = ooat_MethodNode_getLabelNode($this, $handler);
    $tryCatchBlock.$start7 = var$6;
    $tryCatchBlock.$end7 = $start;
    $tryCatchBlock.$handler = $end;
    $tryCatchBlock.$type3 = $type;
    $this.$tryCatchBlocks = ooat_Util_add($this.$tryCatchBlocks, $tryCatchBlock);
},
ooat_MethodNode_visitLocalVariable = ($this, $name, $descriptor, $signature, $start, $end, $index) => {
    let $localVariable;
    $localVariable = new ooat_LocalVariableNode;
    $start = ooat_MethodNode_getLabelNode($this, $start);
    $end = ooat_MethodNode_getLabelNode($this, $end);
    $localVariable.$name18 = $name;
    $localVariable.$desc9 = $descriptor;
    $localVariable.$signature0 = $signature;
    $localVariable.$start9 = $start;
    $localVariable.$end5 = $end;
    $localVariable.$index9 = $index;
    $this.$localVariables = ooat_Util_add($this.$localVariables, $localVariable);
},
ooat_MethodNode_visitLocalVariableAnnotation = ($this, $typeRef, $typePath, $start, $end, $index, $descriptor, $visible) => {
    let $localVariableAnnotation;
    $localVariableAnnotation = new ooat_LocalVariableAnnotationNode;
    $start = ooat_MethodNode_getLabelNodes($this, $start);
    $end = ooat_MethodNode_getLabelNodes($this, $end);
    ooat_TypeAnnotationNode__init_0($localVariableAnnotation, 589824, $typeRef, $typePath, $descriptor);
    $localVariableAnnotation.$start10 = ooat_Util_asArrayList($start);
    $localVariableAnnotation.$end6 = ooat_Util_asArrayList($end);
    $localVariableAnnotation.$index8 = ooat_Util_asArrayList1($index);
    if (!$visible)
        $this.$invisibleLocalVariableAnnotations = ooat_Util_add($this.$invisibleLocalVariableAnnotations, $localVariableAnnotation);
    else
        $this.$visibleLocalVariableAnnotations = ooat_Util_add($this.$visibleLocalVariableAnnotations, $localVariableAnnotation);
    return $localVariableAnnotation;
},
ooat_MethodNode_visitLineNumber = ($this, $line, $start) => {
    let var$3, var$4;
    var$3 = $this.$instructions;
    var$4 = new ooat_LineNumberNode;
    $start = ooat_MethodNode_getLabelNode($this, $start);
    ooat_AbstractInsnNode__init_(var$4, (-1));
    var$4.$line = $line;
    var$4.$start8 = $start;
    ooat_InsnList_add(var$3, var$4);
},
ooat_MethodNode_visitMaxs = ($this, $maxStack, $maxLocals) => {
    $this.$maxStack = $maxStack;
    $this.$maxLocals = $maxLocals;
},
ooat_MethodNode_getLabelNode = ($this, $label) => {
    let var$2;
    if (!($label.$info instanceof ooat_LabelNode)) {
        var$2 = new ooat_LabelNode;
        ooat_AbstractInsnNode__init_(var$2, (-1));
        $label.$info = var$2;
    }
    return $label.$info;
},
ooat_MethodNode_getLabelNodes = ($this, $labels) => {
    let var$2, $labelNodes, var$4, $i;
    $labels = $labels.data;
    var$2 = $labels.length;
    $labelNodes = $rt_createArray(ooat_LabelNode, var$2);
    var$4 = $labelNodes.data;
    $i = 0;
    while ($i < var$2) {
        var$4[$i] = ooat_MethodNode_getLabelNode($this, $labels[$i]);
        $i = $i + 1 | 0;
    }
    return $labelNodes;
},
ooat_MethodNode_getLabelNodes0 = ($this, $objects) => {
    let var$2, $labelNodes, var$4, $i, $o;
    $objects = $objects.data;
    var$2 = $objects.length;
    $labelNodes = $rt_createArray(jl_Object, var$2);
    var$4 = $labelNodes.data;
    $i = 0;
    while ($i < var$2) {
        $o = $objects[$i];
        if ($o instanceof ooa_Label)
            $o = ooat_MethodNode_getLabelNode($this, $o);
        var$4[$i] = $o;
        $i = $i + 1 | 0;
    }
    return $labelNodes;
};
function igbca_APIMethod() {
    let a = this; jl_Object.call(a);
    a.$name = null;
    a.$arguments = null;
    a.$code = null;
    a.$outputType = null;
    a.$type1 = null;
    a.$isStatic0 = 0;
    a.$owner0 = null;
}
let igbca_APIMethod__init_1 = ($this, $node, $owner) => {
    let var$3, var$4, var$5, var$6, var$7, $argumentType;
    $this.$arguments = ju_ArrayList__init_();
    $this.$code = ju_ArrayList__init_();
    $this.$owner0 = $owner;
    $this.$name = $node.$name7;
    $owner = ooa_Type_getDescriptor(ooa_Type_getMethodType($node.$desc1));
    var$3 = $rt_createArray(ooa_Type, ooa_Type_getArgumentCount($owner)).data;
    var$4 = 1;
    var$5 = 0;
    while (jl_String_charAt($owner, var$4) != 41) {
        var$6 = var$4;
        while (jl_String_charAt($owner, var$6) == 91) {
            var$6 = var$6 + 1 | 0;
        }
        var$7 = var$6 + 1 | 0;
        if (jl_String_charAt($owner, var$6) == 76)
            var$7 = jl_Math_max(var$7, jl_String_indexOf($owner, 59, var$7) + 1 | 0);
        var$6 = var$5 + 1 | 0;
        var$3[var$5] = ooa_Type_getTypeInternal($owner, var$4, var$7);
        var$4 = var$7;
        var$5 = var$6;
    }
    var$7 = var$3.length;
    var$4 = 0;
    while (var$4 < var$7) {
        $argumentType = var$3[var$4];
        ju_ArrayList_add($this.$arguments, igbcat_Argument__init_($argumentType));
        var$4 = var$4 + 1 | 0;
    }
    $owner = new igbcat_Argument;
    $argumentType = $node.$desc1;
    var$7 = 1;
    while (jl_String_charAt($argumentType, var$7) != 41) {
        while (jl_String_charAt($argumentType, var$7) == 91) {
            var$7 = var$7 + 1 | 0;
        }
        var$4 = var$7 + 1 | 0;
        if (jl_String_charAt($argumentType, var$7) != 76) {
            var$7 = var$4;
            continue;
        }
        var$7 = jl_Math_max(var$4, jl_String_indexOf($argumentType, 59, var$4) + 1 | 0);
    }
    igbcat_Argument__init_0($owner, ooa_Type_getTypeInternal($argumentType, var$7 + 1 | 0, $argumentType.$nativeString.length));
    $this.$outputType = $owner;
    $this.$type1 = igbcau_ASMUtil_getAccess($node.$access1);
    $this.$isStatic0 = jlr_Modifier_isStatic($node.$access1);
},
igbca_APIMethod__init_0 = (var_0, var_1) => {
    let var_2 = new igbca_APIMethod();
    igbca_APIMethod__init_1(var_2, var_0, var_1);
    return var_2;
},
igbca_APIMethod__init_2 = ($this, $name, $owner) => {
    $this.$arguments = ju_ArrayList__init_();
    $this.$code = ju_ArrayList__init_();
    $this.$name = $name;
    $this.$owner0 = $owner;
},
igbca_APIMethod__init_ = (var_0, var_1) => {
    let var_2 = new igbca_APIMethod();
    igbca_APIMethod__init_2(var_2, var_0, var_1);
    return var_2;
},
igbca_APIMethod_compileDesc = $this => {
    let var$1, var$2, var$3, var$4, var$5;
    var$1 = igbcat_Argument_compile($this.$outputType);
    var$2 = (jusi_SimpleStreamImpl_toArray(jusi_SimpleStreamImpl_map(ju_Collection_stream($this.$arguments), new igbca_APIMethod$compileDesc$lambda$_3_0), new igbca_APIMethod$compileDesc$lambda$_3_1)).data;
    var$3 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$3);
    jl_AbstractStringBuilder_append(var$3, 40);
    var$4 = var$2.length;
    var$5 = 0;
    while (var$5 < var$4) {
        ooa_Type_appendDescriptor(var$2[var$5], var$3);
        var$5 = var$5 + 1 | 0;
    }
    jl_AbstractStringBuilder_append(var$3, 41);
    ooa_Type_appendDescriptor(var$1, var$3);
    return jl_AbstractStringBuilder_toString(var$3);
};
function igbca_APIField() {
    let a = this; jl_Object.call(a);
    a.$owner3 = null;
    a.$name1 = null;
    a.$desc0 = null;
    a.$access7 = null;
    a.$isStatic1 = 0;
}
let igbca_APIField__init_0 = ($this, $owner, $name, $desc, $access, $isStatic) => {
    $this.$owner3 = $owner;
    $this.$name1 = $name;
    $this.$desc0 = $desc;
    $this.$access7 = $access;
    $this.$isStatic1 = $isStatic;
},
igbca_APIField__init_ = (var_0, var_1, var_2, var_3, var_4) => {
    let var_5 = new igbca_APIField();
    igbca_APIField__init_0(var_5, var_0, var_1, var_2, var_3, var_4);
    return var_5;
},
jl_Record = $rt_classWithoutFields();
function igbcat_AccessType() {
    let a = this; jl_Record.call(a);
    a.$visibility = null;
    a.$isFinal = 0;
}
let igbcat_AccessType__init_0 = ($this, $visibility, $isFinal) => {
    $this.$visibility = $visibility;
    $this.$isFinal = $isFinal;
},
igbcat_AccessType__init_ = (var_0, var_1) => {
    let var_2 = new igbcat_AccessType();
    igbcat_AccessType__init_0(var_2, var_0, var_1);
    return var_2;
};
function jl_Enum() {
    let a = this; jl_Object.call(a);
    a.$name8 = null;
    a.$ordinal = 0;
}
let jl_Enum__init_ = ($this, $name, $ordinal) => {
    $this.$name8 = $name;
    $this.$ordinal = $ordinal;
},
jl_Enum_toString = $this => {
    return $this.$name8;
},
jl_Enum_equals = ($this, $other) => {
    return $this !== $other ? 0 : 1;
};
function igbcat_VisibilityType() {
    jl_Enum.call(this);
    this.$data1 = 0;
}
let igbcat_VisibilityType_PUBLIC = null,
igbcat_VisibilityType_PRIVATE = null,
igbcat_VisibilityType_PACKAGE_PRIVATE = null,
igbcat_VisibilityType_PROTECTED = null,
igbcat_VisibilityType_$VALUES = null,
igbcat_VisibilityType_values = () => {
    return igbcat_VisibilityType_$VALUES.$clone0();
},
igbcat_VisibilityType__init_0 = ($this, var$1, var$2, $data) => {
    jl_Enum__init_($this, var$1, var$2);
    $this.$data1 = $data;
},
igbcat_VisibilityType__init_ = (var_0, var_1, var_2) => {
    let var_3 = new igbcat_VisibilityType();
    igbcat_VisibilityType__init_0(var_3, var_0, var_1, var_2);
    return var_3;
},
igbcat_VisibilityType__clinit_ = () => {
    let var$1, var$2, var$3;
    igbcat_VisibilityType_PUBLIC = igbcat_VisibilityType__init_($rt_s(81), 0, 1);
    igbcat_VisibilityType_PRIVATE = igbcat_VisibilityType__init_($rt_s(82), 1, 2);
    igbcat_VisibilityType_PACKAGE_PRIVATE = igbcat_VisibilityType__init_($rt_s(83), 2, 0);
    var$1 = igbcat_VisibilityType__init_($rt_s(84), 3, 4);
    igbcat_VisibilityType_PROTECTED = var$1;
    var$2 = $rt_createArray(igbcat_VisibilityType, 4);
    var$3 = var$2.data;
    var$3[0] = igbcat_VisibilityType_PUBLIC;
    var$3[1] = igbcat_VisibilityType_PRIVATE;
    var$3[2] = igbcat_VisibilityType_PACKAGE_PRIVATE;
    var$3[3] = var$1;
    igbcat_VisibilityType_$VALUES = var$2;
},
ooa_Opcodes = $rt_classWithoutFields(0),
ooa_Opcodes_TOP = null,
ooa_Opcodes_INTEGER = null,
ooa_Opcodes_FLOAT = null,
ooa_Opcodes_DOUBLE = null,
ooa_Opcodes_LONG = null,
ooa_Opcodes_NULL = null,
ooa_Opcodes_UNINITIALIZED_THIS = null,
ooa_Opcodes_$callClinit = () => {
    ooa_Opcodes_$callClinit = $rt_eraseClinit(ooa_Opcodes);
    ooa_Opcodes__clinit_();
},
ooa_Opcodes__clinit_ = () => {
    ooa_Opcodes_TOP = jl_Integer_valueOf(0);
    ooa_Opcodes_INTEGER = jl_Integer_valueOf(1);
    ooa_Opcodes_FLOAT = jl_Integer_valueOf(2);
    ooa_Opcodes_DOUBLE = jl_Integer_valueOf(3);
    ooa_Opcodes_LONG = jl_Integer_valueOf(4);
    ooa_Opcodes_NULL = jl_Integer_valueOf(5);
    ooa_Opcodes_UNINITIALIZED_THIS = jl_Integer_valueOf(6);
},
igbcac_APIMethodCode = $rt_classWithoutFields(),
igbcaci_ReturnCode = $rt_classWithoutFields(igbcac_APIMethodCode);
function ju_Base64$Decoder() {
    jl_Object.call(this);
    this.$mapping = null;
}
let otci_Base64Impl = $rt_classWithoutFields(),
otci_Base64Impl_alphabet = null,
otci_Base64Impl_urlAlphabet = null,
otci_Base64Impl_reverse = null,
otci_Base64Impl_urlReverse = null,
otci_Base64Impl_decode0 = ($text, $mapping) => {
    let $output, var$4, $outputSize, $rem, $i;
    $output = $text.data;
    var$4 = $output.length;
    $outputSize = (var$4 / 4 | 0) * 3 | 0;
    $rem = var$4 % 4 | 0;
    if (!($rem != 2 && $rem != 3))
        $outputSize = $outputSize + ($rem - 1 | 0) | 0;
    $i = var$4 - 1 | 0;
    while ($i >= 0 && $output[$i] == 61) {
        $outputSize = $outputSize + (-1) | 0;
        $i = $i + (-1) | 0;
    }
    $output = $rt_createByteArray($outputSize);
    otci_Base64Impl_decode1($text, $output, $mapping);
    return $output;
},
otci_Base64Impl_decode1 = ($text, $output, $mapping) => {
    let $inputSize, $i, $triples, $c, $j, var$9, $a, $b, $c_0, $d, $out, $rem;
    $text = $text.data;
    $inputSize = $text.length;
    $i = $inputSize - 1 | 0;
    while ($i >= 0 && $text[$i] == 61) {
        $inputSize = $inputSize + (-1) | 0;
        $i = $i + (-1) | 0;
    }
    $triples = ($inputSize / 4 | 0) * 4 | 0;
    $c = 0;
    $j = 0;
    while ($c < $triples) {
        var$9 = $output.data;
        $i = $c + 1 | 0;
        $a = otci_Base64Impl_decode($mapping, $text[$c]);
        $c = $i + 1 | 0;
        $b = otci_Base64Impl_decode($mapping, $text[$i]);
        $i = $c + 1 | 0;
        $c_0 = otci_Base64Impl_decode($mapping, $text[$c]);
        $c = $i + 1 | 0;
        $d = otci_Base64Impl_decode($mapping, $text[$i]);
        $out = $a << 18 | $b << 12 | $c_0 << 6 | $d;
        $i = $j + 1 | 0;
        var$9[$j] = ($out >>> 16 | 0) << 24 >> 24;
        $a = $i + 1 | 0;
        var$9[$i] = ($out >>> 8 | 0) << 24 >> 24;
        $j = $a + 1 | 0;
        var$9[$a] = $out << 24 >> 24;
    }
    $rem = $inputSize - $c | 0;
    if ($rem == 2)
        $output.data[$j] = (otci_Base64Impl_decode($mapping, $text[$c]) << 2 | (otci_Base64Impl_decode($mapping, $text[$c + 1 | 0]) >>> 4 | 0)) << 24 >> 24;
    else if ($rem == 3) {
        $output = $output.data;
        $a = otci_Base64Impl_decode($mapping, $text[$c]);
        $b = otci_Base64Impl_decode($mapping, $text[$c + 1 | 0]);
        $c = otci_Base64Impl_decode($mapping, $text[$c + 2 | 0]);
        $output[$j] = ($a << 2 | ($b >>> 4 | 0)) << 24 >> 24;
        $output[$j + 1 | 0] = ($b << 4 | ($c >>> 2 | 0)) << 24 >> 24;
    }
},
otci_Base64Impl_decode = ($mapping, $c) => {
    return $mapping.data[$c];
},
otci_Base64Impl__clinit_ = () => {
    let var$1, var$2, var$3, $i, $c, $c_0;
    var$1 = $rt_createByteArray(64);
    var$2 = var$1.data;
    otci_Base64Impl_alphabet = var$1;
    var$1 = $rt_createByteArray(64);
    var$3 = var$1.data;
    otci_Base64Impl_urlAlphabet = var$1;
    var$1 = $rt_createIntArray(256);
    otci_Base64Impl_reverse = var$1;
    otci_Base64Impl_urlReverse = $rt_createIntArray(256);
    $i = 0;
    $c = 65;
    while ($c <= 90) {
        $c_0 = $c << 24 >> 24;
        var$2[$i] = $c_0;
        var$3[$i] = $c_0;
        $i = $i + 1 | 0;
        $c = ($c + 1 | 0) & 65535;
    }
    $c = 97;
    while ($c <= 122) {
        $c_0 = $c << 24 >> 24;
        var$2[$i] = $c_0;
        var$3[$i] = $c_0;
        $i = $i + 1 | 0;
        $c = ($c + 1 | 0) & 65535;
    }
    $c_0 = 48;
    while ($c_0 <= 57) {
        $c = $c_0 << 24 >> 24;
        var$2[$i] = $c;
        var$3[$i] = $c;
        $i = $i + 1 | 0;
        $c_0 = ($c_0 + 1 | 0) & 65535;
    }
    var$2[$i] = 43;
    var$3[$i] = 45;
    $i = $i + 1 | 0;
    var$2[$i] = 47;
    var$3[$i] = 95;
    ju_Arrays_fill(var$1, (-1));
    ju_Arrays_fill(otci_Base64Impl_urlReverse, (-1));
    $c_0 = 0;
    while (true) {
        var$1 = otci_Base64Impl_alphabet.data;
        if ($c_0 >= var$1.length)
            break;
        otci_Base64Impl_reverse.data[var$1[$c_0]] = $c_0;
        otci_Base64Impl_urlReverse.data[otci_Base64Impl_urlAlphabet.data[$c_0]] = $c_0;
        $c_0 = $c_0 + 1 | 0;
    }
},
ji_InputStream = $rt_classWithoutFields(),
ji_InputStream_read = ($this, $b) => {
    return $this.$read($b, 0, $b.data.length);
},
ji_InputStream_readNBytes = ($this, $len) => {
    let $buffers, $buffer, $part, $positionInBuffer, $totalBytesRead, $ptr_0, $bytesRead, $result, var$10;
    if ($len < 0) {
        $buffers = new jl_IndexOutOfBoundsException;
        jl_Throwable__init_($buffers);
        $rt_throw($buffers);
    }
    if (!$len)
        return $rt_createByteArray(0);
    $buffers = null;
    $buffer = $rt_createByteArray(2048);
    $part = $buffer.data;
    $positionInBuffer = 0;
    $totalBytesRead = 0;
    $ptr_0 = $part.length;
    a: {
        while (true) {
            $bytesRead = juz_ZipInputStream_read($this, $buffer, $positionInBuffer, jl_Math_min($ptr_0 - $positionInBuffer | 0, $len - $totalBytesRead | 0));
            if ($bytesRead < 0)
                break;
            $positionInBuffer = $positionInBuffer + $bytesRead | 0;
            $totalBytesRead = $totalBytesRead + $bytesRead | 0;
            if ($totalBytesRead == $len)
                break a;
            if (($positionInBuffer * 2 | 0) > $ptr_0) {
                if ($buffers === null)
                    $buffers = ju_ArrayList__init_();
                ju_ArrayList_add($buffers, ju_Arrays_copyOf($buffer, $positionInBuffer));
                $positionInBuffer = 0;
            }
        }
    }
    if ($buffers === null) {
        if ($positionInBuffer != $ptr_0)
            $buffer = ju_Arrays_copyOf($buffer, $positionInBuffer);
        return $buffer;
    }
    $result = $rt_createByteArray($totalBytesRead);
    $ptr_0 = 0;
    var$10 = ju_AbstractList_iterator($buffers);
    while (ju_AbstractList$1_hasNext(var$10)) {
        $part = ju_AbstractList$1_next(var$10);
        $totalBytesRead = $part.data.length;
        jl_System_fastArraycopy($part, 0, $result, $ptr_0, $totalBytesRead);
        $ptr_0 = $ptr_0 + $totalBytesRead | 0;
    }
    if ($positionInBuffer > 0)
        jl_System_fastArraycopy($buffer, 0, $result, $ptr_0, $positionInBuffer);
    return $result;
};
function ji_FilterInputStream() {
    ji_InputStream.call(this);
    this.$in = null;
}
let ji_FilterInputStream__init_ = ($this, $in) => {
    $this.$in = $in;
},
ji_FilterInputStream__init_0 = var_0 => {
    let var_1 = new ji_FilterInputStream();
    ji_FilterInputStream__init_(var_1, var_0);
    return var_1;
},
ji_FilterInputStream_close = $this => {
    $this.$in.$close();
},
ji_FilterInputStream_read = ($this, $buffer) => {
    return ji_PushbackInputStream_read($this, $buffer, 0, $buffer.data.length);
};
function juz_InflaterInputStream() {
    let a = this; ji_FilterInputStream.call(a);
    a.$inf = null;
    a.$buf0 = null;
    a.$len0 = 0;
    a.$closed = 0;
    a.$eof = 0;
}
let juz_ZipConstants = $rt_classWithoutFields(0);
function juz_ZipInputStream() {
    let a = this; juz_InflaterInputStream.call(a);
    a.$entriesEnd = 0;
    a.$hasDD = 0;
    a.$entryIn = 0;
    a.$inRead0 = 0;
    a.$lastRead = 0;
    a.$currentEntry = null;
    a.$hdrBuf = null;
    a.$crc = null;
    a.$nameBuf = null;
    a.$charBuf = null;
}
let juz_ZipInputStream_closeEntry = $this => {
    let $e, $out, $inB, $e_0, $diff, var$6, var$7, var$8, var$9, var$10, var$11, $$je;
    if ($this.$closed) {
        $e = new ji_IOException;
        jl_Throwable__init_($e);
        $rt_throw($e);
    }
    if ($this.$currentEntry === null)
        return;
    $e = null;
    a: {
        try {
            juz_ZipInputStream_skip($this, Long_create(4294967295, 2147483647));
            break a;
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_Exception) {
                $e = $$je;
            } else {
                throw $$e;
            }
        }
    }
    if ($this.$currentEntry.$compressionMethod != 8) {
        $out = $this.$inRead0;
        $inB = $out;
    } else {
        $e_0 = $this.$inf.$impl;
        if ($e_0 === null) {
            $e = new jl_IllegalStateException;
            jl_Throwable__init_($e);
            $rt_throw($e);
        }
        $inB = Long_lo($e_0.$total_in);
        $out = Long_lo($e_0.$total_out);
    }
    b: {
        $diff = $this.$entryIn - $inB | 0;
        if ($diff) {
            $e_0 = $this.$in;
            var$6 = $this.$buf0;
            var$7 = $this.$len0 - $diff | 0;
            var$8 = $e_0.$pos;
            if ($diff > var$8) {
                $e = new ji_IOException;
                jl_Throwable__init_0($e, $rt_s(85));
                $rt_throw($e);
            }
            var$9 = var$6.data.length;
            if (var$7 <= var$9 && var$7 >= 0) {
                if ($diff >= 0 && $diff <= (var$9 - var$7 | 0)) {
                    var$10 = $e_0.$buf1;
                    if (var$10 === null) {
                        $e = new ji_IOException;
                        jl_Throwable__init_0($e, $rt_s(86));
                        $rt_throw($e);
                    }
                    jl_System_fastArraycopy(var$6, var$7, var$10, var$8 - $diff | 0, $diff);
                    $e_0.$pos = $e_0.$pos - $diff | 0;
                    break b;
                }
                $e = new jl_ArrayIndexOutOfBoundsException;
                $e_0 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_($e_0);
                jl_StringBuilder_append0(jl_StringBuilder_append($e_0, $rt_s(87)), $diff);
                jl_Throwable__init_0($e, jl_AbstractStringBuilder_toString($e_0));
                $rt_throw($e);
            }
            $e = new jl_ArrayIndexOutOfBoundsException;
            $e_0 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($e_0);
            jl_StringBuilder_append0(jl_StringBuilder_append($e_0, $rt_s(88)), var$7);
            jl_Throwable__init_0($e, jl_AbstractStringBuilder_toString($e_0));
            $rt_throw($e);
        }
    }
    c: {
        try {
            juz_ZipInputStream_readAndVerifyDataDescriptor($this, $inB, $out);
            $e_0 = $e;
            break c;
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_Exception) {
                $e_0 = $$je;
            } else {
                throw $$e;
            }
        }
        if ($e !== null)
            $e_0 = $e;
    }
    $e = $this.$inf;
    var$11 = $e.$impl;
    if (var$11 === null) {
        $e = new jl_NullPointerException;
        jl_Throwable__init_($e);
        $rt_throw($e);
    }
    $e.$finished = 0;
    $e.$needsDictionary = 0;
    $e.$inLength = 0;
    $e.$inRead = 0;
    cjj_Inflater_init(var$11, 15, $e.$nowrap);
    $this.$lastRead = 0;
    $this.$inRead0 = 0;
    $this.$entryIn = 0;
    $this.$len0 = 0;
    $e = $this.$crc;
    cjj_CRC32_reset($e.$impl0);
    $e.$tbytes = Long_ZERO;
    $this.$currentEntry = null;
    if ($e_0 === null)
        return;
    if ($e_0 instanceof ji_IOException)
        $rt_throw($e_0);
    if ($e_0 instanceof jl_RuntimeException)
        $rt_throw($e_0);
    $e = new jl_AssertionError;
    jl_Throwable__init_0($e, jl_Throwable_toString($e_0));
    $rt_throw($e);
},
juz_ZipInputStream_readAndVerifyDataDescriptor = ($this, $inB, $out) => {
    let var$3;
    if ($this.$hasDD) {
        $this.$in.$read($this.$hdrBuf, 0, 16);
        if (Long_ne(juz_ZipInputStream_getLong($this, $this.$hdrBuf, 0), Long_fromInt(134695760))) {
            var$3 = new juz_ZipException;
            jl_Throwable__init_(var$3);
            $rt_throw(var$3);
        }
        $this.$currentEntry.$crc0 = juz_ZipInputStream_getLong($this, $this.$hdrBuf, 4);
        $this.$currentEntry.$compressedSize = juz_ZipInputStream_getLong($this, $this.$hdrBuf, 8);
        $this.$currentEntry.$size1 = juz_ZipInputStream_getLong($this, $this.$hdrBuf, 12);
    }
    if (Long_ne($this.$currentEntry.$crc0, cjj_CRC32_getValue($this.$crc.$impl0))) {
        var$3 = new juz_ZipException;
        jl_Throwable__init_(var$3);
        $rt_throw(var$3);
    }
    var$3 = $this.$currentEntry;
    if (Long_eq(var$3.$compressedSize, Long_fromInt($inB)) && Long_eq(var$3.$size1, Long_fromInt($out)))
        return;
    var$3 = new juz_ZipException;
    jl_Throwable__init_(var$3);
    $rt_throw(var$3);
},
juz_ZipInputStream_getNextEntry = $this => {
    let $count, $hdr, $version, var$4, $cetime, $cemodDate, $cecompressionMethod, $cecrc, $cecompressedSize, $cesize, $flen, $elen, $flags, var$14, $e, var$16, var$17;
    juz_ZipInputStream_closeEntry($this);
    if ($this.$entriesEnd)
        return null;
    $count = 0;
    while (true) {
        if ($count == 4) {
            $hdr = juz_ZipInputStream_getLong($this, $this.$hdrBuf, 0);
            if (Long_eq($hdr, Long_fromInt(33639248))) {
                $this.$entriesEnd = 1;
                return null;
            }
            if (Long_ne($hdr, Long_fromInt(67324752)))
                return null;
            $version = 0;
            while (true) {
                if ($version == 26) {
                    if ((juz_ZipInputStream_getShort($this, $this.$hdrBuf, 0) & 255) > 20) {
                        var$4 = new juz_ZipException;
                        jl_Throwable__init_(var$4);
                        $rt_throw(var$4);
                    }
                    $this.$hasDD = (juz_ZipInputStream_getShort($this, $this.$hdrBuf, 2) & 8) != 8 ? 0 : 1;
                    $cetime = juz_ZipInputStream_getShort($this, $this.$hdrBuf, 6);
                    $cemodDate = juz_ZipInputStream_getShort($this, $this.$hdrBuf, 8);
                    $cecompressionMethod = juz_ZipInputStream_getShort($this, $this.$hdrBuf, 4);
                    $cecrc = Long_ZERO;
                    $cecompressedSize = Long_ZERO;
                    $cesize = Long_fromInt(-1);
                    if (!$this.$hasDD) {
                        $cecrc = juz_ZipInputStream_getLong($this, $this.$hdrBuf, 10);
                        $cecompressedSize = juz_ZipInputStream_getLong($this, $this.$hdrBuf, 14);
                        $cesize = juz_ZipInputStream_getLong($this, $this.$hdrBuf, 18);
                    }
                    $flen = juz_ZipInputStream_getShort($this, $this.$hdrBuf, 22);
                    if (!$flen) {
                        var$4 = new juz_ZipException;
                        jl_Throwable__init_(var$4);
                        $rt_throw(var$4);
                    }
                    $elen = juz_ZipInputStream_getShort($this, $this.$hdrBuf, 24);
                    $flags = 0;
                    if ($flen > $this.$nameBuf.data.length) {
                        $this.$nameBuf = $rt_createByteArray($flen);
                        $this.$charBuf = $rt_createCharArray($flen);
                    }
                    while (true) {
                        if ($flags == $flen) {
                            var$14 = new jl_String;
                            $e = $this.$nameBuf;
                            jnc_Charset_checkCanonicalName($rt_s(20));
                            jnc_Charset$Charsets_$callClinit();
                            var$16 = jnc_Charset$Charsets_value;
                            var$17 = $rt_s(20).$nativeString.toUpperCase();
                            var$16 = ju_HashMap_get(var$16, var$17 === $rt_s(20).$nativeString ? $rt_s(20) : jl_String__init_1(var$17));
                            if (var$16 === null) {
                                var$16 = new jnc_UnsupportedCharsetException;
                                jl_Throwable__init_(var$16);
                                var$16.$charsetName0 = $rt_s(20);
                                $rt_throw(var$16);
                            }
                            jl_String_initWithBytes(var$14, $e, 0, $flen, var$16);
                            var$4 = new juz_ZipEntry;
                            var$4.$compressedSize = Long_fromInt(-1);
                            var$4.$crc0 = Long_fromInt(-1);
                            var$4.$size1 = Long_fromInt(-1);
                            var$4.$compressionMethod = (-1);
                            var$4.$time = (-1);
                            var$4.$modDate = (-1);
                            var$4.$nameLen = (-1);
                            var$4.$mLocalHeaderRelOffset = Long_fromInt(-1);
                            if (var$14.$nativeString.length > 65535) {
                                var$4 = new jl_IllegalArgumentException;
                                jl_Throwable__init_(var$4);
                                $rt_throw(var$4);
                            }
                            var$4.$name9 = var$14;
                            $this.$currentEntry = var$4;
                            var$4.$time = $cetime;
                            var$4.$modDate = $cemodDate;
                            if ($cecompressionMethod && $cecompressionMethod != 8) {
                                var$4 = new jl_IllegalArgumentException;
                                jl_Throwable__init_(var$4);
                                $rt_throw(var$4);
                            }
                            a: {
                                var$4.$compressionMethod = $cecompressionMethod;
                                if (Long_ne($cesize, Long_fromInt(-1))) {
                                    if (Long_ge($cecrc, Long_ZERO) && Long_le($cecrc, Long_create(4294967295, 0))) {
                                        var$4.$crc0 = $cecrc;
                                        if (Long_ge($cesize, Long_ZERO) && Long_le($cesize, Long_create(4294967295, 0))) {
                                            var$4.$size1 = $cesize;
                                            juz_ZipEntry_setCompressedSize(var$4, $cecompressedSize);
                                            break a;
                                        }
                                        var$4 = new jl_IllegalArgumentException;
                                        jl_RuntimeException__init_(var$4);
                                        $rt_throw(var$4);
                                    }
                                    var$4 = new jl_IllegalArgumentException;
                                    jl_Throwable__init_(var$4);
                                    $rt_throw(var$4);
                                }
                            }
                            b: {
                                if ($elen > 0) {
                                    $version = 0;
                                    $e = $rt_createByteArray($elen);
                                    while (true) {
                                        if ($version == $elen) {
                                            juz_ZipEntry_setExtra($this.$currentEntry, $e);
                                            break b;
                                        }
                                        $count = $this.$in.$read($e, $version, $elen - $version | 0);
                                        $version = $version + $count | 0;
                                        if ($count == (-1))
                                            break;
                                    }
                                    $rt_throw(ji_EOFException__init_());
                                }
                            }
                            return $this.$currentEntry;
                        }
                        $version = $this.$in.$read($this.$nameBuf, $flags, $flen - $flags | 0);
                        $flags = $flags + $version | 0;
                        if ($version == (-1))
                            break;
                    }
                    var$4 = new ji_EOFException;
                    jl_Throwable__init_(var$4);
                    $rt_throw(var$4);
                }
                $count = $this.$in.$read($this.$hdrBuf, $version, 26 - $version | 0);
                $version = $version + $count | 0;
                if ($count == (-1))
                    break;
            }
            var$4 = new ji_EOFException;
            jl_Throwable__init_(var$4);
            $rt_throw(var$4);
        }
        $version = $this.$in.$read($this.$hdrBuf, $count, 4 - $count | 0);
        $count = $count + $version | 0;
        if ($version == (-1))
            break;
    }
    return null;
},
juz_ZipInputStream_read = ($this, $buffer, $start, $toRead) => {
    let $e, var$5, $read, $csize, var$8, $toRead_0, var$10, $$je;
    if ($this.$closed) {
        $e = new ji_IOException;
        jl_Throwable__init_($e);
        $rt_throw($e);
    }
    $e = $this.$inf;
    if (!$e.$finished) {
        var$5 = $this.$currentEntry;
        if (var$5 !== null) {
            $read = $buffer.data.length;
            if ($start <= $read && $toRead >= 0 && $start >= 0 && ($read - $start | 0) >= $toRead) {
                if (!var$5.$compressionMethod) {
                    $csize = Long_lo(var$5.$size1);
                    if ($this.$inRead0 >= $csize)
                        return (-1);
                    if ($this.$lastRead >= $this.$len0) {
                        $this.$lastRead = 0;
                        $read = $this.$in.$read0($this.$buf0);
                        $this.$len0 = $read;
                        if ($read == (-1)) {
                            $this.$eof = 1;
                            return (-1);
                        }
                        $this.$entryIn = $this.$entryIn + $read | 0;
                    }
                    $read = $this.$len0;
                    var$8 = $this.$lastRead;
                    $toRead_0 = $read - var$8 | 0;
                    if ($toRead > $toRead_0)
                        $toRead = $toRead_0;
                    $read = $csize - $this.$inRead0 | 0;
                    if ($read >= $toRead)
                        $read = $toRead;
                    jl_System_fastArraycopy($this.$buf0, var$8, $buffer, $start, $read);
                    $this.$lastRead = $this.$lastRead + $read | 0;
                    $this.$inRead0 = $this.$inRead0 + $read | 0;
                    juz_CRC32_update($this.$crc, $buffer, $start, $read);
                    return $read;
                }
                if (juz_Inflater_needsInput($e)) {
                    if ($this.$closed) {
                        $e = new ji_IOException;
                        jl_Throwable__init_($e);
                        $rt_throw($e);
                    }
                    $read = $this.$in.$read0($this.$buf0);
                    $this.$len0 = $read;
                    if ($read > 0) {
                        $e = $this.$inf;
                        var$10 = $this.$buf0;
                        var$5 = $e.$impl;
                        if (var$5 === null) {
                            $e = new jl_IllegalStateException;
                            jl_Throwable__init_($e);
                            $rt_throw($e);
                        }
                        $csize = var$10.data.length;
                        if (0 <= $csize && $read >= 0 && ($csize - 0 | 0) >= $read) {
                            $e.$inRead = 0;
                            $e.$inLength = $read;
                            var$5.$next_in = var$10;
                            var$5.$next_in_index = 0;
                            var$5.$avail_in = $read;
                        } else {
                            $e = new jl_ArrayIndexOutOfBoundsException;
                            jl_Throwable__init_($e);
                            $rt_throw($e);
                        }
                    }
                    if ($read > 0)
                        $this.$entryIn = $this.$entryIn + $read | 0;
                }
                a: {
                    try {
                        $read = juz_Inflater_inflate($this.$inf, $buffer, $start, $toRead);
                        break a;
                    } catch ($$e) {
                        $$je = $rt_wrapException($$e);
                        if ($$je instanceof juz_DataFormatException) {
                            $e = $$je;
                        } else {
                            throw $$e;
                        }
                    }
                    var$5 = new juz_ZipException;
                    jl_Throwable__init_0(var$5, $e.$message);
                    $rt_throw(var$5);
                }
                if (!$read && $this.$inf.$finished)
                    return (-1);
                juz_CRC32_update($this.$crc, $buffer, $start, $read);
                return $read;
            }
            $e = new jl_ArrayIndexOutOfBoundsException;
            jl_Throwable__init_($e);
            $rt_throw($e);
        }
    }
    return (-1);
},
juz_ZipInputStream_skip = ($this, $value) => {
    let var$2, $skipped, $rem, $b, var$6, var$7, $x;
    if (Long_lt($value, Long_ZERO)) {
        var$2 = new jl_IllegalArgumentException;
        jl_Throwable__init_(var$2);
        $rt_throw(var$2);
    }
    $skipped = Long_ZERO;
    $rem = Long_fromInt(2048);
    if (Long_lt($value, $rem))
        $rem = $value;
    $b = $rt_createByteArray(Long_lo($rem));
    var$6 = $b.data;
    while (Long_ne($skipped, $value)) {
        $rem = Long_sub($value, $skipped);
        var$7 = Long_fromInt(var$6.length);
        if (Long_gt(var$7, $rem))
            var$7 = $rem;
        $x = juz_ZipInputStream_read($this, $b, 0, Long_lo(var$7));
        if ($x == (-1))
            return $skipped;
        $skipped = Long_add($skipped, Long_fromInt($x));
    }
    return $skipped;
},
juz_ZipInputStream_getShort = ($this, $buffer, $off) => {
    $buffer = $buffer.data;
    return $buffer[$off] & 255 | ($buffer[$off + 1 | 0] & 255) << 8;
},
juz_ZipInputStream_getLong = ($this, $buffer, $off) => {
    $buffer = $buffer.data;
    return Long_or(Long_or(Long_or(Long_or(Long_ZERO, Long_fromInt($buffer[$off] & 255)), Long_fromInt(($buffer[$off + 1 | 0] & 255) << 8)), Long_fromInt(($buffer[$off + 2 | 0] & 255) << 16)), Long_shl(Long_fromInt($buffer[$off + 3 | 0] & 255), 24));
};
function ji_ByteArrayInputStream() {
    let a = this; ji_InputStream.call(a);
    a.$buf2 = null;
    a.$pos0 = 0;
    a.$mark0 = 0;
    a.$count1 = 0;
}
let ji_ByteArrayInputStream__init_0 = ($this, $buf) => {
    let var$2;
    var$2 = $buf.data.length;
    $this.$buf2 = $buf;
    $this.$pos0 = 0;
    $this.$mark0 = 0;
    $this.$count1 = 0 + var$2 | 0;
},
ji_ByteArrayInputStream__init_ = var_0 => {
    let var_1 = new ji_ByteArrayInputStream();
    ji_ByteArrayInputStream__init_0(var_1, var_0);
    return var_1;
},
ji_ByteArrayInputStream_read = ($this, $b, $off, $len) => {
    let $bytesToRead, $i, var$6, var$7, var$8;
    $bytesToRead = jl_Math_min($len, $this.$count1 - $this.$pos0 | 0);
    $i = 0;
    while ($i < $bytesToRead) {
        var$6 = $b.data;
        $len = $off + 1 | 0;
        var$7 = $this.$buf2.data;
        var$8 = $this.$pos0;
        $this.$pos0 = var$8 + 1 | 0;
        var$6[$off] = var$7[var$8];
        $i = $i + 1 | 0;
        $off = $len;
    }
    if ($bytesToRead <= 0)
        $bytesToRead = (-1);
    return $bytesToRead;
},
ji_ByteArrayInputStream_close = $this => {
    return;
},
igbca_APILoader = $rt_classWithoutFields(),
igbca_APILoader_allClasses = null,
igbca_APILoader_allInnerClasses = null,
igbca_APILoader_getOrMake = $fullName => {
    let var$2, var$3, var$4, var$5, $$je;
    if ($fullName === null)
        return null;
    var$2 = ju_Collection_stream(igbca_APILoader_allClasses);
    var$3 = new igbca_APILoader$getOrMake$lambda$_1_0;
    var$3.$_0 = $fullName;
    var$2 = (jusi_SimpleStreamImpl_findFirst(jusi_SimpleStreamImpl_filter(var$2, var$3))).$value8;
    if (var$2 === null) {
        a: {
            try {
                var$2 = ooa_ClassReader__init_0($fullName);
                break a;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof ji_IOException) {
                    $fullName = $$je;
                } else {
                    throw $$e;
                }
            }
            var$2 = new jl_RuntimeException;
            jl_Throwable__init_1(var$2, $rt_s(89), $fullName);
            $rt_throw(var$2);
        }
        $fullName = new ooat_ClassNode;
        var$3 = null;
        jl_Object__init_($fullName);
        $fullName.$api2 = 589824;
        $fullName.$cv = var$3;
        $fullName.$interfaces0 = ju_ArrayList__init_();
        $fullName.$innerClasses = ju_ArrayList__init_();
        $fullName.$fields0 = ju_ArrayList__init_();
        $fullName.$methods0 = ju_ArrayList__init_();
        if (jl_Object_getClass($fullName) !== $rt_cls(ooat_ClassNode)) {
            $fullName = new jl_IllegalStateException;
            jl_Throwable__init_($fullName);
            $rt_throw($fullName);
        }
        ooa_ClassReader_accept(var$2, $fullName, $rt_createArray(ooa_Attribute, 0), 0);
        var$2 = new igbca_APIClass;
        var$2.$extendingClass = $rt_s(75);
        var$2.$interfaces = ju_ArrayList__init_();
        var$2.$fields = ju_ArrayList__init_();
        var$2.$methods = ju_ArrayList__init_();
        var$3 = $fullName.$name11;
        var$2.$fullName = var$3;
        var$2.$name0 = jl_String_substring0(var$3, jl_String_lastIndexOf(var$3, 47) + 1 | 0);
        var$3 = var$2.$fullName;
        var$2.$packageName = jl_String_substring(var$3, 0, jl_String_lastIndexOf(var$3, 47) + 1 | 0);
        var$2.$access2 = igbcau_ASMUtil_getAccess($fullName.$access);
        var$4 = $fullName.$access;
        var$3 = $fullName.$superName;
        var$5 = igbcat_ClassType_CLASS;
        if (!(var$4 & 512) ? 0 : 1)
            var$5 = igbcat_ClassType_INTERFACE;
        else if (var$3 !== null) {
            if (jl_String_equals(var$3, $rt_s(90)))
                var$5 = igbcat_ClassType_ENUM;
            else if (jl_String_equals(var$3, $rt_s(91)))
                var$5 = igbcat_ClassType_RECORD;
        }
        var$2.$type4 = var$5;
        var$2.$isAbstract = !($fullName.$access & 1024) ? 0 : 1;
        var$2.$extendingClass = $fullName.$superName;
        var$3 = $fullName.$interfaces0;
        if (var$3 !== null)
            ju_AbstractCollection_addAll(var$2.$interfaces, var$3);
        var$3 = ju_AbstractList_iterator($fullName.$fields0);
        while (ju_AbstractList$1_hasNext(var$3)) {
            var$5 = ju_AbstractList$1_next(var$3);
            ju_ArrayList_add(var$2.$fields, igbca_APIField__init_(var$2, var$5.$name12, var$5.$desc2, igbcau_ASMUtil_getAccess(var$5.$access0), jlr_Modifier_isStatic(var$5.$access0)));
        }
        $fullName = ju_AbstractList_iterator($fullName.$methods0);
        while (ju_AbstractList$1_hasNext($fullName)) {
            var$3 = ju_AbstractList$1_next($fullName);
            ju_ArrayList_add(var$2.$methods, igbca_APIMethod__init_0(var$3, var$2));
        }
        ju_ArrayList_add(igbca_APILoader_allClasses, var$2);
    }
    return var$2;
},
igbca_APILoader_get = $fullName => {
    let var$2, var$3;
    if ($fullName === null)
        return null;
    var$2 = ju_Collection_stream(igbca_APILoader_allClasses);
    var$3 = new igbca_APILoader$get$lambda$_2_0;
    var$3.$_09 = $fullName;
    $fullName = jusi_SimpleStreamImpl_findFirst(jusi_SimpleStreamImpl_filter(var$2, var$3));
    var$2 = null;
    $fullName = $fullName.$value8;
    if ($fullName !== null)
        var$2 = $fullName;
    return var$2;
},
igbca_APILoader__clinit_ = () => {
    igbca_APILoader_allClasses = ju_ArrayList__init_();
    igbca_APILoader_allInnerClasses = ju_ArrayList__init_();
};
function ooa_Type() {
    let a = this; jl_Object.call(a);
    a.$sort = 0;
    a.$valueBuffer = null;
    a.$valueBegin = 0;
    a.$valueEnd = 0;
}
let ooa_Type_VOID_TYPE = null,
ooa_Type_BOOLEAN_TYPE = null,
ooa_Type_CHAR_TYPE = null,
ooa_Type_BYTE_TYPE = null,
ooa_Type_SHORT_TYPE = null,
ooa_Type_INT_TYPE = null,
ooa_Type_FLOAT_TYPE = null,
ooa_Type_LONG_TYPE = null,
ooa_Type_DOUBLE_TYPE = null,
ooa_Type__init_0 = ($this, $sort, $valueBuffer, $valueBegin, $valueEnd) => {
    $this.$sort = $sort;
    $this.$valueBuffer = $valueBuffer;
    $this.$valueBegin = $valueBegin;
    $this.$valueEnd = $valueEnd;
},
ooa_Type__init_ = (var_0, var_1, var_2, var_3) => {
    let var_4 = new ooa_Type();
    ooa_Type__init_0(var_4, var_0, var_1, var_2, var_3);
    return var_4;
},
ooa_Type_getType = $typeDescriptor => {
    return ooa_Type_getTypeInternal($typeDescriptor, 0, $typeDescriptor.$nativeString.length);
},
ooa_Type_getMethodType = $methodDescriptor => {
    return ooa_Type__init_(11, $methodDescriptor, 0, $methodDescriptor.$nativeString.length);
},
ooa_Type_getTypeInternal = ($descriptorBuffer, $descriptorBegin, $descriptorEnd) => {
    let var$4, var$5;
    switch (jl_String_charAt($descriptorBuffer, $descriptorBegin)) {
        case 40:
            return ooa_Type__init_(11, $descriptorBuffer, $descriptorBegin, $descriptorEnd);
        case 66:
            break;
        case 67:
            return ooa_Type_CHAR_TYPE;
        case 68:
            return ooa_Type_DOUBLE_TYPE;
        case 70:
            return ooa_Type_FLOAT_TYPE;
        case 73:
            return ooa_Type_INT_TYPE;
        case 74:
            return ooa_Type_LONG_TYPE;
        case 76:
            return ooa_Type__init_(10, $descriptorBuffer, $descriptorBegin + 1 | 0, $descriptorEnd - 1 | 0);
        case 83:
            return ooa_Type_SHORT_TYPE;
        case 86:
            return ooa_Type_VOID_TYPE;
        case 90:
            return ooa_Type_BOOLEAN_TYPE;
        case 91:
            return ooa_Type__init_(9, $descriptorBuffer, $descriptorBegin, $descriptorEnd);
        default:
            var$4 = new jl_IllegalArgumentException;
            var$5 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$5);
            jl_AbstractStringBuilder_append0(var$5, $rt_s(92));
            jl_AbstractStringBuilder_append0(var$5, $descriptorBuffer);
            jl_Throwable__init_0(var$4, jl_AbstractStringBuilder_toString(var$5));
            $rt_throw(var$4);
    }
    return ooa_Type_BYTE_TYPE;
},
ooa_Type_getClassName = $this => {
    let $stringBuilder, $i;
    a: {
        switch ($this.$sort) {
            case 0:
                break;
            case 1:
                return $rt_s(93);
            case 2:
                return $rt_s(94);
            case 3:
                return $rt_s(95);
            case 4:
                return $rt_s(96);
            case 5:
                return $rt_s(97);
            case 6:
                return $rt_s(98);
            case 7:
                return $rt_s(99);
            case 8:
                return $rt_s(100);
            case 9:
                $stringBuilder = new jl_StringBuilder;
                $i = ooa_Type_getDimensions($this);
                jl_StringBuilder__init_1($stringBuilder, ooa_Type_getClassName(ooa_Type_getTypeInternal($this.$valueBuffer, $this.$valueBegin + $i | 0, $this.$valueEnd)));
                $i = ooa_Type_getDimensions($this);
                while ($i > 0) {
                    jl_AbstractStringBuilder_append0($stringBuilder, $rt_s(72));
                    $i = $i + (-1) | 0;
                }
                return jl_AbstractStringBuilder_toString($stringBuilder);
            case 10:
            case 12:
                return jl_String_replace0(jl_String_substring($this.$valueBuffer, $this.$valueBegin, $this.$valueEnd), 47, 46);
            case 11:
                break a;
            default:
                break a;
        }
        return $rt_s(101);
    }
    $stringBuilder = new jl_AssertionError;
    jl_Throwable__init_($stringBuilder);
    $rt_throw($stringBuilder);
},
ooa_Type_getDescriptor = $this => {
    let var$1, var$2;
    var$1 = $this.$sort;
    if (var$1 == 10)
        return jl_String_substring($this.$valueBuffer, $this.$valueBegin - 1 | 0, $this.$valueEnd + 1 | 0);
    if (var$1 != 12)
        return jl_String_substring($this.$valueBuffer, $this.$valueBegin, $this.$valueEnd);
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_AbstractStringBuilder_append(var$2, 76);
    jl_AbstractStringBuilder_append0(var$2, jl_String_substring($this.$valueBuffer, $this.$valueBegin, $this.$valueEnd));
    jl_AbstractStringBuilder_append(var$2, 59);
    return jl_AbstractStringBuilder_toString(var$2);
},
ooa_Type_appendDescriptor = ($this, $stringBuilder) => {
    let var$2;
    var$2 = $this.$sort;
    if (var$2 == 10)
        jl_AbstractStringBuilder_append2($stringBuilder, $this.$valueBuffer, $this.$valueBegin - 1 | 0, $this.$valueEnd + 1 | 0);
    else if (var$2 != 12)
        jl_AbstractStringBuilder_append2($stringBuilder, $this.$valueBuffer, $this.$valueBegin, $this.$valueEnd);
    else {
        jl_AbstractStringBuilder_append($stringBuilder, 76);
        jl_AbstractStringBuilder_append2($stringBuilder, $this.$valueBuffer, $this.$valueBegin, $this.$valueEnd);
        jl_AbstractStringBuilder_append($stringBuilder, 59);
    }
},
ooa_Type_getSort = $this => {
    let var$1;
    var$1 = $this.$sort;
    if (var$1 == 12)
        var$1 = 10;
    return var$1;
},
ooa_Type_getDimensions = $this => {
    let $numDimensions;
    $numDimensions = 1;
    while (jl_String_charAt($this.$valueBuffer, $this.$valueBegin + $numDimensions | 0) == 91) {
        $numDimensions = $numDimensions + 1 | 0;
    }
    return $numDimensions;
},
ooa_Type_getArgumentCount = $methodDescriptor => {
    let $argumentCount, $currentOffset, var$4;
    $argumentCount = 0;
    $currentOffset = 1;
    while (jl_String_charAt($methodDescriptor, $currentOffset) != 41) {
        while (jl_String_charAt($methodDescriptor, $currentOffset) == 91) {
            $currentOffset = $currentOffset + 1 | 0;
        }
        var$4 = $currentOffset + 1 | 0;
        $currentOffset = jl_String_charAt($methodDescriptor, $currentOffset) != 76 ? var$4 : jl_Math_max(var$4, jl_String_indexOf($methodDescriptor, 59, var$4) + 1 | 0);
        $argumentCount = $argumentCount + 1 | 0;
    }
    return $argumentCount;
},
ooa_Type_equals = ($this, $object) => {
    let $other, $end, $otherEnd, $begin, $j;
    if ($this === $object)
        return 1;
    if (!($object instanceof ooa_Type))
        return 0;
    $other = $object;
    $end = $this.$sort;
    if ($end == 12)
        $end = 10;
    $otherEnd = $other.$sort;
    if ($otherEnd == 12)
        $otherEnd = 10;
    if ($end != $otherEnd)
        return 0;
    $begin = $this.$valueBegin;
    $end = $this.$valueEnd;
    $j = $other.$valueBegin;
    if (($end - $begin | 0) != ($other.$valueEnd - $j | 0))
        return 0;
    while ($begin < $end) {
        if (jl_String_charAt($this.$valueBuffer, $begin) != jl_String_charAt($other.$valueBuffer, $j))
            return 0;
        $begin = $begin + 1 | 0;
        $j = $j + 1 | 0;
    }
    return 1;
},
ooa_Type_toString = $this => {
    return ooa_Type_getDescriptor($this);
},
ooa_Type__clinit_ = () => {
    ooa_Type_VOID_TYPE = ooa_Type__init_(0, $rt_s(102), 0, 1);
    ooa_Type_BOOLEAN_TYPE = ooa_Type__init_(1, $rt_s(102), 1, 2);
    ooa_Type_CHAR_TYPE = ooa_Type__init_(2, $rt_s(102), 2, 3);
    ooa_Type_BYTE_TYPE = ooa_Type__init_(3, $rt_s(102), 3, 4);
    ooa_Type_SHORT_TYPE = ooa_Type__init_(4, $rt_s(102), 4, 5);
    ooa_Type_INT_TYPE = ooa_Type__init_(5, $rt_s(102), 5, 6);
    ooa_Type_FLOAT_TYPE = ooa_Type__init_(6, $rt_s(102), 6, 7);
    ooa_Type_LONG_TYPE = ooa_Type__init_(7, $rt_s(102), 7, 8);
    ooa_Type_DOUBLE_TYPE = ooa_Type__init_(8, $rt_s(102), 8, 9);
};
function igbcat_Argument() {
    let a = this; jl_Object.call(a);
    a.$type0 = null;
    a.$name2 = null;
    a.$arrayCount = 0;
}
let igbcat_Argument__init_0 = ($this, $type) => {
    $this.$type0 = jl_String_replaceAll(ooa_Type_getClassName($type), $rt_s(103), $rt_s(2));
    $this.$name2 = $rt_s(104);
    $this.$arrayCount = ooa_Type_getSort($type) != 9 ? 0 : ooa_Type_getDimensions($type);
},
igbcat_Argument__init_ = var_0 => {
    let var_1 = new igbcat_Argument();
    igbcat_Argument__init_0(var_1, var_0);
    return var_1;
},
igbcat_Argument__init_2 = ($this, $type, $name) => {
    let var$3;
    var$3 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$3);
    jl_AbstractStringBuilder_append(var$3, 76);
    jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$3, $type), 59);
    igbcat_Argument__init_0($this, ooa_Type_getType(jl_AbstractStringBuilder_toString(var$3)));
    $this.$name2 = $name;
},
igbcat_Argument__init_1 = (var_0, var_1) => {
    let var_2 = new igbcat_Argument();
    igbcat_Argument__init_2(var_2, var_0, var_1);
    return var_2;
},
igbcat_Argument_compile = $this => {
    let var$1, var$2, var$3, var$4;
    a: {
        var$1 = jl_String_repeat($rt_s(105), jl_Math_max(0, $this.$arrayCount));
        var$2 = $this.$type0;
        var$3 = (-1);
        switch (jl_String_hashCode(var$2)) {
            case -1325958191:
                if (!jl_String_equals(var$2, $rt_s(100)))
                    break a;
                var$3 = 2;
                break a;
            case 104431:
                if (!jl_String_equals(var$2, $rt_s(97)))
                    break a;
                var$3 = 0;
                break a;
            case 3039496:
                if (!jl_String_equals(var$2, $rt_s(95)))
                    break a;
                var$3 = 5;
                break a;
            case 3052374:
                if (!jl_String_equals(var$2, $rt_s(94)))
                    break a;
                var$3 = 7;
                break a;
            case 3327612:
                if (!jl_String_equals(var$2, $rt_s(99)))
                    break a;
                var$3 = 1;
                break a;
            case 3625364:
                if (!jl_String_equals(var$2, $rt_s(101)))
                    break a;
                var$3 = 8;
                break a;
            case 64711720:
                if (!jl_String_equals(var$2, $rt_s(93)))
                    break a;
                var$3 = 6;
                break a;
            case 97526364:
                if (!jl_String_equals(var$2, $rt_s(98)))
                    break a;
                var$3 = 3;
                break a;
            case 109413500:
                if (!jl_String_equals(var$2, $rt_s(96)))
                    break a;
                var$3 = 4;
                break a;
            default:
        }
    }
    b: {
        switch (var$3) {
            case 0:
                break;
            case 1:
                var$2 = $rt_s(106);
                break b;
            case 2:
                var$2 = $rt_s(107);
                break b;
            case 3:
                var$2 = $rt_s(37);
                break b;
            case 4:
                var$2 = $rt_s(108);
                break b;
            case 5:
                var$2 = $rt_s(109);
                break b;
            case 6:
                var$2 = $rt_s(110);
                break b;
            case 7:
                var$2 = $rt_s(33);
                break b;
            case 8:
                var$2 = $rt_s(111);
                break b;
            default:
                var$2 = jl_String_replace($this.$type0, $rt_s(112), $rt_s(62));
                var$4 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$4);
                jl_AbstractStringBuilder_append(var$4, 76);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$4, var$2), 59);
                var$2 = jl_AbstractStringBuilder_toString(var$4);
                break b;
        }
        var$2 = $rt_s(113);
    }
    var$4 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$4);
    jl_StringBuilder_append(jl_StringBuilder_append(var$4, var$1), var$2);
    return ooa_Type_getType(jl_AbstractStringBuilder_toString(var$4));
},
igbcau_ASMUtil = $rt_classWithoutFields(),
igbcau_ASMUtil_getAccess = $access => {
    let $isFinal, $vis;
    $isFinal = !($access & 16) ? 0 : 1;
    $vis = igbcat_VisibilityType_PACKAGE_PRIVATE;
    if (!($access & 1) ? 0 : 1)
        $vis = igbcat_VisibilityType_PUBLIC;
    else if (!($access & 2) ? 0 : 1)
        $vis = igbcat_VisibilityType_PRIVATE;
    else if (!($access & 4) ? 0 : 1)
        $vis = igbcat_VisibilityType_PROTECTED;
    return igbcat_AccessType__init_($vis, $isFinal);
},
jlr_Modifier = $rt_classWithoutFields(),
jlr_Modifier_canonicalOrder = null,
jlr_Modifier_isStatic = $mod => {
    return !($mod & 8) ? 0 : 1;
},
jlr_Modifier__clinit_ = () => {
    jlr_Modifier_canonicalOrder = $rt_createIntArrayFromData([1, 4, 2, 1024, 8, 16, 128, 64, 32, 256, 2048, 512]);
},
ju_Map = $rt_classWithoutFields(0);
function ju_AbstractMap() {
    jl_Object.call(this);
    this.$cachedValues = null;
}
function ju_HashMap() {
    let a = this; ju_AbstractMap.call(a);
    a.$elementCount = 0;
    a.$elementData = null;
    a.$modCount0 = 0;
    a.$loadFactor0 = 0.0;
    a.$threshold = 0;
}
let ju_HashMap__init_0 = $this => {
    let var$1;
    var$1 = ju_HashMap_calculateCapacity(16);
    $this.$elementCount = 0;
    $this.$elementData = $rt_createArray(ju_HashMap$HashEntry, var$1);
    $this.$loadFactor0 = 0.75;
    ju_HashMap_computeThreshold($this);
},
ju_HashMap__init_ = () => {
    let var_0 = new ju_HashMap();
    ju_HashMap__init_0(var_0);
    return var_0;
},
ju_HashMap_calculateCapacity = $x => {
    let var$2;
    if ($x >= 1073741824)
        return 1073741824;
    if (!$x)
        return 16;
    var$2 = $x - 1 | 0;
    $x = var$2 | var$2 >> 1;
    $x = $x | $x >> 2;
    $x = $x | $x >> 4;
    $x = $x | $x >> 8;
    return ($x | $x >> 16) + 1 | 0;
},
ju_HashMap_computeThreshold = $this => {
    $this.$threshold = $this.$elementData.data.length * $this.$loadFactor0 | 0;
},
ju_HashMap_get = ($this, $key) => {
    let $m;
    $m = ju_HashMap_entryByKey($this, $key);
    if ($m === null)
        return null;
    return $m.$value;
},
ju_HashMap_entryByKey = ($this, $key) => {
    let $m, $hash;
    if ($key === null)
        $m = ju_HashMap_findNullKeyEntry($this);
    else {
        $hash = $key.$hashCode();
        $m = ju_HashMap_findNonNullKeyEntry($this, $key, $hash & ($this.$elementData.data.length - 1 | 0), $hash);
    }
    return $m;
},
ju_HashMap_findNonNullKeyEntry = ($this, $key, $index, $keyHash) => {
    let $m, var$5;
    $m = $this.$elementData.data[$index];
    while ($m !== null) {
        if ($m.$origKeyHash == $keyHash) {
            var$5 = $m.$key;
            if ($key !== var$5 && !$key.$equals(var$5) ? 0 : 1)
                break;
        }
        $m = $m.$next4;
    }
    return $m;
},
ju_HashMap_findNullKeyEntry = $this => {
    let $m;
    $m = $this.$elementData.data[0];
    while ($m !== null && $m.$key !== null) {
        $m = $m.$next4;
    }
    return $m;
},
ju_HashMap_put = ($this, $key, $value) => {
    let var$3, var$4, var$5;
    if ($key === null) {
        var$3 = ju_HashMap_findNullKeyEntry($this);
        if (var$3 === null) {
            $this.$modCount0 = $this.$modCount0 + 1 | 0;
            var$3 = ju_HashMap_createHashedEntry($this, null, 0, 0);
            var$4 = $this.$elementCount + 1 | 0;
            $this.$elementCount = var$4;
            if (var$4 > $this.$threshold)
                ju_HashMap_rehash($this);
        }
    } else {
        var$4 = $key.$hashCode();
        var$5 = var$4 & ($this.$elementData.data.length - 1 | 0);
        var$3 = ju_HashMap_findNonNullKeyEntry($this, $key, var$5, var$4);
        if (var$3 === null) {
            $this.$modCount0 = $this.$modCount0 + 1 | 0;
            var$3 = ju_HashMap_createHashedEntry($this, $key, var$5, var$4);
            var$4 = $this.$elementCount + 1 | 0;
            $this.$elementCount = var$4;
            if (var$4 > $this.$threshold)
                ju_HashMap_rehash($this);
        }
    }
    $key = var$3.$value;
    var$3.$value = $value;
    return $key;
},
ju_HashMap_createHashedEntry = ($this, $key, $index, $hash) => {
    let $entry, var$5;
    $entry = new ju_HashMap$HashEntry;
    ju_MapEntry__init_($entry, $key, null);
    $entry.$origKeyHash = $hash;
    var$5 = $this.$elementData.data;
    $entry.$next4 = var$5[$index];
    var$5[$index] = $entry;
    return $entry;
},
ju_HashMap_rehash = $this => {
    let var$1, var$2, var$3, var$4, var$5, var$6, var$7, var$8;
    var$1 = $this.$elementData.data.length;
    var$1 = ju_HashMap_calculateCapacity(!var$1 ? 1 : var$1 << 1);
    var$2 = $rt_createArray(ju_HashMap$HashEntry, var$1);
    var$3 = var$2.data;
    var$4 = 0;
    var$5 = var$1 - 1 | 0;
    while (true) {
        var$6 = $this.$elementData.data;
        if (var$4 >= var$6.length)
            break;
        var$7 = var$6[var$4];
        var$6[var$4] = null;
        while (var$7 !== null) {
            var$1 = var$7.$origKeyHash & var$5;
            var$8 = var$7.$next4;
            var$7.$next4 = var$3[var$1];
            var$3[var$1] = var$7;
            var$7 = var$8;
        }
        var$4 = var$4 + 1 | 0;
    }
    $this.$elementData = var$2;
    ju_HashMap_computeThreshold($this);
},
ju_HashMap_size = $this => {
    return $this.$elementCount;
},
igbcacig_ValueReturnCode = $rt_classWithoutFields(igbcac_APIMethodCode);
function igbcaci_DisbandReturn() {
    igbcacig_ValueReturnCode.call(this);
    this.$code2 = null;
}
let igbcaci_DisbandReturn__init_0 = ($this, $code) => {
    $this.$code2 = $code;
},
igbcaci_DisbandReturn__init_ = var_0 => {
    let var_1 = new igbcaci_DisbandReturn();
    igbcaci_DisbandReturn__init_0(var_1, var_0);
    return var_1;
};
function igbcacigl_SetFieldCode() {
    let a = this; igbcacig_ValueReturnCode.call(a);
    a.$dup = 0;
    a.$value9 = null;
    a.$field = null;
}
let igbcw_SetRunner = $rt_classWithoutFields();
function igbcacigc_MethodCallCode() {
    let a = this; igbcacig_ValueReturnCode.call(a);
    a.$isStatic3 = 0;
    a.$target0 = null;
    a.$arguments0 = null;
    a.$opcode0 = 0;
}
let igbcacigc_MethodCallCode__init_ = ($this, $target, $isStatic, $args) => {
    let var$4;
    var$4 = ju_ArrayList__init_();
    $this.$arguments0 = var$4;
    $this.$opcode0 = 0;
    $this.$target0 = $target;
    $this.$isStatic3 = $isStatic;
    ju_AbstractCollection_addAll(var$4, jus_Stream_toList(ju_Arrays_stream($args)));
},
igbcacigc_MethodCallCode__init_0 = (var_0, var_1, var_2) => {
    let var_3 = new igbcacigc_MethodCallCode();
    igbcacigc_MethodCallCode__init_(var_3, var_0, var_1, var_2);
    return var_3;
},
igbcw_CallRunner = $rt_classWithoutFields();
function igbcacigl_LoadConstantCode() {
    igbcacig_ValueReturnCode.call(this);
    this.$value10 = null;
}
let igbcacigl_LoadConstantCode__init_0 = ($this, $value) => {
    $this.$value10 = $value;
},
igbcacigl_LoadConstantCode__init_ = var_0 => {
    let var_1 = new igbcacigl_LoadConstantCode();
    igbcacigl_LoadConstantCode__init_0(var_1, var_0);
    return var_1;
};
function igbcacigc_FieldGetCode() {
    let a = this; igbcacig_ValueReturnCode.call(a);
    a.$target = null;
    a.$isStatic2 = 0;
    a.$owner4 = null;
    a.$name10 = null;
    a.$desc3 = null;
    a.$instance = null;
}
let igbcacigc_FieldGetCode__init_0 = ($this, $target, $isStatic, $instance) => {
    $this.$target = $target;
    $this.$isStatic2 = $isStatic;
    $this.$instance = $instance;
},
igbcacigc_FieldGetCode__init_ = (var_0, var_1, var_2) => {
    let var_3 = new igbcacigc_FieldGetCode();
    igbcacigc_FieldGetCode__init_0(var_3, var_0, var_1, var_2);
    return var_3;
},
igbcacigc_FieldGetCode_getOwner = $this => {
    let var$1;
    var$1 = $this.$target;
    return var$1 !== null ? var$1.$owner3 : igbca_APILoader_get($this.$owner4);
},
igbcacigc_FieldGetCode_getField = $this => {
    let var$1;
    var$1 = $this.$target;
    if (var$1 === null)
        var$1 = igbca_APIClass_getField(igbcacigc_FieldGetCode_getOwner($this), $this.$name10, $this.$desc3);
    return var$1;
},
igbcw_GetRunner = $rt_classWithoutFields(),
igbcw_GetRunner_run = ($code, $method) => {
    let $target, $className, $$je;
    $target = igbcacigc_FieldGetCode_getField($code);
    if (ju_HashMap_entryByKey(igbcw_CodeRunner_FIELD_VALUES, $target) === null ? 0 : 1)
        return ju_HashMap_get(igbcw_CodeRunner_FIELD_VALUES, $target);
    $className = jl_String_replace0($target.$owner3.$fullName, 47, 46);
    a: {
        try {
            $code = igbcwp_SupportedFieldGets_get(jl_Class_forName($className), $target.$name1, $target.$isStatic1 ? null : igbcw_CodeRunner_execute($code.$instance, $method));
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_Exception) {
                break a;
            } else {
                throw $$e;
            }
        }
        return $code;
    }
    $code = new igbcwp_FailedToRunCodeException;
    $method = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($method);
    jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($method, $rt_s(50)), $className), 34);
    jl_Throwable__init_0($code, jl_AbstractStringBuilder_toString($method));
    $rt_throw($code);
};
function igbcaci_IfStatementCode() {
    let a = this; igbcac_APIMethodCode.call(a);
    a.$reason = null;
    a.$codes0 = null;
    a.$reversed = 0;
}
let igbcw_IfStatementHandler = $rt_classWithoutFields(),
igbcw_IfStatementHandler_run = ($ifStatementCode, $method) => {
    let $b, var$4;
    $b = igbcw_CodeRunner_execute($ifStatementCode.$reason, $method);
    if ($b === null) {
        $method = new igbcwp_FailedToRunCodeException;
        jl_Throwable__init_0($method, $rt_s(114));
        $rt_throw($method);
    }
    a: {
        var$4 = $b.$value1;
        if (!(var$4 && !$ifStatementCode.$reversed)) {
            if (var$4)
                break a;
            if (!$ifStatementCode.$reversed)
                break a;
        }
        $ifStatementCode = ju_AbstractList_iterator($ifStatementCode.$codes0);
        while (true) {
            if (!ju_AbstractList$1_hasNext($ifStatementCode))
                break a;
            igbcw_CodeRunner_execute(ju_AbstractList$1_next($ifStatementCode), $method);
        }
    }
    return null;
};
function ji_PushbackInputStream() {
    let a = this; ji_FilterInputStream.call(a);
    a.$buf1 = null;
    a.$pos = 0;
}
let ji_PushbackInputStream_close = $this => {
    if ($this.$in !== null) {
        $this.$in.$close();
        $this.$in = null;
        $this.$buf1 = null;
    }
},
ji_PushbackInputStream_read = ($this, $buffer, $offset, $length) => {
    let var$4, var$5, $inCopied, var$7, $copiedBytes, $copyLength, var$10, var$11, var$12;
    var$4 = $this.$buf1;
    if (var$4 === null) {
        var$5 = new ji_IOException;
        jl_Throwable__init_0(var$5, $rt_s(86));
        $rt_throw(var$5);
    }
    $inCopied = $buffer.data.length;
    if ($offset <= $inCopied && $offset >= 0) {
        if ($length >= 0 && $length <= ($inCopied - $offset | 0)) {
            var$7 = var$4.data;
            $copiedBytes = 0;
            $copyLength = 0;
            var$10 = $this.$pos;
            $inCopied = var$7.length;
            if (var$10 < $inCopied) {
                $copyLength = $inCopied - var$10 | 0;
                if ($copyLength >= $length)
                    $copyLength = $length;
                jl_System_fastArraycopy(var$4, var$10, $buffer, $offset, $copyLength);
                $offset = $offset + $copyLength | 0;
                $copiedBytes = $copiedBytes + $copyLength | 0;
                $this.$pos = $this.$pos + $copyLength | 0;
            }
            if ($copyLength == $length)
                return $length;
            $inCopied = $this.$in.$read($buffer, $offset, $length - $copiedBytes | 0);
            if ($inCopied > 0)
                return $inCopied + $copiedBytes | 0;
            if ($copiedBytes)
                return $copiedBytes;
            return $inCopied;
        }
        var$11 = new jl_ArrayIndexOutOfBoundsException;
        var$5 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$5);
        jl_StringBuilder_append0(jl_StringBuilder_append(var$5, $rt_s(87)), $length);
        jl_Throwable__init_0(var$11, jl_AbstractStringBuilder_toString(var$5));
        $rt_throw(var$11);
    }
    var$5 = new jl_ArrayIndexOutOfBoundsException;
    var$12 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$12);
    jl_StringBuilder_append0(jl_StringBuilder_append(var$12, $rt_s(88)), $offset);
    jl_Throwable__init_0(var$5, jl_AbstractStringBuilder_toString(var$12));
    $rt_throw(var$5);
};
function juz_Inflater() {
    let a = this; jl_Object.call(a);
    a.$finished = 0;
    a.$nowrap = 0;
    a.$inLength = 0;
    a.$inRead = 0;
    a.$needsDictionary = 0;
    a.$impl = null;
}
let juz_Inflater_inflate = ($this, $buf, $off, $nbytes) => {
    let $neededDict, var$5, $lastInSize, $lastOutSize, var$8, $errCode, var$10;
    $neededDict = $buf.data.length;
    if ($off <= $neededDict && $nbytes >= 0 && $off >= 0 && ($neededDict - $off | 0) >= $nbytes) {
        if ($this.$impl === null) {
            var$5 = new jl_IllegalStateException;
            jl_Throwable__init_(var$5);
            $rt_throw(var$5);
        }
        if (juz_Inflater_needsInput($this))
            return 0;
        var$5 = $this.$impl;
        $lastInSize = var$5.$total_in;
        $lastOutSize = var$5.$total_out;
        $neededDict = $this.$needsDictionary;
        $this.$needsDictionary = 0;
        var$5.$next_out = $buf;
        var$5.$next_out_index = $off;
        var$5.$avail_out = $nbytes;
        var$8 = var$5.$istate;
        if (var$8 === null)
            $errCode = (-2);
        else {
            $errCode = cjj_Inflate_inflate(var$8, 0);
            if ($errCode == 1)
                var$5.$finished0 = 1;
        }
        a: {
            switch ($errCode) {
                case 0:
                    break a;
                case 1:
                    $this.$finished = 1;
                    break a;
                case 2:
                    $this.$needsDictionary = 1;
                    break a;
                default:
            }
            var$5 = new juz_DataFormatException;
            var$8 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$8);
            jl_StringBuilder_append0(jl_StringBuilder_append(var$8, $rt_s(115)), $errCode);
            jl_Throwable__init_0(var$5, jl_AbstractStringBuilder_toString(var$8));
            $rt_throw(var$5);
        }
        if ($this.$needsDictionary && $neededDict) {
            var$5 = new juz_DataFormatException;
            jl_Throwable__init_(var$5);
            $rt_throw(var$5);
        }
        var$10 = Long_fromInt($this.$inRead);
        var$5 = $this.$impl;
        $this.$inRead = Long_lo(Long_add(var$10, Long_sub(var$5.$total_in, $lastInSize)));
        return Long_lo(Long_sub(var$5.$total_out, $lastOutSize));
    }
    var$5 = new jl_ArrayIndexOutOfBoundsException;
    jl_Throwable__init_(var$5);
    $rt_throw(var$5);
},
juz_Inflater_needsInput = $this => {
    return $this.$inRead != $this.$inLength ? 0 : 1;
},
juz_Checksum = $rt_classWithoutFields(0);
function juz_CRC32() {
    let a = this; jl_Object.call(a);
    a.$impl0 = null;
    a.$tbytes = Long_ZERO;
}
let juz_CRC32_update = ($this, $buf, $off, $nbytes) => {
    let var$4, var$5;
    var$4 = $buf.data.length;
    if ($off <= var$4 && $nbytes >= 0 && $off >= 0 && (var$4 - $off | 0) >= $nbytes) {
        cjj_CRC32_update($this.$impl0, $buf, $off, $nbytes);
        $this.$tbytes = Long_add($this.$tbytes, Long_fromInt($nbytes));
        return;
    }
    var$5 = new jl_ArrayIndexOutOfBoundsException;
    jl_Throwable__init_(var$5);
    $rt_throw(var$5);
},
jl_NullPointerException = $rt_classWithoutFields(jl_RuntimeException);
function juz_ZipEntry() {
    let a = this; jl_Object.call(a);
    a.$name9 = null;
    a.$compressedSize = Long_ZERO;
    a.$crc0 = Long_ZERO;
    a.$size1 = Long_ZERO;
    a.$compressionMethod = 0;
    a.$time = 0;
    a.$modDate = 0;
    a.$extra0 = null;
    a.$nameLen = 0;
    a.$mLocalHeaderRelOffset = Long_ZERO;
}
let juz_ZipEntry_setCompressedSize = ($this, $value) => {
    $this.$compressedSize = $value;
},
juz_ZipEntry_setExtra = ($this, $data) => {
    let var$2;
    if ($data !== null && $data.data.length > 65535) {
        var$2 = new jl_IllegalArgumentException;
        jl_Throwable__init_(var$2);
        $rt_throw(var$2);
    }
    $this.$extra0 = $data;
},
ooat_Util = $rt_classWithoutFields(),
ooat_Util_add = ($newList, $element) => {
    if ($newList === null)
        $newList = ju_ArrayList__init_0(1);
    ju_ArrayList_add($newList, $element);
    return $newList;
},
ooat_Util_asArrayList = $array => {
    let $list, var$3, var$4;
    if ($array === null)
        return ju_ArrayList__init_();
    $array = $array.data;
    $list = new ju_ArrayList;
    var$3 = $array.length;
    ju_ArrayList__init_1($list, var$3);
    var$4 = 0;
    while (var$4 < var$3) {
        ju_ArrayList_add($list, $array[var$4]);
        var$4 = var$4 + 1 | 0;
    }
    return $list;
},
ooat_Util_asArrayList1 = $intArray => {
    let $intList, var$3, var$4;
    if ($intArray === null)
        return ju_ArrayList__init_();
    $intArray = $intArray.data;
    $intList = new ju_ArrayList;
    var$3 = $intArray.length;
    ju_ArrayList__init_1($intList, var$3);
    var$4 = 0;
    while (var$4 < var$3) {
        ju_ArrayList_add($intList, jl_Integer_valueOf($intArray[var$4]));
        var$4 = var$4 + 1 | 0;
    }
    return $intList;
},
ooat_Util_asArrayList0 = ($length, $array) => {
    let $list, $i;
    $list = ju_ArrayList__init_0($length);
    $i = 0;
    while ($i < $length) {
        ju_ArrayList_add($list, $array.data[$i]);
        $i = $i + 1 | 0;
    }
    return $list;
};
function ooat_InsnList() {
    let a = this; jl_Object.call(a);
    a.$size5 = 0;
    a.$firstInsn = null;
    a.$lastInsn = null;
    a.$cache = null;
}
let ooat_InsnList_add = ($this, $insnNode) => {
    let var$2;
    $this.$size5 = $this.$size5 + 1 | 0;
    var$2 = $this.$lastInsn;
    if (var$2 !== null) {
        var$2.$nextInsn = $insnNode;
        $insnNode.$previousInsn = var$2;
    } else {
        $this.$firstInsn = $insnNode;
        $this.$lastInsn = $insnNode;
    }
    $this.$lastInsn = $insnNode;
    $this.$cache = null;
    $insnNode.$index7 = 0;
},
jl_UnsupportedOperationException = $rt_classWithoutFields(jl_RuntimeException),
juf_Function = $rt_classWithoutFields(0);
function igbcw_CallRunner$run$lambda$_1_0() {
    jl_Object.call(this);
    this.$_08 = null;
}
let igbcw_CallRunner$run$lambda$_1_0_apply = (var$0, var$1) => {
    let var$2, var$3, var$4, $$je;
    var$1 = var$1;
    var$2 = var$0.$_08;
    a: {
        try {
            var$2 = igbcw_CodeRunner_execute(var$1, var$2);
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_Exception) {
                var$2 = $$je;
                break a;
            } else {
                throw $$e;
            }
        }
        return var$2;
    }
    var$3 = jl_System_out();
    var$1 = jl_Class_getName(jl_Object_getClass(var$1));
    var$4 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$4);
    jl_StringBuilder_append(jl_StringBuilder_append(var$4, $rt_s(116)), var$1);
    var$3.$println0(jl_AbstractStringBuilder_toString(var$4));
    var$1 = new jl_RuntimeException;
    jl_Throwable__init_1(var$1, var$2.$getMessage(), var$2);
    $rt_throw(var$1);
},
igbcwp_SupportedMethodCalls = $rt_classWithoutFields(),
igbcwp_SupportedMethodCalls_handleString = ($instance, $name, $otherArguments) => {
    let var$4, var$5;
    a: {
        var$4 = (-1);
        switch (jl_String_hashCode($name)) {
            case -1776922004:
                if (!jl_String_equals($name, $rt_s(117)))
                    break a;
                var$4 = 0;
                break a;
            case -1354795244:
                if (!jl_String_equals($name, $rt_s(118)))
                    break a;
                var$4 = 4;
                break a;
            case -1295482945:
                if (!jl_String_equals($name, $rt_s(119)))
                    break a;
                var$4 = 3;
                break a;
            case 3568674:
                if (!jl_String_equals($name, $rt_s(120)))
                    break a;
                var$4 = 1;
                break a;
            case 530542161:
                if (!jl_String_equals($name, $rt_s(121)))
                    break a;
                var$4 = 2;
                break a;
            case 1094496948:
                if (!jl_String_equals($name, $rt_s(122)))
                    break a;
                var$4 = 5;
                break a;
            default:
        }
    }
    b: {
        switch (var$4) {
            case 0:
                break;
            case 1:
                $instance = jl_String_trim($instance);
                break b;
            case 2:
                $otherArguments = $otherArguments.data;
                $instance = jl_String_substring($instance, $otherArguments[0].$value0, $otherArguments[1].$value0);
                break b;
            case 3:
                $instance = jl_Boolean_valueOf(jl_String_equals($instance, $otherArguments.data[0]));
                break b;
            case 4:
                $instance = jl_String_concat($instance, $otherArguments.data[0]);
                break b;
            case 5:
                $otherArguments = $otherArguments.data;
                $instance = jl_String_replace($instance, $otherArguments[0], $otherArguments[1]);
                break b;
            default:
                $instance = new jl_UnsupportedOperationException;
                var$5 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$5);
                jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$5, $rt_s(123)), $name), $rt_s(71));
                jl_Throwable__init_0($instance, jl_AbstractStringBuilder_toString(var$5));
                $rt_throw($instance);
        }
    }
    return $instance;
},
igbcwp_SupportedMethodCalls_handlePrintStream = ($name, $instance, $otherArguments) => {
    let var$4, var$5;
    a: {
        var$4 = (-1);
        switch (jl_String_hashCode($name)) {
            case -314717969:
                if (!jl_String_equals($name, $rt_s(124)))
                    break a;
                var$4 = 0;
                break a;
            case 106934957:
                if (!jl_String_equals($name, $rt_s(125)))
                    break a;
                var$4 = 1;
                break a;
            default:
        }
    }
    b: {
        switch (var$4) {
            case 0:
                break;
            case 1:
                $instance.$print1($otherArguments.data[0]);
                break b;
            default:
                $instance = new jl_UnsupportedOperationException;
                var$5 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$5);
                jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$5, $rt_s(126)), $name), $rt_s(71));
                jl_Throwable__init_0($instance, jl_AbstractStringBuilder_toString(var$5));
                $rt_throw($instance);
        }
        $instance.$println($otherArguments.data[0]);
    }
},
igbcwp_FailedToRunCodeException = $rt_classWithoutFields(jl_RuntimeException),
igbcwp_SupportedFieldGets = $rt_classWithoutFields(),
igbcwp_SupportedFieldGets_get = ($fieldOwner, $name, $instance) => {
    let var$4, var$5;
    if ($fieldOwner !== $rt_cls(jl_System)) {
        $instance = new jl_UnsupportedOperationException;
        $fieldOwner = jl_Class_getName($fieldOwner);
        var$4 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$4);
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$4, $fieldOwner), $rt_s(51)), $name), $rt_s(52));
        jl_Throwable__init_0($instance, jl_AbstractStringBuilder_toString(var$4));
        $rt_throw($instance);
    }
    a: {
        var$5 = (-1);
        switch (jl_String_hashCode($name)) {
            case 3365:
                if (!jl_String_equals($name, $rt_s(127)))
                    break a;
                var$5 = 2;
                break a;
            case 100709:
                if (!jl_String_equals($name, $rt_s(128)))
                    break a;
                var$5 = 1;
                break a;
            case 110414:
                if (!jl_String_equals($name, $rt_s(129)))
                    break a;
                var$5 = 0;
                break a;
            default:
        }
    }
    b: {
        switch (var$5) {
            case 0:
                break;
            case 1:
                $fieldOwner = jl_System_err();
                break b;
            case 2:
                if (jl_System_inCache === null)
                    jl_System_inCache = new jl_ConsoleInputStream;
                $fieldOwner = jl_System_inCache;
                break b;
            default:
                $fieldOwner = new jl_UnsupportedOperationException;
                $instance = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_($instance);
                jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($instance, $rt_s(70)), $name), $rt_s(52));
                jl_Throwable__init_0($fieldOwner, jl_AbstractStringBuilder_toString($instance));
                $rt_throw($fieldOwner);
        }
        $fieldOwner = jl_System_out();
    }
    return $fieldOwner;
};
function jl_Boolean() {
    jl_Object.call(this);
    this.$value1 = 0;
}
let jl_Boolean_TRUE = null,
jl_Boolean_FALSE = null,
jl_Boolean_TYPE = null,
jl_Boolean__init_0 = ($this, $value) => {
    $this.$value1 = $value;
},
jl_Boolean__init_ = var_0 => {
    let var_1 = new jl_Boolean();
    jl_Boolean__init_0(var_1, var_0);
    return var_1;
},
jl_Boolean_valueOf = $value => {
    return !$value ? jl_Boolean_FALSE : jl_Boolean_TRUE;
},
jl_Boolean_toString = $this => {
    return !$this.$value1 ? $rt_s(130) : $rt_s(131);
},
jl_Boolean_equals = ($this, $obj) => {
    if ($this === $obj)
        return 1;
    return $obj instanceof jl_Boolean && $obj.$value1 == $this.$value1 ? 1 : 0;
},
jl_Boolean__clinit_ = () => {
    jl_Boolean_TRUE = jl_Boolean__init_(1);
    jl_Boolean_FALSE = jl_Boolean__init_(0);
    jl_Boolean_TYPE = $rt_cls($rt_booleancls);
};
function cjj_ZStream() {
    let a = this; jl_Object.call(a);
    a.$next_in = null;
    a.$next_in_index = 0;
    a.$avail_in = 0;
    a.$total_in = Long_ZERO;
    a.$next_out = null;
    a.$next_out_index = 0;
    a.$avail_out = 0;
    a.$total_out = Long_ZERO;
    a.$msg = null;
    a.$istate = null;
    a.$adler = null;
}
function cjj_Inflater() {
    cjj_ZStream.call(this);
    this.$finished0 = 0;
}
let cjj_Inflater__init_ = ($this, $nowrap) => {
    let var$2, var$3;
    $this.$adler = cjj_Adler32__init_();
    $this.$finished0 = 0;
    $nowrap = cjj_Inflater_init($this, 15, $nowrap);
    if (!$nowrap)
        return;
    var$2 = new cjj_GZIPException;
    var$3 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$3);
    var$3 = jl_StringBuilder_append0(var$3, $nowrap);
    jl_AbstractStringBuilder_append0(var$3, $rt_s(3));
    jl_AbstractStringBuilder_append0(var$3, $this.$msg);
    jl_Throwable__init_0(var$2, jl_AbstractStringBuilder_toString(var$3));
    $rt_throw(var$2);
},
cjj_Inflater__init_0 = var_0 => {
    let var_1 = new cjj_Inflater();
    cjj_Inflater__init_(var_1, var_0);
    return var_1;
},
cjj_Inflater_init = ($this, $w, $nowrap) => {
    let var$3, var$4, var$5;
    $this.$finished0 = 0;
    var$3 = new cjj_Inflate;
    var$3.$was = Long_fromInt(-1);
    var$3.$need_bytes = (-1);
    var$3.$crcbuf = $rt_createByteArray(4);
    var$3.$gheader = null;
    var$3.$tmp_string = null;
    var$3.$z0 = $this;
    $this.$istate = var$3;
    if ($nowrap)
        $w =  -$w | 0;
    $this.$msg = null;
    var$3.$blocks = null;
    var$3.$wrap5 = 0;
    if ($w < 0)
        $w =  -$w | 0;
    else if ($w & 1073741824) {
        var$3.$wrap5 = 4;
        $w = $w & (-1073741825);
        if ($w < 48)
            $w = $w & 15;
    } else if ($w & (-32)) {
        var$3.$wrap5 = 4;
        $w = $w & 15;
    } else {
        var$3.$wrap5 = ($w >> 4) + 1 | 0;
        if ($w < 48)
            $w = $w & 15;
    }
    if ($w >= 8 && $w <= 15) {
        var$3.$wbits = $w;
        var$4 = new cjj_InfBlocks;
        $nowrap = 1 << $w;
        var$4.$bb = $rt_createIntArray(1);
        var$4.$tb = $rt_createIntArray(1);
        var$4.$bl = $rt_createIntArray(1);
        var$4.$bd = $rt_createIntArray(1);
        var$4.$tl = $rt_createArray($rt_arraycls($rt_intcls), 1);
        var$4.$td = $rt_createArray($rt_arraycls($rt_intcls), 1);
        var$4.$tli = $rt_createIntArray(1);
        var$4.$tdi = $rt_createIntArray(1);
        var$5 = new cjj_InfTree;
        var$5.$hn = null;
        var$5.$v = null;
        var$5.$c = null;
        var$5.$r0 = null;
        var$5.$u = null;
        var$5.$x = null;
        var$4.$inftree = var$5;
        var$4.$z = $this;
        var$5 = new cjj_InfCodes;
        var$5.$tree_index = 0;
        var$5.$z1 = $this;
        var$5.$s = var$4;
        var$4.$codes = var$5;
        var$4.$hufts = $rt_createIntArray(4320);
        var$4.$window = $rt_createByteArray($nowrap);
        var$4.$end1 = $nowrap;
        var$4.$check = var$3.$wrap5 ? 1 : 0;
        var$4.$mode0 = 0;
        cjj_InfBlocks_reset(var$4);
        var$3.$blocks = var$4;
        var$5 = var$3.$z0;
        if (var$5 !== null) {
            var$5.$total_out = Long_ZERO;
            var$5.$total_in = Long_ZERO;
            var$5.$msg = null;
            var$3.$mode = 14;
            var$3.$need_bytes = (-1);
            cjj_InfBlocks_reset(var$4);
        }
        $w = 0;
    } else
        $w = (-2);
    return $w;
},
ji_IOException = $rt_classWithoutFields(jl_Exception),
cjj_GZIPException = $rt_classWithoutFields(ji_IOException),
cjj_Checksum = $rt_classWithoutFields(0);
function cjj_CRC32() {
    jl_Object.call(this);
    this.$v0 = 0;
}
let cjj_CRC32_crc_table = null,
cjj_CRC32__init_0 = $this => {
    $this.$v0 = 0;
},
cjj_CRC32__init_ = () => {
    let var_0 = new cjj_CRC32();
    cjj_CRC32__init_0(var_0);
    return var_0;
},
cjj_CRC32_update = ($this, $buf, $index, $len) => {
    let $c, var$5, var$6, var$7;
    $c = $this.$v0 ^ (-1);
    while (true) {
        $len = $len + (-1) | 0;
        if ($len < 0)
            break;
        var$5 = $buf.data;
        var$6 = cjj_CRC32_crc_table.data;
        var$7 = $index + 1 | 0;
        $c = var$6[($c ^ var$5[$index]) & 255] ^ ($c >>> 8 | 0);
        $index = var$7;
    }
    $this.$v0 = $c ^ (-1);
},
cjj_CRC32_reset = $this => {
    $this.$v0 = 0;
},
cjj_CRC32_reset0 = ($this, $vv) => {
    $this.$v0 = Long_lo(Long_and($vv, Long_create(4294967295, 0)));
},
cjj_CRC32_getValue = $this => {
    return Long_and(Long_fromInt($this.$v0), Long_create(4294967295, 0));
},
cjj_CRC32__clinit_ = () => {
    let var$1, var$2, $n, $k, var$5;
    cjj_CRC32_crc_table = null;
    var$1 = $rt_createIntArray(256);
    var$2 = var$1.data;
    cjj_CRC32_crc_table = var$1;
    $n = 0;
    while ($n < 256) {
        $k = 8;
        var$5 = $n;
        while (true) {
            $k = $k + (-1) | 0;
            if ($k < 0)
                break;
            if (!(var$5 & 1)) {
                var$5 = var$5 >>> 1 | 0;
                continue;
            }
            var$5 = (-306674912) ^ (var$5 >>> 1 | 0);
        }
        var$2[$n] = var$5;
        $n = $n + 1 | 0;
    }
};
function jn_Buffer() {
    let a = this; jl_Object.call(a);
    a.$capacity = 0;
    a.$position0 = 0;
    a.$limit = 0;
    a.$mark = 0;
}
let jn_Buffer__init_ = ($this, $capacity) => {
    $this.$mark = (-1);
    $this.$capacity = $capacity;
    $this.$limit = $capacity;
},
jn_Buffer_position = ($this, $newPosition) => {
    let var$2, var$3, var$4;
    if ($newPosition >= 0 && $newPosition <= $this.$limit) {
        $this.$position0 = $newPosition;
        if ($newPosition < $this.$mark)
            $this.$mark = 0;
        return $this;
    }
    var$2 = new jl_IllegalArgumentException;
    var$3 = $this.$limit;
    var$4 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$4);
    jl_AbstractStringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$4, $rt_s(132)), $newPosition), $rt_s(133)), var$3), 93);
    jl_Throwable__init_0(var$2, jl_AbstractStringBuilder_toString(var$4));
    $rt_throw(var$2);
},
jn_Buffer_flip = $this => {
    $this.$limit = $this.$position0;
    $this.$position0 = 0;
    $this.$mark = (-1);
    return $this;
},
jn_Buffer_remaining = $this => {
    return $this.$limit - $this.$position0 | 0;
},
jn_Buffer_hasRemaining = $this => {
    return $this.$position0 >= $this.$limit ? 0 : 1;
};
function jn_ByteBuffer() {
    let a = this; jn_Buffer.call(a);
    a.$start1 = 0;
    a.$array1 = null;
    a.$order = null;
}
let jn_ByteBuffer_wrap0 = ($array, $offset, $length) => {
    let var$4, var$5, var$6;
    var$4 = $array.data.length;
    ju_Objects_checkFromIndexSize($offset, $length, var$4);
    var$5 = new jn_ByteBufferImpl;
    var$6 = $offset + $length | 0;
    jn_Buffer__init_(var$5, var$4);
    var$5.$order = jn_ByteOrder_BIG_ENDIAN;
    var$5.$start1 = 0;
    var$5.$array1 = $array;
    var$5.$position0 = $offset;
    var$5.$limit = var$6;
    var$5.$direct = 0;
    var$5.$readOnly = 0;
    return var$5;
},
jn_ByteBuffer_wrap = $array => {
    return jn_ByteBuffer_wrap0($array, 0, $array.data.length);
},
jn_ByteBuffer_put = ($this, $src, $offset, $length) => {
    let var$4, var$5, var$6, var$7, var$8, var$9, $pos, $i, var$12;
    if (!$length)
        return $this;
    if ($this.$readOnly) {
        var$4 = new jn_ReadOnlyBufferException;
        jl_Throwable__init_(var$4);
        $rt_throw(var$4);
    }
    if (jn_Buffer_remaining($this) < $length) {
        var$4 = new jn_BufferOverflowException;
        jl_Throwable__init_(var$4);
        $rt_throw(var$4);
    }
    if ($offset >= 0) {
        var$5 = $src.data;
        var$6 = var$5.length;
        if ($offset <= var$6) {
            var$7 = $offset + $length | 0;
            if (var$7 > var$6) {
                var$8 = new jl_IndexOutOfBoundsException;
                var$9 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$9);
                jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$9, $rt_s(134)), var$7), $rt_s(135)), var$6);
                jl_Throwable__init_0(var$8, jl_AbstractStringBuilder_toString(var$9));
                $rt_throw(var$8);
            }
            if ($length < 0) {
                var$4 = new jl_IndexOutOfBoundsException;
                var$8 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$8);
                jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$8, $rt_s(136)), $length), $rt_s(137));
                jl_Throwable__init_0(var$4, jl_AbstractStringBuilder_toString(var$8));
                $rt_throw(var$4);
            }
            var$7 = $this.$position0;
            $pos = var$7 + $this.$start1 | 0;
            $i = 0;
            while ($i < $length) {
                $src = $this.$array1.data;
                var$12 = $pos + 1 | 0;
                var$6 = $offset + 1 | 0;
                $src[$pos] = var$5[$offset];
                $i = $i + 1 | 0;
                $pos = var$12;
                $offset = var$6;
            }
            $this.$position0 = var$7 + $length | 0;
            return $this;
        }
    }
    $src = $src.data;
    var$4 = new jl_IndexOutOfBoundsException;
    $length = $src.length;
    var$8 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$8);
    jl_AbstractStringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$8, $rt_s(138)), $offset), $rt_s(133)), $length), 41);
    jl_Throwable__init_0(var$4, jl_AbstractStringBuilder_toString(var$8));
    $rt_throw(var$4);
},
jn_ByteBuffer_clear = $this => {
    $this.$position0 = 0;
    $this.$limit = $this.$capacity;
    $this.$mark = (-1);
    return $this;
},
jl_Readable = $rt_classWithoutFields(0),
jn_CharBuffer = $rt_classWithoutFields(jn_Buffer),
jn_CharBuffer_allocate = $capacity => {
    let var$2, var$3;
    if ($capacity >= 0)
        return jn_CharBufferOverArray__init_(0, $capacity, $rt_createCharArray($capacity), 0, $capacity, 0);
    var$2 = new jl_IllegalArgumentException;
    var$3 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$3);
    jl_StringBuilder_append0(jl_StringBuilder_append(var$3, $rt_s(139)), $capacity);
    jl_Throwable__init_0(var$2, jl_AbstractStringBuilder_toString(var$3));
    $rt_throw(var$2);
},
jn_CharBuffer_wrap = ($array, $offset, $length) => {
    return jn_CharBufferOverArray__init_(0, $array.data.length, $array, $offset, $offset + $length | 0, 0);
},
jn_CharBuffer_wrap0 = $array => {
    return jn_CharBuffer_wrap($array, 0, $array.data.length);
},
jn_CharBuffer_get = ($this, $dst, $offset, $length) => {
    let var$4, var$5, $pos, var$7, var$8, var$9, var$10, $i, var$12, var$13, var$14;
    if ($offset >= 0) {
        var$4 = $dst.data;
        var$5 = var$4.length;
        if ($offset <= var$5) {
            $pos = $offset + $length | 0;
            if ($pos > var$5) {
                var$7 = new jl_IndexOutOfBoundsException;
                var$8 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$8);
                jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$8, $rt_s(140)), $pos), $rt_s(135)), var$5);
                jl_Throwable__init_0(var$7, jl_AbstractStringBuilder_toString(var$8));
                $rt_throw(var$7);
            }
            if (jn_Buffer_remaining($this) < $length) {
                var$9 = new jn_BufferUnderflowException;
                jl_Throwable__init_(var$9);
                $rt_throw(var$9);
            }
            if ($length < 0) {
                var$9 = new jl_IndexOutOfBoundsException;
                var$10 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$10);
                jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$10, $rt_s(136)), $length), $rt_s(137));
                jl_Throwable__init_0(var$9, jl_AbstractStringBuilder_toString(var$10));
                $rt_throw(var$9);
            }
            $pos = $this.$position0;
            $i = 0;
            var$12 = $pos;
            while ($i < $length) {
                var$13 = $offset + 1 | 0;
                var$14 = var$12 + 1 | 0;
                var$4[$offset] = $this.$array0.data[var$12 + $this.$start4 | 0];
                $i = $i + 1 | 0;
                $offset = var$13;
                var$12 = var$14;
            }
            $this.$position0 = $pos + $length | 0;
            return $this;
        }
    }
    $dst = $dst.data;
    var$9 = new jl_IndexOutOfBoundsException;
    $length = $dst.length;
    var$10 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$10);
    jl_AbstractStringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$10, $rt_s(138)), $offset), $rt_s(133)), $length), 41);
    jl_Throwable__init_0(var$9, jl_AbstractStringBuilder_toString(var$10));
    $rt_throw(var$9);
},
jn_CharBuffer_put = ($this, $src) => {
    let var$2, var$3, var$4, var$5, var$6, var$7, var$8;
    var$2 = 0;
    var$3 = $src.$nativeString.length;
    if ($this.$readOnly0) {
        $src = new jn_ReadOnlyBufferException;
        jl_Throwable__init_($src);
        $rt_throw($src);
    }
    var$4 = var$3 - var$2 | 0;
    if (jn_Buffer_remaining($this) < var$4) {
        $src = new jn_BufferOverflowException;
        jl_Throwable__init_($src);
        $rt_throw($src);
    }
    if (var$2 > $src.$nativeString.length) {
        var$5 = new jl_IndexOutOfBoundsException;
        var$6 = $src.$nativeString.length;
        $src = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($src);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append($src, $rt_s(141)), var$2), $rt_s(133)), var$6), 41);
        jl_Throwable__init_0(var$5, jl_AbstractStringBuilder_toString($src));
        $rt_throw(var$5);
    }
    if (var$3 > $src.$nativeString.length) {
        var$5 = new jl_IndexOutOfBoundsException;
        var$2 = $src.$nativeString.length;
        $src = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($src);
        jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append($src, $rt_s(142)), var$3), $rt_s(143)), var$2);
        jl_Throwable__init_0(var$5, jl_AbstractStringBuilder_toString($src));
        $rt_throw(var$5);
    }
    if (var$2 > var$3) {
        $src = new jl_IndexOutOfBoundsException;
        var$5 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$5);
        jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$5, $rt_s(141)), var$2), $rt_s(144)), var$3);
        jl_Throwable__init_0($src, jl_AbstractStringBuilder_toString(var$5));
        $rt_throw($src);
    }
    var$7 = $this.$position0;
    while (var$2 < var$3) {
        var$8 = var$7 + 1 | 0;
        var$6 = var$2 + 1 | 0;
        jn_CharBufferOverArray_putChar($this, var$7, jl_String_charAt($src, var$2));
        var$7 = var$8;
        var$2 = var$6;
    }
    $this.$position0 = $this.$position0 + var$4 | 0;
    return $this;
},
jl_ReflectiveOperationException = $rt_classWithoutFields(jl_Exception),
jl_ClassNotFoundException = $rt_classWithoutFields(jl_ReflectiveOperationException);
function jn_ByteBufferImpl() {
    let a = this; jn_ByteBuffer.call(a);
    a.$direct = 0;
    a.$readOnly = 0;
}
function jnc_CodingErrorAction() {
    jl_Object.call(this);
    this.$name22 = null;
}
let jnc_CodingErrorAction_IGNORE = null,
jnc_CodingErrorAction_REPLACE = null,
jnc_CodingErrorAction_REPORT = null,
jnc_CodingErrorAction__init_0 = ($this, $name) => {
    $this.$name22 = $name;
},
jnc_CodingErrorAction__init_ = var_0 => {
    let var_1 = new jnc_CodingErrorAction();
    jnc_CodingErrorAction__init_0(var_1, var_0);
    return var_1;
},
jnc_CodingErrorAction__clinit_ = () => {
    jnc_CodingErrorAction_IGNORE = jnc_CodingErrorAction__init_($rt_s(145));
    jnc_CodingErrorAction_REPLACE = jnc_CodingErrorAction__init_($rt_s(146));
    jnc_CodingErrorAction_REPORT = jnc_CodingErrorAction__init_($rt_s(147));
};
function jnc_CharsetDecoder() {
    let a = this; jl_Object.call(a);
    a.$charset1 = null;
    a.$averageCharsPerByte = 0.0;
    a.$maxCharsPerByte = 0.0;
    a.$replacement = null;
    a.$malformedAction = null;
    a.$unmappableAction0 = null;
    a.$state = 0;
}
let jnc_CharsetDecoder_onMalformedInput = ($this, $newAction) => {
    let var$2;
    if ($newAction !== null) {
        $this.$malformedAction = $newAction;
        return $this;
    }
    var$2 = new jl_IllegalArgumentException;
    jl_Throwable__init_0(var$2, $rt_s(148));
    $rt_throw(var$2);
},
jnc_CharsetDecoder_implOnMalformedInput = ($this, $newAction) => {
    return;
},
jnc_CharsetDecoder_onUnmappableCharacter = ($this, $newAction) => {
    let var$2;
    if ($newAction !== null) {
        $this.$unmappableAction0 = $newAction;
        return $this;
    }
    var$2 = new jl_IllegalArgumentException;
    jl_Throwable__init_0(var$2, $rt_s(148));
    $rt_throw(var$2);
},
jnc_CharsetDecoder_implOnUnmappableCharacter = ($this, $newAction) => {
    return;
},
jnc_CharsetDecoder_decode = ($this, $in, $out, $endOfInput) => {
    let var$4, $result, $e, $$je;
    var$4 = $this.$state;
    if (!(var$4 == 2 && !$endOfInput) && var$4 != 3) {
        $this.$state = $endOfInput ? 2 : 1;
        while (true) {
            try {
                $result = jnci_BufferedDecoder_decodeLoop($this, $in, $out);
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_RuntimeException) {
                    $e = $$je;
                    $in = new jnc_CoderMalfunctionError;
                    jl_Throwable__init_2($in, $e);
                    $rt_throw($in);
                } else {
                    throw $$e;
                }
            }
            if (jnc_CoderResult_isOverflow($result))
                return $result;
            if (jnc_CoderResult_isUnderflow($result)) {
                if ($endOfInput && jn_Buffer_hasRemaining($in)) {
                    if ($this.$malformedAction === jnc_CodingErrorAction_REPORT)
                        return jnc_CoderResult_malformedForLength(jn_Buffer_remaining($in));
                    if (jn_Buffer_remaining($out) <= $this.$replacement.$nativeString.length)
                        return jnc_CoderResult_OVERFLOW;
                    jn_Buffer_position($in, $in.$position0 + jn_Buffer_remaining($in) | 0);
                    if ($this.$malformedAction === jnc_CodingErrorAction_REPLACE)
                        jn_CharBuffer_put($out, $this.$replacement);
                }
                return $result;
            }
            if (jnc_CoderResult_isMalformed($result)) {
                $e = $this.$malformedAction;
                if ($e === jnc_CodingErrorAction_REPORT)
                    return $result;
                if ($e === jnc_CodingErrorAction_REPLACE) {
                    if (jn_Buffer_remaining($out) < $this.$replacement.$nativeString.length)
                        return jnc_CoderResult_OVERFLOW;
                    jn_CharBuffer_put($out, $this.$replacement);
                }
                jn_Buffer_position($in, $in.$position0 + jnc_CoderResult_length($result) | 0);
            } else if (jnc_CoderResult_isUnmappable($result)) {
                $e = $this.$unmappableAction0;
                if ($e === jnc_CodingErrorAction_REPORT)
                    break;
                if ($e === jnc_CodingErrorAction_REPLACE) {
                    if (jn_Buffer_remaining($out) < $this.$replacement.$nativeString.length)
                        return jnc_CoderResult_OVERFLOW;
                    jn_CharBuffer_put($out, $this.$replacement);
                }
                jn_Buffer_position($in, $in.$position0 + jnc_CoderResult_length($result) | 0);
            }
        }
        return $result;
    }
    $in = new jl_IllegalStateException;
    jl_Throwable__init_($in);
    $rt_throw($in);
},
jnc_CharsetDecoder_decode0 = ($this, $in) => {
    let var$2, $out, $result, var$5;
    var$2 = $this.$state;
    if (var$2 && var$2 != 3) {
        $in = new jl_IllegalStateException;
        jl_Throwable__init_($in);
        $rt_throw($in);
    }
    if (!jn_Buffer_remaining($in))
        return jn_CharBuffer_allocate(0);
    if ($this.$state)
        $this.$state = 0;
    $out = jn_CharBuffer_allocate(jl_Math_max(8, jn_Buffer_remaining($in) * $this.$averageCharsPerByte | 0));
    while (true) {
        $result = jnc_CharsetDecoder_decode($this, $in, $out, 0);
        if (jnc_CoderResult_isUnderflow($result))
            break;
        if (jnc_CoderResult_isOverflow($result))
            $out = jnc_CharsetDecoder_expand($this, $out);
        if (!jnc_CoderResult_isError($result))
            continue;
        jnc_CoderResult_throwException($result);
    }
    $in = jnc_CharsetDecoder_decode($this, $in, $out, 1);
    if (jnc_CoderResult_isError($in))
        jnc_CoderResult_throwException($in);
    while (true) {
        var$5 = $this.$state;
        if (var$5 != 3 && var$5 != 2) {
            $in = new jl_IllegalStateException;
            jl_Throwable__init_($in);
            $rt_throw($in);
        }
        $this.$state = 3;
        if (jnc_CoderResult_isUnderflow(jnc_CoderResult_UNDERFLOW))
            break;
        $out = jnc_CharsetDecoder_expand($this, $out);
    }
    jn_Buffer_flip($out);
    return $out;
},
jnc_CharsetDecoder_expand = ($this, $buffer) => {
    let var$2, $result;
    var$2 = $buffer.$array0;
    $result = jn_CharBuffer_wrap0(ju_Arrays_copyOf1(var$2, jl_Math_max(8, var$2.data.length * 2 | 0)));
    jn_Buffer_position($result, $buffer.$position0);
    return $result;
},
jnc_CharsetDecoder_implFlush = ($this, $out) => {
    return jnc_CoderResult_UNDERFLOW;
},
jnc_CharsetDecoder_implReset = $this => {
    return;
},
jnc_CharacterCodingException = $rt_classWithoutFields(ji_IOException),
ooa_Constants = $rt_classWithoutFields(),
ooa_Constants_checkAsmExperimental = $caller => {
    let $internalName, var$3, $callerClass, $$je;
    $internalName = jl_String_replace0(jl_Class_getName(jl_Object_getClass($caller)), 46, 47);
    if (!jl_String_startsWith($internalName, $rt_s(149)))
        var$3 = 0;
    else
        a: {
            if (!jl_String_contains($internalName, $rt_s(150))) {
                $callerClass = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_($callerClass);
                jl_AbstractStringBuilder_append0($callerClass, $rt_s(151));
                jl_AbstractStringBuilder_append0($callerClass, $rt_s(152));
                jl_AbstractStringBuilder_append0($callerClass, $rt_s(153));
                if (!jur_Pattern_matches(jl_AbstractStringBuilder_toString($callerClass), $internalName)) {
                    $callerClass = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_($callerClass);
                    jl_AbstractStringBuilder_append0($callerClass, $rt_s(154));
                    jl_AbstractStringBuilder_append0($callerClass, $rt_s(152));
                    jl_AbstractStringBuilder_append0($callerClass, $rt_s(155));
                    if (!jur_Pattern_matches(jl_AbstractStringBuilder_toString($callerClass), $internalName)) {
                        var$3 = 0;
                        break a;
                    }
                }
            }
            var$3 = 1;
        }
    b: {
        c: {
            if (!var$3) {
                $callerClass = jl_ClassLoader_getSystemClassLoader();
                $caller = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_($caller);
                jl_AbstractStringBuilder_append0($caller, $internalName);
                jl_AbstractStringBuilder_append0($caller, $rt_s(156));
                $caller = jl_ClassLoader_getResourceAsStream($callerClass, jl_AbstractStringBuilder_toString($caller));
                if ($caller === null) {
                    $caller = new jl_IllegalStateException;
                    jl_Throwable__init_0($caller, $rt_s(157));
                    $rt_throw($caller);
                }
                try {
                    $callerClass = ji_DataInputStream__init_0($caller);
                    try {
                        ji_DataInputStream_readInt($callerClass);
                        var$3 = ji_DataInputStream_readUnsignedShort($callerClass);
                    } catch ($$e) {
                        $$je = $rt_wrapException($$e);
                        if ($$je instanceof jl_Throwable) {
                            $caller = $$je;
                            break c;
                        } else {
                            throw $$e;
                        }
                    }
                    ji_FilterInputStream_close($callerClass);
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof ji_IOException) {
                        $caller = $$je;
                        break b;
                    } else {
                        throw $$e;
                    }
                }
                if (var$3 != 65535) {
                    $caller = new jl_IllegalStateException;
                    jl_Throwable__init_0($caller, $rt_s(158));
                    $rt_throw($caller);
                }
            }
            return;
        }
        try {
            d: {
                try {
                    ji_FilterInputStream_close($callerClass);
                    break d;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_Throwable) {
                    } else {
                        throw $$e;
                    }
                }
            }
            $rt_throw($caller);
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof ji_IOException) {
                $caller = $$je;
            } else {
                throw $$e;
            }
        }
    }
    $callerClass = new jl_IllegalStateException;
    jl_Throwable__init_1($callerClass, $rt_s(159), $caller);
    $rt_throw($callerClass);
};
function jl_Long() {
    jl_Number.call(this);
    this.$value7 = Long_ZERO;
}
let jl_Long_TYPE = null,
jl_Long_valueOf = $value => {
    let var$2;
    var$2 = new jl_Long;
    var$2.$value7 = $value;
    return var$2;
},
jl_Long_toString = $this => {
    let var$1, var$2, var$3, var$4, var$5, var$6, var$7, var$8, var$9, var$10;
    var$1 = $this.$value7;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    var$3 = var$2.$length0;
    var$4 = 1;
    if (Long_lt(var$1, Long_ZERO)) {
        var$4 = 0;
        var$1 = Long_neg(var$1);
    }
    a: {
        if (jl_Long_compareUnsigned(var$1, Long_fromInt(10)) < 0) {
            if (var$4)
                jl_AbstractStringBuilder_insertSpace(var$2, var$3, var$3 + 1 | 0);
            else {
                jl_AbstractStringBuilder_insertSpace(var$2, var$3, var$3 + 2 | 0);
                var$5 = var$2.$buffer.data;
                var$6 = var$3 + 1 | 0;
                var$5[var$3] = 45;
                var$3 = var$6;
            }
            var$2.$buffer.data[var$3] = jl_Character_forDigit(Long_lo(var$1), 10);
        } else {
            var$7 = 1;
            var$8 = Long_fromInt(1);
            var$9 = jl_Long_divideUnsigned(Long_fromInt(-1), Long_fromInt(10));
            b: {
                while (true) {
                    var$10 = Long_mul(var$8, Long_fromInt(10));
                    if (jl_Long_compareUnsigned(var$10, var$1) > 0) {
                        var$10 = var$8;
                        break b;
                    }
                    var$7 = var$7 + 1 | 0;
                    if (jl_Long_compareUnsigned(var$10, var$9) > 0)
                        break;
                    var$8 = var$10;
                }
            }
            if (!var$4)
                var$7 = var$7 + 1 | 0;
            jl_AbstractStringBuilder_insertSpace(var$2, var$3, var$3 + var$7 | 0);
            if (var$4)
                var$6 = var$3;
            else {
                var$5 = var$2.$buffer.data;
                var$6 = var$3 + 1 | 0;
                var$5[var$3] = 45;
            }
            while (true) {
                if (Long_eq(var$10, Long_ZERO))
                    break a;
                var$5 = var$2.$buffer.data;
                var$3 = var$6 + 1 | 0;
                var$5[var$6] = jl_Character_forDigit(Long_lo((jl_Long_divideUnsigned(var$1, var$10))), 10);
                var$1 = jl_Long_remainderUnsigned(var$1, var$10);
                var$10 = jl_Long_divideUnsigned(var$10, Long_fromInt(10));
                var$6 = var$3;
            }
        }
    }
    return jl_AbstractStringBuilder_toString(var$2);
},
jl_Long_equals = ($this, $other) => {
    if ($this === $other)
        return 1;
    return $other instanceof jl_Long && Long_eq($other.$value7, $this.$value7) ? 1 : 0;
},
jl_Long_divideUnsigned = (var$1, var$2) => {
    return Long_udiv(var$1, var$2);
},
jl_Long_remainderUnsigned = (var$1, var$2) => {
    return Long_urem(var$1, var$2);
},
jl_Long_compareUnsigned = (var$1, var$2) => {
    return Long_ucompare(var$1, var$2);
},
jl_Long__clinit_ = () => {
    jl_Long_TYPE = $rt_cls($rt_longcls);
},
otcic_JSStderrPrintStream = $rt_classWithoutFields(otcic_JsConsolePrintStream),
otcic_JSStderrPrintStream_print = ($this, $s) => {
    if ($s === null)
        $s = $rt_s(15);
    $rt_putStderr($rt_ustr($s));
},
jl_ConsoleInputStream = $rt_classWithoutFields(ji_InputStream);
function cjj_Adler32() {
    let a = this; jl_Object.call(a);
    a.$s1 = Long_ZERO;
    a.$s2 = Long_ZERO;
}
let cjj_Adler32__init_0 = $this => {
    $this.$s1 = Long_fromInt(1);
    $this.$s2 = Long_ZERO;
},
cjj_Adler32__init_ = () => {
    let var_0 = new cjj_Adler32();
    cjj_Adler32__init_0(var_0);
    return var_0;
},
cjj_Adler32_reset = ($this, $init) => {
    $this.$s1 = Long_and($init, Long_fromInt(65535));
    $this.$s2 = Long_and(Long_shr($init, 16), Long_fromInt(65535));
},
cjj_Adler32_reset0 = $this => {
    $this.$s1 = Long_fromInt(1);
    $this.$s2 = Long_ZERO;
},
cjj_Adler32_getValue = $this => {
    return Long_or(Long_shl($this.$s2, 16), $this.$s1);
},
cjj_Adler32_update = ($this, $buf, $index, $len) => {
    let var$4, var$5, $len1, $len2, var$8, $k, var$10;
    if ($len == 1) {
        $buf = $buf.data;
        var$4 = Long_add($this.$s1, Long_fromInt($buf[$index] & 255));
        $this.$s1 = var$4;
        var$5 = Long_add($this.$s2, var$4);
        $this.$s2 = var$5;
        $this.$s1 = Long_rem(var$4, Long_fromInt(65521));
        $this.$s2 = Long_rem(var$5, Long_fromInt(65521));
        return;
    }
    $len1 = $len / 5552 | 0;
    $len2 = $len % 5552 | 0;
    while (true) {
        var$8 = $len1 + (-1) | 0;
        if ($len1 <= 0)
            break;
        $k = 5552;
        while (true) {
            $len1 = $k + (-1) | 0;
            if ($k <= 0)
                break;
            var$10 = $buf.data;
            var$4 = $this.$s1;
            $len = $index + 1 | 0;
            var$4 = Long_add(var$4, Long_fromInt(var$10[$index] & 255));
            $this.$s1 = var$4;
            $this.$s2 = Long_add($this.$s2, var$4);
            $k = $len1;
            $index = $len;
        }
        $this.$s1 = Long_rem($this.$s1, Long_fromInt(65521));
        $this.$s2 = Long_rem($this.$s2, Long_fromInt(65521));
        $len1 = var$8;
    }
    while (true) {
        $len = $len2 + (-1) | 0;
        if ($len2 <= 0)
            break;
        var$10 = $buf.data;
        var$4 = $this.$s1;
        var$8 = $index + 1 | 0;
        var$4 = Long_add(var$4, Long_fromInt(var$10[$index] & 255));
        $this.$s1 = var$4;
        $this.$s2 = Long_add($this.$s2, var$4);
        $len2 = $len;
        $index = var$8;
    }
    $this.$s1 = Long_rem($this.$s1, Long_fromInt(65521));
    $this.$s2 = Long_rem($this.$s2, Long_fromInt(65521));
};
function cjj_Inflate() {
    let a = this; jl_Object.call(a);
    a.$mode = 0;
    a.$method4 = 0;
    a.$was = Long_ZERO;
    a.$need = Long_ZERO;
    a.$marker = 0;
    a.$wrap5 = 0;
    a.$wbits = 0;
    a.$blocks = null;
    a.$z0 = null;
    a.$flags = 0;
    a.$need_bytes = 0;
    a.$crcbuf = null;
    a.$gheader = null;
    a.$tmp_string = null;
}
let cjj_Inflate_mark = null,
cjj_Inflate_inflate = ($this, $f) => {
    let $e, var$3, $r, var$5, $foo, var$7, var$8, $b, var$10, $$je;
    $e = $this.$z0;
    if ($e !== null && $e.$next_in !== null) {
        var$3 = $f != 4 ? 0 : (-5);
        $r = (-5);
        a: {
            b: {
                c: {
                    d: {
                        e: {
                            f: {
                                g: {
                                    h: {
                                        i: while (true) {
                                            j: {
                                                k: {
                                                    l: {
                                                        m: {
                                                            n: {
                                                                o: {
                                                                    p: {
                                                                        q: {
                                                                            r: {
                                                                                s: {
                                                                                    t: {
                                                                                        u: {
                                                                                            v: {
                                                                                                w: {
                                                                                                    switch ($this.$mode) {
                                                                                                        case 6:
                                                                                                            $this.$mode = 13;
                                                                                                            $this.$z0.$msg = $rt_s(160);
                                                                                                            $this.$marker = 0;
                                                                                                            return (-2);
                                                                                                        case 7:
                                                                                                            $r = cjj_InfBlocks_proc($this.$blocks, $r);
                                                                                                            if ($r == (-3)) {
                                                                                                                $this.$mode = 13;
                                                                                                                $this.$marker = 0;
                                                                                                                continue i;
                                                                                                            }
                                                                                                            if (!$r)
                                                                                                                $r = var$3;
                                                                                                            if ($r != 1)
                                                                                                                break i;
                                                                                                            $this.$was = $this.$z0.$adler.$getValue();
                                                                                                            cjj_InfBlocks_reset($this.$blocks);
                                                                                                            if (!$this.$wrap5) {
                                                                                                                $this.$mode = 12;
                                                                                                                $r = var$3;
                                                                                                                continue i;
                                                                                                            }
                                                                                                            $this.$mode = 8;
                                                                                                            $r = var$3;
                                                                                                            break w;
                                                                                                        case 12:
                                                                                                            break e;
                                                                                                        case 13:
                                                                                                            return (-3);
                                                                                                        case 14:
                                                                                                            break r;
                                                                                                        case 23:
                                                                                                            try {
                                                                                                                $r = cjj_Inflate_readBytes($this, 2, $r, var$3);
                                                                                                            } catch ($$e) {
                                                                                                                $$je = $rt_wrapException($$e);
                                                                                                                if ($$je instanceof cjj_Inflate$Return) {
                                                                                                                    $e = $$je;
                                                                                                                    return $e.$r;
                                                                                                                } else {
                                                                                                                    throw $$e;
                                                                                                                }
                                                                                                            }
                                                                                                            var$5 = $this.$need;
                                                                                                            $f = Long_lo(var$5) & 65535;
                                                                                                            $this.$flags = $f;
                                                                                                            if (($f & 255) != 8) {
                                                                                                                $this.$z0.$msg = $rt_s(161);
                                                                                                                $this.$mode = 13;
                                                                                                                continue i;
                                                                                                            }
                                                                                                            if ($f & 57344) {
                                                                                                                $this.$z0.$msg = $rt_s(162);
                                                                                                                $this.$mode = 13;
                                                                                                                continue i;
                                                                                                            }
                                                                                                            if ($f & 512)
                                                                                                                cjj_Inflate_checksum($this, 2, var$5);
                                                                                                            $this.$mode = 16;
                                                                                                            break p;
                                                                                                        case 2:
                                                                                                            break d;
                                                                                                        case 3:
                                                                                                            break c;
                                                                                                        case 4:
                                                                                                            break b;
                                                                                                        case 5:
                                                                                                            var$3 = $r;
                                                                                                            break a;
                                                                                                        case 8:
                                                                                                            break w;
                                                                                                        case 9:
                                                                                                            break v;
                                                                                                        case 10:
                                                                                                            break u;
                                                                                                        case 11:
                                                                                                            break t;
                                                                                                        case 15:
                                                                                                            break s;
                                                                                                        case 16:
                                                                                                            break p;
                                                                                                        case 17:
                                                                                                            break o;
                                                                                                        case 18:
                                                                                                            break n;
                                                                                                        case 19:
                                                                                                            break q;
                                                                                                        case 20:
                                                                                                            break l;
                                                                                                        case 21:
                                                                                                            break k;
                                                                                                        case 22:
                                                                                                            break;
                                                                                                        default:
                                                                                                            return (-2);
                                                                                                    }
                                                                                                    break j;
                                                                                                }
                                                                                                $e = $this.$z0;
                                                                                                $f = $e.$avail_in;
                                                                                                if (!$f)
                                                                                                    return $r;
                                                                                                $e.$avail_in = $f - 1 | 0;
                                                                                                $e.$total_in = Long_add($e.$total_in, Long_fromInt(1));
                                                                                                $foo = $e.$next_in.data;
                                                                                                $f = $e.$next_in_index;
                                                                                                $e.$next_in_index = $f + 1 | 0;
                                                                                                $this.$need = Long_and(Long_fromInt(($foo[$f] & 255) << 24), Long_create(4278190080, 0));
                                                                                                $this.$mode = 9;
                                                                                                $r = var$3;
                                                                                            }
                                                                                            $e = $this.$z0;
                                                                                            $f = $e.$avail_in;
                                                                                            if (!$f)
                                                                                                return $r;
                                                                                            $e.$avail_in = $f - 1 | 0;
                                                                                            $e.$total_in = Long_add($e.$total_in, Long_fromInt(1));
                                                                                            var$5 = $this.$need;
                                                                                            $foo = $e.$next_in.data;
                                                                                            $f = $e.$next_in_index;
                                                                                            $e.$next_in_index = $f + 1 | 0;
                                                                                            $this.$need = Long_add(var$5, Long_and(Long_fromInt(($foo[$f] & 255) << 16), Long_fromInt(16711680)));
                                                                                            $this.$mode = 10;
                                                                                            $r = var$3;
                                                                                        }
                                                                                        $e = $this.$z0;
                                                                                        $f = $e.$avail_in;
                                                                                        if (!$f)
                                                                                            return $r;
                                                                                        $e.$avail_in = $f - 1 | 0;
                                                                                        $e.$total_in = Long_add($e.$total_in, Long_fromInt(1));
                                                                                        var$5 = $this.$need;
                                                                                        $foo = $e.$next_in.data;
                                                                                        $f = $e.$next_in_index;
                                                                                        $e.$next_in_index = $f + 1 | 0;
                                                                                        $this.$need = Long_add(var$5, Long_and(Long_fromInt(($foo[$f] & 255) << 8), Long_fromInt(65280)));
                                                                                        $this.$mode = 11;
                                                                                        $r = var$3;
                                                                                    }
                                                                                    $e = $this.$z0;
                                                                                    $f = $e.$avail_in;
                                                                                    if (!$f)
                                                                                        return $r;
                                                                                    $e.$avail_in = $f - 1 | 0;
                                                                                    $e.$total_in = Long_add($e.$total_in, Long_fromInt(1));
                                                                                    var$5 = $this.$need;
                                                                                    $foo = $e.$next_in.data;
                                                                                    $f = $e.$next_in_index;
                                                                                    $e.$next_in_index = $f + 1 | 0;
                                                                                    var$5 = Long_add(var$5, Long_and(Long_fromInt($foo[$f]), Long_fromInt(255)));
                                                                                    $this.$need = var$5;
                                                                                    $f = $this.$flags;
                                                                                    if ($f)
                                                                                        $this.$need = Long_and(Long_or(Long_or(Long_or(Long_shr(Long_and(var$5, Long_fromInt(-16777216)), 24), Long_shr(Long_and(var$5, Long_fromInt(16711680)), 8)), Long_shl(Long_and(var$5, Long_fromInt(65280)), 8)), Long_shl(Long_and(var$5, Long_fromInt(65535)), 24)), Long_create(4294967295, 0));
                                                                                    $r = Long_lo($this.$was);
                                                                                    var$5 = $this.$need;
                                                                                    if ($r != Long_lo(var$5))
                                                                                        $e.$msg = $rt_s(163);
                                                                                    else if ($f) {
                                                                                        $e = $this.$gheader;
                                                                                        if ($e !== null)
                                                                                            $e.$crc1 = var$5;
                                                                                    }
                                                                                    $this.$mode = 15;
                                                                                    $r = var$3;
                                                                                }
                                                                                if (!($this.$wrap5 && $this.$flags)) {
                                                                                    $e = $this.$z0.$msg;
                                                                                    if ($e === null)
                                                                                        break f;
                                                                                    if (!jl_String_equals($e, $rt_s(163)))
                                                                                        break f;
                                                                                    $this.$mode = 13;
                                                                                    $this.$marker = 5;
                                                                                    continue i;
                                                                                }
                                                                                try {
                                                                                    $r = cjj_Inflate_readBytes($this, 4, $r, var$3);
                                                                                } catch ($$e) {
                                                                                    $$je = $rt_wrapException($$e);
                                                                                    if ($$je instanceof cjj_Inflate$Return) {
                                                                                        $e = $$je;
                                                                                        return $e.$r;
                                                                                    } else {
                                                                                        throw $$e;
                                                                                    }
                                                                                }
                                                                                $e = $this.$z0.$msg;
                                                                                if ($e !== null && jl_String_equals($e, $rt_s(163))) {
                                                                                    $this.$mode = 13;
                                                                                    $this.$marker = 5;
                                                                                    continue i;
                                                                                }
                                                                                var$5 = $this.$need;
                                                                                $e = $this.$z0;
                                                                                if (Long_eq(var$5, Long_and($e.$total_out, Long_create(4294967295, 0)))) {
                                                                                    $e.$msg = null;
                                                                                    break f;
                                                                                }
                                                                                $e.$msg = $rt_s(164);
                                                                                $this.$mode = 13;
                                                                                continue i;
                                                                            }
                                                                            if (!$this.$wrap5) {
                                                                                $this.$mode = 7;
                                                                                continue i;
                                                                            }
                                                                            try {
                                                                                $r = cjj_Inflate_readBytes($this, 2, $r, var$3);
                                                                            } catch ($$e) {
                                                                                $$je = $rt_wrapException($$e);
                                                                                if ($$je instanceof cjj_Inflate$Return) {
                                                                                    $e = $$je;
                                                                                    return $e.$r;
                                                                                } else {
                                                                                    throw $$e;
                                                                                }
                                                                            }
                                                                            $f = $this.$wrap5;
                                                                            var$7 = $rt_compare($f, 4);
                                                                            if (!(var$7 && !($f & 2)) && Long_eq($this.$need, Long_fromInt(35615))) {
                                                                                if (!var$7)
                                                                                    $this.$wrap5 = 2;
                                                                                $this.$z0.$adler = cjj_CRC32__init_();
                                                                                cjj_Inflate_checksum($this, 2, $this.$need);
                                                                                if ($this.$gheader === null)
                                                                                    $this.$gheader = cjj_GZIPHeader__init_();
                                                                                $this.$mode = 23;
                                                                                continue i;
                                                                            }
                                                                            if ($f & 2) {
                                                                                $this.$mode = 13;
                                                                                $this.$z0.$msg = $rt_s(165);
                                                                                continue i;
                                                                            }
                                                                            $this.$flags = 0;
                                                                            var$5 = $this.$need;
                                                                            var$8 = Long_lo(var$5) & 255;
                                                                            $this.$method4 = var$8;
                                                                            $b = Long_lo(Long_shr(var$5, 8)) & 255;
                                                                            if (!($f & 1 && !(((var$8 << 8) + $b | 0) % 31 | 0)) && (var$8 & 15) != 8) {
                                                                                if (var$7) {
                                                                                    $this.$mode = 13;
                                                                                    $this.$z0.$msg = $rt_s(165);
                                                                                    continue i;
                                                                                }
                                                                                $e = $this.$z0;
                                                                                $e.$next_in_index = $e.$next_in_index - 2 | 0;
                                                                                $e.$avail_in = $e.$avail_in + 2 | 0;
                                                                                $e.$total_in = Long_sub($e.$total_in, Long_fromInt(2));
                                                                                $this.$wrap5 = 0;
                                                                                $this.$mode = 7;
                                                                                continue i;
                                                                            }
                                                                            if ((var$8 & 15) != 8) {
                                                                                $this.$mode = 13;
                                                                                $this.$z0.$msg = $rt_s(161);
                                                                                continue i;
                                                                            }
                                                                            if (!var$7)
                                                                                $this.$wrap5 = 1;
                                                                            if (((var$8 >> 4) + 8 | 0) > $this.$wbits) {
                                                                                $this.$mode = 13;
                                                                                $this.$z0.$msg = $rt_s(166);
                                                                                continue i;
                                                                            }
                                                                            $this.$z0.$adler = cjj_Adler32__init_();
                                                                            if ($b & 32) {
                                                                                $this.$mode = 2;
                                                                                break d;
                                                                            }
                                                                            $this.$mode = 7;
                                                                            continue i;
                                                                        }
                                                                        break m;
                                                                    }
                                                                    try {
                                                                        $r = cjj_Inflate_readBytes($this, 4, $r, var$3);
                                                                    } catch ($$e) {
                                                                        $$je = $rt_wrapException($$e);
                                                                        if ($$je instanceof cjj_Inflate$Return) {
                                                                            $e = $$je;
                                                                            return $e.$r;
                                                                        } else {
                                                                            throw $$e;
                                                                        }
                                                                    }
                                                                    $e = $this.$gheader;
                                                                    if ($e !== null)
                                                                        $e.$time0 = $this.$need;
                                                                    if ($this.$flags & 512)
                                                                        cjj_Inflate_checksum($this, 4, $this.$need);
                                                                    $this.$mode = 17;
                                                                }
                                                                try {
                                                                    $r = cjj_Inflate_readBytes($this, 2, $r, var$3);
                                                                } catch ($$e) {
                                                                    $$je = $rt_wrapException($$e);
                                                                    if ($$je instanceof cjj_Inflate$Return) {
                                                                        $e = $$je;
                                                                        return $e.$r;
                                                                    } else {
                                                                        throw $$e;
                                                                    }
                                                                }
                                                                $e = $this.$gheader;
                                                                if ($e !== null) {
                                                                    $f = Long_lo($this.$need);
                                                                    $e.$xflags = $f & 255;
                                                                    $e.$os = $f >> 8 & 255;
                                                                }
                                                                if ($this.$flags & 512)
                                                                    cjj_Inflate_checksum($this, 2, $this.$need);
                                                                $this.$mode = 18;
                                                            }
                                                            if (!($this.$flags & 1024)) {
                                                                $e = $this.$gheader;
                                                                if ($e !== null)
                                                                    $e.$extra = null;
                                                            } else {
                                                                try {
                                                                    $r = cjj_Inflate_readBytes($this, 2, $r, var$3);
                                                                } catch ($$e) {
                                                                    $$je = $rt_wrapException($$e);
                                                                    if ($$je instanceof cjj_Inflate$Return) {
                                                                        $e = $$je;
                                                                        return $e.$r;
                                                                    } else {
                                                                        throw $$e;
                                                                    }
                                                                }
                                                                $e = $this.$gheader;
                                                                if ($e !== null)
                                                                    $e.$extra = $rt_createByteArray(Long_lo($this.$need) & 65535);
                                                                if ($this.$flags & 512)
                                                                    cjj_Inflate_checksum($this, 2, $this.$need);
                                                            }
                                                            $this.$mode = 19;
                                                        }
                                                        if (!($this.$flags & 1024)) {
                                                            $e = $this.$gheader;
                                                            if ($e !== null)
                                                                $e.$extra = null;
                                                        } else
                                                            x: {
                                                                try {
                                                                    $r = cjj_Inflate_readBytes0($this, $r, var$3);
                                                                    if ($this.$gheader === null)
                                                                        break x;
                                                                    $foo = ji_ByteArrayOutputStream_toByteArray($this.$tmp_string);
                                                                    var$10 = $foo.data;
                                                                    $this.$tmp_string = null;
                                                                    $f = var$10.length;
                                                                    var$10 = $this.$gheader.$extra;
                                                                    if ($f != var$10.data.length) {
                                                                        $this.$z0.$msg = $rt_s(167);
                                                                        $this.$mode = 13;
                                                                        continue i;
                                                                    }
                                                                    jl_System_fastArraycopy($foo, 0, var$10, 0, $f);
                                                                    break x;
                                                                } catch ($$e) {
                                                                    $$je = $rt_wrapException($$e);
                                                                    if ($$je instanceof cjj_Inflate$Return) {
                                                                        $e = $$je;
                                                                        return $e.$r;
                                                                    } else {
                                                                        throw $$e;
                                                                    }
                                                                }
                                                            }
                                                        $this.$mode = 20;
                                                    }
                                                    y: {
                                                        if (!($this.$flags & 2048)) {
                                                            $e = $this.$gheader;
                                                            if ($e !== null)
                                                                $e.$name6 = null;
                                                        } else {
                                                            z: {
                                                                try {
                                                                    $r = cjj_Inflate_readString($this, $r, var$3);
                                                                    $e = $this.$gheader;
                                                                    if ($e === null)
                                                                        break z;
                                                                    $e.$name6 = ji_ByteArrayOutputStream_toByteArray($this.$tmp_string);
                                                                    break z;
                                                                } catch ($$e) {
                                                                    $$je = $rt_wrapException($$e);
                                                                    if ($$je instanceof cjj_Inflate$Return) {
                                                                        $e = $$je;
                                                                        break h;
                                                                    } else {
                                                                        throw $$e;
                                                                    }
                                                                }
                                                            }
                                                            try {
                                                                $this.$tmp_string = null;
                                                                break y;
                                                            } catch ($$e) {
                                                                $$je = $rt_wrapException($$e);
                                                                if ($$je instanceof cjj_Inflate$Return) {
                                                                    $e = $$je;
                                                                    break h;
                                                                } else {
                                                                    throw $$e;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    $this.$mode = 21;
                                                }
                                                ba: {
                                                    if (!($this.$flags & 4096)) {
                                                        $e = $this.$gheader;
                                                        if ($e !== null)
                                                            $e.$comment = null;
                                                    } else {
                                                        bb: {
                                                            try {
                                                                $r = cjj_Inflate_readString($this, $r, var$3);
                                                                $e = $this.$gheader;
                                                                if ($e === null)
                                                                    break bb;
                                                                $e.$comment = ji_ByteArrayOutputStream_toByteArray($this.$tmp_string);
                                                                break bb;
                                                            } catch ($$e) {
                                                                $$je = $rt_wrapException($$e);
                                                                if ($$je instanceof cjj_Inflate$Return) {
                                                                    $e = $$je;
                                                                    break g;
                                                                } else {
                                                                    throw $$e;
                                                                }
                                                            }
                                                        }
                                                        try {
                                                            $this.$tmp_string = null;
                                                            break ba;
                                                        } catch ($$e) {
                                                            $$je = $rt_wrapException($$e);
                                                            if ($$je instanceof cjj_Inflate$Return) {
                                                                $e = $$je;
                                                                break g;
                                                            } else {
                                                                throw $$e;
                                                            }
                                                        }
                                                    }
                                                }
                                                $this.$mode = 22;
                                            }
                                            if ($this.$flags & 512) {
                                                try {
                                                    $r = cjj_Inflate_readBytes($this, 2, $r, var$3);
                                                } catch ($$e) {
                                                    $$je = $rt_wrapException($$e);
                                                    if ($$je instanceof cjj_Inflate$Return) {
                                                        $e = $$je;
                                                        return $e.$r;
                                                    } else {
                                                        throw $$e;
                                                    }
                                                }
                                                $e = $this.$gheader;
                                                if ($e !== null)
                                                    $e.$hcrc = Long_lo(Long_and($this.$need, Long_fromInt(65535)));
                                                if (Long_ne($this.$need, Long_and($this.$z0.$adler.$getValue(), Long_fromInt(65535)))) {
                                                    $this.$mode = 13;
                                                    $this.$z0.$msg = $rt_s(168);
                                                    $this.$marker = 5;
                                                    continue;
                                                }
                                            }
                                            $this.$z0.$adler = cjj_CRC32__init_();
                                            $this.$mode = 7;
                                        }
                                        return $r;
                                    }
                                    return $e.$r;
                                }
                                return $e.$r;
                            }
                            $this.$mode = 12;
                        }
                        return 1;
                    }
                    $e = $this.$z0;
                    var$8 = $e.$avail_in;
                    if (!var$8)
                        return $r;
                    $e.$avail_in = var$8 - 1 | 0;
                    $e.$total_in = Long_add($e.$total_in, Long_fromInt(1));
                    $foo = $e.$next_in.data;
                    $r = $e.$next_in_index;
                    $e.$next_in_index = $r + 1 | 0;
                    $this.$need = Long_and(Long_fromInt(($foo[$r] & 255) << 24), Long_create(4278190080, 0));
                    $this.$mode = 3;
                    $r = var$3;
                }
                $e = $this.$z0;
                $f = $e.$avail_in;
                if (!$f)
                    return $r;
                $e.$avail_in = $f - 1 | 0;
                $e.$total_in = Long_add($e.$total_in, Long_fromInt(1));
                var$5 = $this.$need;
                $foo = $e.$next_in.data;
                $r = $e.$next_in_index;
                $e.$next_in_index = $r + 1 | 0;
                $this.$need = Long_add(var$5, Long_and(Long_fromInt(($foo[$r] & 255) << 16), Long_fromInt(16711680)));
                $this.$mode = 4;
                $r = var$3;
            }
            $e = $this.$z0;
            $f = $e.$avail_in;
            if (!$f)
                return $r;
            $e.$avail_in = $f - 1 | 0;
            $e.$total_in = Long_add($e.$total_in, Long_fromInt(1));
            var$5 = $this.$need;
            $foo = $e.$next_in.data;
            $f = $e.$next_in_index;
            $e.$next_in_index = $f + 1 | 0;
            $this.$need = Long_add(var$5, Long_and(Long_fromInt(($foo[$f] & 255) << 8), Long_fromInt(65280)));
            $this.$mode = 5;
        }
        $e = $this.$z0;
        $f = $e.$avail_in;
        if (!$f)
            return var$3;
        $e.$avail_in = $f - 1 | 0;
        $e.$total_in = Long_add($e.$total_in, Long_fromInt(1));
        var$5 = $this.$need;
        $foo = $e.$next_in.data;
        $f = $e.$next_in_index;
        $e.$next_in_index = $f + 1 | 0;
        var$5 = Long_add(var$5, Long_and(Long_fromInt($foo[$f]), Long_fromInt(255)));
        $this.$need = var$5;
        $e.$adler.$reset1(var$5);
        $this.$mode = 6;
        return 2;
    }
    if ($f == 4 && $this.$mode == 14)
        return 0;
    return (-2);
},
cjj_Inflate_readBytes = ($this, $n, $r, $f) => {
    let var$4, var$5, var$6, var$7, var$8;
    if ($this.$need_bytes == (-1)) {
        $this.$need_bytes = $n;
        $this.$need = Long_ZERO;
    }
    while (true) {
        var$4 = $this.$need_bytes;
        if (var$4 <= 0) {
            if ($n == 2)
                $this.$need = Long_and($this.$need, Long_fromInt(65535));
            else if ($n == 4)
                $this.$need = Long_and($this.$need, Long_create(4294967295, 0));
            $this.$need_bytes = (-1);
            return $r;
        }
        var$5 = $this.$z0;
        var$6 = var$5.$avail_in;
        if (!var$6)
            break;
        var$5.$avail_in = var$6 - 1 | 0;
        var$5.$total_in = Long_add(var$5.$total_in, Long_fromInt(1));
        var$7 = $this.$need;
        var$8 = var$5.$next_in.data;
        var$6 = var$5.$next_in_index;
        var$5.$next_in_index = var$6 + 1 | 0;
        $this.$need = Long_or(var$7, Long_fromInt((var$8[var$6] & 255) << (($n - var$4 | 0) * 8 | 0)));
        $this.$need_bytes = var$4 - 1 | 0;
        $r = $f;
    }
    $rt_throw(cjj_Inflate$Return__init_($this, $r));
},
cjj_Inflate_readString = ($this, $r, $f) => {
    let var$3, var$4, var$5, var$6, var$7;
    if ($this.$tmp_string === null)
        $this.$tmp_string = ji_ByteArrayOutputStream__init_();
    while (true) {
        var$3 = $this.$z0;
        var$4 = var$3.$avail_in;
        if (!var$4)
            $rt_throw(cjj_Inflate$Return__init_($this, $r));
        var$3.$avail_in = var$4 - 1 | 0;
        var$3.$total_in = Long_add(var$3.$total_in, Long_fromInt(1));
        var$5 = var$3.$next_in;
        var$6 = var$5.data;
        var$4 = var$3.$next_in_index;
        var$7 = var$6[var$4];
        if (var$7)
            ji_ByteArrayOutputStream_write($this.$tmp_string, var$5, var$4, 1);
        var$3 = $this.$z0;
        var$3.$adler.$update(var$3.$next_in, var$3.$next_in_index, 1);
        var$3 = $this.$z0;
        var$3.$next_in_index = var$3.$next_in_index + 1 | 0;
        if (!var$7)
            break;
        $r = $f;
    }
    return $f;
},
cjj_Inflate_readBytes0 = ($this, $r, $f) => {
    let var$3, var$4;
    if ($this.$tmp_string === null)
        $this.$tmp_string = ji_ByteArrayOutputStream__init_();
    while (Long_gt($this.$need, Long_ZERO)) {
        var$3 = $this.$z0;
        var$4 = var$3.$avail_in;
        if (!var$4)
            $rt_throw(cjj_Inflate$Return__init_($this, $r));
        var$3.$avail_in = var$4 - 1 | 0;
        var$3.$total_in = Long_add(var$3.$total_in, Long_fromInt(1));
        ji_ByteArrayOutputStream_write($this.$tmp_string, var$3.$next_in, var$3.$next_in_index, 1);
        var$3 = $this.$z0;
        var$3.$adler.$update(var$3.$next_in, var$3.$next_in_index, 1);
        var$3 = $this.$z0;
        var$3.$next_in_index = var$3.$next_in_index + 1 | 0;
        $this.$need = Long_sub($this.$need, Long_fromInt(1));
        $r = $f;
    }
    return $r;
},
cjj_Inflate_checksum = ($this, $n, $v) => {
    let $i;
    $i = 0;
    while ($i < $n) {
        $this.$crcbuf.data[$i] = Long_lo(Long_and($v, Long_fromInt(255))) << 24 >> 24;
        $v = Long_shr($v, 8);
        $i = $i + 1 | 0;
    }
    $this.$z0.$adler.$update($this.$crcbuf, 0, $n);
},
cjj_Inflate__clinit_ = () => {
    cjj_Inflate_mark = $rt_createByteArrayFromData([0, 0, (-1), (-1)]);
};
function jn_ByteOrder() {
    jl_Object.call(this);
    this.$name20 = null;
}
let jn_ByteOrder_BIG_ENDIAN = null,
jn_ByteOrder_LITTLE_ENDIAN = null,
jn_ByteOrder__init_0 = ($this, $name) => {
    $this.$name20 = $name;
},
jn_ByteOrder__init_ = var_0 => {
    let var_1 = new jn_ByteOrder();
    jn_ByteOrder__init_0(var_1, var_0);
    return var_1;
},
jn_ByteOrder__clinit_ = () => {
    jn_ByteOrder_BIG_ENDIAN = jn_ByteOrder__init_($rt_s(169));
    jn_ByteOrder_LITTLE_ENDIAN = jn_ByteOrder__init_($rt_s(170));
},
jn_CharBufferImpl = $rt_classWithoutFields(jn_CharBuffer);
function jn_CharBufferOverArray() {
    let a = this; jn_CharBufferImpl.call(a);
    a.$readOnly0 = 0;
    a.$start4 = 0;
    a.$array0 = null;
}
let jn_CharBufferOverArray__init_0 = ($this, $start, $capacity, $array, $position, $limit, $readOnly) => {
    jn_Buffer__init_($this, $capacity);
    $this.$position0 = $position;
    $this.$limit = $limit;
    $this.$start4 = $start;
    $this.$readOnly0 = $readOnly;
    $this.$array0 = $array;
},
jn_CharBufferOverArray__init_ = (var_0, var_1, var_2, var_3, var_4, var_5) => {
    let var_6 = new jn_CharBufferOverArray();
    jn_CharBufferOverArray__init_0(var_6, var_0, var_1, var_2, var_3, var_4, var_5);
    return var_6;
},
jn_CharBufferOverArray_putChar = ($this, $index, $value) => {
    $this.$array0.data[$index + $this.$start4 | 0] = $value;
};
function jnc_CoderResult() {
    let a = this; jl_Object.call(a);
    a.$kind = 0;
    a.$length2 = 0;
}
let jnc_CoderResult_UNDERFLOW = null,
jnc_CoderResult_OVERFLOW = null,
jnc_CoderResult__init_0 = ($this, $kind, $length) => {
    $this.$kind = $kind;
    $this.$length2 = $length;
},
jnc_CoderResult__init_ = (var_0, var_1) => {
    let var_2 = new jnc_CoderResult();
    jnc_CoderResult__init_0(var_2, var_0, var_1);
    return var_2;
},
jnc_CoderResult_isUnderflow = $this => {
    return $this.$kind ? 0 : 1;
},
jnc_CoderResult_isOverflow = $this => {
    return $this.$kind != 1 ? 0 : 1;
},
jnc_CoderResult_isError = $this => {
    return !jnc_CoderResult_isMalformed($this) && !jnc_CoderResult_isUnmappable($this) ? 0 : 1;
},
jnc_CoderResult_isMalformed = $this => {
    return $this.$kind != 2 ? 0 : 1;
},
jnc_CoderResult_isUnmappable = $this => {
    return $this.$kind != 3 ? 0 : 1;
},
jnc_CoderResult_length = $this => {
    let var$1;
    if (jnc_CoderResult_isError($this))
        return $this.$length2;
    var$1 = new jl_UnsupportedOperationException;
    jl_Throwable__init_(var$1);
    $rt_throw(var$1);
},
jnc_CoderResult_malformedForLength = $length => {
    return jnc_CoderResult__init_(2, $length);
},
jnc_CoderResult_throwException = $this => {
    let var$1, var$2;
    switch ($this.$kind) {
        case 0:
            var$1 = new jnc_BufferUnderflowException;
            jl_Throwable__init_(var$1);
            $rt_throw(var$1);
        case 1:
            var$1 = new jnc_BufferOverflowException;
            jl_Throwable__init_(var$1);
            $rt_throw(var$1);
        case 2:
            var$1 = new jnc_MalformedInputException;
            var$2 = $this.$length2;
            jl_Throwable__init_(var$1);
            var$1.$length4 = var$2;
            $rt_throw(var$1);
        case 3:
            var$1 = new jnc_UnmappableCharacterException;
            var$2 = $this.$length2;
            jl_Throwable__init_(var$1);
            var$1.$length3 = var$2;
            $rt_throw(var$1);
        default:
    }
},
jnc_CoderResult__clinit_ = () => {
    jnc_CoderResult_UNDERFLOW = jnc_CoderResult__init_(0, 0);
    jnc_CoderResult_OVERFLOW = jnc_CoderResult__init_(1, 0);
},
jnc_CoderMalfunctionError = $rt_classWithoutFields(jl_Error);
function jur_Pattern() {
    let a = this; jl_Object.call(a);
    a.$lexemes = null;
    a.$flags0 = 0;
    a.$backRefs = null;
    a.$needsBackRefReplacement = 0;
    a.$globalGroupIndex = 0;
    a.$compCount = 0;
    a.$consCount = 0;
    a.$start2 = null;
}
let jur_Pattern_matcher = ($this, $input) => {
    let var$2, var$3, var$4, var$5, var$6, var$7, var$8, var$9, var$10;
    var$2 = new jur_Matcher;
    var$2.$leftBound0 = (-1);
    var$2.$rightBound0 = (-1);
    var$2.$pat = $this;
    var$2.$start3 = $this.$start2;
    var$2.$string0 = $input;
    var$2.$leftBound0 = 0;
    var$3 = $input.$nativeString.length;
    var$2.$rightBound0 = var$3;
    var$4 = new jur_MatchResultImpl;
    var$5 = var$2.$leftBound0;
    var$6 = $this.$globalGroupIndex;
    var$7 = $this.$compCount + 1 | 0;
    var$8 = $this.$consCount + 1 | 0;
    var$4.$previousMatch = (-1);
    var$9 = var$6 + 1 | 0;
    var$4.$groupCount = var$9;
    var$4.$groupBounds = $rt_createIntArray(var$9 * 2 | 0);
    var$10 = $rt_createIntArray(var$8);
    var$4.$consumers = var$10;
    ju_Arrays_fill(var$10, (-1));
    if (var$7 > 0)
        var$4.$compQuantCounters = $rt_createIntArray(var$7);
    ju_Arrays_fill(var$4.$groupBounds, (-1));
    jur_MatchResultImpl_reset(var$4, $input, var$5, var$3);
    var$2.$matchResult = var$4;
    var$4.$anchoringBounds = 1;
    return var$2;
},
jur_Pattern_split = ($this, $inputSeq, $limit) => {
    let $res, $mat, $index, $curPos, var$7, var$8;
    $res = ju_ArrayList__init_();
    $mat = jur_Pattern_matcher($this, $inputSeq);
    $index = 0;
    $curPos = 0;
    if (!$inputSeq.$nativeString.length) {
        var$7 = $rt_createArray(jl_String, 1);
        var$7.data[0] = $rt_s(2);
        return var$7;
    }
    while (jur_Matcher_find($mat)) {
        var$8 = $index + 1 | 0;
        if (var$8 >= $limit && $limit > 0)
            break;
        ju_ArrayList_add($res, jl_String_substring($inputSeq, $curPos, jur_Matcher_start($mat)));
        $curPos = jur_Matcher_end($mat);
        $index = var$8;
    }
    a: {
        ju_ArrayList_add($res, jl_String_substring($inputSeq, $curPos, $inputSeq.$nativeString.length));
        $index = $index + 1 | 0;
        if (!$limit)
            while (true) {
                $index = $index + (-1) | 0;
                if ($index < 0)
                    break;
                if ((ju_ArrayList_get($res, $index)).$nativeString.length)
                    break a;
                ju_ArrayList_remove($res, $index);
            }
    }
    if ($index < 0)
        $index = 0;
    return ju_AbstractCollection_toArray($res, $rt_createArray(jl_String, $index));
},
jur_Pattern_pattern = $this => {
    return $this.$lexemes.$orig;
},
jur_Pattern_processExpression = ($this, $ch, $newFlags, $last) => {
    let $children, $saveFlags, $saveChangedFlags, $fSet, $child, var$9;
    $children = ju_ArrayList__init_();
    $saveFlags = $this.$flags0;
    $saveChangedFlags = 0;
    if ($newFlags != $saveFlags)
        $this.$flags0 = $newFlags;
    a: {
        switch ($ch) {
            case -1073741784:
                $fSet = new jur_NonCapFSet;
                $newFlags = $this.$consCount + 1 | 0;
                $this.$consCount = $newFlags;
                jur_FSet__init_($fSet, $newFlags);
                break a;
            case -536870872:
            case -268435416:
                break;
            case -134217688:
            case -67108824:
                $fSet = new jur_BehindFSet;
                $newFlags = $this.$consCount + 1 | 0;
                $this.$consCount = $newFlags;
                jur_FSet__init_($fSet, $newFlags);
                break a;
            case -33554392:
                $fSet = new jur_AtomicFSet;
                $newFlags = $this.$consCount + 1 | 0;
                $this.$consCount = $newFlags;
                jur_FSet__init_($fSet, $newFlags);
                break a;
            default:
                $newFlags = $this.$globalGroupIndex + 1 | 0;
                $this.$globalGroupIndex = $newFlags;
                if ($last !== null)
                    $fSet = jur_FSet__init_0($newFlags);
                else {
                    $fSet = new jur_FinalSet;
                    jur_FSet__init_($fSet, 0);
                    $saveChangedFlags = 1;
                }
                $newFlags = $this.$globalGroupIndex;
                if ($newFlags <= (-1))
                    break a;
                if ($newFlags >= 10)
                    break a;
                $this.$backRefs.data[$newFlags] = $fSet;
                break a;
        }
        $fSet = new jur_AheadFSet;
        jur_FSet__init_($fSet, (-1));
    }
    while (true) {
        if (jur_Lexer_isLetter($this.$lexemes) && $this.$lexemes.$lookAhead == (-536870788)) {
            $last = jur_CharClass__init_0(jur_Pattern_hasFlag($this, 2), jur_Pattern_hasFlag($this, 64));
            while (!jur_Lexer_isEmpty($this.$lexemes) && jur_Lexer_isLetter($this.$lexemes)) {
                $child = $this.$lexemes;
                var$9 = $child.$lookAhead;
                if (var$9 && var$9 != (-536870788) && var$9 != (-536870871))
                    break;
                jur_CharClass_add0($last, jur_Lexer_next($child));
                $child = $this.$lexemes;
                if ($child.$ch != (-536870788))
                    continue;
                jur_Lexer_next($child);
            }
            $child = jur_Pattern_processRangeSet($this, $last);
            $child.$setNext($fSet);
        } else if ($this.$lexemes.$ch == (-536870788)) {
            $child = jur_EmptySet__init_($fSet);
            jur_Lexer_next($this.$lexemes);
        } else {
            $child = jur_Pattern_processSubExpression($this, $fSet);
            $last = $this.$lexemes;
            if ($last.$ch == (-536870788))
                jur_Lexer_next($last);
        }
        if ($child !== null)
            ju_ArrayList_add($children, $child);
        if (jur_Lexer_isEmpty($this.$lexemes))
            break;
        if ($this.$lexemes.$ch == (-536870871))
            break;
    }
    if ($this.$lexemes.$lookBack == (-536870788))
        ju_ArrayList_add($children, jur_EmptySet__init_($fSet));
    if ($this.$flags0 != $saveFlags && !$saveChangedFlags) {
        $this.$flags0 = $saveFlags;
        $last = $this.$lexemes;
        $last.$flags2 = $saveFlags;
        $last.$lookAhead = $last.$ch;
        $last.$lookAheadST = $last.$curST;
        var$9 = $last.$curToc;
        $last.$index = var$9 + 1 | 0;
        $last.$lookAheadToc = var$9;
        jur_Lexer_movePointer($last);
    }
    switch ($ch) {
        case -1073741784:
            break;
        case -536870872:
            $last = new jur_PositiveLookAhead;
            jur_JointSet__init_($last, $children, $fSet);
            return $last;
        case -268435416:
            $last = new jur_NegativeLookAhead;
            jur_JointSet__init_($last, $children, $fSet);
            return $last;
        case -134217688:
            $last = new jur_PositiveLookBehind;
            jur_JointSet__init_($last, $children, $fSet);
            return $last;
        case -67108824:
            $last = new jur_NegativeLookBehind;
            jur_JointSet__init_($last, $children, $fSet);
            return $last;
        case -33554392:
            $last = new jur_AtomicJointSet;
            jur_JointSet__init_($last, $children, $fSet);
            return $last;
        default:
            switch ($children.$size0) {
                case 0:
                    break;
                case 1:
                    return jur_SingleSet__init_0(ju_ArrayList_get($children, 0), $fSet);
                default:
                    return jur_JointSet__init_0($children, $fSet);
            }
            return jur_EmptySet__init_($fSet);
    }
    $last = new jur_NonCapJointSet;
    jur_JointSet__init_($last, $children, $fSet);
    return $last;
},
jur_Pattern_processDecomposedChar = $this => {
    let $codePoints, $curSymb, $curSymbIndex, $codePointsHangul, var$5, var$6, $readCodePoints;
    $codePoints = $rt_createIntArray(4);
    $curSymb = (-1);
    $curSymbIndex = (-1);
    if (!jur_Lexer_isEmpty($this.$lexemes) && jur_Lexer_isLetter($this.$lexemes)) {
        $codePointsHangul = $codePoints.data;
        $curSymb = jur_Lexer_next($this.$lexemes);
        $codePointsHangul[0] = $curSymb;
        $curSymbIndex = $curSymb - 4352 | 0;
    }
    if ($curSymbIndex >= 0 && $curSymbIndex < 19) {
        $codePointsHangul = $rt_createCharArray(3);
        $codePoints = $codePointsHangul.data;
        $codePoints[0] = $curSymb & 65535;
        var$5 = $this.$lexemes;
        var$6 = var$5.$ch;
        $readCodePoints = var$6 - 4449 | 0;
        if ($readCodePoints >= 0 && $readCodePoints < 21) {
            $codePoints[1] = var$6 & 65535;
            jur_Lexer_next(var$5);
            var$5 = $this.$lexemes;
            var$6 = var$5.$ch;
            $curSymb = var$6 - 4519 | 0;
            if ($curSymb >= 0 && $curSymb < 28) {
                $codePoints[2] = var$6 & 65535;
                jur_Lexer_next(var$5);
                return jur_HangulDecomposedCharSet__init_($codePointsHangul, 3);
            }
            return jur_HangulDecomposedCharSet__init_($codePointsHangul, 2);
        }
        if (!jur_Pattern_hasFlag($this, 2))
            return jur_CharSet__init_($codePoints[0]);
        if (jur_Pattern_hasFlag($this, 64))
            return jur_UCICharSet__init_($codePoints[0]);
        return jur_CICharSet__init_($codePoints[0]);
    }
    $codePointsHangul = $codePoints.data;
    $curSymb = 1;
    while ($curSymb < 4 && !jur_Lexer_isEmpty($this.$lexemes) && jur_Lexer_isLetter($this.$lexemes)) {
        $readCodePoints = $curSymb + 1 | 0;
        $codePointsHangul[$curSymb] = jur_Lexer_next($this.$lexemes);
        $curSymb = $readCodePoints;
    }
    if ($curSymb == 1) {
        $readCodePoints = $codePointsHangul[0];
        if (!(jur_Lexer_singleDecompTable.$get4($readCodePoints) == jur_Lexer_singleDecompTableSize ? 0 : 1))
            return jur_Pattern_processCharSet($this, $codePointsHangul[0]);
    }
    if (!jur_Pattern_hasFlag($this, 2))
        return jur_DecomposedCharSet__init_0($codePoints, $curSymb);
    if (jur_Pattern_hasFlag($this, 64)) {
        var$5 = new jur_UCIDecomposedCharSet;
        jur_DecomposedCharSet__init_(var$5, $codePoints, $curSymb);
        return var$5;
    }
    var$5 = new jur_CIDecomposedCharSet;
    jur_DecomposedCharSet__init_(var$5, $codePoints, $curSymb);
    return var$5;
},
jur_Pattern_processSubExpression = ($this, $last) => {
    let $cur, $term, var$4, $next, var$6, var$7, var$8;
    if (jur_Lexer_isLetter($this.$lexemes) && !jur_Lexer_isNextSpecial($this.$lexemes) && jur_Lexer_isLetter0($this.$lexemes.$lookAhead)) {
        if (jur_Pattern_hasFlag($this, 128)) {
            $cur = jur_Pattern_processDecomposedChar($this);
            if (!jur_Lexer_isEmpty($this.$lexemes)) {
                $term = $this.$lexemes;
                var$4 = $term.$ch;
                if (!(var$4 == (-536870871) && !($last instanceof jur_FinalSet)) && var$4 != (-536870788) && !jur_Lexer_isLetter($term))
                    $cur = jur_Pattern_processQuantifier($this, $last, $cur);
            }
        } else if (!jur_Lexer_isHighSurrogate0($this.$lexemes) && !jur_Lexer_isLowSurrogate0($this.$lexemes)) {
            $next = new jl_StringBuffer;
            jl_AbstractStringBuilder__init_($next);
            while (!jur_Lexer_isEmpty($this.$lexemes) && jur_Lexer_isLetter($this.$lexemes) && !jur_Lexer_isHighSurrogate0($this.$lexemes) && !jur_Lexer_isLowSurrogate0($this.$lexemes)) {
                if (!(!jur_Lexer_isNextSpecial($this.$lexemes) && !$this.$lexemes.$lookAhead) && !(!jur_Lexer_isNextSpecial($this.$lexemes) && jur_Lexer_isLetter0($this.$lexemes.$lookAhead))) {
                    var$6 = $this.$lexemes.$lookAhead;
                    if (var$6 != (-536870871) && (var$6 & (-2147418113)) != (-2147483608) && var$6 != (-536870788) && var$6 != (-536870876))
                        break;
                }
                var$4 = jur_Lexer_next($this.$lexemes);
                if (!jl_Character_isSupplementaryCodePoint(var$4))
                    jl_AbstractStringBuilder_append($next, var$4 & 65535);
                else
                    jl_AbstractStringBuilder_append3($next, jl_Character_toChars(var$4));
            }
            if (!jur_Pattern_hasFlag($this, 2)) {
                $cur = new jur_SequenceSet;
                jur_LeafSet__init_($cur);
                $cur.$string = jl_AbstractStringBuilder_toString($next);
                var$4 = $next.$length0;
                $cur.$charCount0 = var$4;
                $cur.$leftToRight = jur_SequenceSet$IntHash__init_(var$4);
                $cur.$rightToLeft = jur_SequenceSet$IntHash__init_($cur.$charCount0);
                var$7 = 0;
                while (var$7 < ($cur.$charCount0 - 1 | 0)) {
                    jur_SequenceSet$IntHash_put($cur.$leftToRight, jl_String_charAt($cur.$string, var$7), ($cur.$charCount0 - var$7 | 0) - 1 | 0);
                    jur_SequenceSet$IntHash_put($cur.$rightToLeft, jl_String_charAt($cur.$string, ($cur.$charCount0 - var$7 | 0) - 1 | 0), ($cur.$charCount0 - var$7 | 0) - 1 | 0);
                    var$7 = var$7 + 1 | 0;
                }
            } else if (jur_Pattern_hasFlag($this, 64))
                $cur = jur_UCISequenceSet__init_0($next);
            else {
                $cur = new jur_CISequenceSet;
                jur_LeafSet__init_($cur);
                $cur.$string1 = jl_AbstractStringBuilder_toString($next);
                $cur.$charCount0 = $next.$length0;
            }
        } else
            $cur = jur_Pattern_processQuantifier($this, $last, jur_Pattern_processTerminal($this, $last));
    } else {
        $term = $this.$lexemes;
        if ($term.$ch != (-536870871))
            $cur = jur_Pattern_processQuantifier($this, $last, jur_Pattern_processTerminal($this, $last));
        else {
            if ($last instanceof jur_FinalSet)
                $rt_throw(jur_PatternSyntaxException__init_($rt_s(2), $term.$orig, jur_Lexer_getIndex($term)));
            $cur = jur_EmptySet__init_($last);
        }
    }
    a: {
        if (!jur_Lexer_isEmpty($this.$lexemes)) {
            var$4 = $this.$lexemes.$ch;
            if (!(var$4 == (-536870871) && !($last instanceof jur_FinalSet)) && var$4 != (-536870788)) {
                $next = jur_Pattern_processSubExpression($this, $last);
                if ($cur instanceof jur_LeafQuantifierSet && !($cur instanceof jur_CompositeQuantifierSet) && !($cur instanceof jur_GroupQuantifierSet) && !($cur instanceof jur_AltQuantifierSet)) {
                    var$8 = $cur;
                    if (!$next.$first(var$8.$innerSet)) {
                        $cur = new jur_UnifiedQuantifierSet;
                        jur_LeafQuantifierSet__init_($cur, var$8.$innerSet, var$8.$next2, var$8.$type);
                        $cur.$innerSet.$setNext($cur);
                    }
                }
                if (($next.$getType1() & 65535) != 43)
                    $cur.$setNext($next);
                else
                    $cur.$setNext($next.$innerSet);
                break a;
            }
        }
        if ($cur === null)
            return null;
        $cur.$setNext($last);
    }
    if (($cur.$getType1() & 65535) != 43)
        return $cur;
    return $cur.$innerSet;
},
jur_Pattern_processQuantifier = ($this, $last, $term) => {
    let $q, $quant, $leaf, var$6, $q_0;
    $q = $this.$lexemes;
    $quant = $q.$ch;
    if ($term !== null && !($term instanceof jur_LeafSet)) {
        switch ($quant) {
            case -2147483606:
                jur_Lexer_next($q);
                $q = new jur_PossessiveGroupQuantifierSet;
                jur_QuantifierSet__init_($q, $term, $last, $quant);
                jur_FSet_$callClinit();
                $term.$setNext(jur_FSet_posFSet);
                return $q;
            case -2147483605:
                jur_Lexer_next($q);
                $q = new jur_PosPlusGroupQuantifierSet;
                jur_QuantifierSet__init_($q, $term, $last, (-2147483606));
                jur_FSet_$callClinit();
                $term.$setNext(jur_FSet_posFSet);
                return $q;
            case -2147483585:
                jur_Lexer_next($q);
                $q = new jur_PosAltGroupQuantifierSet;
                jur_QuantifierSet__init_($q, $term, $last, (-536870849));
                jur_FSet_$callClinit();
                $term.$setNext(jur_FSet_posFSet);
                return $q;
            case -2147483525:
                $leaf = new jur_PosCompositeGroupQuantifierSet;
                $q = jur_Lexer_nextSpecial($q);
                var$6 = $this.$compCount + 1 | 0;
                $this.$compCount = var$6;
                jur_CompositeGroupQuantifierSet__init_($leaf, $q, $term, $last, (-536870849), var$6);
                jur_FSet_$callClinit();
                $term.$setNext(jur_FSet_posFSet);
                return $leaf;
            case -1073741782:
            case -1073741781:
                jur_Lexer_next($q);
                $q = new jur_ReluctantGroupQuantifierSet;
                jur_QuantifierSet__init_($q, $term, $last, $quant);
                $term.$setNext($q);
                return $q;
            case -1073741761:
                jur_Lexer_next($q);
                $q = new jur_RelAltGroupQuantifierSet;
                jur_QuantifierSet__init_($q, $term, $last, (-536870849));
                $term.$setNext($last);
                return $q;
            case -1073741701:
                $q_0 = new jur_RelCompositeGroupQuantifierSet;
                $q = jur_Lexer_nextSpecial($q);
                $quant = $this.$compCount + 1 | 0;
                $this.$compCount = $quant;
                jur_CompositeGroupQuantifierSet__init_($q_0, $q, $term, $last, (-536870849), $quant);
                $term.$setNext($q_0);
                return $q_0;
            case -536870870:
            case -536870869:
                jur_Lexer_next($q);
                if ($term.$getType1() != (-2147483602)) {
                    $q = new jur_GroupQuantifierSet;
                    jur_QuantifierSet__init_($q, $term, $last, $quant);
                } else if (jur_Pattern_hasFlag($this, 32)) {
                    $q = new jur_DotAllQuantifierSet;
                    jur_QuantifierSet__init_($q, $term, $last, $quant);
                } else {
                    $q = new jur_DotQuantifierSet;
                    $leaf = jur_AbstractLineTerminator_getInstance($this.$flags0);
                    jur_QuantifierSet__init_($q, $term, $last, $quant);
                    $q.$lt = $leaf;
                }
                $term.$setNext($q);
                return $q;
            case -536870849:
                jur_Lexer_next($q);
                $q = new jur_AltGroupQuantifierSet;
                jur_QuantifierSet__init_($q, $term, $last, (-536870849));
                $term.$setNext($last);
                return $q;
            case -536870789:
                $q_0 = new jur_CompositeGroupQuantifierSet;
                $q = jur_Lexer_nextSpecial($q);
                $quant = $this.$compCount + 1 | 0;
                $this.$compCount = $quant;
                jur_CompositeGroupQuantifierSet__init_($q_0, $q, $term, $last, (-536870849), $quant);
                $term.$setNext($q_0);
                return $q_0;
            default:
        }
        return $term;
    }
    $leaf = null;
    if ($term !== null)
        $leaf = $term;
    switch ($quant) {
        case -2147483606:
        case -2147483605:
            jur_Lexer_next($q);
            $q = new jur_PossessiveQuantifierSet;
            jur_LeafQuantifierSet__init_($q, $leaf, $last, $quant);
            $leaf.$next2 = $q;
            return $q;
        case -2147483585:
            jur_Lexer_next($q);
            $term = new jur_PossessiveAltQuantifierSet;
            jur_LeafQuantifierSet__init_($term, $leaf, $last, (-2147483585));
            return $term;
        case -2147483525:
            $term = new jur_PossessiveCompositeQuantifierSet;
            jur_CompositeQuantifierSet__init_($term, jur_Lexer_nextSpecial($q), $leaf, $last, (-2147483525));
            return $term;
        case -1073741782:
        case -1073741781:
            jur_Lexer_next($q);
            $q = new jur_ReluctantQuantifierSet;
            jur_LeafQuantifierSet__init_($q, $leaf, $last, $quant);
            $leaf.$next2 = $q;
            return $q;
        case -1073741761:
            jur_Lexer_next($q);
            $term = new jur_ReluctantAltQuantifierSet;
            jur_LeafQuantifierSet__init_($term, $leaf, $last, (-1073741761));
            return $term;
        case -1073741701:
            $term = new jur_ReluctantCompositeQuantifierSet;
            jur_CompositeQuantifierSet__init_($term, jur_Lexer_nextSpecial($q), $leaf, $last, (-1073741701));
            return $term;
        case -536870870:
        case -536870869:
            jur_Lexer_next($q);
            $q = jur_LeafQuantifierSet__init_0($leaf, $last, $quant);
            $leaf.$next2 = $q;
            return $q;
        case -536870849:
            jur_Lexer_next($q);
            $term = new jur_AltQuantifierSet;
            jur_LeafQuantifierSet__init_($term, $leaf, $last, (-536870849));
            return $term;
        case -536870789:
            return jur_CompositeQuantifierSet__init_0(jur_Lexer_nextSpecial($q), $leaf, $last, (-536870789));
        default:
    }
    return $term;
},
jur_Pattern_processTerminal = ($this, $last) => {
    let $term, var$3, var$4, $ch, $newFlags, $number, $negative, $cc;
    $term = null;
    var$3 = $last instanceof jur_FinalSet;
    while (true) {
        a: {
            var$4 = $this.$lexemes;
            $ch = var$4.$ch;
            if (($ch & (-2147418113)) == (-2147483608)) {
                jur_Lexer_next(var$4);
                $newFlags = ($ch & 16711680) >> 16;
                $ch = $ch & (-16711681);
                if ($ch == (-16777176))
                    $this.$flags0 = $newFlags;
                else {
                    if ($ch != (-1073741784))
                        $newFlags = $this.$flags0;
                    $term = jur_Pattern_processExpression($this, $ch, $newFlags, $last);
                    var$4 = $this.$lexemes;
                    if (var$4.$ch != (-536870871))
                        $rt_throw(jur_PatternSyntaxException__init_($rt_s(2), var$4.$orig, var$4.$curToc));
                    jur_Lexer_next(var$4);
                }
            } else {
                b: {
                    c: {
                        switch ($ch) {
                            case -2147483599:
                            case -2147483598:
                            case -2147483597:
                            case -2147483596:
                            case -2147483595:
                            case -2147483594:
                            case -2147483593:
                            case -2147483592:
                            case -2147483591:
                                break c;
                            case -2147483583:
                                break;
                            case -2147483582:
                                jur_Lexer_next(var$4);
                                $term = jur_WordBoundary__init_(0);
                                break a;
                            case -2147483577:
                                jur_Lexer_next(var$4);
                                $term = new jur_PreviousMatch;
                                jur_AbstractSet__init_($term);
                                break a;
                            case -2147483558:
                                jur_Lexer_next(var$4);
                                $term = new jur_EOLSet;
                                $number = $this.$consCount + 1 | 0;
                                $this.$consCount = $number;
                                jur_EOLSet__init_($term, $number);
                                break a;
                            case -2147483550:
                                jur_Lexer_next(var$4);
                                $term = jur_WordBoundary__init_(1);
                                break a;
                            case -2147483526:
                                jur_Lexer_next(var$4);
                                $term = new jur_EOISet;
                                jur_AbstractSet__init_($term);
                                break a;
                            case -536870876:
                                jur_Lexer_next(var$4);
                                $this.$consCount = $this.$consCount + 1 | 0;
                                if (jur_Pattern_hasFlag($this, 8)) {
                                    if (jur_Pattern_hasFlag($this, 1)) {
                                        $term = jur_UMultiLineEOLSet__init_0($this.$consCount);
                                        break a;
                                    }
                                    $term = jur_MultiLineEOLSet__init_($this.$consCount);
                                    break a;
                                }
                                if (jur_Pattern_hasFlag($this, 1)) {
                                    $term = jur_UEOLSet__init_0($this.$consCount);
                                    break a;
                                }
                                $term = jur_EOLSet__init_0($this.$consCount);
                                break a;
                            case -536870866:
                                jur_Lexer_next(var$4);
                                if (jur_Pattern_hasFlag($this, 32)) {
                                    $term = jur_DotAllSet__init_0();
                                    break a;
                                }
                                $term = jur_DotSet__init_0(jur_AbstractLineTerminator_getInstance($this.$flags0));
                                break a;
                            case -536870821:
                                jur_Lexer_next(var$4);
                                $negative = 0;
                                $term = $this.$lexemes;
                                if ($term.$ch == (-536870818)) {
                                    $negative = 1;
                                    jur_Lexer_next($term);
                                }
                                $term = jur_Pattern_processRangeSet($this, jur_Pattern_processRangeExpression($this, $negative));
                                $term.$setNext($last);
                                var$4 = $this.$lexemes;
                                if (var$4.$ch != (-536870819))
                                    $rt_throw(jur_PatternSyntaxException__init_($rt_s(2), var$4.$orig, var$4.$curToc));
                                jur_Lexer_setMode(var$4, 1);
                                jur_Lexer_next($this.$lexemes);
                                break a;
                            case -536870818:
                                jur_Lexer_next(var$4);
                                $this.$consCount = $this.$consCount + 1 | 0;
                                if (!jur_Pattern_hasFlag($this, 8)) {
                                    $term = new jur_SOLSet;
                                    jur_AbstractSet__init_($term);
                                    break a;
                                }
                                $term = new jur_MultiLineSOLSet;
                                var$4 = jur_AbstractLineTerminator_getInstance($this.$flags0);
                                jur_AbstractSet__init_($term);
                                $term.$lt1 = var$4;
                                break a;
                            case 0:
                                $cc = var$4.$curST;
                                if ($cc !== null)
                                    $term = jur_Pattern_processRangeSet($this, $cc);
                                else {
                                    if (jur_Lexer_isEmpty(var$4)) {
                                        $term = jur_EmptySet__init_($last);
                                        break a;
                                    }
                                    $term = jur_CharSet__init_($ch & 65535);
                                }
                                jur_Lexer_next($this.$lexemes);
                                break a;
                            default:
                                break b;
                        }
                        jur_Lexer_next(var$4);
                        $term = new jur_SOLSet;
                        jur_AbstractSet__init_($term);
                        break a;
                    }
                    $number = ($ch & 2147483647) - 48 | 0;
                    if ($this.$globalGroupIndex < $number)
                        $rt_throw(jur_PatternSyntaxException__init_($rt_s(2), jur_Lexer_toString(var$4), jur_Lexer_getIndex($this.$lexemes)));
                    jur_Lexer_next(var$4);
                    $this.$consCount = $this.$consCount + 1 | 0;
                    $term = !jur_Pattern_hasFlag($this, 2) ? jur_BackReferenceSet__init_($number, $this.$consCount) : jur_Pattern_hasFlag($this, 64) ? jur_UCIBackReferenceSet__init_0($number, $this.$consCount) : jur_CIBackReferenceSet__init_0($number, $this.$consCount);
                    $this.$backRefs.data[$number].$isBackReferenced = 1;
                    $this.$needsBackRefReplacement = 1;
                    break a;
                }
                if ($ch >= 0 && !jur_Lexer_isSpecial(var$4)) {
                    $term = jur_Pattern_processCharSet($this, $ch);
                    jur_Lexer_next($this.$lexemes);
                } else if ($ch == (-536870788))
                    $term = jur_EmptySet__init_($last);
                else {
                    if ($ch != (-536870871)) {
                        $last = new jur_PatternSyntaxException;
                        $term = !jur_Lexer_isSpecial($this.$lexemes) ? jl_Character_toString($ch & 65535) : $this.$lexemes.$curST.$toString();
                        var$4 = $this.$lexemes;
                        jur_PatternSyntaxException__init_0($last, $term, var$4.$orig, var$4.$curToc);
                        $rt_throw($last);
                    }
                    if (var$3) {
                        $last = new jur_PatternSyntaxException;
                        var$4 = $this.$lexemes;
                        jur_PatternSyntaxException__init_0($last, $rt_s(2), var$4.$orig, var$4.$curToc);
                        $rt_throw($last);
                    }
                    $term = jur_EmptySet__init_($last);
                }
            }
        }
        if ($ch != (-16777176))
            break;
    }
    return $term;
},
jur_Pattern_processRangeExpression = ($this, $alt) => {
    let $res, $buffer, $intersection, $notClosed, $firstInClass, $cs, $cur, $negative, $$je;
    $res = jur_CharClass__init_0(jur_Pattern_hasFlag($this, 2), jur_Pattern_hasFlag($this, 64));
    jur_AbstractCharClass_setNegative($res, $alt);
    $buffer = (-1);
    $intersection = 0;
    $notClosed = 0;
    $firstInClass = 1;
    a: {
        b: {
            c: while (true) {
                if (jur_Lexer_isEmpty($this.$lexemes))
                    break a;
                $cs = $this.$lexemes;
                $alt = $cs.$ch;
                $notClosed = $alt == (-536870819) && !$firstInClass ? 0 : 1;
                if (!$notClosed)
                    break a;
                d: {
                    switch ($alt) {
                        case -536870874:
                            if ($buffer >= 0)
                                jur_CharClass_add0($res, $buffer);
                            $buffer = jur_Lexer_next($this.$lexemes);
                            $cs = $this.$lexemes;
                            if ($cs.$ch != (-536870874)) {
                                $buffer = 38;
                                break d;
                            }
                            if ($cs.$lookAhead == (-536870821)) {
                                jur_Lexer_next($cs);
                                $intersection = 1;
                                $buffer = (-1);
                                break d;
                            }
                            jur_Lexer_next($cs);
                            if ($firstInClass) {
                                $res = jur_Pattern_processRangeExpression($this, 0);
                                break d;
                            }
                            if ($this.$lexemes.$ch == (-536870819))
                                break d;
                            jur_CharClass_intersection($res, jur_Pattern_processRangeExpression($this, 0));
                            break d;
                        case -536870867:
                            if (!$firstInClass) {
                                $alt = $cs.$lookAhead;
                                if ($alt != (-536870819) && $alt != (-536870821) && $buffer >= 0) {
                                    jur_Lexer_next($cs);
                                    $cs = $this.$lexemes;
                                    $cur = $cs.$ch;
                                    if (jur_Lexer_isSpecial($cs))
                                        break c;
                                    if ($cur < 0) {
                                        $negative = $this.$lexemes.$lookAhead;
                                        if ($negative != (-536870819) && $negative != (-536870821) && $buffer >= 0)
                                            break c;
                                    }
                                    e: {
                                        try {
                                            if (jur_Lexer_isLetter0($cur))
                                                break e;
                                            $cur = $cur & 65535;
                                            break e;
                                        } catch ($$e) {
                                            $$je = $rt_wrapException($$e);
                                            if ($$je instanceof jl_Exception) {
                                                break b;
                                            } else {
                                                throw $$e;
                                            }
                                        }
                                    }
                                    try {
                                        jur_CharClass_add($res, $buffer, $cur);
                                    } catch ($$e) {
                                        $$je = $rt_wrapException($$e);
                                        if ($$je instanceof jl_Exception) {
                                            break b;
                                        } else {
                                            throw $$e;
                                        }
                                    }
                                    jur_Lexer_next($this.$lexemes);
                                    $buffer = (-1);
                                    break d;
                                }
                            }
                            if ($buffer >= 0)
                                jur_CharClass_add0($res, $buffer);
                            $buffer = 45;
                            jur_Lexer_next($this.$lexemes);
                            break d;
                        case -536870821:
                            if ($buffer >= 0) {
                                jur_CharClass_add0($res, $buffer);
                                $buffer = (-1);
                            }
                            jur_Lexer_next($this.$lexemes);
                            $negative = 0;
                            $cs = $this.$lexemes;
                            if ($cs.$ch == (-536870818)) {
                                jur_Lexer_next($cs);
                                $negative = 1;
                            }
                            if (!$intersection)
                                jur_CharClass_union($res, jur_Pattern_processRangeExpression($this, $negative));
                            else
                                jur_CharClass_intersection($res, jur_Pattern_processRangeExpression($this, $negative));
                            $intersection = 0;
                            jur_Lexer_next($this.$lexemes);
                            break d;
                        case -536870819:
                            if ($buffer >= 0)
                                jur_CharClass_add0($res, $buffer);
                            $buffer = 93;
                            jur_Lexer_next($this.$lexemes);
                            break d;
                        case -536870818:
                            if ($buffer >= 0)
                                jur_CharClass_add0($res, $buffer);
                            $buffer = 94;
                            jur_Lexer_next($this.$lexemes);
                            break d;
                        case 0:
                            if ($buffer >= 0)
                                jur_CharClass_add0($res, $buffer);
                            $cs = $this.$lexemes.$curST;
                            if ($cs === null)
                                $buffer = 0;
                            else {
                                jur_CharClass_add1($res, $cs);
                                $buffer = (-1);
                            }
                            jur_Lexer_next($this.$lexemes);
                            break d;
                        default:
                    }
                    if ($buffer >= 0)
                        jur_CharClass_add0($res, $buffer);
                    $buffer = jur_Lexer_next($this.$lexemes);
                }
                $firstInClass = 0;
            }
            $rt_throw(jur_PatternSyntaxException__init_($rt_s(2), jur_Pattern_pattern($this), $this.$lexemes.$curToc));
        }
        $rt_throw(jur_PatternSyntaxException__init_($rt_s(2), jur_Pattern_pattern($this), $this.$lexemes.$curToc));
    }
    if (!$notClosed) {
        if ($buffer >= 0)
            jur_CharClass_add0($res, $buffer);
        return $res;
    }
    $rt_throw(jur_PatternSyntaxException__init_($rt_s(2), jur_Pattern_pattern($this), $this.$lexemes.$curToc - 1 | 0));
},
jur_Pattern_processCharSet = ($this, $ch) => {
    let $isSupplCodePoint, var$3, var$4;
    $isSupplCodePoint = jl_Character_isSupplementaryCodePoint($ch);
    if (jur_Pattern_hasFlag($this, 2)) {
        a: {
            if (!($ch >= 97 && $ch <= 122)) {
                if ($ch < 65)
                    break a;
                if ($ch > 90)
                    break a;
            }
            return jur_CICharSet__init_($ch & 65535);
        }
        if (jur_Pattern_hasFlag($this, 64) && $ch > 128) {
            if ($isSupplCodePoint) {
                var$3 = new jur_UCISupplCharSet;
                jur_LeafSet__init_(var$3);
                var$3.$charCount0 = 2;
                var$3.$ch3 = jl_Character_toLowerCase0(jl_Character_toUpperCase0($ch));
                return var$3;
            }
            if (jur_Lexer_isLowSurrogate($ch))
                return jur_LowSurrogateCharSet__init_($ch & 65535);
            if (!jur_Lexer_isHighSurrogate($ch))
                return jur_UCICharSet__init_($ch & 65535);
            return jur_HighSurrogateCharSet__init_($ch & 65535);
        }
    }
    if (!$isSupplCodePoint) {
        if (jur_Lexer_isLowSurrogate($ch))
            return jur_LowSurrogateCharSet__init_($ch & 65535);
        if (!jur_Lexer_isHighSurrogate($ch))
            return jur_CharSet__init_($ch & 65535);
        return jur_HighSurrogateCharSet__init_($ch & 65535);
    }
    var$3 = new jur_SupplCharSet;
    jur_LeafSet__init_(var$3);
    var$3.$charCount0 = 2;
    var$3.$ch1 = $ch;
    var$4 = (jl_Character_toChars($ch)).data;
    var$3.$high0 = var$4[0];
    var$3.$low0 = var$4[1];
    return var$3;
},
jur_Pattern_processRangeSet = ($this, $charClass) => {
    let $surrogates, $lowHighSurrRangeSet, var$4;
    if (!jur_AbstractCharClass_hasLowHighSurrogates($charClass)) {
        if (!$charClass.$mayContainSupplCodepoints) {
            if ($charClass.$hasUCI())
                return jur_UCIRangeSet__init_($charClass);
            return jur_RangeSet__init_($charClass);
        }
        if (!$charClass.$hasUCI())
            return jur_SupplRangeSet__init_0($charClass);
        $surrogates = new jur_UCISupplRangeSet;
        jur_SupplRangeSet__init_($surrogates, $charClass);
        return $surrogates;
    }
    $surrogates = jur_AbstractCharClass_getSurrogates($charClass);
    $lowHighSurrRangeSet = new jur_LowHighSurrogateRangeSet;
    jur_AbstractSet__init_($lowHighSurrRangeSet);
    $lowHighSurrRangeSet.$surrChars = $surrogates;
    $lowHighSurrRangeSet.$alt1 = $surrogates.$alt;
    if (!$charClass.$mayContainSupplCodepoints) {
        if ($charClass.$hasUCI())
            return jur_CompositeRangeSet__init_(jur_UCIRangeSet__init_(jur_AbstractCharClass_getWithoutSurrogates($charClass)), $lowHighSurrRangeSet);
        return jur_CompositeRangeSet__init_(jur_RangeSet__init_(jur_AbstractCharClass_getWithoutSurrogates($charClass)), $lowHighSurrRangeSet);
    }
    if (!$charClass.$hasUCI())
        return jur_CompositeRangeSet__init_(jur_SupplRangeSet__init_0(jur_AbstractCharClass_getWithoutSurrogates($charClass)), $lowHighSurrRangeSet);
    $surrogates = new jur_CompositeRangeSet;
    var$4 = new jur_UCISupplRangeSet;
    jur_SupplRangeSet__init_(var$4, jur_AbstractCharClass_getWithoutSurrogates($charClass));
    jur_CompositeRangeSet__init_0($surrogates, var$4, $lowHighSurrRangeSet);
    return $surrogates;
},
jur_Pattern_compile = $pattern => {
    let var$2, var$3, var$4, var$5;
    if ($pattern === null) {
        $pattern = new jl_NullPointerException;
        jl_Throwable__init_0($pattern, $rt_s(171));
        $rt_throw($pattern);
    }
    jur_AbstractSet_counter = 1;
    var$2 = new jur_Pattern;
    var$2.$backRefs = $rt_createArray(jur_FSet, 10);
    var$2.$globalGroupIndex = (-1);
    var$2.$compCount = (-1);
    var$2.$consCount = (-1);
    var$3 = new jur_Lexer;
    var$3.$mode2 = 1;
    var$3.$orig = $pattern;
    var$3.$pattern0 = $rt_createCharArray($pattern.$nativeString.length + 2 | 0);
    jl_System_fastArraycopy(jl_String_toCharArray($pattern), 0, var$3.$pattern0, 0, $pattern.$nativeString.length);
    var$4 = var$3.$pattern0.data;
    var$5 = var$4.length;
    var$4[var$5 - 1 | 0] = 0;
    var$4[var$5 - 2 | 0] = 0;
    var$3.$patternFullLength = var$5;
    var$3.$flags2 = 0;
    jur_Lexer_movePointer(var$3);
    jur_Lexer_movePointer(var$3);
    var$2.$lexemes = var$3;
    var$2.$flags0 = 0;
    var$2.$start2 = jur_Pattern_processExpression(var$2, (-1), 0, null);
    if (jur_Lexer_isEmpty(var$2.$lexemes)) {
        if (var$2.$needsBackRefReplacement)
            var$2.$start2.$processSecondPass();
        return var$2;
    }
    $pattern = new jur_PatternSyntaxException;
    var$2 = var$2.$lexemes;
    jur_PatternSyntaxException__init_0($pattern, $rt_s(2), var$2.$orig, var$2.$curToc);
    $rt_throw($pattern);
},
jur_Pattern_matches = ($regex, $input) => {
    return jur_Matcher_matches(jur_Pattern_matcher(jur_Pattern_compile($regex), $input));
},
jur_Pattern_getSupplement = $ch => {
    if ($ch >= 97 && $ch <= 122)
        $ch = ($ch - 32 | 0) & 65535;
    else if ($ch >= 65 && $ch <= 90)
        $ch = ($ch + 32 | 0) & 65535;
    return $ch;
},
jur_Pattern_hasFlag = ($this, $flag) => {
    return ($this.$flags0 & $flag) != $flag ? 0 : 1;
};
function jl_ClassLoader() {
    jl_Object.call(this);
    this.$parent = null;
}
let jl_ClassLoader_systemClassLoader = null,
jl_ClassLoader_resources = null,
jl_ClassLoader_$callClinit = () => {
    jl_ClassLoader_$callClinit = $rt_eraseClinit(jl_ClassLoader);
    jl_ClassLoader__clinit_();
},
jl_ClassLoader_getSystemClassLoader = () => {
    jl_ClassLoader_$callClinit();
    return jl_ClassLoader_systemClassLoader;
},
jl_ClassLoader_getResourceAsStream = ($this, $name) => {
    let $dataString, $bytes, var$4, $i, var$6;
    jl_ClassLoader_$callClinit();
    if (jl_ClassLoader_resources === null)
        jl_ClassLoader_resources = {};
    $dataString = $rt_str(jl_ClassLoader_resourceToString$js_body$_6(jl_ClassLoader_resources[$rt_ustr($name)]));
    if ($dataString === null)
        return null;
    $bytes = $rt_createByteArray($dataString.$nativeString.length);
    var$4 = $bytes.data;
    $i = 0;
    var$6 = var$4.length;
    while ($i < var$6) {
        var$4[$i] = jl_String_charAt($dataString, $i) << 24 >> 24;
        $i = $i + 1 | 0;
    }
    return ji_ByteArrayInputStream__init_(otci_Base64Impl_decode0($bytes, otci_Base64Impl_reverse));
},
jl_ClassLoader__clinit_ = () => {
    let var$1;
    var$1 = new jl_SystemClassLoader;
    jl_ClassLoader_$callClinit();
    var$1.$parent = null;
    jl_ClassLoader_systemClassLoader = var$1;
},
jl_ClassLoader_resourceToString$js_body$_6 = var$1 => {
    return var$1 !== null && var$1 !== void 0 ? var$1 : null;
},
ji_DataInput = $rt_classWithoutFields(0);
function ji_DataInputStream() {
    ji_FilterInputStream.call(this);
    this.$buff = null;
}
let ji_DataInputStream__init_ = ($this, var$1) => {
    ji_FilterInputStream__init_($this, var$1);
    $this.$buff = $rt_createByteArray(8);
},
ji_DataInputStream__init_0 = var_0 => {
    let var_1 = new ji_DataInputStream();
    ji_DataInputStream__init_(var_1, var_0);
    return var_1;
},
ji_DataInputStream_readToBuff = ($this, $count) => {
    let $offset, $bytesRead;
    $offset = 0;
    while ($offset < $count) {
        $bytesRead = $this.$in.$read($this.$buff, $offset, $count - $offset | 0);
        if ($bytesRead == (-1))
            return $bytesRead;
        $offset = $offset + $bytesRead | 0;
    }
    return $offset;
},
ji_DataInputStream_readInt = $this => {
    let var$1, var$2;
    if (ji_DataInputStream_readToBuff($this, 4) < 0) {
        var$1 = new ji_EOFException;
        jl_Throwable__init_(var$1);
        $rt_throw(var$1);
    }
    var$2 = $this.$buff.data;
    return (var$2[0] & 255) << 24 | (var$2[1] & 255) << 16 | (var$2[2] & 255) << 8 | var$2[3] & 255;
},
ji_DataInputStream_readUnsignedShort = $this => {
    let var$1, var$2;
    if (ji_DataInputStream_readToBuff($this, 2) < 0) {
        var$1 = new ji_EOFException;
        jl_Throwable__init_(var$1);
        $rt_throw(var$1);
    }
    var$2 = $this.$buff.data;
    return ((var$2[0] & 255) << 8 | var$2[1] & 255) & 65535;
},
ju_Dictionary = $rt_classWithoutFields();
function ju_Hashtable() {
    let a = this; ju_Dictionary.call(a);
    a.$elementCount0 = 0;
    a.$elementData0 = null;
    a.$loadFactor = 0.0;
    a.$threshold0 = 0;
    a.$firstSlot = 0;
    a.$lastSlot = 0;
    a.$modCount1 = 0;
}
let ju_Hashtable_EMPTY_ENUMERATION = null,
ju_Hashtable_EMPTY_ITERATOR = null,
ju_Hashtable__init_ = $this => {
    let var$1, var$2;
    $this.$lastSlot = (-1);
    $this.$elementCount0 = 0;
    var$1 = $rt_createArray(ju_Hashtable$Entry, 11);
    var$2 = var$1.data;
    $this.$elementData0 = var$1;
    $this.$firstSlot = var$2.length;
    $this.$loadFactor = 0.75;
    ju_Hashtable_computeMaxSize($this);
},
ju_Hashtable__init_0 = () => {
    let var_0 = new ju_Hashtable();
    ju_Hashtable__init_(var_0);
    return var_0;
},
ju_Hashtable_computeMaxSize = $this => {
    $this.$threshold0 = $this.$elementData0.data.length * $this.$loadFactor | 0;
},
ju_Hashtable_get = ($this, $key) => {
    let $hash, $index, var$4, $entry;
    jl_Object_monitorEnterSync($this);
    try {
        $hash = jl_String_hashCode($key);
        $index = $hash & 2147483647;
        var$4 = $this.$elementData0.data;
        $entry = var$4[$index % var$4.length | 0];
        while ($entry !== null) {
            if (ju_Hashtable$Entry_equalsKey($entry, $key, $hash))
                return $entry.$value;
            $entry = $entry.$next3;
        }
        return null;
    } finally {
        jl_Object_monitorExitSync($this);
    }
},
ju_Hashtable_put = ($this, $key, $value) => {
    let $hash, var$4, var$5, $index, $entry, $result, var$9, var$10, var$11, var$12;
    jl_Object_monitorEnterSync($this);
    try {
        if ($key !== null && $value !== null) {
            $hash = jl_String_hashCode($key);
            var$4 = $hash & 2147483647;
            var$5 = $this.$elementData0.data;
            $index = var$4 % var$5.length | 0;
            $entry = var$5[$index];
            while ($entry !== null && !ju_Hashtable$Entry_equalsKey($entry, $key, $hash)) {
                $entry = $entry.$next3;
            }
            if ($entry !== null) {
                $result = $entry.$value;
                $entry.$value = $value;
                return $result;
            }
            $this.$modCount1 = $this.$modCount1 + 1 | 0;
            var$9 = $this.$elementCount0 + 1 | 0;
            $this.$elementCount0 = var$9;
            if (var$9 > $this.$threshold0) {
                var$9 = ($this.$elementData0.data.length << 1) + 1 | 0;
                if (!var$9)
                    var$9 = 1;
                $index = (-1);
                var$10 = $rt_createArray(ju_Hashtable$Entry, var$9);
                var$5 = var$10.data;
                $hash = $this.$lastSlot + 1 | 0;
                var$11 = var$9;
                while (true) {
                    $hash = $hash + (-1) | 0;
                    if ($hash < $this.$firstSlot)
                        break;
                    $result = $this.$elementData0.data[$hash];
                    while ($result !== null) {
                        var$12 = ($result.$key.$hashCode() & 2147483647) % var$9 | 0;
                        if (var$12 < var$11)
                            var$11 = var$12;
                        if (var$12 > $index)
                            $index = var$12;
                        $entry = $result.$next3;
                        $result.$next3 = var$5[var$12];
                        var$5[var$12] = $result;
                        $result = $entry;
                    }
                }
                $this.$firstSlot = var$11;
                $this.$lastSlot = $index;
                $this.$elementData0 = var$10;
                ju_Hashtable_computeMaxSize($this);
                $index = var$4 % $this.$elementData0.data.length | 0;
            }
            if ($index < $this.$firstSlot)
                $this.$firstSlot = $index;
            if ($index > $this.$lastSlot)
                $this.$lastSlot = $index;
            $entry = new ju_Hashtable$Entry;
            ju_MapEntry__init_($entry, $key, $value);
            $entry.$hashcode = jl_String_hashCode($key);
            var$5 = $this.$elementData0.data;
            $entry.$next3 = var$5[$index];
            var$5[$index] = $entry;
            return null;
        }
        $key = new jl_NullPointerException;
        jl_Throwable__init_($key);
        $rt_throw($key);
    } finally {
        jl_Object_monitorExitSync($this);
    }
},
ju_Hashtable_remove = ($this, $key) => {
    let $hash, var$3, var$4, $index, $last, $entry, $entry_0, $result;
    jl_Object_monitorEnterSync($this);
    try {
        $hash = jl_String_hashCode($key);
        var$3 = $hash & 2147483647;
        var$4 = $this.$elementData0.data;
        $index = var$3 % var$4.length | 0;
        $last = null;
        $entry = var$4[$index];
        while ($entry !== null && !ju_Hashtable$Entry_equalsKey($entry, $key, $hash)) {
            $entry_0 = $entry.$next3;
            $last = $entry;
            $entry = $entry_0;
        }
        if ($entry === null)
            return null;
        $this.$modCount1 = $this.$modCount1 + 1 | 0;
        if ($last !== null)
            $last.$next3 = $entry.$next3;
        else
            $this.$elementData0.data[$index] = $entry.$next3;
        $this.$elementCount0 = $this.$elementCount0 - 1 | 0;
        $result = $entry.$value;
        $entry.$value = null;
        return $result;
    } finally {
        jl_Object_monitorExitSync($this);
    }
},
ju_Hashtable__clinit_ = () => {
    ju_Hashtable_EMPTY_ENUMERATION = new ju_Hashtable$1;
    ju_Hashtable_EMPTY_ITERATOR = new ju_Hashtable$2;
};
function ju_Properties() {
    ju_Hashtable.call(this);
    this.$defaults = null;
}
let ju_Properties_getProperty = ($this, $name) => {
    let $result, $property;
    $result = ju_Hashtable_get($this, $name);
    $property = !($result instanceof jl_String) ? null : $result;
    if ($property === null) {
        $result = $this.$defaults;
        if ($result !== null)
            $property = ju_Properties_getProperty($result, $name);
    }
    return $property;
};
function cjj_InfBlocks() {
    let a = this; jl_Object.call(a);
    a.$mode0 = 0;
    a.$left = 0;
    a.$table = 0;
    a.$index0 = 0;
    a.$blens = null;
    a.$bb = null;
    a.$tb = null;
    a.$bl = null;
    a.$bd = null;
    a.$tl = null;
    a.$td = null;
    a.$tli = null;
    a.$tdi = null;
    a.$codes = null;
    a.$last = 0;
    a.$bitk = 0;
    a.$bitb = 0;
    a.$hufts = null;
    a.$window = null;
    a.$end1 = 0;
    a.$read2 = 0;
    a.$write0 = 0;
    a.$check = 0;
    a.$inftree = null;
    a.$z = null;
}
let cjj_InfBlocks_inflate_mask = null,
cjj_InfBlocks_border = null,
cjj_InfBlocks_reset = $this => {
    let var$1;
    var$1 = $this.$mode0;
    var$1 != 4 && var$1 != 5;
    $this.$mode0 = 0;
    $this.$bitk = 0;
    $this.$bitb = 0;
    $this.$write0 = 0;
    $this.$read2 = 0;
    if ($this.$check)
        $this.$z.$adler.$reset0();
},
cjj_InfBlocks_proc = ($this, $r) => {
    let var$2, $p, $n, $b, $k, $q, var$8, $m, var$10, $i, $t, $c, var$14, var$15, var$16, $i_0, $j;
    var$2 = $this.$z;
    $p = var$2.$next_in_index;
    $n = var$2.$avail_in;
    $b = $this.$bitb;
    $k = $this.$bitk;
    $q = $this.$write0;
    var$8 = $this.$read2;
    $m = $q >= var$8 ? $this.$end1 - $q | 0 : (var$8 - $q | 0) - 1 | 0;
    a: {
        b: {
            c: {
                d: {
                    e: while (true) {
                        f: {
                            g: {
                                h: {
                                    i: {
                                        j: {
                                            switch ($this.$mode0) {
                                                case 2:
                                                    break f;
                                                case 9:
                                                    $this.$bitb = $b;
                                                    $this.$bitk = $k;
                                                    var$2 = $this.$z;
                                                    var$2.$avail_in = $n;
                                                    var$2.$total_in = Long_add(var$2.$total_in, Long_fromInt($p - var$2.$next_in_index | 0));
                                                    var$2.$next_in_index = $p;
                                                    $this.$write0 = $q;
                                                    return cjj_InfBlocks_inflate_flush($this, (-3));
                                                case 0:
                                                    break j;
                                                case 1:
                                                    break;
                                                case 3:
                                                    while ($k < 14) {
                                                        if (!$n) {
                                                            $this.$bitb = $b;
                                                            $this.$bitk = $k;
                                                            var$2 = $this.$z;
                                                            var$2.$avail_in = $n;
                                                            var$2.$total_in = Long_add(var$2.$total_in, Long_fromInt($p - var$2.$next_in_index | 0));
                                                            var$2.$next_in_index = $p;
                                                            $this.$write0 = $q;
                                                            return cjj_InfBlocks_inflate_flush($this, $r);
                                                        }
                                                        $r = 0;
                                                        $n = $n + (-1) | 0;
                                                        var$10 = $this.$z.$next_in.data;
                                                        var$8 = $p + 1 | 0;
                                                        $b = $b | (var$10[$p] & 255) << $k;
                                                        $k = $k + 8 | 0;
                                                        $p = var$8;
                                                    }
                                                    var$8 = $b & 16383;
                                                    $this.$table = var$8;
                                                    $i = var$8 & 31;
                                                    if ($i > 29)
                                                        break d;
                                                    var$8 = var$8 >> 5 & 31;
                                                    if (var$8 > 29)
                                                        break d;
                                                    k: {
                                                        l: {
                                                            var$8 = (258 + $i | 0) + var$8 | 0;
                                                            var$10 = $this.$blens;
                                                            if (var$10 !== null) {
                                                                var$10 = var$10.data;
                                                                if (var$10.length >= var$8)
                                                                    break l;
                                                            }
                                                            $this.$blens = $rt_createIntArray(var$8);
                                                            break k;
                                                        }
                                                        $i = 0;
                                                        while (true) {
                                                            if ($i >= var$8)
                                                                break k;
                                                            var$10[$i] = 0;
                                                            $i = $i + 1 | 0;
                                                        }
                                                    }
                                                    $b = $b >>> 14 | 0;
                                                    $k = $k + (-14) | 0;
                                                    $this.$index0 = 0;
                                                    $this.$mode0 = 4;
                                                    break i;
                                                case 4:
                                                    break i;
                                                case 5:
                                                    break h;
                                                case 6:
                                                    break g;
                                                case 7:
                                                    break b;
                                                case 8:
                                                    break a;
                                                default:
                                                    $this.$bitb = $b;
                                                    $this.$bitk = $k;
                                                    var$2 = $this.$z;
                                                    var$2.$avail_in = $n;
                                                    var$2.$total_in = Long_add(var$2.$total_in, Long_fromInt($p - var$2.$next_in_index | 0));
                                                    var$2.$next_in_index = $p;
                                                    $this.$write0 = $q;
                                                    return cjj_InfBlocks_inflate_flush($this, (-2));
                                            }
                                            while ($k < 32) {
                                                if (!$n) {
                                                    $this.$bitb = $b;
                                                    $this.$bitk = $k;
                                                    var$2 = $this.$z;
                                                    var$2.$avail_in = $n;
                                                    var$2.$total_in = Long_add(var$2.$total_in, Long_fromInt($p - var$2.$next_in_index | 0));
                                                    var$2.$next_in_index = $p;
                                                    $this.$write0 = $q;
                                                    return cjj_InfBlocks_inflate_flush($this, $r);
                                                }
                                                $r = 0;
                                                $n = $n + (-1) | 0;
                                                var$10 = $this.$z.$next_in.data;
                                                var$8 = $p + 1 | 0;
                                                $b = $b | (var$10[$p] & 255) << $k;
                                                $k = $k + 8 | 0;
                                                $p = var$8;
                                            }
                                            var$8 = (($b ^ (-1)) >>> 16 | 0) & 65535;
                                            $i = $b & 65535;
                                            if (var$8 != $i) {
                                                $this.$mode0 = 9;
                                                var$2 = $this.$z;
                                                var$2.$msg = $rt_s(172);
                                                $this.$bitb = $b;
                                                $this.$bitk = $k;
                                                var$2.$avail_in = $n;
                                                var$2.$total_in = Long_add(var$2.$total_in, Long_fromInt($p - var$2.$next_in_index | 0));
                                                var$2.$next_in_index = $p;
                                                $this.$write0 = $q;
                                                return cjj_InfBlocks_inflate_flush($this, (-3));
                                            }
                                            $this.$left = $i;
                                            $k = 0;
                                            $this.$mode0 = $i ? 2 : !$this.$last ? 0 : 7;
                                            $b = $k;
                                            continue e;
                                        }
                                        while ($k < 3) {
                                            if (!$n) {
                                                $this.$bitb = $b;
                                                $this.$bitk = $k;
                                                var$2 = $this.$z;
                                                var$2.$avail_in = $n;
                                                var$2.$total_in = Long_add(var$2.$total_in, Long_fromInt($p - var$2.$next_in_index | 0));
                                                var$2.$next_in_index = $p;
                                                $this.$write0 = $q;
                                                return cjj_InfBlocks_inflate_flush($this, $r);
                                            }
                                            $r = 0;
                                            $n = $n + (-1) | 0;
                                            var$10 = $this.$z.$next_in.data;
                                            var$8 = $p + 1 | 0;
                                            $b = $b | (var$10[$p] & 255) << $k;
                                            $k = $k + 8 | 0;
                                            $p = var$8;
                                        }
                                        m: {
                                            $t = $b & 7;
                                            $this.$last = $t & 1;
                                            switch ($t >>> 1 | 0) {
                                                case 0:
                                                    var$8 = $b >>> 3 | 0;
                                                    $i = $k + (-3) | 0;
                                                    $c = $i & 7;
                                                    $b = var$8 >>> $c | 0;
                                                    $k = $i - $c | 0;
                                                    $this.$mode0 = 1;
                                                    break m;
                                                case 1:
                                                    cjj_InfTree_inflate_trees_fixed($this.$bl, $this.$bd, $this.$tl, $this.$td, $this.$z);
                                                    cjj_InfCodes_init($this.$codes, $this.$bl.data[0], $this.$bd.data[0], $this.$tl.data[0], 0, $this.$td.data[0], 0);
                                                    $b = $b >>> 3 | 0;
                                                    $k = $k + (-3) | 0;
                                                    $this.$mode0 = 6;
                                                    break m;
                                                case 2:
                                                    $b = $b >>> 3 | 0;
                                                    $k = $k + (-3) | 0;
                                                    $this.$mode0 = 3;
                                                    break m;
                                                case 3:
                                                    $r = $b >>> 3 | 0;
                                                    var$8 = $k + (-3) | 0;
                                                    $this.$mode0 = 9;
                                                    var$2 = $this.$z;
                                                    var$2.$msg = $rt_s(173);
                                                    $this.$bitb = $r;
                                                    $this.$bitk = var$8;
                                                    var$2.$avail_in = $n;
                                                    var$2.$total_in = Long_add(var$2.$total_in, Long_fromInt($p - var$2.$next_in_index | 0));
                                                    var$2.$next_in_index = $p;
                                                    $this.$write0 = $q;
                                                    return cjj_InfBlocks_inflate_flush($this, (-3));
                                                default:
                                            }
                                        }
                                        continue e;
                                    }
                                    while (true) {
                                        var$8 = $this.$index0;
                                        if (var$8 >= (4 + ($this.$table >>> 10 | 0) | 0))
                                            break;
                                        while ($k < 3) {
                                            if (!$n) {
                                                $this.$bitb = $b;
                                                $this.$bitk = $k;
                                                var$2 = $this.$z;
                                                var$2.$avail_in = $n;
                                                var$2.$total_in = Long_add(var$2.$total_in, Long_fromInt($p - var$2.$next_in_index | 0));
                                                var$2.$next_in_index = $p;
                                                $this.$write0 = $q;
                                                return cjj_InfBlocks_inflate_flush($this, $r);
                                            }
                                            $r = 0;
                                            $n = $n + (-1) | 0;
                                            var$10 = $this.$z.$next_in.data;
                                            $i = $p + 1 | 0;
                                            $b = $b | (var$10[$p] & 255) << $k;
                                            $k = $k + 8 | 0;
                                            $p = $i;
                                        }
                                        var$14 = $this.$blens.data;
                                        var$10 = cjj_InfBlocks_border.data;
                                        $this.$index0 = var$8 + 1 | 0;
                                        var$14[var$10[var$8]] = $b & 7;
                                        $b = $b >>> 3 | 0;
                                        $k = $k + (-3) | 0;
                                    }
                                    while (true) {
                                        var$8 = $this.$index0;
                                        if (var$8 >= 19)
                                            break;
                                        var$14 = $this.$blens.data;
                                        var$10 = cjj_InfBlocks_border.data;
                                        $this.$index0 = var$8 + 1 | 0;
                                        var$14[var$10[var$8]] = 0;
                                    }
                                    var$10 = $this.$bb;
                                    var$10.data[0] = 7;
                                    var$8 = cjj_InfTree_inflate_trees_bits($this.$inftree, $this.$blens, var$10, $this.$tb, $this.$hufts, $this.$z);
                                    if (var$8) {
                                        if (var$8 == (-3)) {
                                            $this.$blens = null;
                                            $this.$mode0 = 9;
                                        }
                                        $this.$bitb = $b;
                                        $this.$bitk = $k;
                                        var$2 = $this.$z;
                                        var$2.$avail_in = $n;
                                        var$2.$total_in = Long_add(var$2.$total_in, Long_fromInt($p - var$2.$next_in_index | 0));
                                        var$2.$next_in_index = $p;
                                        $this.$write0 = $q;
                                        return cjj_InfBlocks_inflate_flush($this, var$8);
                                    }
                                    $this.$index0 = 0;
                                    $this.$mode0 = 5;
                                }
                                while (true) {
                                    var$8 = $this.$table;
                                    $i = $this.$index0;
                                    $c = var$8 & 31;
                                    $m = 258 + $c | 0;
                                    var$8 = var$8 >> 5 & 31;
                                    $m = $m + var$8 | 0;
                                    if ($i >= $m)
                                        break;
                                    $t = $this.$bb.data[0];
                                    while ($k < $t) {
                                        if (!$n) {
                                            $this.$bitb = $b;
                                            $this.$bitk = $k;
                                            var$2 = $this.$z;
                                            var$2.$avail_in = $n;
                                            var$2.$total_in = Long_add(var$2.$total_in, Long_fromInt($p - var$2.$next_in_index | 0));
                                            var$2.$next_in_index = $p;
                                            $this.$write0 = $q;
                                            return cjj_InfBlocks_inflate_flush($this, $r);
                                        }
                                        $r = 0;
                                        $n = $n + (-1) | 0;
                                        var$10 = $this.$z.$next_in.data;
                                        var$8 = $p + 1 | 0;
                                        $b = $b | (var$10[$p] & 255) << $k;
                                        $k = $k + 8 | 0;
                                        $p = var$8;
                                    }
                                    var$10 = $this.$tb.data;
                                    var$15 = $this.$hufts.data;
                                    var$8 = var$10[0];
                                    var$14 = cjj_InfBlocks_inflate_mask.data;
                                    var$16 = var$15[((var$8 + ($b & var$14[$t]) | 0) * 3 | 0) + 1 | 0];
                                    $c = var$15[((var$10[0] + ($b & var$14[var$16]) | 0) * 3 | 0) + 2 | 0];
                                    $t = $rt_compare($c, 16);
                                    if ($t < 0) {
                                        $b = $b >>> var$16 | 0;
                                        $k = $k - var$16 | 0;
                                        var$10 = $this.$blens.data;
                                        $this.$index0 = $i + 1 | 0;
                                        var$10[$i] = $c;
                                    } else {
                                        var$8 = $rt_compare($c, 18);
                                        $i_0 = !var$8 ? 7 : $c - 14 | 0;
                                        $j = var$8 ? 3 : 11;
                                        while ($k < (var$16 + $i_0 | 0)) {
                                            if (!$n) {
                                                $this.$bitb = $b;
                                                $this.$bitk = $k;
                                                var$2 = $this.$z;
                                                var$2.$avail_in = $n;
                                                var$2.$total_in = Long_add(var$2.$total_in, Long_fromInt($p - var$2.$next_in_index | 0));
                                                var$2.$next_in_index = $p;
                                                $this.$write0 = $q;
                                                return cjj_InfBlocks_inflate_flush($this, $r);
                                            }
                                            $r = 0;
                                            $n = $n + (-1) | 0;
                                            var$10 = $this.$z.$next_in.data;
                                            var$8 = $p + 1 | 0;
                                            $b = $b | (var$10[$p] & 255) << $k;
                                            $k = $k + 8 | 0;
                                            $p = var$8;
                                        }
                                        $c = $b >>> var$16 | 0;
                                        $k = $k - var$16 | 0;
                                        var$8 = $j + ($c & var$14[$i_0]) | 0;
                                        $b = $c >>> $i_0 | 0;
                                        $k = $k - $i_0 | 0;
                                        if (($i + var$8 | 0) > $m)
                                            break c;
                                        if (!$t && $i < 1)
                                            break c;
                                        $m = $t ? 0 : $this.$blens.data[$i - 1 | 0];
                                        while (true) {
                                            var$10 = $this.$blens.data;
                                            $c = $i + 1 | 0;
                                            var$10[$i] = $m;
                                            var$8 = var$8 + (-1) | 0;
                                            if (!var$8)
                                                break;
                                            $i = $c;
                                        }
                                        $this.$index0 = $c;
                                    }
                                }
                                $this.$tb.data[0] = (-1);
                                var$10 = $this.$bl;
                                var$10.data[0] = 9;
                                var$14 = $this.$bd;
                                var$14.data[0] = 6;
                                var$8 = cjj_InfTree_inflate_trees_dynamic($this.$inftree, 257 + $c | 0, 1 + var$8 | 0, $this.$blens, var$10, var$14, $this.$tli, $this.$tdi, $this.$hufts, $this.$z);
                                if (var$8) {
                                    if (var$8 == (-3)) {
                                        $this.$blens = null;
                                        $this.$mode0 = 9;
                                    }
                                    $this.$bitb = $b;
                                    $this.$bitk = $k;
                                    var$2 = $this.$z;
                                    var$2.$avail_in = $n;
                                    var$2.$total_in = Long_add(var$2.$total_in, Long_fromInt($p - var$2.$next_in_index | 0));
                                    var$2.$next_in_index = $p;
                                    $this.$write0 = $q;
                                    return cjj_InfBlocks_inflate_flush($this, var$8);
                                }
                                var$2 = $this.$codes;
                                var$8 = $this.$bl.data[0];
                                $i = $this.$bd.data[0];
                                var$10 = $this.$hufts;
                                cjj_InfCodes_init(var$2, var$8, $i, var$10, $this.$tli.data[0], var$10, $this.$tdi.data[0]);
                                $this.$mode0 = 6;
                            }
                            $this.$bitb = $b;
                            $this.$bitk = $k;
                            var$2 = $this.$z;
                            var$2.$avail_in = $n;
                            var$2.$total_in = Long_add(var$2.$total_in, Long_fromInt($p - var$2.$next_in_index | 0));
                            var$2.$next_in_index = $p;
                            $this.$write0 = $q;
                            $r = cjj_InfCodes_proc($this.$codes, $r);
                            if ($r != 1)
                                break e;
                            $r = 0;
                            cjj_InfCodes_free($this.$codes, $this.$z);
                            var$2 = $this.$z;
                            $p = var$2.$next_in_index;
                            $n = var$2.$avail_in;
                            $b = $this.$bitb;
                            $k = $this.$bitk;
                            $q = $this.$write0;
                            var$8 = $this.$read2;
                            $m = $q >= var$8 ? $this.$end1 - $q | 0 : (var$8 - $q | 0) - 1 | 0;
                            if ($this.$last) {
                                $this.$mode0 = 7;
                                break b;
                            }
                            $this.$mode0 = 0;
                            continue e;
                        }
                        if (!$n) {
                            $this.$bitb = $b;
                            $this.$bitk = $k;
                            var$2 = $this.$z;
                            var$2.$avail_in = $n;
                            var$2.$total_in = Long_add(var$2.$total_in, Long_fromInt($p - var$2.$next_in_index | 0));
                            var$2.$next_in_index = $p;
                            $this.$write0 = $q;
                            return cjj_InfBlocks_inflate_flush($this, $r);
                        }
                        if (!$m) {
                            $c = $this.$end1;
                            if ($q == $c) {
                                var$8 = $this.$read2;
                                if (var$8) {
                                    $q = 0;
                                    $m = $q >= var$8 ? $c - $q | 0 : (var$8 - $q | 0) - 1 | 0;
                                }
                            }
                            if (!$m) {
                                $this.$write0 = $q;
                                $i = cjj_InfBlocks_inflate_flush($this, $r);
                                $q = $this.$write0;
                                var$8 = $this.$read2;
                                $m = $q >= var$8 ? $this.$end1 - $q | 0 : (var$8 - $q | 0) - 1 | 0;
                                $c = $this.$end1;
                                if ($q == $c && var$8) {
                                    $q = 0;
                                    $m = $q >= var$8 ? $c - $q | 0 : (var$8 - $q | 0) - 1 | 0;
                                }
                                if (!$m) {
                                    $this.$bitb = $b;
                                    $this.$bitk = $k;
                                    var$2 = $this.$z;
                                    var$2.$avail_in = $n;
                                    var$2.$total_in = Long_add(var$2.$total_in, Long_fromInt($p - var$2.$next_in_index | 0));
                                    var$2.$next_in_index = $p;
                                    $this.$write0 = $q;
                                    return cjj_InfBlocks_inflate_flush($this, $i);
                                }
                            }
                        }
                        $r = 0;
                        var$8 = $this.$left;
                        if (var$8 > $n)
                            var$8 = $n;
                        if (var$8 > $m)
                            var$8 = $m;
                        jl_System_fastArraycopy($this.$z.$next_in, $p, $this.$window, $q, var$8);
                        $p = $p + var$8 | 0;
                        $n = $n - var$8 | 0;
                        $q = $q + var$8 | 0;
                        $m = $m - var$8 | 0;
                        var$8 = $this.$left - var$8 | 0;
                        $this.$left = var$8;
                        if (var$8)
                            continue;
                        $this.$mode0 = !$this.$last ? 0 : 7;
                    }
                    return cjj_InfBlocks_inflate_flush($this, $r);
                }
                $this.$mode0 = 9;
                var$2 = $this.$z;
                var$2.$msg = $rt_s(174);
                $this.$bitb = $b;
                $this.$bitk = $k;
                var$2.$avail_in = $n;
                var$2.$total_in = Long_add(var$2.$total_in, Long_fromInt($p - var$2.$next_in_index | 0));
                var$2.$next_in_index = $p;
                $this.$write0 = $q;
                return cjj_InfBlocks_inflate_flush($this, (-3));
            }
            $this.$blens = null;
            $this.$mode0 = 9;
            var$2 = $this.$z;
            var$2.$msg = $rt_s(175);
            $this.$bitb = $b;
            $this.$bitk = $k;
            var$2.$avail_in = $n;
            var$2.$total_in = Long_add(var$2.$total_in, Long_fromInt($p - var$2.$next_in_index | 0));
            var$2.$next_in_index = $p;
            $this.$write0 = $q;
            return cjj_InfBlocks_inflate_flush($this, (-3));
        }
        $this.$write0 = $q;
        $r = cjj_InfBlocks_inflate_flush($this, $r);
        $q = $this.$write0;
        var$8 = $this.$read2;
        if (var$8 != $q) {
            $this.$bitb = $b;
            $this.$bitk = $k;
            var$2 = $this.$z;
            var$2.$avail_in = $n;
            var$2.$total_in = Long_add(var$2.$total_in, Long_fromInt($p - var$2.$next_in_index | 0));
            var$2.$next_in_index = $p;
            $this.$write0 = $q;
            return cjj_InfBlocks_inflate_flush($this, $r);
        }
        $this.$mode0 = 8;
    }
    $this.$bitb = $b;
    $this.$bitk = $k;
    var$2 = $this.$z;
    var$2.$avail_in = $n;
    var$2.$total_in = Long_add(var$2.$total_in, Long_fromInt($p - var$2.$next_in_index | 0));
    var$2.$next_in_index = $p;
    $this.$write0 = $q;
    return cjj_InfBlocks_inflate_flush($this, 1);
},
cjj_InfBlocks_free = $this => {
    cjj_InfBlocks_reset($this);
    $this.$window = null;
    $this.$hufts = null;
},
cjj_InfBlocks_inflate_flush = ($this, $r) => {
    let var$2, $p, $q, var$5, $n, var$7;
    var$2 = $this.$z;
    $p = var$2.$next_out_index;
    $q = $this.$read2;
    var$5 = $this.$write0;
    if ($q > var$5)
        var$5 = $this.$end1;
    $n = var$5 - $q | 0;
    var$5 = var$2.$avail_out;
    if ($n > var$5)
        $n = var$5;
    if ($n && $r == (-5))
        $r = 0;
    var$2.$avail_out = var$5 - $n | 0;
    var$2.$total_out = Long_add(var$2.$total_out, Long_fromInt($n));
    if ($this.$check && $n > 0)
        var$2.$adler.$update($this.$window, $q, $n);
    jl_System_fastArraycopy($this.$window, $q, $this.$z.$next_out, $p, $n);
    var$5 = $p + $n | 0;
    var$7 = $q + $n | 0;
    $p = $this.$end1;
    if (var$7 == $p) {
        if ($this.$write0 == $p)
            $this.$write0 = 0;
        $p = $this.$write0 - 0 | 0;
        var$2 = $this.$z;
        $q = var$2.$avail_out;
        if ($p > $q)
            $p = $q;
        if ($p && $r == (-5))
            $r = 0;
        var$2.$avail_out = $q - $p | 0;
        var$2.$total_out = Long_add(var$2.$total_out, Long_fromInt($p));
        if ($this.$check && $p > 0)
            var$2.$adler.$update($this.$window, 0, $p);
        jl_System_fastArraycopy($this.$window, 0, $this.$z.$next_out, var$5, $p);
        var$5 = var$5 + $p | 0;
        var$7 = 0 + $p | 0;
    }
    $this.$z.$next_out_index = var$5;
    $this.$read2 = var$7;
    return $r;
},
cjj_InfBlocks__clinit_ = () => {
    cjj_InfBlocks_inflate_mask = $rt_createIntArrayFromData([0, 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767, 65535]);
    cjj_InfBlocks_border = $rt_createIntArrayFromData([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
},
jur_MatchResult = $rt_classWithoutFields(0);
function jur_Matcher() {
    let a = this; jl_Object.call(a);
    a.$pat = null;
    a.$start3 = null;
    a.$string0 = null;
    a.$matchResult = null;
    a.$leftBound0 = 0;
    a.$rightBound0 = 0;
    a.$appendPos = 0;
    a.$replacement0 = null;
    a.$processedRepl = null;
    a.$replacementParts = null;
}
let jur_Matcher_appendReplacement = ($this, $buffer, $replacement) => {
    $this.$processedRepl = jur_Matcher_processReplacement($this, $replacement);
    jl_AbstractStringBuilder_append1($buffer, jl_String_substring($this.$string0, $this.$appendPos, jur_Matcher_start($this)));
    jl_AbstractStringBuilder_append0($buffer, $this.$processedRepl);
    $this.$appendPos = jur_Matcher_end($this);
    return $this;
},
jur_Matcher_processReplacement = ($this, $replacement) => {
    let $res, $sb, $i, $repl, $index, $replacementPos, $nextBackSlashed, var$9, $group, $gr, $$je;
    $res = $this.$replacement0;
    if ($res !== null && jl_String_equals($res, $replacement)) {
        if ($this.$replacementParts === null)
            return $this.$processedRepl;
        $sb = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($sb);
        $i = 0;
        while (true) {
            $replacement = $this.$replacementParts;
            if ($i >= $replacement.$size0)
                break;
            jl_StringBuilder_append($sb, ju_ArrayList_get($replacement, $i));
            $i = $i + 1 | 0;
        }
        return jl_AbstractStringBuilder_toString($sb);
    }
    $this.$replacement0 = $replacement;
    $repl = jl_String_toCharArray($replacement);
    $res = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($res);
    $this.$replacementParts = null;
    $index = 0;
    $replacementPos = 0;
    $nextBackSlashed = 0;
    a: {
        b: while (true) {
            var$9 = $repl.data;
            $i = var$9.length;
            if ($index >= $i) {
                $group = $this.$replacementParts;
                if ($group !== null) {
                    $gr = $res.$length0;
                    if ($replacementPos != $gr)
                        ju_ArrayList_add($group, jl_StringBuilder_substring($res, $replacementPos, $gr));
                }
                return jl_AbstractStringBuilder_toString($res);
            }
            if (var$9[$index] == 92 && !$nextBackSlashed) {
                $nextBackSlashed = 1;
                $index = $index + 1 | 0;
            }
            c: {
                if ($nextBackSlashed) {
                    if ($index >= $i)
                        break b;
                    jl_AbstractStringBuilder_append($res, var$9[$index]);
                    $nextBackSlashed = 0;
                } else if (var$9[$index] != 36)
                    jl_AbstractStringBuilder_append($res, var$9[$index]);
                else {
                    if ($this.$replacementParts === null)
                        $this.$replacementParts = ju_ArrayList__init_();
                    d: {
                        try {
                            $replacement = new jl_String;
                            $index = $index + 1 | 0;
                            jl_String__init_4($replacement, $repl, $index, 1);
                            $gr = jl_Integer_parseInt0($replacement);
                            if ($replacementPos == jl_StringBuilder_length($res))
                                break d;
                            ju_ArrayList_add($this.$replacementParts, jl_StringBuilder_subSequence($res, $replacementPos, jl_StringBuilder_length($res)));
                            $replacementPos = jl_StringBuilder_length($res);
                            break d;
                        } catch ($$e) {
                            $$je = $rt_wrapException($$e);
                            if ($$je instanceof jl_Exception) {
                                break a;
                            } else {
                                throw $$e;
                            }
                        }
                    }
                    try {
                        ju_ArrayList_add($this.$replacementParts, jur_Matcher$1__init_0($this, $gr));
                        $group = jur_Matcher_group($this, $gr);
                        $replacementPos = $replacementPos + jl_String_length($group) | 0;
                        jl_StringBuilder_append2($res, $group);
                        break c;
                    } catch ($$e) {
                        $$je = $rt_wrapException($$e);
                        if ($$je instanceof jl_Exception) {
                            break a;
                        } else {
                            throw $$e;
                        }
                    }
                }
            }
            $index = $index + 1 | 0;
        }
        $replacement = new jl_IndexOutOfBoundsException;
        jl_Throwable__init_($replacement);
        $rt_throw($replacement);
    }
    $replacement = new jl_IllegalArgumentException;
    jl_Throwable__init_0($replacement, $rt_s(2));
    $rt_throw($replacement);
},
jur_Matcher_reset = $this => {
    let var$1;
    $this.$leftBound0 = 0;
    var$1 = $this.$string0.$nativeString.length;
    $this.$rightBound0 = var$1;
    jur_MatchResultImpl_reset($this.$matchResult, $this.$string0, $this.$leftBound0, var$1);
    $this.$appendPos = 0;
    $this.$replacement0 = null;
    $this.$matchResult.$previousMatch = (-1);
    return $this;
},
jur_Matcher_appendTail = ($this, $buffer) => {
    let var$2;
    var$2 = $this.$string0;
    jl_AbstractStringBuilder_append1($buffer, jl_String_substring(var$2, $this.$appendPos, var$2.$nativeString.length));
    return $buffer;
},
jur_Matcher_group = ($this, $group) => {
    let var$2;
    var$2 = $this.$matchResult;
    return jur_MatchResultImpl_start(var$2, $group) < 0 ? null : jl_String_substring(var$2.$string3, jur_MatchResultImpl_start(var$2, $group), jur_MatchResultImpl_end0(var$2, $group));
},
jur_Matcher_find0 = ($this, $start) => {
    let $stringLength, var$3;
    $stringLength = $this.$string0.$nativeString.length;
    if ($start >= 0 && $start <= $stringLength) {
        jur_MatchResultImpl_reset0($this.$matchResult);
        var$3 = $this.$matchResult;
        var$3.$mode3 = 1;
        jur_MatchResultImpl_setStartIndex(var$3, $start);
        $start = $this.$start3.$find0($start, $this.$string0, $this.$matchResult);
        if ($start == (-1))
            $this.$matchResult.$hitEnd = 1;
        if ($start >= 0) {
            var$3 = $this.$matchResult;
            if (var$3.$valid) {
                jur_MatchResultImpl_finalizeMatch(var$3);
                return 1;
            }
        }
        $this.$matchResult.$startIndex = (-1);
        return 0;
    }
    var$3 = new jl_IndexOutOfBoundsException;
    jl_Throwable__init_0(var$3, jl_String_valueOf($start));
    $rt_throw(var$3);
},
jur_Matcher_find = $this => {
    let $length, var$2, var$3;
    $length = $this.$string0.$nativeString.length;
    var$2 = $this.$matchResult;
    if (!var$2.$transparentBounds)
        $length = $this.$rightBound0;
    if (var$2.$startIndex >= 0 && var$2.$mode3 == 1) {
        var$2.$startIndex = jur_MatchResultImpl_end(var$2);
        if (jur_MatchResultImpl_end($this.$matchResult) == jur_MatchResultImpl_start($this.$matchResult, 0)) {
            var$2 = $this.$matchResult;
            var$2.$startIndex = var$2.$startIndex + 1 | 0;
        }
        var$3 = $this.$matchResult.$startIndex;
        return var$3 <= $length && jur_Matcher_find0($this, var$3) ? 1 : 0;
    }
    return jur_Matcher_find0($this, $this.$leftBound0);
},
jur_Matcher_matches = $this => {
    let var$1, var$2, var$3, var$4;
    var$1 = $this.$leftBound0;
    jur_MatchResultImpl_reset0($this.$matchResult);
    var$2 = $this.$matchResult;
    var$2.$mode3 = 2;
    jur_MatchResultImpl_setStartIndex(var$2, var$1);
    var$2 = $this.$start3;
    var$3 = $this.$matchResult;
    if (var$2.$matches1(var$1, $this.$string0, var$3) < 0)
        var$4 = 0;
    else {
        jur_MatchResultImpl_finalizeMatch(var$3);
        var$4 = 1;
    }
    return var$4;
},
jur_Matcher_start = $this => {
    return jur_MatchResultImpl_start($this.$matchResult, 0);
},
jur_Matcher_end = $this => {
    return jur_MatchResultImpl_end0($this.$matchResult, 0);
},
ji_EOFException = $rt_classWithoutFields(ji_IOException),
ji_EOFException__init_0 = $this => {
    jl_Throwable__init_($this);
},
ji_EOFException__init_ = () => {
    let var_0 = new ji_EOFException();
    ji_EOFException__init_0(var_0);
    return var_0;
};
function cjj_InfTree() {
    let a = this; jl_Object.call(a);
    a.$hn = null;
    a.$v = null;
    a.$c = null;
    a.$r0 = null;
    a.$u = null;
    a.$x = null;
}
let cjj_InfTree_fixed_tl = null,
cjj_InfTree_fixed_td = null,
cjj_InfTree_cplens = null,
cjj_InfTree_cplext = null,
cjj_InfTree_cpdist = null,
cjj_InfTree_cpdext = null,
cjj_InfTree_huft_build = ($this, $b, $bindex, $n, $s, $d, $e, $t, $m, $hp, $hn, $v) => {
    let $p, $i, var$14, var$15, $a, $l, $j, $y, $xp, $mask, $w, $f, var$24, var$25, $h, $q, $z, $a_0;
    $p = 0;
    $i = $n;
    while (true) {
        var$14 = $b.data;
        var$15 = $this.$c.data;
        $a = var$14[$bindex + $p | 0];
        var$15[$a] = var$15[$a] + 1 | 0;
        $p = $p + 1 | 0;
        $i = $i + (-1) | 0;
        if (!$i)
            break;
    }
    if (var$15[0] == $n) {
        $b = $t.data;
        $d = $m.data;
        $b[0] = (-1);
        $d[0] = 0;
        return 0;
    }
    $b = $m.data;
    $l = $b[0];
    $j = 1;
    a: {
        while (true) {
            if ($j > 15)
                break a;
            if (var$15[$j])
                break;
            $j = $j + 1 | 0;
        }
    }
    if ($l < $j)
        $l = $j;
    $p = 15;
    b: {
        while (true) {
            if (!$p)
                break b;
            if (var$15[$p])
                break;
            $p = $p + (-1) | 0;
        }
    }
    if ($l > $p)
        $l = $p;
    $b[0] = $l;
    $y = 1 << $j;
    $xp = $j;
    while (true) {
        if ($xp >= $p) {
            $i = $y - var$15[$p] | 0;
            if ($i < 0)
                return (-3);
            var$15[$p] = var$15[$p] + $i | 0;
            $b = $this.$x.data;
            $mask = 0;
            $b[1] = $mask;
            $w = 1;
            $xp = 2;
            $f = $p;
            while (true) {
                $f = $f + (-1) | 0;
                if (!$f)
                    break;
                $mask = $mask + var$15[$w] | 0;
                $b[$xp] = $mask;
                $xp = $xp + 1 | 0;
                $w = $w + 1 | 0;
            }
            $a = 0;
            $xp = 0;
            while (true) {
                $f = var$14[$bindex + $xp | 0];
                if ($f) {
                    $m = $v.data;
                    $w = $b[$f];
                    $b[$f] = $w + 1 | 0;
                    $m[$w] = $a;
                }
                $xp = $xp + 1 | 0;
                $a = $a + 1 | 0;
                if ($a >= $n)
                    break;
            }
            $xp = $b[$p];
            var$24 = 0;
            $b[0] = var$24;
            var$25 = 0;
            $h = (-1);
            $w =  -$l | 0;
            $this.$u.data[0] = 0;
            $q = 0;
            $z = 0;
            c: while (true) {
                if ($j > $p)
                    return $i && $p != 1 ? (-5) : 0;
                $a = $this.$c.data[$j];
                while (true) {
                    $a_0 = $a + (-1) | 0;
                    if (!$a)
                        break;
                    $y = $a_0 + 1 | 0;
                    while (true) {
                        $f = $w + $l | 0;
                        if ($j <= $f)
                            break;
                        $h = $h + 1 | 0;
                        $mask = $p - $f | 0;
                        if ($mask > $l)
                            $mask = $l;
                        d: {
                            $w = $j - $f | 0;
                            $bindex = 1 << $w;
                            if ($bindex > $y) {
                                $bindex = $bindex - $y | 0;
                                if ($w < $mask) {
                                    $n = $j;
                                    while (true) {
                                        $w = $w + 1 | 0;
                                        if ($w >= $mask)
                                            break;
                                        $bindex = $bindex << 1;
                                        $b = $this.$c.data;
                                        $n = $n + 1 | 0;
                                        if ($bindex <= $b[$n])
                                            break d;
                                        $bindex = $bindex - $b[$n] | 0;
                                    }
                                }
                            }
                        }
                        $m = $hn.data;
                        $z = 1 << $w;
                        if (($m[0] + $z | 0) > 1440)
                            break c;
                        $b = $this.$u.data;
                        $q = $m[0];
                        $b[$h] = $q;
                        $m[0] = $m[0] + $z | 0;
                        if (!$h) {
                            $t.data[0] = $q;
                            $w = $f;
                            continue;
                        }
                        $this.$x.data[$h] = var$24;
                        $m = $this.$r0;
                        var$15 = $m.data;
                        var$15[0] = $w << 24 >> 24;
                        var$15[1] = $l << 24 >> 24;
                        $mask = var$24 >>> ($f - $l | 0) | 0;
                        $n = $h - 1 | 0;
                        var$15[2] = ($q - $b[$n] | 0) - $mask | 0;
                        jl_System_fastArraycopy($m, 0, $hp, ($b[$n] + $mask | 0) * 3 | 0, 3);
                        $w = $f;
                    }
                    var$15 = $this.$r0.data;
                    $f = $j - $w | 0;
                    var$15[1] = $f << 24 >> 24;
                    if (var$25 >= $xp)
                        var$15[0] = 192;
                    else {
                        var$14 = $v.data;
                        if (var$14[var$25] >= $s) {
                            $b = $e.data;
                            $m = $d.data;
                            var$15[0] = (($b[var$14[var$25] - $s | 0] + 16 | 0) + 64 | 0) << 24 >> 24;
                            $n = var$25 + 1 | 0;
                            var$15[2] = $m[var$14[var$25] - $s | 0];
                            var$25 = $n;
                        } else {
                            var$15[0] = (var$14[var$25] >= 256 ? 96 : 0) << 24 >> 24;
                            $n = var$25 + 1 | 0;
                            var$15[2] = var$14[var$25];
                            var$25 = $n;
                        }
                    }
                    $f = 1 << $f;
                    $bindex = var$24 >>> $w | 0;
                    while ($bindex < $z) {
                        jl_System_fastArraycopy($this.$r0, 0, $hp, ($q + $bindex | 0) * 3 | 0, 3);
                        $bindex = $bindex + $f | 0;
                    }
                    $bindex = 1 << ($j - 1 | 0);
                    while (var$24 & $bindex) {
                        var$24 = var$24 ^ $bindex;
                        $bindex = $bindex >>> 1 | 0;
                    }
                    var$24 = var$24 ^ $bindex;
                    $mask = (1 << $w) - 1 | 0;
                    while ((var$24 & $mask) != $this.$x.data[$h]) {
                        $h = $h + (-1) | 0;
                        $w = $w - $l | 0;
                        $mask = (1 << $w) - 1 | 0;
                    }
                    $a = $a_0;
                }
                $j = $j + 1 | 0;
            }
            return (-3);
        }
        $a = $y - var$15[$xp] | 0;
        if ($a < 0)
            break;
        $xp = $xp + 1 | 0;
        $y = $a << 1;
    }
    return (-3);
},
cjj_InfTree_inflate_trees_bits = ($this, $c, $bb, $tb, $hp, $z) => {
    let var$6, $result;
    cjj_InfTree_initWorkArea($this, 19);
    var$6 = $this.$hn;
    var$6.data[0] = 0;
    $result = cjj_InfTree_huft_build($this, $c, 0, 19, 19, null, null, $tb, $bb, $hp, var$6, $this.$v);
    if ($result == (-3))
        $z.$msg = $rt_s(176);
    else if (!($result != (-5) && $bb.data[0])) {
        $z.$msg = $rt_s(177);
        $result = (-3);
    }
    return $result;
},
cjj_InfTree_inflate_trees_dynamic = ($this, $nl, $nd, $c, $bl, $bd, $tl, $td, $hp, $z) => {
    let var$10, $result;
    cjj_InfTree_initWorkArea($this, 288);
    var$10 = $this.$hn;
    var$10.data[0] = 0;
    $result = cjj_InfTree_huft_build($this, $c, 0, $nl, 257, cjj_InfTree_cplens, cjj_InfTree_cplext, $tl, $bl, $hp, var$10, $this.$v);
    if (!$result && $bl.data[0]) {
        cjj_InfTree_initWorkArea($this, 288);
        $nd = cjj_InfTree_huft_build($this, $c, $nl, $nd, 0, cjj_InfTree_cpdist, cjj_InfTree_cpdext, $td, $bd, $hp, $this.$hn, $this.$v);
        if (!$nd && !(!$bd.data[0] && $nl > 257))
            return 0;
        if ($nd == (-3))
            $z.$msg = $rt_s(178);
        else if ($nd == (-5)) {
            $z.$msg = $rt_s(179);
            $nd = (-3);
        } else if ($nd != (-4)) {
            $z.$msg = $rt_s(180);
            $nd = (-3);
        }
        return $nd;
    }
    if ($result == (-3))
        $z.$msg = $rt_s(181);
    else if ($result != (-4)) {
        $z.$msg = $rt_s(182);
        $result = (-3);
    }
    return $result;
},
cjj_InfTree_inflate_trees_fixed = ($bl, $bd, $tl, $td, $z) => {
    $td = $td.data;
    $tl = $tl.data;
    $bd = $bd.data;
    $bl.data[0] = 9;
    $bd[0] = 5;
    $tl[0] = cjj_InfTree_fixed_tl;
    $td[0] = cjj_InfTree_fixed_td;
    return 0;
},
cjj_InfTree_initWorkArea = ($this, $vsize) => {
    let $i;
    if ($this.$hn === null) {
        $this.$hn = $rt_createIntArray(1);
        $this.$v = $rt_createIntArray($vsize);
        $this.$c = $rt_createIntArray(16);
        $this.$r0 = $rt_createIntArray(3);
        $this.$u = $rt_createIntArray(15);
        $this.$x = $rt_createIntArray(16);
    }
    if ($this.$v.data.length < $vsize)
        $this.$v = $rt_createIntArray($vsize);
    $i = 0;
    while ($i < $vsize) {
        $this.$v.data[$i] = 0;
        $i = $i + 1 | 0;
    }
    $i = 0;
    while ($i < 16) {
        $this.$c.data[$i] = 0;
        $i = $i + 1 | 0;
    }
    $i = 0;
    while ($i < 3) {
        $this.$r0.data[$i] = 0;
        $i = $i + 1 | 0;
    }
    jl_System_fastArraycopy($this.$c, 0, $this.$u, 0, 15);
    jl_System_fastArraycopy($this.$c, 0, $this.$x, 0, 16);
},
cjj_InfTree__clinit_ = () => {
    cjj_InfTree_fixed_tl = $rt_createIntArrayFromData([96, 7, 256, 0, 8, 80, 0, 8, 16, 84, 8, 115, 82, 7, 31, 0, 8, 112, 0, 8, 48, 0, 9, 192, 80, 7, 10, 0, 8, 96, 0, 8, 32, 0, 9, 160, 0, 8, 0, 0, 8, 128, 0, 8, 64, 0, 9, 224, 80, 7, 6, 0, 8, 88, 0, 8, 24, 0, 9, 144, 83, 7, 59, 0, 8, 120, 0, 8, 56, 0, 9, 208, 81, 7, 17, 0, 8, 104, 0, 8, 40, 0, 9, 176, 0, 8, 8, 0, 8, 136, 0, 8, 72, 0, 9, 240, 80, 7, 4, 0, 8, 84, 0, 8, 20, 85, 8, 227, 83, 7, 43, 0, 8, 116, 0, 8, 52, 0, 9, 200, 81, 7, 13, 0, 8, 100, 0, 8, 36, 0,
    9, 168, 0, 8, 4, 0, 8, 132, 0, 8, 68, 0, 9, 232, 80, 7, 8, 0, 8, 92, 0, 8, 28, 0, 9, 152, 84, 7, 83, 0, 8, 124, 0, 8, 60, 0, 9, 216, 82, 7, 23, 0, 8, 108, 0, 8, 44, 0, 9, 184, 0, 8, 12, 0, 8, 140, 0, 8, 76, 0, 9, 248, 80, 7, 3, 0, 8, 82, 0, 8, 18, 85, 8, 163, 83, 7, 35, 0, 8, 114, 0, 8, 50, 0, 9, 196, 81, 7, 11, 0, 8, 98, 0, 8, 34, 0, 9, 164, 0, 8, 2, 0, 8, 130, 0, 8, 66, 0, 9, 228, 80, 7, 7, 0, 8, 90, 0, 8, 26, 0, 9, 148, 84, 7, 67, 0, 8, 122, 0, 8, 58, 0, 9, 212, 82, 7, 19, 0, 8, 106, 0, 8, 42, 0, 9, 180,
    0, 8, 10, 0, 8, 138, 0, 8, 74, 0, 9, 244, 80, 7, 5, 0, 8, 86, 0, 8, 22, 192, 8, 0, 83, 7, 51, 0, 8, 118, 0, 8, 54, 0, 9, 204, 81, 7, 15, 0, 8, 102, 0, 8, 38, 0, 9, 172, 0, 8, 6, 0, 8, 134, 0, 8, 70, 0, 9, 236, 80, 7, 9, 0, 8, 94, 0, 8, 30, 0, 9, 156, 84, 7, 99, 0, 8, 126, 0, 8, 62, 0, 9, 220, 82, 7, 27, 0, 8, 110, 0, 8, 46, 0, 9, 188, 0, 8, 14, 0, 8, 142, 0, 8, 78, 0, 9, 252, 96, 7, 256, 0, 8, 81, 0, 8, 17, 85, 8, 131, 82, 7, 31, 0, 8, 113, 0, 8, 49, 0, 9, 194, 80, 7, 10, 0, 8, 97, 0, 8, 33, 0, 9, 162, 0,
    8, 1, 0, 8, 129, 0, 8, 65, 0, 9, 226, 80, 7, 6, 0, 8, 89, 0, 8, 25, 0, 9, 146, 83, 7, 59, 0, 8, 121, 0, 8, 57, 0, 9, 210, 81, 7, 17, 0, 8, 105, 0, 8, 41, 0, 9, 178, 0, 8, 9, 0, 8, 137, 0, 8, 73, 0, 9, 242, 80, 7, 4, 0, 8, 85, 0, 8, 21, 80, 8, 258, 83, 7, 43, 0, 8, 117, 0, 8, 53, 0, 9, 202, 81, 7, 13, 0, 8, 101, 0, 8, 37, 0, 9, 170, 0, 8, 5, 0, 8, 133, 0, 8, 69, 0, 9, 234, 80, 7, 8, 0, 8, 93, 0, 8, 29, 0, 9, 154, 84, 7, 83, 0, 8, 125, 0, 8, 61, 0, 9, 218, 82, 7, 23, 0, 8, 109, 0, 8, 45, 0, 9, 186, 0, 8, 13,
    0, 8, 141, 0, 8, 77, 0, 9, 250, 80, 7, 3, 0, 8, 83, 0, 8, 19, 85, 8, 195, 83, 7, 35, 0, 8, 115, 0, 8, 51, 0, 9, 198, 81, 7, 11, 0, 8, 99, 0, 8, 35, 0, 9, 166, 0, 8, 3, 0, 8, 131, 0, 8, 67, 0, 9, 230, 80, 7, 7, 0, 8, 91, 0, 8, 27, 0, 9, 150, 84, 7, 67, 0, 8, 123, 0, 8, 59, 0, 9, 214, 82, 7, 19, 0, 8, 107, 0, 8, 43, 0, 9, 182, 0, 8, 11, 0, 8, 139, 0, 8, 75, 0, 9, 246, 80, 7, 5, 0, 8, 87, 0, 8, 23, 192, 8, 0, 83, 7, 51, 0, 8, 119, 0, 8, 55, 0, 9, 206, 81, 7, 15, 0, 8, 103, 0, 8, 39, 0, 9, 174, 0, 8, 7, 0, 8,
    135, 0, 8, 71, 0, 9, 238, 80, 7, 9, 0, 8, 95, 0, 8, 31, 0, 9, 158, 84, 7, 99, 0, 8, 127, 0, 8, 63, 0, 9, 222, 82, 7, 27, 0, 8, 111, 0, 8, 47, 0, 9, 190, 0, 8, 15, 0, 8, 143, 0, 8, 79, 0, 9, 254, 96, 7, 256, 0, 8, 80, 0, 8, 16, 84, 8, 115, 82, 7, 31, 0, 8, 112, 0, 8, 48, 0, 9, 193, 80, 7, 10, 0, 8, 96, 0, 8, 32, 0, 9, 161, 0, 8, 0, 0, 8, 128, 0, 8, 64, 0, 9, 225, 80, 7, 6, 0, 8, 88, 0, 8, 24, 0, 9, 145, 83, 7, 59, 0, 8, 120, 0, 8, 56, 0, 9, 209, 81, 7, 17, 0, 8, 104, 0, 8, 40, 0, 9, 177, 0, 8, 8, 0, 8, 136,
    0, 8, 72, 0, 9, 241, 80, 7, 4, 0, 8, 84, 0, 8, 20, 85, 8, 227, 83, 7, 43, 0, 8, 116, 0, 8, 52, 0, 9, 201, 81, 7, 13, 0, 8, 100, 0, 8, 36, 0, 9, 169, 0, 8, 4, 0, 8, 132, 0, 8, 68, 0, 9, 233, 80, 7, 8, 0, 8, 92, 0, 8, 28, 0, 9, 153, 84, 7, 83, 0, 8, 124, 0, 8, 60, 0, 9, 217, 82, 7, 23, 0, 8, 108, 0, 8, 44, 0, 9, 185, 0, 8, 12, 0, 8, 140, 0, 8, 76, 0, 9, 249, 80, 7, 3, 0, 8, 82, 0, 8, 18, 85, 8, 163, 83, 7, 35, 0, 8, 114, 0, 8, 50, 0, 9, 197, 81, 7, 11, 0, 8, 98, 0, 8, 34, 0, 9, 165, 0, 8, 2, 0, 8, 130, 0,
    8, 66, 0, 9, 229, 80, 7, 7, 0, 8, 90, 0, 8, 26, 0, 9, 149, 84, 7, 67, 0, 8, 122, 0, 8, 58, 0, 9, 213, 82, 7, 19, 0, 8, 106, 0, 8, 42, 0, 9, 181, 0, 8, 10, 0, 8, 138, 0, 8, 74, 0, 9, 245, 80, 7, 5, 0, 8, 86, 0, 8, 22, 192, 8, 0, 83, 7, 51, 0, 8, 118, 0, 8, 54, 0, 9, 205, 81, 7, 15, 0, 8, 102, 0, 8, 38, 0, 9, 173, 0, 8, 6, 0, 8, 134, 0, 8, 70, 0, 9, 237, 80, 7, 9, 0, 8, 94, 0, 8, 30, 0, 9, 157, 84, 7, 99, 0, 8, 126, 0, 8, 62, 0, 9, 221, 82, 7, 27, 0, 8, 110, 0, 8, 46, 0, 9, 189, 0, 8, 14, 0, 8, 142, 0, 8,
    78, 0, 9, 253, 96, 7, 256, 0, 8, 81, 0, 8, 17, 85, 8, 131, 82, 7, 31, 0, 8, 113, 0, 8, 49, 0, 9, 195, 80, 7, 10, 0, 8, 97, 0, 8, 33, 0, 9, 163, 0, 8, 1, 0, 8, 129, 0, 8, 65, 0, 9, 227, 80, 7, 6, 0, 8, 89, 0, 8, 25, 0, 9, 147, 83, 7, 59, 0, 8, 121, 0, 8, 57, 0, 9, 211, 81, 7, 17, 0, 8, 105, 0, 8, 41, 0, 9, 179, 0, 8, 9, 0, 8, 137, 0, 8, 73, 0, 9, 243, 80, 7, 4, 0, 8, 85, 0, 8, 21, 80, 8, 258, 83, 7, 43, 0, 8, 117, 0, 8, 53, 0, 9, 203, 81, 7, 13, 0, 8, 101, 0, 8, 37, 0, 9, 171, 0, 8, 5, 0, 8, 133, 0, 8, 69,
    0, 9, 235, 80, 7, 8, 0, 8, 93, 0, 8, 29, 0, 9, 155, 84, 7, 83, 0, 8, 125, 0, 8, 61, 0, 9, 219, 82, 7, 23, 0, 8, 109, 0, 8, 45, 0, 9, 187, 0, 8, 13, 0, 8, 141, 0, 8, 77, 0, 9, 251, 80, 7, 3, 0, 8, 83, 0, 8, 19, 85, 8, 195, 83, 7, 35, 0, 8, 115, 0, 8, 51, 0, 9, 199, 81, 7, 11, 0, 8, 99, 0, 8, 35, 0, 9, 167, 0, 8, 3, 0, 8, 131, 0, 8, 67, 0, 9, 231, 80, 7, 7, 0, 8, 91, 0, 8, 27, 0, 9, 151, 84, 7, 67, 0, 8, 123, 0, 8, 59, 0, 9, 215, 82, 7, 19, 0, 8, 107, 0, 8, 43, 0, 9, 183, 0, 8, 11, 0, 8, 139, 0, 8, 75, 0,
    9, 247, 80, 7, 5, 0, 8, 87, 0, 8, 23, 192, 8, 0, 83, 7, 51, 0, 8, 119, 0, 8, 55, 0, 9, 207, 81, 7, 15, 0, 8, 103, 0, 8, 39, 0, 9, 175, 0, 8, 7, 0, 8, 135, 0, 8, 71, 0, 9, 239, 80, 7, 9, 0, 8, 95, 0, 8, 31, 0, 9, 159, 84, 7, 99, 0, 8, 127, 0, 8, 63, 0, 9, 223, 82, 7, 27, 0, 8, 111, 0, 8, 47, 0, 9, 191, 0, 8, 15, 0, 8, 143, 0, 8, 79, 0, 9, 255]);
    cjj_InfTree_fixed_td = $rt_createIntArrayFromData([80, 5, 1, 87, 5, 257, 83, 5, 17, 91, 5, 4097, 81, 5, 5, 89, 5, 1025, 85, 5, 65, 93, 5, 16385, 80, 5, 3, 88, 5, 513, 84, 5, 33, 92, 5, 8193, 82, 5, 9, 90, 5, 2049, 86, 5, 129, 192, 5, 24577, 80, 5, 2, 87, 5, 385, 83, 5, 25, 91, 5, 6145, 81, 5, 7, 89, 5, 1537, 85, 5, 97, 93, 5, 24577, 80, 5, 4, 88, 5, 769, 84, 5, 49, 92, 5, 12289, 82, 5, 13, 90, 5, 3073, 86, 5, 193, 192, 5, 24577]);
    cjj_InfTree_cplens = $rt_createIntArrayFromData([3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0]);
    cjj_InfTree_cplext = $rt_createIntArrayFromData([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 112, 112]);
    cjj_InfTree_cpdist = $rt_createIntArrayFromData([1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577]);
    cjj_InfTree_cpdext = $rt_createIntArrayFromData([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13]);
};
function cjj_InfCodes() {
    let a = this; jl_Object.call(a);
    a.$mode1 = 0;
    a.$len = 0;
    a.$tree = null;
    a.$tree_index = 0;
    a.$need0 = 0;
    a.$lit = 0;
    a.$get7 = 0;
    a.$dist = 0;
    a.$lbits = 0;
    a.$dbits = 0;
    a.$ltree = null;
    a.$ltree_index = 0;
    a.$dtree = null;
    a.$dtree_index = 0;
    a.$z1 = null;
    a.$s = null;
}
let cjj_InfCodes_inflate_mask = null,
cjj_InfCodes_init = ($this, $bl, $bd, $tl, $tl_index, $td, $td_index) => {
    $this.$mode1 = 0;
    $this.$lbits = $bl << 24 >> 24;
    $this.$dbits = $bd << 24 >> 24;
    $this.$ltree = $tl;
    $this.$ltree_index = $tl_index;
    $this.$dtree = $td;
    $this.$dtree_index = $td_index;
    $this.$tree = null;
},
cjj_InfCodes_proc = ($this, $r) => {
    let var$2, var$3, $n, var$5, var$6, $q, $f, $m, var$10, var$11, $j, $tindex, $e;
    var$2 = $this.$z1;
    var$3 = var$2.$next_in_index;
    $n = var$2.$avail_in;
    var$2 = $this.$s;
    var$5 = var$2.$bitb;
    var$6 = var$2.$bitk;
    $q = var$2.$write0;
    $f = var$2.$read2;
    $m = $q >= $f ? var$2.$end1 - $q | 0 : ($f - $q | 0) - 1 | 0;
    a: {
        b: while (true) {
            c: {
                d: {
                    e: {
                        f: {
                            g: {
                                switch ($this.$mode1) {
                                    case 0:
                                        break f;
                                    case 2:
                                        $f = $this.$get7;
                                        while (var$6 < $f) {
                                            if (!$n) {
                                                var$2 = $this.$s;
                                                var$2.$bitb = var$5;
                                                var$2.$bitk = var$6;
                                                var$10 = $this.$z1;
                                                var$10.$avail_in = $n;
                                                var$10.$total_in = Long_add(var$10.$total_in, Long_fromInt(var$3 - var$10.$next_in_index | 0));
                                                var$10.$next_in_index = var$3;
                                                var$2.$write0 = $q;
                                                return cjj_InfBlocks_inflate_flush(var$2, $r);
                                            }
                                            $r = 0;
                                            $n = $n + (-1) | 0;
                                            var$11 = $this.$z1.$next_in.data;
                                            $j = var$3 + 1 | 0;
                                            var$5 = var$5 | (var$11[var$3] & 255) << var$6;
                                            var$6 = var$6 + 8 | 0;
                                            var$3 = $j;
                                        }
                                        $this.$len = $this.$len + (var$5 & cjj_InfCodes_inflate_mask.data[$f]) | 0;
                                        var$5 = var$5 >> $f;
                                        var$6 = var$6 - $f | 0;
                                        $this.$need0 = $this.$dbits;
                                        $this.$tree = $this.$dtree;
                                        $this.$tree_index = $this.$dtree_index;
                                        $this.$mode1 = 3;
                                        break g;
                                    case 4:
                                        $j = $this.$get7;
                                        while (var$6 < $j) {
                                            if (!$n) {
                                                var$2 = $this.$s;
                                                var$2.$bitb = var$5;
                                                var$2.$bitk = var$6;
                                                var$10 = $this.$z1;
                                                var$10.$avail_in = $n;
                                                var$10.$total_in = Long_add(var$10.$total_in, Long_fromInt(var$3 - var$10.$next_in_index | 0));
                                                var$10.$next_in_index = var$3;
                                                var$2.$write0 = $q;
                                                return cjj_InfBlocks_inflate_flush(var$2, $r);
                                            }
                                            $r = 0;
                                            $n = $n + (-1) | 0;
                                            var$11 = $this.$z1.$next_in.data;
                                            $f = var$3 + 1 | 0;
                                            var$5 = var$5 | (var$11[var$3] & 255) << var$6;
                                            var$6 = var$6 + 8 | 0;
                                            var$3 = $f;
                                        }
                                        $this.$dist = $this.$dist + (var$5 & cjj_InfCodes_inflate_mask.data[$j]) | 0;
                                        var$5 = var$5 >> $j;
                                        var$6 = var$6 - $j | 0;
                                        $this.$mode1 = 5;
                                        break c;
                                    case 6:
                                        break d;
                                    case 7:
                                        if (var$6 > 7) {
                                            var$6 = var$6 + (-8) | 0;
                                            $n = $n + 1 | 0;
                                            var$3 = var$3 + (-1) | 0;
                                        }
                                        var$2 = $this.$s;
                                        var$2.$write0 = $q;
                                        $r = cjj_InfBlocks_inflate_flush(var$2, $r);
                                        var$2 = $this.$s;
                                        $q = var$2.$write0;
                                        $f = var$2.$read2;
                                        if ($f != $q) {
                                            var$2.$bitb = var$5;
                                            var$2.$bitk = var$6;
                                            var$10 = $this.$z1;
                                            var$10.$avail_in = $n;
                                            var$10.$total_in = Long_add(var$10.$total_in, Long_fromInt(var$3 - var$10.$next_in_index | 0));
                                            var$10.$next_in_index = var$3;
                                            var$2.$write0 = $q;
                                            return cjj_InfBlocks_inflate_flush(var$2, $r);
                                        }
                                        $this.$mode1 = 8;
                                        break a;
                                    case 9:
                                        var$2 = $this.$s;
                                        var$2.$bitb = var$5;
                                        var$2.$bitk = var$6;
                                        var$10 = $this.$z1;
                                        var$10.$avail_in = $n;
                                        var$10.$total_in = Long_add(var$10.$total_in, Long_fromInt(var$3 - var$10.$next_in_index | 0));
                                        var$10.$next_in_index = var$3;
                                        var$2.$write0 = $q;
                                        return cjj_InfBlocks_inflate_flush(var$2, (-3));
                                    case 1:
                                        break e;
                                    case 3:
                                        break;
                                    case 5:
                                        break c;
                                    case 8:
                                        break a;
                                    default:
                                        var$2 = $this.$s;
                                        var$2.$bitb = var$5;
                                        var$2.$bitk = var$6;
                                        var$10 = $this.$z1;
                                        var$10.$avail_in = $n;
                                        var$10.$total_in = Long_add(var$10.$total_in, Long_fromInt(var$3 - var$10.$next_in_index | 0));
                                        var$10.$next_in_index = var$3;
                                        var$2.$write0 = $q;
                                        return cjj_InfBlocks_inflate_flush(var$2, (-2));
                                }
                            }
                            $f = $this.$need0;
                            while (var$6 < $f) {
                                if (!$n) {
                                    var$2 = $this.$s;
                                    var$2.$bitb = var$5;
                                    var$2.$bitk = var$6;
                                    var$10 = $this.$z1;
                                    var$10.$avail_in = $n;
                                    var$10.$total_in = Long_add(var$10.$total_in, Long_fromInt(var$3 - var$10.$next_in_index | 0));
                                    var$10.$next_in_index = var$3;
                                    var$2.$write0 = $q;
                                    return cjj_InfBlocks_inflate_flush(var$2, $r);
                                }
                                $r = 0;
                                $n = $n + (-1) | 0;
                                var$11 = $this.$z1.$next_in.data;
                                $j = var$3 + 1 | 0;
                                var$5 = var$5 | (var$11[var$3] & 255) << var$6;
                                var$6 = var$6 + 8 | 0;
                                var$3 = $j;
                            }
                            $f = ($this.$tree_index + (var$5 & cjj_InfCodes_inflate_mask.data[$f]) | 0) * 3 | 0;
                            var$11 = $this.$tree.data;
                            $j = $f + 1 | 0;
                            var$5 = var$5 >> var$11[$j];
                            var$6 = var$6 - var$11[$j] | 0;
                            $j = var$11[$f];
                            if ($j & 16) {
                                $this.$get7 = $j & 15;
                                $this.$dist = var$11[$f + 2 | 0];
                                $this.$mode1 = 4;
                                continue b;
                            }
                            if ($j & 64) {
                                $this.$mode1 = 9;
                                var$2 = $this.$z1;
                                var$2.$msg = $rt_s(183);
                                var$10 = $this.$s;
                                var$10.$bitb = var$5;
                                var$10.$bitk = var$6;
                                var$2.$avail_in = $n;
                                var$2.$total_in = Long_add(var$2.$total_in, Long_fromInt(var$3 - var$2.$next_in_index | 0));
                                var$2.$next_in_index = var$3;
                                var$10.$write0 = $q;
                                return cjj_InfBlocks_inflate_flush(var$10, (-3));
                            }
                            $this.$need0 = $j;
                            $this.$tree_index = ($f / 3 | 0) + var$11[$f + 2 | 0] | 0;
                            continue b;
                        }
                        if ($m >= 258 && $n >= 10) {
                            var$2 = $this.$s;
                            var$2.$bitb = var$5;
                            var$2.$bitk = var$6;
                            var$10 = $this.$z1;
                            var$10.$avail_in = $n;
                            var$10.$total_in = Long_add(var$10.$total_in, Long_fromInt(var$3 - var$10.$next_in_index | 0));
                            var$10.$next_in_index = var$3;
                            var$2.$write0 = $q;
                            $r = cjj_InfCodes_inflate_fast($this, $this.$lbits, $this.$dbits, $this.$ltree, $this.$ltree_index, $this.$dtree, $this.$dtree_index, var$2, var$10);
                            var$2 = $this.$z1;
                            var$3 = var$2.$next_in_index;
                            $n = var$2.$avail_in;
                            var$2 = $this.$s;
                            var$5 = var$2.$bitb;
                            var$6 = var$2.$bitk;
                            $q = var$2.$write0;
                            $f = var$2.$read2;
                            $m = $q >= $f ? var$2.$end1 - $q | 0 : ($f - $q | 0) - 1 | 0;
                            if ($r) {
                                $this.$mode1 = $r != 1 ? 9 : 7;
                                continue b;
                            }
                        }
                        $this.$need0 = $this.$lbits;
                        $this.$tree = $this.$ltree;
                        $this.$tree_index = $this.$ltree_index;
                        $this.$mode1 = 1;
                    }
                    $j = $this.$need0;
                    while (var$6 < $j) {
                        if (!$n) {
                            var$2 = $this.$s;
                            var$2.$bitb = var$5;
                            var$2.$bitk = var$6;
                            var$10 = $this.$z1;
                            var$10.$avail_in = $n;
                            var$10.$total_in = Long_add(var$10.$total_in, Long_fromInt(var$3 - var$10.$next_in_index | 0));
                            var$10.$next_in_index = var$3;
                            var$2.$write0 = $q;
                            return cjj_InfBlocks_inflate_flush(var$2, $r);
                        }
                        $r = 0;
                        $n = $n + (-1) | 0;
                        var$11 = $this.$z1.$next_in.data;
                        $f = var$3 + 1 | 0;
                        var$5 = var$5 | (var$11[var$3] & 255) << var$6;
                        var$6 = var$6 + 8 | 0;
                        var$3 = $f;
                    }
                    $tindex = ($this.$tree_index + (var$5 & cjj_InfCodes_inflate_mask.data[$j]) | 0) * 3 | 0;
                    var$11 = $this.$tree.data;
                    $f = $tindex + 1 | 0;
                    var$5 = var$5 >>> var$11[$f] | 0;
                    var$6 = var$6 - var$11[$f] | 0;
                    $e = var$11[$tindex];
                    if (!$e) {
                        $this.$lit = var$11[$tindex + 2 | 0];
                        $this.$mode1 = 6;
                        continue b;
                    }
                    if ($e & 16) {
                        $this.$get7 = $e & 15;
                        $this.$len = var$11[$tindex + 2 | 0];
                        $this.$mode1 = 2;
                        continue b;
                    }
                    if (!($e & 64)) {
                        $this.$need0 = $e;
                        $this.$tree_index = ($tindex / 3 | 0) + var$11[$tindex + 2 | 0] | 0;
                        continue b;
                    }
                    if (!($e & 32)) {
                        $this.$mode1 = 9;
                        var$2 = $this.$z1;
                        var$2.$msg = $rt_s(184);
                        var$10 = $this.$s;
                        var$10.$bitb = var$5;
                        var$10.$bitk = var$6;
                        var$2.$avail_in = $n;
                        var$2.$total_in = Long_add(var$2.$total_in, Long_fromInt(var$3 - var$2.$next_in_index | 0));
                        var$2.$next_in_index = var$3;
                        var$10.$write0 = $q;
                        return cjj_InfBlocks_inflate_flush(var$10, (-3));
                    }
                    $this.$mode1 = 7;
                    continue b;
                }
                if ($m)
                    $f = $q;
                else {
                    var$2 = $this.$s;
                    $j = var$2.$end1;
                    if ($q != $j)
                        $f = $q;
                    else {
                        $tindex = var$2.$read2;
                        if (!$tindex)
                            $f = $q;
                        else {
                            $f = 0;
                            $m = $f >= $tindex ? $j - $f | 0 : ($tindex - $f | 0) - 1 | 0;
                        }
                    }
                    if (!$m) {
                        var$2.$write0 = $f;
                        $r = cjj_InfBlocks_inflate_flush(var$2, $r);
                        var$2 = $this.$s;
                        $f = var$2.$write0;
                        $j = var$2.$read2;
                        $m = $f >= $j ? var$2.$end1 - $f | 0 : ($j - $f | 0) - 1 | 0;
                        $tindex = var$2.$end1;
                        if ($f == $tindex && $j) {
                            $f = 0;
                            $m = $f >= $j ? $tindex - $f | 0 : ($j - $f | 0) - 1 | 0;
                        }
                        if (!$m) {
                            var$2.$bitb = var$5;
                            var$2.$bitk = var$6;
                            var$10 = $this.$z1;
                            var$10.$avail_in = $n;
                            var$10.$total_in = Long_add(var$10.$total_in, Long_fromInt(var$3 - var$10.$next_in_index | 0));
                            var$10.$next_in_index = var$3;
                            var$2.$write0 = $f;
                            return cjj_InfBlocks_inflate_flush(var$2, $r);
                        }
                    }
                }
                $r = 0;
                var$11 = $this.$s.$window.data;
                $q = $f + 1 | 0;
                var$11[$f] = $this.$lit << 24 >> 24;
                $m = $m + (-1) | 0;
                $this.$mode1 = 0;
                continue b;
            }
            $f = $q - $this.$dist | 0;
            while ($f < 0) {
                $f = $f + $this.$s.$end1 | 0;
            }
            while ($this.$len) {
                if ($m)
                    $j = $q;
                else {
                    var$2 = $this.$s;
                    $tindex = var$2.$end1;
                    if ($q != $tindex)
                        $j = $q;
                    else {
                        $e = var$2.$read2;
                        if (!$e)
                            $j = $q;
                        else {
                            $j = 0;
                            $m = $j >= $e ? $tindex - $j | 0 : ($e - $j | 0) - 1 | 0;
                        }
                    }
                    if (!$m) {
                        var$2.$write0 = $j;
                        $r = cjj_InfBlocks_inflate_flush(var$2, $r);
                        var$2 = $this.$s;
                        $j = var$2.$write0;
                        $tindex = var$2.$read2;
                        $m = $j >= $tindex ? var$2.$end1 - $j | 0 : ($tindex - $j | 0) - 1 | 0;
                        $e = var$2.$end1;
                        if ($j == $e && $tindex) {
                            $j = 0;
                            $m = $j >= $tindex ? $e - $j | 0 : ($tindex - $j | 0) - 1 | 0;
                        }
                        if (!$m)
                            break b;
                    }
                }
                var$2 = $this.$s;
                var$11 = var$2.$window.data;
                $q = $j + 1 | 0;
                $tindex = $f + 1 | 0;
                var$11[$j] = var$11[$f];
                $m = $m + (-1) | 0;
                $f = $tindex == var$2.$end1 ? 0 : $tindex;
                $this.$len = $this.$len - 1 | 0;
            }
            $this.$mode1 = 0;
        }
        var$2.$bitb = var$5;
        var$2.$bitk = var$6;
        var$10 = $this.$z1;
        var$10.$avail_in = $n;
        var$10.$total_in = Long_add(var$10.$total_in, Long_fromInt(var$3 - var$10.$next_in_index | 0));
        var$10.$next_in_index = var$3;
        var$2.$write0 = $j;
        return cjj_InfBlocks_inflate_flush(var$2, $r);
    }
    var$2 = $this.$s;
    var$2.$bitb = var$5;
    var$2.$bitk = var$6;
    var$10 = $this.$z1;
    var$10.$avail_in = $n;
    var$10.$total_in = Long_add(var$10.$total_in, Long_fromInt(var$3 - var$10.$next_in_index | 0));
    var$10.$next_in_index = var$3;
    var$2.$write0 = $q;
    return cjj_InfBlocks_inflate_flush(var$2, 1);
},
cjj_InfCodes_free = ($this, $z) => {
    return;
},
cjj_InfCodes_inflate_fast = ($this, $bl, $bd, $tl, $tl_index, $td, $td_index, $s, $z) => {
    let $p, $n, $b, $k, $q, $r, $m, var$16, $ml, $md, var$19, $t, $tp_index_t_3, $d, var$23, $c;
    $p = $z.$next_in_index;
    $n = $z.$avail_in;
    $b = $s.$bitb;
    $k = $s.$bitk;
    $q = $s.$write0;
    $r = $s.$read2;
    $m = $q >= $r ? $s.$end1 - $q | 0 : ($r - $q | 0) - 1 | 0;
    var$16 = cjj_InfCodes_inflate_mask.data;
    $ml = var$16[$bl];
    $md = var$16[$bd];
    while (true) {
        if ($k < 20) {
            $n = $n + (-1) | 0;
            var$16 = $z.$next_in.data;
            $bl = $p + 1 | 0;
            $b = $b | (var$16[$p] & 255) << $k;
            $k = $k + 8 | 0;
            $p = $bl;
            continue;
        }
        a: {
            var$19 = $tl.data;
            $t = $b & $ml;
            $tp_index_t_3 = ($tl_index + $t | 0) * 3 | 0;
            $bd = var$19[$tp_index_t_3];
            if (!$bd) {
                $bl = $tp_index_t_3 + 1 | 0;
                $b = $b >> var$19[$bl];
                $k = $k - var$19[$bl] | 0;
                var$16 = $s.$window.data;
                $d = $q + 1 | 0;
                var$16[$q] = var$19[$tp_index_t_3 + 2 | 0] << 24 >> 24;
                $m = $m + (-1) | 0;
            } else {
                while (true) {
                    $bl = $tp_index_t_3 + 1 | 0;
                    $b = $b >> var$19[$bl];
                    $k = $k - var$19[$bl] | 0;
                    if ($bd & 16) {
                        $bd = $bd & 15;
                        $bl = var$19[$tp_index_t_3 + 2 | 0];
                        var$23 = cjj_InfCodes_inflate_mask.data;
                        $c = $bl + ($b & var$23[$bd]) | 0;
                        $bl = $b >> $bd;
                        $bd = $k - $bd | 0;
                        while ($bd < 15) {
                            $n = $n + (-1) | 0;
                            var$16 = $z.$next_in.data;
                            $r = $p + 1 | 0;
                            $bl = $bl | (var$16[$p] & 255) << $bd;
                            $bd = $bd + 8 | 0;
                            $p = $r;
                        }
                        var$16 = $td.data;
                        $r = $bl & $md;
                        $d = ($td_index + $r | 0) * 3 | 0;
                        $b = var$16[$d];
                        while (true) {
                            $k = $d + 1 | 0;
                            $bl = $bl >> var$16[$k];
                            $bd = $bd - var$16[$k] | 0;
                            if ($b & 16)
                                break;
                            if ($b & 64) {
                                $z.$msg = $rt_s(183);
                                $tl_index = $z.$avail_in - $n | 0;
                                $td_index = $bd >> 3;
                                if ($td_index < $tl_index)
                                    $tl_index = $td_index;
                                $td_index = $n + $tl_index | 0;
                                $r = $p - $tl_index | 0;
                                $bd = $bd - ($tl_index << 3) | 0;
                                $s.$bitb = $bl;
                                $s.$bitk = $bd;
                                $z.$avail_in = $td_index;
                                $z.$total_in = Long_add($z.$total_in, Long_fromInt($r - $z.$next_in_index | 0));
                                $z.$next_in_index = $r;
                                $s.$write0 = $q;
                                return (-3);
                            }
                            $r = ($r + var$16[$d + 2 | 0] | 0) + ($bl & var$23[$b]) | 0;
                            $d = ($td_index + $r | 0) * 3 | 0;
                            $b = var$16[$d];
                        }
                        $r = $b & 15;
                        while ($bd < $r) {
                            $n = $n + (-1) | 0;
                            var$19 = $z.$next_in.data;
                            $b = $p + 1 | 0;
                            $bl = $bl | (var$19[$p] & 255) << $bd;
                            $bd = $bd + 8 | 0;
                            $p = $b;
                        }
                        $d = var$16[$d + 2 | 0] + ($bl & var$23[$r]) | 0;
                        $b = $bl >> $r;
                        $k = $bd - $r | 0;
                        $m = $m - $c | 0;
                        if ($q >= $d) {
                            $r = $q - $d | 0;
                            $bl = $q - $r | 0;
                            if ($bl > 0 && 2 > $bl) {
                                var$16 = $s.$window.data;
                                $bl = $q + 1 | 0;
                                $bd = $r + 1 | 0;
                                var$16[$q] = var$16[$r];
                                $q = $bl + 1 | 0;
                                $r = $bd + 1 | 0;
                                var$16[$bl] = var$16[$bd];
                                $c = $c + (-2) | 0;
                            } else {
                                var$16 = $s.$window;
                                jl_System_fastArraycopy(var$16, $r, var$16, $q, 2);
                                $q = $q + 2 | 0;
                                $r = $r + 2 | 0;
                                $c = $c + (-2) | 0;
                            }
                        } else {
                            $r = $q - $d | 0;
                            while (true) {
                                $bl = $s.$end1;
                                $r = $r + $bl | 0;
                                if ($r >= 0)
                                    break;
                            }
                            $bl = $bl - $r | 0;
                            if ($c > $bl) {
                                $c = $c - $bl | 0;
                                $bd = $q - $r | 0;
                                if ($bd > 0 && $bl > $bd) {
                                    $bd = $q;
                                    while (true) {
                                        var$16 = $s.$window.data;
                                        $q = $bd + 1 | 0;
                                        $d = $r + 1 | 0;
                                        var$16[$bd] = var$16[$r];
                                        $bl = $bl + (-1) | 0;
                                        if (!$bl)
                                            break;
                                        $bd = $q;
                                        $r = $d;
                                    }
                                } else {
                                    var$16 = $s.$window;
                                    jl_System_fastArraycopy(var$16, $r, var$16, $q, $bl);
                                    $q = $q + $bl | 0;
                                }
                                $r = 0;
                            }
                        }
                        $bl = $q - $r | 0;
                        if ($bl > 0 && $c > $bl) {
                            while (true) {
                                var$16 = $s.$window.data;
                                $d = $q + 1 | 0;
                                $bl = $r + 1 | 0;
                                var$16[$q] = var$16[$r];
                                $c = $c + (-1) | 0;
                                if (!$c)
                                    break;
                                $q = $d;
                                $r = $bl;
                            }
                            break a;
                        }
                        var$16 = $s.$window;
                        jl_System_fastArraycopy(var$16, $r, var$16, $q, $c);
                        $d = $q + $c | 0;
                        break a;
                    }
                    if ($bd & 64) {
                        if ($bd & 32) {
                            $c = $z.$avail_in - $n | 0;
                            $bl = $k >> 3;
                            if ($bl < $c)
                                $c = $bl;
                            $bl = $n + $c | 0;
                            $bd = $p - $c | 0;
                            $tl_index = $k - ($c << 3) | 0;
                            $s.$bitb = $b;
                            $s.$bitk = $tl_index;
                            $z.$avail_in = $bl;
                            $z.$total_in = Long_add($z.$total_in, Long_fromInt($bd - $z.$next_in_index | 0));
                            $z.$next_in_index = $bd;
                            $s.$write0 = $q;
                            return 1;
                        }
                        $z.$msg = $rt_s(184);
                        $c = $z.$avail_in - $n | 0;
                        $bl = $k >> 3;
                        if ($bl < $c)
                            $c = $bl;
                        $bl = $n + $c | 0;
                        $bd = $p - $c | 0;
                        $tl_index = $k - ($c << 3) | 0;
                        $s.$bitb = $b;
                        $s.$bitk = $tl_index;
                        $z.$avail_in = $bl;
                        $z.$total_in = Long_add($z.$total_in, Long_fromInt($bd - $z.$next_in_index | 0));
                        $z.$next_in_index = $bd;
                        $s.$write0 = $q;
                        return (-3);
                    }
                    $t = ($t + var$19[$tp_index_t_3 + 2 | 0] | 0) + ($b & cjj_InfCodes_inflate_mask.data[$bd]) | 0;
                    $tp_index_t_3 = ($tl_index + $t | 0) * 3 | 0;
                    $bd = var$19[$tp_index_t_3];
                    if (!$bd)
                        break;
                }
                $bl = $tp_index_t_3 + 1 | 0;
                $b = $b >> var$19[$bl];
                $k = $k - var$19[$bl] | 0;
                var$16 = $s.$window.data;
                $d = $q + 1 | 0;
                var$16[$q] = var$19[$tp_index_t_3 + 2 | 0] << 24 >> 24;
                $m = $m + (-1) | 0;
            }
        }
        if ($m < 258)
            break;
        if ($n < 10)
            break;
        $q = $d;
    }
    $c = $z.$avail_in - $n | 0;
    $bl = $k >> 3;
    if ($bl < $c)
        $c = $bl;
    $bl = $n + $c | 0;
    $bd = $p - $c | 0;
    $tl_index = $k - ($c << 3) | 0;
    $s.$bitb = $b;
    $s.$bitk = $tl_index;
    $z.$avail_in = $bl;
    $z.$total_in = Long_add($z.$total_in, Long_fromInt($bd - $z.$next_in_index | 0));
    $z.$next_in_index = $bd;
    $s.$write0 = $d;
    return 0;
},
cjj_InfCodes__clinit_ = () => {
    cjj_InfCodes_inflate_mask = $rt_createIntArrayFromData([0, 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767, 65535]);
},
jl_SystemClassLoader = $rt_classWithoutFields(jl_ClassLoader),
ju_Enumeration = $rt_classWithoutFields(0),
ju_Hashtable$1 = $rt_classWithoutFields(),
ju_Iterator = $rt_classWithoutFields(0),
ju_Hashtable$2 = $rt_classWithoutFields();
function jur_AbstractSet() {
    let a = this; jl_Object.call(a);
    a.$next2 = null;
    a.$isSecondPassVisited = 0;
    a.$index4 = null;
    a.$type = 0;
}
let jur_AbstractSet_counter = 0,
jur_AbstractSet__init_ = $this => {
    let var$1;
    var$1 = jur_AbstractSet_counter;
    jur_AbstractSet_counter = var$1 + 1 | 0;
    $this.$index4 = jl_Integer_toString(var$1);
},
jur_AbstractSet__init_0 = ($this, $n) => {
    let var$2;
    var$2 = jur_AbstractSet_counter;
    jur_AbstractSet_counter = var$2 + 1 | 0;
    $this.$index4 = jl_Integer_toString(var$2);
    $this.$next2 = $n;
},
jur_AbstractSet_find = ($this, $stringIndex, $testString, $matchResult) => {
    let $length;
    $length = $matchResult.$rightBound;
    while (true) {
        if ($stringIndex > $length)
            return (-1);
        if ($this.$matches1($stringIndex, $testString, $matchResult) >= 0)
            break;
        $stringIndex = $stringIndex + 1 | 0;
    }
    return $stringIndex;
},
jur_AbstractSet_findBack = ($this, $stringIndex, $startSearch, $testString, $matchResult) => {
    while (true) {
        if ($startSearch < $stringIndex)
            return (-1);
        if ($this.$matches1($startSearch, $testString, $matchResult) >= 0)
            break;
        $startSearch = $startSearch + (-1) | 0;
    }
    return $startSearch;
},
jur_AbstractSet_setType = ($this, $type) => {
    $this.$type = $type;
},
jur_AbstractSet_getType = $this => {
    return $this.$type;
},
jur_AbstractSet_getQualifiedName = $this => {
    let var$1, var$2, var$3;
    var$1 = $this.$index4;
    var$2 = $this.$getName();
    var$3 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$3);
    jl_AbstractStringBuilder_append(var$3, 60);
    var$1 = jl_StringBuilder_append(var$3, var$1);
    jl_AbstractStringBuilder_append(var$1, 58);
    jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$1, var$2), 62);
    return jl_AbstractStringBuilder_toString(var$3);
},
jur_AbstractSet_toString = $this => {
    return jur_AbstractSet_getQualifiedName($this);
},
jur_AbstractSet_getNext = $this => {
    return $this.$next2;
},
jur_AbstractSet_setNext = ($this, $next) => {
    $this.$next2 = $next;
},
jur_AbstractSet_first = ($this, $set) => {
    return 1;
},
jur_AbstractSet_processBackRefReplacement = $this => {
    return null;
},
jur_AbstractSet_processSecondPass = $this => {
    let $set;
    $this.$isSecondPassVisited = 1;
    $set = $this.$next2;
    if ($set !== null) {
        if (!$set.$isSecondPassVisited) {
            $set = $set.$processBackRefReplacement();
            if ($set !== null) {
                $this.$next2.$isSecondPassVisited = 1;
                $this.$next2 = $set;
            }
            $this.$next2.$processSecondPass();
        } else if ($set instanceof jur_SingleSet && $set.$fSet.$isBackReferenced)
            $this.$next2 = $set.$next2;
    }
},
jur_AbstractSet__clinit_ = () => {
    jur_AbstractSet_counter = 1;
};
function jur_MatchResultImpl() {
    let a = this; jl_Object.call(a);
    a.$groupBounds = null;
    a.$consumers = null;
    a.$compQuantCounters = null;
    a.$string3 = null;
    a.$groupCount = 0;
    a.$valid = 0;
    a.$leftBound = 0;
    a.$rightBound = 0;
    a.$startIndex = 0;
    a.$transparentBounds = 0;
    a.$anchoringBounds = 0;
    a.$hitEnd = 0;
    a.$requireEnd = 0;
    a.$previousMatch = 0;
    a.$mode3 = 0;
}
let jur_MatchResultImpl_setConsumed = ($this, $counter, $value) => {
    $this.$consumers.data[$counter] = $value;
},
jur_MatchResultImpl_getConsumed = ($this, $counter) => {
    return $this.$consumers.data[$counter];
},
jur_MatchResultImpl_end = $this => {
    return jur_MatchResultImpl_end0($this, 0);
},
jur_MatchResultImpl_end0 = ($this, $group) => {
    jur_MatchResultImpl_checkGroup($this, $group);
    return $this.$groupBounds.data[($group * 2 | 0) + 1 | 0];
},
jur_MatchResultImpl_setStart = ($this, $group, $offset) => {
    $this.$groupBounds.data[$group * 2 | 0] = $offset;
},
jur_MatchResultImpl_setEnd = ($this, $group, $offset) => {
    $this.$groupBounds.data[($group * 2 | 0) + 1 | 0] = $offset;
},
jur_MatchResultImpl_getStart = ($this, $group) => {
    return $this.$groupBounds.data[$group * 2 | 0];
},
jur_MatchResultImpl_getEnd = ($this, $group) => {
    return $this.$groupBounds.data[($group * 2 | 0) + 1 | 0];
},
jur_MatchResultImpl_start = ($this, $group) => {
    jur_MatchResultImpl_checkGroup($this, $group);
    return $this.$groupBounds.data[$group * 2 | 0];
},
jur_MatchResultImpl_finalizeMatch = $this => {
    let var$1, var$2;
    var$1 = $this.$groupBounds.data;
    if (var$1[0] == (-1)) {
        var$2 = $this.$startIndex;
        var$1[0] = var$2;
        var$1[1] = var$2;
    }
    $this.$previousMatch = jur_MatchResultImpl_end($this);
},
jur_MatchResultImpl_getEnterCounter = ($this, $setCounter) => {
    return $this.$compQuantCounters.data[$setCounter];
},
jur_MatchResultImpl_setEnterCounter = ($this, $setCounter, $value) => {
    $this.$compQuantCounters.data[$setCounter] = $value;
},
jur_MatchResultImpl_checkGroup = ($this, $group) => {
    let var$2;
    if (!$this.$valid) {
        var$2 = new jl_IllegalStateException;
        jl_Throwable__init_(var$2);
        $rt_throw(var$2);
    }
    if ($group >= 0 && $group < $this.$groupCount)
        return;
    var$2 = new jl_IndexOutOfBoundsException;
    jl_Throwable__init_0(var$2, jl_String_valueOf($group));
    $rt_throw(var$2);
},
jur_MatchResultImpl_reset = ($this, $newSequence, $leftBound, $rightBound) => {
    $this.$valid = 0;
    $this.$mode3 = 2;
    ju_Arrays_fill($this.$groupBounds, (-1));
    ju_Arrays_fill($this.$consumers, (-1));
    if ($newSequence !== null)
        $this.$string3 = $newSequence;
    if ($leftBound >= 0) {
        $this.$leftBound = $leftBound;
        $this.$rightBound = $rightBound;
    }
    $this.$startIndex = $this.$leftBound;
},
jur_MatchResultImpl_reset0 = $this => {
    jur_MatchResultImpl_reset($this, null, (-1), (-1));
},
jur_MatchResultImpl_setStartIndex = ($this, $startIndex) => {
    let var$2;
    $this.$startIndex = $startIndex;
    var$2 = $this.$previousMatch;
    if (var$2 >= 0)
        $startIndex = var$2;
    $this.$previousMatch = $startIndex;
};
function jur_FSet() {
    let a = this; jur_AbstractSet.call(a);
    a.$isBackReferenced = 0;
    a.$groupIndex0 = 0;
}
let jur_FSet_posFSet = null,
jur_FSet_$callClinit = () => {
    jur_FSet_$callClinit = $rt_eraseClinit(jur_FSet);
    jur_FSet__clinit_();
},
jur_FSet__init_ = ($this, $groupIndex) => {
    jur_FSet_$callClinit();
    jur_AbstractSet__init_($this);
    $this.$groupIndex0 = $groupIndex;
},
jur_FSet__init_0 = var_0 => {
    let var_1 = new jur_FSet();
    jur_FSet__init_(var_1, var_0);
    return var_1;
},
jur_FSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $end, $shift;
    $end = jur_MatchResultImpl_getEnd($matchResult, $this.$groupIndex0);
    jur_MatchResultImpl_setEnd($matchResult, $this.$groupIndex0, $stringIndex);
    $shift = $this.$next2.$matches1($stringIndex, $testString, $matchResult);
    if ($shift < 0)
        jur_MatchResultImpl_setEnd($matchResult, $this.$groupIndex0, $end);
    return $shift;
},
jur_FSet_getGroupIndex = $this => {
    return $this.$groupIndex0;
},
jur_FSet_getName = $this => {
    return $rt_s(185);
},
jur_FSet_hasConsumed = ($this, $mr) => {
    return 0;
},
jur_FSet__clinit_ = () => {
    let var$1;
    var$1 = new jur_FSet$PossessiveFSet;
    jur_AbstractSet__init_(var$1);
    jur_FSet_posFSet = var$1;
};
function jur_Lexer() {
    let a = this; jl_Object.call(a);
    a.$pattern0 = null;
    a.$flags2 = 0;
    a.$mode2 = 0;
    a.$savedMode = 0;
    a.$lookBack = 0;
    a.$ch = 0;
    a.$lookAhead = 0;
    a.$patternFullLength = 0;
    a.$curST = null;
    a.$lookAheadST = null;
    a.$index = 0;
    a.$prevNW = 0;
    a.$curToc = 0;
    a.$lookAheadToc = 0;
    a.$orig = null;
}
let jur_Lexer_decompTable = null,
jur_Lexer_singleDecompTable = null,
jur_Lexer_singleDecompTableSize = 0,
jur_Lexer_setMode = ($this, $mode) => {
    if ($mode > 0 && $mode < 3)
        $this.$mode2 = $mode;
    if ($mode == 1) {
        $this.$lookAhead = $this.$ch;
        $this.$lookAheadST = $this.$curST;
        $this.$index = $this.$lookAheadToc;
        $this.$lookAheadToc = $this.$curToc;
        jur_Lexer_movePointer($this);
    }
},
jur_Lexer_isSpecial = $this => {
    return $this.$curST === null ? 0 : 1;
},
jur_Lexer_isNextSpecial = $this => {
    return $this.$lookAheadST === null ? 0 : 1;
},
jur_Lexer_next = $this => {
    jur_Lexer_movePointer($this);
    return $this.$lookBack;
},
jur_Lexer_nextSpecial = $this => {
    let $res;
    $res = $this.$curST;
    jur_Lexer_movePointer($this);
    return $res;
},
jur_Lexer_movePointer = $this => {
    let $reread, $nonCap, var$3, $behind, $mod, $cs, $negative, $$je;
    $this.$lookBack = $this.$ch;
    $this.$ch = $this.$lookAhead;
    $this.$curST = $this.$lookAheadST;
    $this.$curToc = $this.$lookAheadToc;
    $this.$lookAheadToc = $this.$index;
    while (true) {
        $reread = 0;
        $nonCap = $this.$index >= $this.$pattern0.data.length ? 0 : jur_Lexer_nextCodePoint($this);
        $this.$lookAhead = $nonCap;
        $this.$lookAheadST = null;
        if ($this.$mode2 == 4) {
            if ($nonCap != 92)
                return;
            $nonCap = $this.$index;
            var$3 = $this.$pattern0.data;
            $nonCap = $nonCap >= var$3.length ? 0 : var$3[jur_Lexer_nextIndex($this)];
            $this.$lookAhead = $nonCap;
            switch ($nonCap) {
                case 69:
                    break;
                default:
                    $this.$lookAhead = 92;
                    $this.$index = $this.$prevNW;
                    return;
            }
            $this.$mode2 = $this.$savedMode;
            $this.$lookAhead = $this.$index > ($this.$pattern0.data.length - 2 | 0) ? 0 : jur_Lexer_nextCodePoint($this);
        }
        a: {
            $nonCap = $this.$lookAhead;
            if ($nonCap != 92) {
                $behind = $this.$mode2;
                if ($behind == 1)
                    switch ($nonCap) {
                        case 36:
                            $this.$lookAhead = (-536870876);
                            break a;
                        case 40:
                            if ($this.$pattern0.data[$this.$index] != 63) {
                                $this.$lookAhead = (-2147483608);
                                break a;
                            }
                            jur_Lexer_nextIndex($this);
                            $nonCap = $this.$pattern0.data[$this.$index];
                            $behind = 0;
                            while (true) {
                                b: {
                                    if ($behind) {
                                        $behind = 0;
                                        switch ($nonCap) {
                                            case 33:
                                                break;
                                            case 61:
                                                $this.$lookAhead = (-134217688);
                                                jur_Lexer_nextIndex($this);
                                                break b;
                                            default:
                                                $rt_throw(jur_PatternSyntaxException__init_($rt_s(2), jur_Lexer_toString($this), $this.$index));
                                        }
                                        $this.$lookAhead = (-67108824);
                                        jur_Lexer_nextIndex($this);
                                    } else {
                                        switch ($nonCap) {
                                            case 33:
                                                break;
                                            case 60:
                                                jur_Lexer_nextIndex($this);
                                                $nonCap = $this.$pattern0.data[$this.$index];
                                                $behind = 1;
                                                break b;
                                            case 61:
                                                $this.$lookAhead = (-536870872);
                                                jur_Lexer_nextIndex($this);
                                                break b;
                                            case 62:
                                                $this.$lookAhead = (-33554392);
                                                jur_Lexer_nextIndex($this);
                                                break b;
                                            default:
                                                $mod = jur_Lexer_readFlags($this);
                                                $this.$lookAhead = $mod;
                                                if ($mod < 256) {
                                                    $this.$flags2 = $mod;
                                                    $mod = $mod << 16;
                                                    $this.$lookAhead = $mod;
                                                    $this.$lookAhead = (-1073741784) | $mod;
                                                    break b;
                                                }
                                                $mod = $mod & 255;
                                                $this.$lookAhead = $mod;
                                                $this.$flags2 = $mod;
                                                $mod = $mod << 16;
                                                $this.$lookAhead = $mod;
                                                $this.$lookAhead = (-16777176) | $mod;
                                                break b;
                                        }
                                        $this.$lookAhead = (-268435416);
                                        jur_Lexer_nextIndex($this);
                                    }
                                }
                                if (!$behind)
                                    break;
                            }
                            break a;
                        case 41:
                            $this.$lookAhead = (-536870871);
                            break a;
                        case 42:
                        case 43:
                        case 63:
                            $behind = $this.$index;
                            var$3 = $this.$pattern0.data;
                            switch ($behind >= var$3.length ? 42 : var$3[$behind]) {
                                case 43:
                                    $this.$lookAhead = $nonCap | (-2147483648);
                                    jur_Lexer_nextIndex($this);
                                    break a;
                                case 63:
                                    $this.$lookAhead = $nonCap | (-1073741824);
                                    jur_Lexer_nextIndex($this);
                                    break a;
                                default:
                            }
                            $this.$lookAhead = $nonCap | (-536870912);
                            break a;
                        case 46:
                            $this.$lookAhead = (-536870866);
                            break a;
                        case 91:
                            $this.$lookAhead = (-536870821);
                            jur_Lexer_setMode($this, 2);
                            break a;
                        case 93:
                            if ($behind != 2)
                                break a;
                            $this.$lookAhead = (-536870819);
                            break a;
                        case 94:
                            $this.$lookAhead = (-536870818);
                            break a;
                        case 123:
                            $this.$lookAheadST = jur_Lexer_processQuantifier($this, $nonCap);
                            break a;
                        case 124:
                            $this.$lookAhead = (-536870788);
                            break a;
                        default:
                    }
                else if ($behind == 2)
                    switch ($nonCap) {
                        case 38:
                            $this.$lookAhead = (-536870874);
                            break a;
                        case 45:
                            $this.$lookAhead = (-536870867);
                            break a;
                        case 91:
                            $this.$lookAhead = (-536870821);
                            break a;
                        case 93:
                            $this.$lookAhead = (-536870819);
                            break a;
                        case 94:
                            $this.$lookAhead = (-536870818);
                            break a;
                        default:
                    }
            } else {
                $nonCap = $this.$index >= ($this.$pattern0.data.length - 2 | 0) ? (-1) : jur_Lexer_nextCodePoint($this);
                c: {
                    $this.$lookAhead = $nonCap;
                    switch ($nonCap) {
                        case -1:
                            $rt_throw(jur_PatternSyntaxException__init_($rt_s(2), jur_Lexer_toString($this), $this.$index));
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                        case 11:
                        case 12:
                        case 13:
                        case 14:
                        case 15:
                        case 16:
                        case 17:
                        case 18:
                        case 19:
                        case 20:
                        case 21:
                        case 22:
                        case 23:
                        case 24:
                        case 25:
                        case 26:
                        case 27:
                        case 28:
                        case 29:
                        case 30:
                        case 31:
                        case 32:
                        case 33:
                        case 34:
                        case 35:
                        case 36:
                        case 37:
                        case 38:
                        case 39:
                        case 40:
                        case 41:
                        case 42:
                        case 43:
                        case 44:
                        case 45:
                        case 46:
                        case 47:
                        case 58:
                        case 59:
                        case 60:
                        case 61:
                        case 62:
                        case 63:
                        case 64:
                        case 91:
                        case 92:
                        case 93:
                        case 94:
                        case 95:
                        case 96:
                        case 118:
                            break;
                        case 48:
                            $this.$lookAhead = jur_Lexer_readOctals($this);
                            break a;
                        case 49:
                        case 50:
                        case 51:
                        case 52:
                        case 53:
                        case 54:
                        case 55:
                        case 56:
                        case 57:
                            if ($this.$mode2 != 1)
                                break a;
                            $this.$lookAhead = (-2147483648) | $nonCap;
                            break a;
                        case 65:
                            $this.$lookAhead = (-2147483583);
                            break a;
                        case 66:
                            $this.$lookAhead = (-2147483582);
                            break a;
                        case 67:
                        case 69:
                        case 70:
                        case 72:
                        case 73:
                        case 74:
                        case 75:
                        case 76:
                        case 77:
                        case 78:
                        case 79:
                        case 82:
                        case 84:
                        case 85:
                        case 86:
                        case 88:
                        case 89:
                        case 103:
                        case 104:
                        case 105:
                        case 106:
                        case 107:
                        case 108:
                        case 109:
                        case 111:
                        case 113:
                        case 121:
                            $rt_throw(jur_PatternSyntaxException__init_($rt_s(2), jur_Lexer_toString($this), $this.$index));
                        case 68:
                        case 83:
                        case 87:
                        case 100:
                        case 115:
                        case 119:
                            $this.$lookAheadST = jur_AbstractCharClass_getPredefinedClass(jl_String__init_($this.$pattern0, $this.$prevNW, 1), 0);
                            $this.$lookAhead = 0;
                            break a;
                        case 71:
                            $this.$lookAhead = (-2147483577);
                            break a;
                        case 80:
                        case 112:
                            break c;
                        case 81:
                            $this.$savedMode = $this.$mode2;
                            $this.$mode2 = 4;
                            $reread = 1;
                            break a;
                        case 90:
                            $this.$lookAhead = (-2147483558);
                            break a;
                        case 97:
                            $this.$lookAhead = 7;
                            break a;
                        case 98:
                            $this.$lookAhead = (-2147483550);
                            break a;
                        case 99:
                            $nonCap = $this.$index;
                            var$3 = $this.$pattern0.data;
                            if ($nonCap >= (var$3.length - 2 | 0))
                                $rt_throw(jur_PatternSyntaxException__init_($rt_s(2), jur_Lexer_toString($this), $this.$index));
                            $this.$lookAhead = var$3[jur_Lexer_nextIndex($this)] & 31;
                            break a;
                        case 101:
                            $this.$lookAhead = 27;
                            break a;
                        case 102:
                            $this.$lookAhead = 12;
                            break a;
                        case 110:
                            $this.$lookAhead = 10;
                            break a;
                        case 114:
                            $this.$lookAhead = 13;
                            break a;
                        case 116:
                            $this.$lookAhead = 9;
                            break a;
                        case 117:
                            $this.$lookAhead = jur_Lexer_readHex($this, 4);
                            break a;
                        case 120:
                            $this.$lookAhead = jur_Lexer_readHex($this, 2);
                            break a;
                        case 122:
                            $this.$lookAhead = (-2147483526);
                            break a;
                        default:
                    }
                    break a;
                }
                $cs = jur_Lexer_parseCharClassName($this);
                $negative = 0;
                if ($this.$lookAhead == 80)
                    $negative = 1;
                try {
                    $this.$lookAheadST = jur_AbstractCharClass_getPredefinedClass($cs, $negative);
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof ju_MissingResourceException) {
                        $rt_throw(jur_PatternSyntaxException__init_($rt_s(2), jur_Lexer_toString($this), $this.$index));
                    } else {
                        throw $$e;
                    }
                }
                $this.$lookAhead = 0;
            }
        }
        if ($reread)
            continue;
        else
            break;
    }
},
jur_Lexer_parseCharClassName = $this => {
    let $sb, $ch, var$3, var$4, $res, var$6;
    $sb = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_0($sb, 10);
    $ch = $this.$index;
    var$3 = $this.$pattern0;
    var$4 = var$3.data;
    if ($ch < (var$4.length - 2 | 0)) {
        if (var$4[$ch] != 123) {
            $sb = jl_String__init_(var$3, jur_Lexer_nextIndex($this), 1);
            $res = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($res);
            jl_StringBuilder_append(jl_StringBuilder_append($res, $rt_s(186)), $sb);
            return jl_AbstractStringBuilder_toString($res);
        }
        jur_Lexer_nextIndex($this);
        $ch = 0;
        a: {
            while (true) {
                var$6 = $this.$index;
                var$3 = $this.$pattern0.data;
                if (var$6 >= (var$3.length - 2 | 0))
                    break;
                $ch = var$3[jur_Lexer_nextIndex($this)];
                if ($ch == 125)
                    break a;
                jl_AbstractStringBuilder_append($sb, $ch);
            }
        }
        if ($ch != 125)
            $rt_throw(jur_PatternSyntaxException__init_($rt_s(2), $this.$orig, $this.$index));
    }
    if (!$sb.$length0)
        $rt_throw(jur_PatternSyntaxException__init_($rt_s(2), $this.$orig, $this.$index));
    $res = jl_AbstractStringBuilder_toString($sb);
    if ($res.$nativeString.length == 1) {
        $sb = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($sb);
        jl_StringBuilder_append(jl_StringBuilder_append($sb, $rt_s(186)), $res);
        return jl_AbstractStringBuilder_toString($sb);
    }
    b: {
        c: {
            if ($res.$nativeString.length > 3) {
                if (jl_String_startsWith($res, $rt_s(186)))
                    break c;
                if (jl_String_startsWith($res, $rt_s(187)))
                    break c;
            }
            break b;
        }
        $res = jl_String_substring0($res, 2);
    }
    return $res;
},
jur_Lexer_processQuantifier = ($this, $ch) => {
    let $sb, $min, $max, $mod, var$6, $$je;
    $sb = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_0($sb, 4);
    $min = (-1);
    $max = 2147483647;
    a: {
        while (true) {
            $mod = $this.$index;
            var$6 = $this.$pattern0.data;
            if ($mod >= var$6.length)
                break a;
            $ch = var$6[jur_Lexer_nextIndex($this)];
            if ($ch == 125)
                break a;
            if ($ch == 44 && $min < 0)
                try {
                    $min = jl_Integer_parseInt(jl_StringBuilder_toString($sb), 10);
                    jl_StringBuilder_delete($sb, 0, jl_StringBuilder_length($sb));
                    continue;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_NumberFormatException) {
                        break;
                    } else {
                        throw $$e;
                    }
                }
            jl_AbstractStringBuilder_append($sb, $ch & 65535);
        }
        $rt_throw(jur_PatternSyntaxException__init_($rt_s(2), $this.$orig, $this.$index));
    }
    if ($ch != 125)
        $rt_throw(jur_PatternSyntaxException__init_($rt_s(2), $this.$orig, $this.$index));
    if ($sb.$length0 > 0)
        b: {
            try {
                $max = jl_Integer_parseInt(jl_StringBuilder_toString($sb), 10);
                if ($min >= 0)
                    break b;
                $min = $max;
                break b;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_NumberFormatException) {
                } else {
                    throw $$e;
                }
            }
            $rt_throw(jur_PatternSyntaxException__init_($rt_s(2), $this.$orig, $this.$index));
        }
    else if ($min < 0)
        $rt_throw(jur_PatternSyntaxException__init_($rt_s(2), $this.$orig, $this.$index));
    if (($min | $max | ($max - $min | 0)) < 0)
        $rt_throw(jur_PatternSyntaxException__init_($rt_s(2), $this.$orig, $this.$index));
    $ch = $this.$index;
    var$6 = $this.$pattern0.data;
    $mod = $ch >= var$6.length ? 42 : var$6[$ch];
    c: {
        switch ($mod) {
            case 43:
                $this.$lookAhead = (-2147483525);
                jur_Lexer_nextIndex($this);
                break c;
            case 63:
                $this.$lookAhead = (-1073741701);
                jur_Lexer_nextIndex($this);
                break c;
            default:
        }
        $this.$lookAhead = (-536870789);
    }
    $sb = new jur_Quantifier;
    $sb.$min0 = $min;
    $sb.$max0 = $max;
    return $sb;
},
jur_Lexer_toString = $this => {
    return $this.$orig;
},
jur_Lexer_isEmpty = $this => {
    return !$this.$ch && !$this.$lookAhead && $this.$index == $this.$patternFullLength && !jur_Lexer_isSpecial($this) ? 1 : 0;
},
jur_Lexer_isLetter0 = $ch => {
    return $ch < 0 ? 0 : 1;
},
jur_Lexer_isLetter = $this => {
    return !jur_Lexer_isEmpty($this) && !jur_Lexer_isSpecial($this) && jur_Lexer_isLetter0($this.$ch) ? 1 : 0;
},
jur_Lexer_isHighSurrogate0 = $this => {
    let var$1;
    var$1 = $this.$ch;
    return var$1 <= 56319 && var$1 >= 55296 ? 1 : 0;
},
jur_Lexer_isLowSurrogate0 = $this => {
    let var$1;
    var$1 = $this.$ch;
    return var$1 <= 57343 && var$1 >= 56320 ? 1 : 0;
},
jur_Lexer_isHighSurrogate = $ch => {
    return $ch <= 56319 && $ch >= 55296 ? 1 : 0;
},
jur_Lexer_isLowSurrogate = $ch => {
    return $ch <= 57343 && $ch >= 56320 ? 1 : 0;
},
jur_Lexer_readHex = ($this, $max) => {
    let $st, $length, $i, var$5, $$je;
    $st = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_0($st, $max);
    $length = $this.$pattern0.data.length - 2 | 0;
    $i = 0;
    while (true) {
        var$5 = $rt_compare($i, $max);
        if (var$5 >= 0)
            break;
        if ($this.$index >= $length)
            break;
        jl_AbstractStringBuilder_append($st, $this.$pattern0.data[jur_Lexer_nextIndex($this)]);
        $i = $i + 1 | 0;
    }
    if (!var$5)
        a: {
            try {
                $max = jl_Integer_parseInt(jl_StringBuilder_toString($st), 16);
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_NumberFormatException) {
                    break a;
                } else {
                    throw $$e;
                }
            }
            return $max;
        }
    $rt_throw(jur_PatternSyntaxException__init_($rt_s(2), $this.$orig, $this.$index));
},
jur_Lexer_readOctals = $this => {
    let $max, $i, var$3, $length, $res, var$6;
    $max = 3;
    $i = 1;
    var$3 = $this.$pattern0.data;
    $length = var$3.length - 2 | 0;
    $res = jl_Character_digit(var$3[$this.$index], 8);
    switch ($res) {
        case -1:
            break;
        default:
            if ($res > 3)
                $max = 2;
            jur_Lexer_nextIndex($this);
            a: {
                while (true) {
                    if ($i >= $max)
                        break a;
                    var$6 = $this.$index;
                    if (var$6 >= $length)
                        break a;
                    var$6 = jl_Character_digit($this.$pattern0.data[var$6], 8);
                    if (var$6 < 0)
                        break;
                    $res = ($res * 8 | 0) + var$6 | 0;
                    jur_Lexer_nextIndex($this);
                    $i = $i + 1 | 0;
                }
            }
            return $res;
    }
    $rt_throw(jur_PatternSyntaxException__init_($rt_s(2), $this.$orig, $this.$index));
},
jur_Lexer_readFlags = $this => {
    let $pos, $res, var$3, var$4;
    $pos = 1;
    $res = $this.$flags2;
    a: while (true) {
        var$3 = $this.$index;
        var$4 = $this.$pattern0.data;
        if (var$3 >= var$4.length)
            $rt_throw(jur_PatternSyntaxException__init_($rt_s(2), $this.$orig, var$3));
        b: {
            c: {
                switch (var$4[var$3]) {
                    case 41:
                        jur_Lexer_nextIndex($this);
                        return $res | 256;
                    case 45:
                        if (!$pos)
                            $rt_throw(jur_PatternSyntaxException__init_($rt_s(2), $this.$orig, var$3));
                        $pos = 0;
                        break b;
                    case 58:
                        break a;
                    case 100:
                        break c;
                    case 105:
                        $res = $pos ? $res | 2 : ($res ^ 2) & $res;
                        break b;
                    case 109:
                        $res = $pos ? $res | 8 : ($res ^ 8) & $res;
                        break b;
                    case 115:
                        $res = $pos ? $res | 32 : ($res ^ 32) & $res;
                        break b;
                    case 117:
                        $res = $pos ? $res | 64 : ($res ^ 64) & $res;
                        break b;
                    case 120:
                        $res = $pos ? $res | 4 : ($res ^ 4) & $res;
                        break b;
                    default:
                }
                break b;
            }
            $res = $pos ? $res | 1 : ($res ^ 1) & $res;
        }
        jur_Lexer_nextIndex($this);
    }
    jur_Lexer_nextIndex($this);
    return $res;
},
jur_Lexer_nextIndex = $this => {
    let var$1, var$2, var$3, var$4, var$5;
    var$1 = $this.$index;
    $this.$prevNW = var$1;
    if (!($this.$flags2 & 4))
        $this.$index = var$1 + 1 | 0;
    else {
        var$2 = $this.$pattern0.data.length - 2 | 0;
        $this.$index = var$1 + 1 | 0;
        a: while (true) {
            var$3 = $this.$index;
            if (var$3 < var$2 && jl_Character_isWhitespace($this.$pattern0.data[var$3])) {
                $this.$index = $this.$index + 1 | 0;
                continue;
            }
            var$3 = $this.$index;
            if (var$3 >= var$2)
                break;
            var$4 = $this.$pattern0.data;
            if (var$4[var$3] != 35)
                break;
            $this.$index = var$3 + 1 | 0;
            while (true) {
                var$5 = $this.$index;
                if (var$5 >= var$2)
                    continue a;
                var$1 = var$4[var$5];
                if (var$1 != 10 && var$1 != 13 && var$1 != 133 && (var$1 | 1) != 8233 ? 0 : 1)
                    continue a;
                $this.$index = var$5 + 1 | 0;
            }
        }
    }
    return $this.$prevNW;
},
jur_Lexer_getDecomposition = $ch => {
    return jur_Lexer_decompTable.$get5($ch);
},
jur_Lexer_nextCodePoint = $this => {
    let $high, $lowExpectedIndex, var$3, $low;
    $high = $this.$pattern0.data[jur_Lexer_nextIndex($this)];
    if (jl_Character_isHighSurrogate($high)) {
        $lowExpectedIndex = $this.$prevNW + 1 | 0;
        var$3 = $this.$pattern0.data;
        if ($lowExpectedIndex < var$3.length) {
            $low = var$3[$lowExpectedIndex];
            if (jl_Character_isLowSurrogate($low)) {
                jur_Lexer_nextIndex($this);
                return jl_Character_toCodePoint($high, $low);
            }
        }
    }
    return $high;
},
jur_Lexer_getIndex = $this => {
    return $this.$curToc;
};
function jur_PatternSyntaxException() {
    let a = this; jl_IllegalArgumentException.call(a);
    a.$desc4 = null;
    a.$pattern1 = null;
    a.$index2 = 0;
}
let jur_PatternSyntaxException__init_0 = ($this, $description, $pattern, $index) => {
    jl_Throwable__init_($this);
    $this.$index2 = (-1);
    $this.$desc4 = $description;
    $this.$pattern1 = $pattern;
    $this.$index2 = $index;
},
jur_PatternSyntaxException__init_ = (var_0, var_1, var_2) => {
    let var_3 = new jur_PatternSyntaxException();
    jur_PatternSyntaxException__init_0(var_3, var_0, var_1, var_2);
    return var_3;
},
jur_PatternSyntaxException_getMessage = $this => {
    let $filler, var$2, $temp, var$4, var$5, var$6, var$7, var$8, var$9, var$10;
    $filler = $rt_s(2);
    var$2 = $this.$index2;
    if (var$2 >= 1) {
        $temp = $rt_createCharArray(var$2);
        var$4 = $temp.data;
        var$2 = 0;
        var$5 = var$4.length;
        if (var$2 > var$5) {
            $filler = new jl_IllegalArgumentException;
            jl_Throwable__init_($filler);
            $rt_throw($filler);
        }
        while (var$2 < var$5) {
            var$6 = var$2 + 1 | 0;
            var$4[var$2] = 32;
            var$2 = var$6;
        }
        $filler = jl_String__init_0($temp);
    }
    var$7 = $this.$desc4;
    var$8 = $this.$pattern1;
    if (var$8 !== null && var$8.$nativeString.length) {
        var$9 = $this.$index2;
        var$8 = $this.$pattern1;
        var$10 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$10);
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append0(var$10, var$9), $rt_s(74)), var$8), $rt_s(74)), $filler);
        $filler = jl_AbstractStringBuilder_toString(var$10);
    } else
        $filler = $rt_s(2);
    var$8 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$8);
    jl_StringBuilder_append(jl_StringBuilder_append(var$8, var$7), $filler);
    return jl_AbstractStringBuilder_toString(var$8);
},
ju_Map$Entry = $rt_classWithoutFields(0);
function ju_MapEntry() {
    let a = this; jl_Object.call(a);
    a.$key = null;
    a.$value = null;
}
let ju_MapEntry__init_ = ($this, $theKey, $theValue) => {
    $this.$key = $theKey;
    $this.$value = $theValue;
},
ju_MapEntry__init_0 = (var_0, var_1) => {
    let var_2 = new ju_MapEntry();
    ju_MapEntry__init_(var_2, var_0, var_1);
    return var_2;
};
function ju_Hashtable$Entry() {
    let a = this; ju_MapEntry.call(a);
    a.$next3 = null;
    a.$hashcode = 0;
}
let ju_Hashtable$Entry_equalsKey = ($this, $aKey, $hash) => {
    return $this.$hashcode == jl_String_hashCode($aKey) && $this.$key.$equals($aKey) ? 1 : 0;
},
jur_NonCapFSet = $rt_classWithoutFields(jur_FSet),
jur_NonCapFSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $gr;
    $gr = $this.$groupIndex0;
    jur_MatchResultImpl_setConsumed($matchResult, $gr, $stringIndex - jur_MatchResultImpl_getConsumed($matchResult, $gr) | 0);
    return $this.$next2.$matches1($stringIndex, $testString, $matchResult);
},
jur_NonCapFSet_getName = $this => {
    return $rt_s(188);
},
jur_NonCapFSet_hasConsumed = ($this, $mr) => {
    return 0;
},
jur_AheadFSet = $rt_classWithoutFields(jur_FSet),
jur_AheadFSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    return $stringIndex;
},
jur_AheadFSet_getName = $this => {
    return $rt_s(189);
},
jur_BehindFSet = $rt_classWithoutFields(jur_FSet),
jur_BehindFSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    if (jur_MatchResultImpl_getConsumed($matchResult, $this.$groupIndex0) != $stringIndex)
        $stringIndex = (-1);
    return $stringIndex;
},
jur_BehindFSet_getName = $this => {
    return $rt_s(190);
};
function jur_AtomicFSet() {
    jur_FSet.call(this);
    this.$index6 = 0;
}
let jur_AtomicFSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $gr;
    $gr = $this.$groupIndex0;
    jur_MatchResultImpl_setConsumed($matchResult, $gr, $stringIndex - jur_MatchResultImpl_getConsumed($matchResult, $gr) | 0);
    $this.$index6 = $stringIndex;
    return $stringIndex;
},
jur_AtomicFSet_getName = $this => {
    return $rt_s(191);
},
jur_AtomicFSet_hasConsumed = ($this, $mr) => {
    return 0;
},
jur_FinalSet = $rt_classWithoutFields(jur_FSet),
jur_FinalSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    if ($matchResult.$mode3 != 1 && $stringIndex != $matchResult.$rightBound)
        return (-1);
    $matchResult.$valid = 1;
    jur_MatchResultImpl_setEnd($matchResult, 0, $stringIndex);
    return $stringIndex;
},
jur_FinalSet_getName = $this => {
    return $rt_s(192);
};
function jur_LeafSet() {
    jur_AbstractSet.call(this);
    this.$charCount0 = 0;
}
let jur_LeafSet__init_ = $this => {
    jur_AbstractSet__init_($this);
    $this.$charCount0 = 1;
},
jur_LeafSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $shift;
    if (($stringIndex + $this.$charCount() | 0) > $matchResult.$rightBound) {
        $matchResult.$hitEnd = 1;
        return (-1);
    }
    $shift = $this.$accepts($stringIndex, $testString);
    if ($shift < 0)
        return (-1);
    return $this.$next2.$matches1($stringIndex + $shift | 0, $testString, $matchResult);
},
jur_LeafSet_charCount = $this => {
    return $this.$charCount0;
},
jur_LeafSet_hasConsumed = ($this, $mr) => {
    return 1;
},
jur_EmptySet = $rt_classWithoutFields(jur_LeafSet),
jur_EmptySet__init_0 = ($this, $next) => {
    jur_AbstractSet__init_0($this, $next);
    $this.$charCount0 = 1;
    $this.$type = 1;
    $this.$charCount0 = 0;
},
jur_EmptySet__init_ = var_0 => {
    let var_1 = new jur_EmptySet();
    jur_EmptySet__init_0(var_1, var_0);
    return var_1;
},
jur_EmptySet_accepts = ($this, $stringIndex, $testString) => {
    return 0;
},
jur_EmptySet_find = ($this, $stringIndex, $testString, $matchResult) => {
    let $strLength, $startStr, $high;
    $strLength = $matchResult.$rightBound;
    $startStr = $matchResult.$leftBound;
    while (true) {
        $high = $rt_compare($stringIndex, $strLength);
        if ($high > 0)
            return (-1);
        if ($high < 0 && jl_Character_isLowSurrogate(jl_String_charAt($testString, $stringIndex)) && $stringIndex > $startStr && jl_Character_isHighSurrogate(jl_String_charAt($testString, $stringIndex - 1 | 0))) {
            $stringIndex = $stringIndex + 1 | 0;
            continue;
        }
        if ($this.$next2.$matches1($stringIndex, $testString, $matchResult) >= 0)
            break;
        $stringIndex = $stringIndex + 1 | 0;
    }
    return $stringIndex;
},
jur_EmptySet_findBack = ($this, $stringIndex, $startSearch, $testString, $matchResult) => {
    let $strLength, $startStr;
    $strLength = $matchResult.$rightBound;
    $startStr = $matchResult.$leftBound;
    while (true) {
        if ($startSearch < $stringIndex)
            return (-1);
        if ($startSearch < $strLength && jl_Character_isLowSurrogate(jl_String_charAt($testString, $startSearch)) && $startSearch > $startStr && jl_Character_isHighSurrogate(jl_String_charAt($testString, $startSearch - 1 | 0))) {
            $startSearch = $startSearch + (-1) | 0;
            continue;
        }
        if ($this.$next2.$matches1($startSearch, $testString, $matchResult) >= 0)
            break;
        $startSearch = $startSearch + (-1) | 0;
    }
    return $startSearch;
},
jur_EmptySet_getName = $this => {
    return $rt_s(193);
},
jur_EmptySet_hasConsumed = ($this, $mr) => {
    return 0;
};
function jur_JointSet() {
    let a = this; jur_AbstractSet.call(a);
    a.$children = null;
    a.$fSet = null;
    a.$groupIndex = 0;
}
let jur_JointSet__init_ = ($this, $children, $fSet) => {
    jur_AbstractSet__init_($this);
    $this.$children = $children;
    $this.$fSet = $fSet;
    $this.$groupIndex = $fSet.$groupIndex0;
},
jur_JointSet__init_0 = (var_0, var_1) => {
    let var_2 = new jur_JointSet();
    jur_JointSet__init_(var_2, var_0, var_1);
    return var_2;
},
jur_JointSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $start, $size, $i, $shift;
    if ($this.$children === null)
        return (-1);
    $start = jur_MatchResultImpl_getStart($matchResult, $this.$groupIndex);
    jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex, $stringIndex);
    $size = $this.$children.$size0;
    $i = 0;
    while (true) {
        if ($i >= $size) {
            jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex, $start);
            return (-1);
        }
        $shift = (ju_ArrayList_get($this.$children, $i)).$matches1($stringIndex, $testString, $matchResult);
        if ($shift >= 0)
            break;
        $i = $i + 1 | 0;
    }
    return $shift;
},
jur_JointSet_setNext = ($this, $next) => {
    $this.$fSet.$next2 = $next;
},
jur_JointSet_getName = $this => {
    return $rt_s(194);
},
jur_JointSet_first = ($this, $set) => {
    let $i;
    a: {
        $i = $this.$children;
        if ($i !== null) {
            $i = ju_AbstractList_iterator($i);
            while (true) {
                if (!ju_AbstractList$1_hasNext($i))
                    break a;
                if (!(ju_AbstractList$1_next($i)).$first($set))
                    continue;
                else
                    return 1;
            }
        }
    }
    return 0;
},
jur_JointSet_hasConsumed = ($this, $matchResult) => {
    return jur_MatchResultImpl_getEnd($matchResult, $this.$groupIndex) >= 0 && jur_MatchResultImpl_getStart($matchResult, $this.$groupIndex) == jur_MatchResultImpl_getEnd($matchResult, $this.$groupIndex) ? 0 : 1;
},
jur_JointSet_processSecondPass = $this => {
    let $child, $childrenSize, $i, $set;
    $this.$isSecondPassVisited = 1;
    $child = $this.$fSet;
    if ($child !== null && !$child.$isSecondPassVisited)
        jur_AbstractSet_processSecondPass($child);
    a: {
        $child = $this.$children;
        if ($child !== null) {
            $childrenSize = $child.$size0;
            $i = 0;
            while (true) {
                if ($i >= $childrenSize)
                    break a;
                $child = ju_ArrayList_get($this.$children, $i);
                $set = $child.$processBackRefReplacement();
                if ($set === null)
                    $set = $child;
                else {
                    $child.$isSecondPassVisited = 1;
                    ju_ArrayList_remove($this.$children, $i);
                    ju_ArrayList_add0($this.$children, $i, $set);
                }
                if (!$set.$isSecondPassVisited)
                    $set.$processSecondPass();
                $i = $i + 1 | 0;
            }
        }
    }
    if ($this.$next2 !== null)
        jur_AbstractSet_processSecondPass($this);
},
jur_NonCapJointSet = $rt_classWithoutFields(jur_JointSet),
jur_NonCapJointSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $start, $size, $i, $shift;
    $start = jur_MatchResultImpl_getConsumed($matchResult, $this.$groupIndex);
    jur_MatchResultImpl_setConsumed($matchResult, $this.$groupIndex, $stringIndex);
    $size = $this.$children.$size0;
    $i = 0;
    while (true) {
        if ($i >= $size) {
            jur_MatchResultImpl_setConsumed($matchResult, $this.$groupIndex, $start);
            return (-1);
        }
        $shift = (ju_ArrayList_get($this.$children, $i)).$matches1($stringIndex, $testString, $matchResult);
        if ($shift >= 0)
            break;
        $i = $i + 1 | 0;
    }
    return $shift;
},
jur_NonCapJointSet_getName = $this => {
    return $rt_s(195);
},
jur_NonCapJointSet_hasConsumed = ($this, $matchResult) => {
    return !jur_MatchResultImpl_getConsumed($matchResult, $this.$groupIndex) ? 0 : 1;
},
jur_AtomicJointSet = $rt_classWithoutFields(jur_NonCapJointSet),
jur_AtomicJointSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $start, $size, $i;
    $start = jur_MatchResultImpl_getConsumed($matchResult, $this.$groupIndex);
    jur_MatchResultImpl_setConsumed($matchResult, $this.$groupIndex, $stringIndex);
    $size = $this.$children.$size0;
    $i = 0;
    while ($i < $size) {
        if ((ju_ArrayList_get($this.$children, $i)).$matches1($stringIndex, $testString, $matchResult) >= 0)
            return $this.$next2.$matches1($this.$fSet.$index6, $testString, $matchResult);
        $i = $i + 1 | 0;
    }
    jur_MatchResultImpl_setConsumed($matchResult, $this.$groupIndex, $start);
    return (-1);
},
jur_AtomicJointSet_setNext = ($this, $next) => {
    $this.$next2 = $next;
},
jur_AtomicJointSet_getName = $this => {
    return $rt_s(195);
},
jur_PositiveLookAhead = $rt_classWithoutFields(jur_AtomicJointSet),
jur_PositiveLookAhead_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $size, $i;
    $size = $this.$children.$size0;
    $i = 0;
    while ($i < $size) {
        if ((ju_ArrayList_get($this.$children, $i)).$matches1($stringIndex, $testString, $matchResult) >= 0)
            return $this.$next2.$matches1($stringIndex, $testString, $matchResult);
        $i = $i + 1 | 0;
    }
    return (-1);
},
jur_PositiveLookAhead_hasConsumed = ($this, $matchResult) => {
    return 0;
},
jur_PositiveLookAhead_getName = $this => {
    return $rt_s(196);
},
jur_NegativeLookAhead = $rt_classWithoutFields(jur_AtomicJointSet),
jur_NegativeLookAhead_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $size, $i;
    $size = $this.$children.$size0;
    $i = 0;
    while (true) {
        if ($i >= $size)
            return $this.$next2.$matches1($stringIndex, $testString, $matchResult);
        if ((ju_ArrayList_get($this.$children, $i)).$matches1($stringIndex, $testString, $matchResult) >= 0)
            break;
        $i = $i + 1 | 0;
    }
    return (-1);
},
jur_NegativeLookAhead_hasConsumed = ($this, $matchResult) => {
    return 0;
},
jur_NegativeLookAhead_getName = $this => {
    return $rt_s(197);
},
jur_PositiveLookBehind = $rt_classWithoutFields(jur_AtomicJointSet),
jur_PositiveLookBehind_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $size, $leftBound, $shift, $i;
    $size = $this.$children.$size0;
    $leftBound = $matchResult.$transparentBounds ? 0 : $matchResult.$leftBound;
    a: {
        $shift = $this.$next2.$matches1($stringIndex, $testString, $matchResult);
        if ($shift >= 0) {
            jur_MatchResultImpl_setConsumed($matchResult, $this.$groupIndex, $stringIndex);
            $i = 0;
            while (true) {
                if ($i >= $size)
                    break a;
                if ((ju_ArrayList_get($this.$children, $i)).$findBack($leftBound, $stringIndex, $testString, $matchResult) >= 0) {
                    jur_MatchResultImpl_setConsumed($matchResult, $this.$groupIndex, (-1));
                    return $shift;
                }
                $i = $i + 1 | 0;
            }
        }
    }
    return (-1);
},
jur_PositiveLookBehind_hasConsumed = ($this, $matchResult) => {
    return 0;
},
jur_PositiveLookBehind_getName = $this => {
    return $rt_s(198);
},
jur_NegativeLookBehind = $rt_classWithoutFields(jur_AtomicJointSet),
jur_NegativeLookBehind_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $size, $i;
    $size = $this.$children.$size0;
    jur_MatchResultImpl_setConsumed($matchResult, $this.$groupIndex, $stringIndex);
    $i = 0;
    while (true) {
        if ($i >= $size)
            return $this.$next2.$matches1($stringIndex, $testString, $matchResult);
        if ((ju_ArrayList_get($this.$children, $i)).$findBack(0, $stringIndex, $testString, $matchResult) >= 0)
            break;
        $i = $i + 1 | 0;
    }
    return (-1);
},
jur_NegativeLookBehind_hasConsumed = ($this, $matchResult) => {
    return 0;
},
jur_NegativeLookBehind_getName = $this => {
    return $rt_s(199);
};
function jur_SingleSet() {
    jur_JointSet.call(this);
    this.$kid = null;
}
let jur_SingleSet__init_ = ($this, $child, $fSet) => {
    jur_AbstractSet__init_($this);
    $this.$kid = $child;
    $this.$fSet = $fSet;
    $this.$groupIndex = $fSet.$groupIndex0;
},
jur_SingleSet__init_0 = (var_0, var_1) => {
    let var_2 = new jur_SingleSet();
    jur_SingleSet__init_(var_2, var_0, var_1);
    return var_2;
},
jur_SingleSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $start, $shift;
    $start = jur_MatchResultImpl_getStart($matchResult, $this.$groupIndex);
    jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex, $stringIndex);
    $shift = $this.$kid.$matches1($stringIndex, $testString, $matchResult);
    if ($shift >= 0)
        return $shift;
    jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex, $start);
    return (-1);
},
jur_SingleSet_find = ($this, $stringIndex, $testString, $matchResult) => {
    let $res;
    $res = $this.$kid.$find0($stringIndex, $testString, $matchResult);
    if ($res >= 0)
        jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex, $res);
    return $res;
},
jur_SingleSet_findBack = ($this, $stringIndex, $lastIndex, $testString, $matchResult) => {
    let $res;
    $res = $this.$kid.$findBack($stringIndex, $lastIndex, $testString, $matchResult);
    if ($res >= 0)
        jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex, $res);
    return $res;
},
jur_SingleSet_first = ($this, $set) => {
    return $this.$kid.$first($set);
},
jur_SingleSet_processBackRefReplacement = $this => {
    let $set;
    $set = new jur_BackReferencedSingleSet;
    jur_SingleSet__init_($set, $this.$kid, $this.$fSet);
    $this.$next2 = $set;
    return $set;
},
jur_SingleSet_processSecondPass = $this => {
    let $set;
    $this.$isSecondPassVisited = 1;
    $set = $this.$fSet;
    if ($set !== null && !$set.$isSecondPassVisited)
        jur_AbstractSet_processSecondPass($set);
    $set = $this.$kid;
    if ($set !== null && !$set.$isSecondPassVisited) {
        $set = $set.$processBackRefReplacement();
        if ($set !== null) {
            $this.$kid.$isSecondPassVisited = 1;
            $this.$kid = $set;
        }
        $this.$kid.$processSecondPass();
    }
},
jlr_Array = $rt_classWithoutFields(),
jlr_Array_getLength = var$1 => {
    if (var$1 === null || var$1.constructor.$meta.item === 'undefined') {
        $rt_throw(jl_IllegalArgumentException__init_());
    }
    return var$1.data.length;
},
jlr_Array_newInstance = (var$1, $length) => {
    if (var$1 === null) {
        var$1 = new jl_NullPointerException;
        jl_Throwable__init_(var$1);
        $rt_throw(var$1);
    }
    if (var$1 === $rt_cls($rt_voidcls)) {
        var$1 = new jl_IllegalArgumentException;
        jl_Throwable__init_(var$1);
        $rt_throw(var$1);
    }
    if ($length >= 0)
        return jlr_Array_newInstanceImpl(var$1.$platformClass, $length);
    var$1 = new jl_NegativeArraySizeException;
    jl_Throwable__init_(var$1);
    $rt_throw(var$1);
},
jlr_Array_newInstanceImpl = (var$1, var$2) => {
    if (var$1.$meta.primitive) {
        switch (var$1) {
        }
        ;
    }
    return $rt_createArray(var$1, var$2);
},
jl_ArrayStoreException = $rt_classWithoutFields(jl_RuntimeException),
jur_SpecialToken = $rt_classWithoutFields();
function jur_AbstractCharClass() {
    let a = this; jur_SpecialToken.call(a);
    a.$alt = 0;
    a.$altSurrogates = 0;
    a.$lowHighSurrogates = null;
    a.$charClassWithoutSurrogates = null;
    a.$charClassWithSurrogates = null;
    a.$mayContainSupplCodepoints = 0;
}
let jur_AbstractCharClass_charClasses = null,
jur_AbstractCharClass__init_ = $this => {
    let var$1;
    var$1 = new ju_BitSet;
    var$1.$data = $rt_createIntArray(64);
    $this.$lowHighSurrogates = var$1;
},
jur_AbstractCharClass_getBits = $this => {
    return null;
},
jur_AbstractCharClass_getLowHighSurrogates = $this => {
    return $this.$lowHighSurrogates;
},
jur_AbstractCharClass_hasLowHighSurrogates = $this => {
    let var$1, var$2, var$3, var$4, var$5;
    if (!$this.$altSurrogates)
        var$1 = ju_BitSet_nextSetBit($this.$lowHighSurrogates, 0) >= 2048 ? 0 : 1;
    else {
        a: {
            var$2 = $this.$lowHighSurrogates;
            var$1 = 0;
            var$3 = var$2.$length1;
            if (var$1 < var$3) {
                var$4 = var$2.$data.data;
                var$5 = (var$4[0] ^ (-1)) >>> 0 | 0;
                if (var$5)
                    var$1 = jl_Integer_numberOfTrailingZeros(var$5) + var$1 | 0;
                else {
                    var$1 = (var$3 + 31 | 0) / 32 | 0;
                    var$5 = 1;
                    while (var$5 < var$1) {
                        if (var$4[var$5] != (-1)) {
                            var$1 = (var$5 * 32 | 0) + jl_Integer_numberOfTrailingZeros(var$4[var$5] ^ (-1)) | 0;
                            break a;
                        }
                        var$5 = var$5 + 1 | 0;
                    }
                    var$1 = var$3;
                }
            }
        }
        var$1 = var$1 >= 2048 ? 0 : 1;
    }
    return var$1;
},
jur_AbstractCharClass_mayContainSupplCodepoints = $this => {
    return $this.$mayContainSupplCodepoints;
},
jur_AbstractCharClass_getInstance = $this => {
    return $this;
},
jur_AbstractCharClass_getSurrogates = $this => {
    let $lHS, var$2;
    if ($this.$charClassWithSurrogates === null) {
        $lHS = $this.$getLowHighSurrogates();
        var$2 = new jur_AbstractCharClass$1;
        var$2.$this$034 = $this;
        var$2.$val$lHS = $lHS;
        jur_AbstractCharClass__init_(var$2);
        $this.$charClassWithSurrogates = var$2;
        jur_AbstractCharClass_setNegative(var$2, $this.$altSurrogates);
    }
    return $this.$charClassWithSurrogates;
},
jur_AbstractCharClass_getWithoutSurrogates = $this => {
    let $lHS, var$2;
    if ($this.$charClassWithoutSurrogates === null) {
        $lHS = $this.$getLowHighSurrogates();
        var$2 = new jur_AbstractCharClass$2;
        var$2.$this$031 = $this;
        var$2.$val$lHS0 = $lHS;
        var$2.$val$thisClass = $this;
        jur_AbstractCharClass__init_(var$2);
        $this.$charClassWithoutSurrogates = var$2;
        jur_AbstractCharClass_setNegative(var$2, $this.$alt);
        $this.$charClassWithoutSurrogates.$mayContainSupplCodepoints = $this.$mayContainSupplCodepoints;
    }
    return $this.$charClassWithoutSurrogates;
},
jur_AbstractCharClass_hasUCI = $this => {
    return 0;
},
jur_AbstractCharClass_setNegative = ($this, $value) => {
    let var$2;
    var$2 = $this.$alt;
    if (var$2 ^ $value) {
        $this.$alt = var$2 ? 0 : 1;
        $this.$altSurrogates = $this.$altSurrogates ? 0 : 1;
    }
    if (!$this.$mayContainSupplCodepoints)
        $this.$mayContainSupplCodepoints = 1;
    return $this;
},
jur_AbstractCharClass_isNegative = $this => {
    return $this.$alt;
},
jur_AbstractCharClass_intersects = ($cc1, $cc2) => {
    let var$3, var$4;
    if ($cc1.$getBits() !== null && $cc2.$getBits() !== null) {
        $cc1 = $cc1.$getBits();
        $cc2 = $cc2.$getBits();
        var$3 = jl_Math_min($cc1.$data.data.length, $cc2.$data.data.length);
        var$4 = 0;
        a: {
            while (var$4 < var$3) {
                if ($cc1.$data.data[var$4] & $cc2.$data.data[var$4]) {
                    var$3 = 1;
                    break a;
                }
                var$4 = var$4 + 1 | 0;
            }
            var$3 = 0;
        }
        return var$3;
    }
    return 1;
},
jur_AbstractCharClass_getPredefinedClass = ($name, $negative) => {
    let var$3, var$4, var$5;
    var$3 = 0;
    while (true) {
        var$4 = jur_AbstractCharClass$PredefinedCharacterClasses_contents.data;
        if (var$3 >= var$4.length) {
            var$5 = new ju_MissingResourceException;
            jl_Throwable__init_0(var$5, $rt_s(2));
            var$5.$className = $rt_s(2);
            var$5.$key1 = $name;
            $rt_throw(var$5);
        }
        var$4 = var$4[var$3].data;
        if (jl_String_equals($name, var$4[0]))
            break;
        var$3 = var$3 + 1 | 0;
    }
    return jur_AbstractCharClass$LazyCharClass_getValue(var$4[1], $negative);
},
jur_AbstractCharClass__clinit_ = () => {
    jur_AbstractCharClass_charClasses = new jur_AbstractCharClass$PredefinedCharacterClasses;
};
function ju_MissingResourceException() {
    let a = this; jl_RuntimeException.call(a);
    a.$className = null;
    a.$key1 = null;
}
function jur_CharClass() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$ci = 0;
    a.$uci = 0;
    a.$hasUCI0 = 0;
    a.$invertedSurrogates = 0;
    a.$inverted = 0;
    a.$hideBits = 0;
    a.$bits = null;
    a.$nonBitSet = null;
}
let jur_CharClass__init_2 = $this => {
    jur_AbstractCharClass__init_($this);
    $this.$bits = ju_BitSet__init_();
},
jur_CharClass__init_ = () => {
    let var_0 = new jur_CharClass();
    jur_CharClass__init_2(var_0);
    return var_0;
},
jur_CharClass__init_1 = ($this, $ci, $uci) => {
    jur_AbstractCharClass__init_($this);
    $this.$bits = ju_BitSet__init_();
    $this.$ci = $ci;
    $this.$uci = $uci;
},
jur_CharClass__init_0 = (var_0, var_1) => {
    let var_2 = new jur_CharClass();
    jur_CharClass__init_1(var_2, var_0, var_1);
    return var_2;
},
jur_CharClass_add0 = ($this, $ch) => {
    a: {
        if ($this.$ci) {
            b: {
                if (!($ch >= 97 && $ch <= 122)) {
                    if ($ch < 65)
                        break b;
                    if ($ch > 90)
                        break b;
                }
                if ($this.$inverted) {
                    ju_BitSet_clear($this.$bits, jur_Pattern_getSupplement($ch & 65535));
                    break a;
                }
                ju_BitSet_set0($this.$bits, jur_Pattern_getSupplement($ch & 65535));
                break a;
            }
            if ($this.$uci && $ch > 128) {
                $this.$hasUCI0 = 1;
                $ch = jl_Character_toLowerCase0(jl_Character_toUpperCase0($ch));
            }
        }
    }
    if (!(!jur_Lexer_isHighSurrogate($ch) && !jur_Lexer_isLowSurrogate($ch))) {
        if ($this.$invertedSurrogates)
            ju_BitSet_clear($this.$lowHighSurrogates, $ch - 55296 | 0);
        else
            ju_BitSet_set0($this.$lowHighSurrogates, $ch - 55296 | 0);
    }
    if ($this.$inverted)
        ju_BitSet_clear($this.$bits, $ch);
    else
        ju_BitSet_set0($this.$bits, $ch);
    if (!$this.$mayContainSupplCodepoints && jl_Character_isSupplementaryCodePoint($ch))
        $this.$mayContainSupplCodepoints = 1;
    return $this;
},
jur_CharClass_add1 = ($this, $cc) => {
    let $curAlt, $nb, var$4;
    if (!$this.$mayContainSupplCodepoints && $cc.$mayContainSupplCodepoints)
        $this.$mayContainSupplCodepoints = 1;
    if ($this.$invertedSurrogates) {
        if (!$cc.$altSurrogates)
            ju_BitSet_andNot($this.$lowHighSurrogates, $cc.$getLowHighSurrogates());
        else
            ju_BitSet_and($this.$lowHighSurrogates, $cc.$getLowHighSurrogates());
    } else if (!$cc.$altSurrogates)
        ju_BitSet_or($this.$lowHighSurrogates, $cc.$getLowHighSurrogates());
    else {
        ju_BitSet_xor($this.$lowHighSurrogates, $cc.$getLowHighSurrogates());
        ju_BitSet_and($this.$lowHighSurrogates, $cc.$getLowHighSurrogates());
        $this.$altSurrogates = $this.$altSurrogates ? 0 : 1;
        $this.$invertedSurrogates = 1;
    }
    if (!$this.$hideBits && $cc.$getBits() !== null) {
        if ($this.$inverted) {
            if (!$cc.$alt)
                ju_BitSet_andNot($this.$bits, $cc.$getBits());
            else
                ju_BitSet_and($this.$bits, $cc.$getBits());
        } else if (!$cc.$alt)
            ju_BitSet_or($this.$bits, $cc.$getBits());
        else {
            ju_BitSet_xor($this.$bits, $cc.$getBits());
            ju_BitSet_and($this.$bits, $cc.$getBits());
            $this.$alt = $this.$alt ? 0 : 1;
            $this.$inverted = 1;
        }
    } else {
        $curAlt = $this.$alt;
        $nb = $this.$nonBitSet;
        if ($nb !== null) {
            if (!$curAlt) {
                var$4 = new jur_CharClass$5;
                var$4.$this$015 = $this;
                var$4.$val$curAlt10 = $curAlt;
                var$4.$val$nb4 = $nb;
                var$4.$val$cc2 = $cc;
                jur_AbstractCharClass__init_(var$4);
                $this.$nonBitSet = var$4;
            } else {
                var$4 = new jur_CharClass$4;
                var$4.$this$038 = $this;
                var$4.$val$curAlt2 = $curAlt;
                var$4.$val$nb2 = $nb;
                var$4.$val$cc0 = $cc;
                jur_AbstractCharClass__init_(var$4);
                $this.$nonBitSet = var$4;
            }
        } else {
            if ($curAlt && !$this.$inverted && ju_BitSet_isEmpty($this.$bits)) {
                $nb = new jur_CharClass$1;
                $nb.$this$025 = $this;
                $nb.$val$cc1 = $cc;
                jur_AbstractCharClass__init_($nb);
                $this.$nonBitSet = $nb;
            } else if (!$curAlt) {
                $nb = new jur_CharClass$3;
                $nb.$this$01 = $this;
                $nb.$val$curAlt = $curAlt;
                $nb.$val$cc = $cc;
                jur_AbstractCharClass__init_($nb);
                $this.$nonBitSet = $nb;
            } else {
                $nb = new jur_CharClass$2;
                $nb.$this$02 = $this;
                $nb.$val$curAlt0 = $curAlt;
                $nb.$val$cc3 = $cc;
                jur_AbstractCharClass__init_($nb);
                $this.$nonBitSet = $nb;
            }
            $this.$hideBits = 1;
        }
    }
    return $this;
},
jur_CharClass_add = ($this, $i, $end) => {
    let var$3, var$4, var$5, var$6, var$7;
    if ($i > $end) {
        var$3 = new jl_IllegalArgumentException;
        jl_Throwable__init_(var$3);
        $rt_throw(var$3);
    }
    a: {
        b: {
            if (!$this.$ci) {
                if ($end < 55296)
                    break b;
                if ($i > 57343)
                    break b;
            }
            $end = $end + 1 | 0;
            while (true) {
                if ($i >= $end)
                    break a;
                jur_CharClass_add0($this, $i);
                $i = $i + 1 | 0;
            }
        }
        if (!$this.$inverted)
            ju_BitSet_set($this.$bits, $i, $end + 1 | 0);
        else {
            var$3 = $this.$bits;
            $end = $end + 1 | 0;
            if ($i >= 0 && $i <= $end) {
                var$4 = var$3.$length1;
                if ($i < var$4) {
                    var$5 = jl_Math_min(var$4, $end);
                    if ($i != var$5) {
                        var$6 = $i / 32 | 0;
                        $end = var$5 / 32 | 0;
                        if (var$6 == $end) {
                            var$7 = var$3.$data.data;
                            var$7[var$6] = var$7[var$6] & (ju_BitSet_trailingOneBits(var$3, $i) | ju_BitSet_trailingZeroBits(var$3, var$5));
                        } else {
                            var$7 = var$3.$data.data;
                            var$7[var$6] = var$7[var$6] & ju_BitSet_trailingOneBits(var$3, $i);
                            var$4 = var$6 + 1 | 0;
                            while (var$4 < $end) {
                                var$3.$data.data[var$4] = 0;
                                var$4 = var$4 + 1 | 0;
                            }
                            if (var$5 & 31) {
                                var$7 = var$3.$data.data;
                                var$7[$end] = var$7[$end] & ju_BitSet_trailingZeroBits(var$3, var$5);
                            }
                        }
                        ju_BitSet_recalculateLength(var$3);
                    }
                }
            } else {
                var$3 = new jl_IndexOutOfBoundsException;
                jl_Throwable__init_(var$3);
                $rt_throw(var$3);
            }
        }
    }
    return $this;
},
jur_CharClass_union = ($this, $clazz) => {
    let $curAlt, $nb, var$4;
    if (!$this.$mayContainSupplCodepoints && $clazz.$mayContainSupplCodepoints)
        $this.$mayContainSupplCodepoints = 1;
    if ($clazz.$hasUCI0)
        $this.$hasUCI0 = 1;
    $curAlt = $this.$altSurrogates;
    if (!($curAlt ^ $clazz.$altSurrogates)) {
        if (!$curAlt)
            ju_BitSet_or($this.$lowHighSurrogates, $clazz.$lowHighSurrogates);
        else
            ju_BitSet_and($this.$lowHighSurrogates, $clazz.$lowHighSurrogates);
    } else if ($curAlt)
        ju_BitSet_andNot($this.$lowHighSurrogates, $clazz.$lowHighSurrogates);
    else {
        ju_BitSet_xor($this.$lowHighSurrogates, $clazz.$lowHighSurrogates);
        ju_BitSet_and($this.$lowHighSurrogates, $clazz.$lowHighSurrogates);
        $this.$altSurrogates = 1;
    }
    if (!$this.$hideBits && jur_CharClass_getBits($clazz) !== null) {
        $curAlt = $this.$alt;
        if (!($curAlt ^ $clazz.$alt)) {
            if (!$curAlt)
                ju_BitSet_or($this.$bits, jur_CharClass_getBits($clazz));
            else
                ju_BitSet_and($this.$bits, jur_CharClass_getBits($clazz));
        } else if ($curAlt)
            ju_BitSet_andNot($this.$bits, jur_CharClass_getBits($clazz));
        else {
            ju_BitSet_xor($this.$bits, jur_CharClass_getBits($clazz));
            ju_BitSet_and($this.$bits, jur_CharClass_getBits($clazz));
            $this.$alt = 1;
        }
    } else {
        $curAlt = $this.$alt;
        $nb = $this.$nonBitSet;
        if ($nb !== null) {
            if (!$curAlt) {
                var$4 = new jur_CharClass$11;
                var$4.$this$013 = $this;
                var$4.$val$curAlt7 = $curAlt;
                var$4.$val$nb3 = $nb;
                var$4.$val$clazz9 = $clazz;
                jur_AbstractCharClass__init_(var$4);
                $this.$nonBitSet = var$4;
            } else {
                var$4 = new jur_CharClass$10;
                var$4.$this$016 = $this;
                var$4.$val$curAlt9 = $curAlt;
                var$4.$val$nb0 = $nb;
                var$4.$val$clazz = $clazz;
                jur_AbstractCharClass__init_(var$4);
                $this.$nonBitSet = var$4;
            }
        } else {
            if (!$this.$inverted && ju_BitSet_isEmpty($this.$bits)) {
                if (!$curAlt) {
                    $nb = new jur_CharClass$7;
                    $nb.$this$039 = $this;
                    $nb.$val$clazz2 = $clazz;
                    jur_AbstractCharClass__init_($nb);
                    $this.$nonBitSet = $nb;
                } else {
                    $nb = new jur_CharClass$6;
                    $nb.$this$017 = $this;
                    $nb.$val$clazz8 = $clazz;
                    jur_AbstractCharClass__init_($nb);
                    $this.$nonBitSet = $nb;
                }
            } else if (!$curAlt) {
                $nb = new jur_CharClass$9;
                $nb.$this$06 = $this;
                $nb.$val$clazz4 = $clazz;
                $nb.$val$curAlt1 = $curAlt;
                jur_AbstractCharClass__init_($nb);
                $this.$nonBitSet = $nb;
            } else {
                $nb = new jur_CharClass$8;
                $nb.$this$04 = $this;
                $nb.$val$clazz5 = $clazz;
                $nb.$val$curAlt5 = $curAlt;
                jur_AbstractCharClass__init_($nb);
                $this.$nonBitSet = $nb;
            }
            $this.$hideBits = 1;
        }
    }
},
jur_CharClass_intersection = ($this, $clazz) => {
    let $curAlt, $nb, var$4;
    if (!$this.$mayContainSupplCodepoints && $clazz.$mayContainSupplCodepoints)
        $this.$mayContainSupplCodepoints = 1;
    if ($clazz.$hasUCI0)
        $this.$hasUCI0 = 1;
    $curAlt = $this.$altSurrogates;
    if (!($curAlt ^ $clazz.$altSurrogates)) {
        if (!$curAlt)
            ju_BitSet_and($this.$lowHighSurrogates, $clazz.$lowHighSurrogates);
        else
            ju_BitSet_or($this.$lowHighSurrogates, $clazz.$lowHighSurrogates);
    } else if (!$curAlt)
        ju_BitSet_andNot($this.$lowHighSurrogates, $clazz.$lowHighSurrogates);
    else {
        ju_BitSet_xor($this.$lowHighSurrogates, $clazz.$lowHighSurrogates);
        ju_BitSet_and($this.$lowHighSurrogates, $clazz.$lowHighSurrogates);
        $this.$altSurrogates = 0;
    }
    if (!$this.$hideBits && jur_CharClass_getBits($clazz) !== null) {
        $curAlt = $this.$alt;
        if (!($curAlt ^ $clazz.$alt)) {
            if (!$curAlt)
                ju_BitSet_and($this.$bits, jur_CharClass_getBits($clazz));
            else
                ju_BitSet_or($this.$bits, jur_CharClass_getBits($clazz));
        } else if (!$curAlt)
            ju_BitSet_andNot($this.$bits, jur_CharClass_getBits($clazz));
        else {
            ju_BitSet_xor($this.$bits, jur_CharClass_getBits($clazz));
            ju_BitSet_and($this.$bits, jur_CharClass_getBits($clazz));
            $this.$alt = 0;
        }
    } else {
        $curAlt = $this.$alt;
        $nb = $this.$nonBitSet;
        if ($nb !== null) {
            if (!$curAlt) {
                var$4 = new jur_CharClass$17;
                var$4.$this$014 = $this;
                var$4.$val$curAlt8 = $curAlt;
                var$4.$val$nb1 = $nb;
                var$4.$val$clazz3 = $clazz;
                jur_AbstractCharClass__init_(var$4);
                $this.$nonBitSet = var$4;
            } else {
                var$4 = new jur_CharClass$16;
                var$4.$this$020 = $this;
                var$4.$val$curAlt6 = $curAlt;
                var$4.$val$nb = $nb;
                var$4.$val$clazz7 = $clazz;
                jur_AbstractCharClass__init_(var$4);
                $this.$nonBitSet = var$4;
            }
        } else {
            if (!$this.$inverted && ju_BitSet_isEmpty($this.$bits)) {
                if (!$curAlt) {
                    $nb = new jur_CharClass$13;
                    $nb.$this$018 = $this;
                    $nb.$val$clazz0 = $clazz;
                    jur_AbstractCharClass__init_($nb);
                    $this.$nonBitSet = $nb;
                } else {
                    $nb = new jur_CharClass$12;
                    $nb.$this$037 = $this;
                    $nb.$val$clazz1 = $clazz;
                    jur_AbstractCharClass__init_($nb);
                    $this.$nonBitSet = $nb;
                }
            } else if (!$curAlt) {
                $nb = new jur_CharClass$15;
                $nb.$this$09 = $this;
                $nb.$val$clazz10 = $clazz;
                $nb.$val$curAlt4 = $curAlt;
                jur_AbstractCharClass__init_($nb);
                $this.$nonBitSet = $nb;
            } else {
                $nb = new jur_CharClass$14;
                $nb.$this$05 = $this;
                $nb.$val$clazz6 = $clazz;
                $nb.$val$curAlt3 = $curAlt;
                jur_AbstractCharClass__init_($nb);
                $this.$nonBitSet = $nb;
            }
            $this.$hideBits = 1;
        }
    }
},
jur_CharClass_contains = ($this, $ch) => {
    let var$2;
    var$2 = $this.$nonBitSet;
    if (var$2 !== null)
        return $this.$alt ^ var$2.$contains1($ch);
    return $this.$alt ^ ju_BitSet_get($this.$bits, $ch);
},
jur_CharClass_getBits = $this => {
    if (!$this.$hideBits)
        return $this.$bits;
    return null;
},
jur_CharClass_getLowHighSurrogates = $this => {
    return $this.$lowHighSurrogates;
},
jur_CharClass_getInstance = $this => {
    let $bs, $res;
    if ($this.$nonBitSet !== null)
        return $this;
    $bs = jur_CharClass_getBits($this);
    $res = new jur_CharClass$18;
    $res.$this$012 = $this;
    $res.$val$bs = $bs;
    jur_AbstractCharClass__init_($res);
    return jur_AbstractCharClass_setNegative($res, $this.$alt);
},
jur_CharClass_toString = $this => {
    let $temp, $i, var$3;
    $temp = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($temp);
    $i = ju_BitSet_nextSetBit($this.$bits, 0);
    while ($i >= 0) {
        jl_AbstractStringBuilder_append3($temp, jl_Character_toChars($i));
        jl_AbstractStringBuilder_append($temp, 124);
        $i = ju_BitSet_nextSetBit($this.$bits, $i + 1 | 0);
    }
    var$3 = $temp.$length0;
    if (var$3 > 0)
        jl_StringBuilder_deleteCharAt($temp, var$3 - 1 | 0);
    return jl_AbstractStringBuilder_toString($temp);
},
jur_CharClass_hasUCI = $this => {
    return $this.$hasUCI0;
};
function jur_QuantifierSet() {
    jur_AbstractSet.call(this);
    this.$innerSet = null;
}
let jur_QuantifierSet__init_ = ($this, $innerSet, $next, $type) => {
    jur_AbstractSet__init_0($this, $next);
    $this.$innerSet = $innerSet;
    $this.$type = $type;
},
jur_QuantifierSet_getInnerSet = $this => {
    return $this.$innerSet;
},
jur_QuantifierSet_first = ($this, $set) => {
    return !$this.$innerSet.$first($set) && !$this.$next2.$first($set) ? 0 : 1;
},
jur_QuantifierSet_hasConsumed = ($this, $mr) => {
    return 1;
},
jur_QuantifierSet_processSecondPass = $this => {
    let $set;
    $this.$isSecondPassVisited = 1;
    $set = $this.$next2;
    if ($set !== null && !$set.$isSecondPassVisited) {
        $set = $set.$processBackRefReplacement();
        if ($set !== null) {
            $this.$next2.$isSecondPassVisited = 1;
            $this.$next2 = $set;
        }
        $this.$next2.$processSecondPass();
    }
    $set = $this.$innerSet;
    if ($set !== null) {
        if (!$set.$isSecondPassVisited) {
            $set = $set.$processBackRefReplacement();
            if ($set !== null) {
                $this.$innerSet.$isSecondPassVisited = 1;
                $this.$innerSet = $set;
            }
            $this.$innerSet.$processSecondPass();
        } else if ($set instanceof jur_SingleSet && $set.$fSet.$isBackReferenced)
            $this.$innerSet = $set.$next2;
    }
};
function jur_LeafQuantifierSet() {
    jur_QuantifierSet.call(this);
    this.$leaf = null;
}
let jur_LeafQuantifierSet__init_ = ($this, $innerSet, $next, $type) => {
    jur_QuantifierSet__init_($this, $innerSet, $next, $type);
    $this.$leaf = $innerSet;
},
jur_LeafQuantifierSet__init_0 = (var_0, var_1, var_2) => {
    let var_3 = new jur_LeafQuantifierSet();
    jur_LeafQuantifierSet__init_(var_3, var_0, var_1, var_2);
    return var_3;
},
jur_LeafQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $i, var$5;
    $i = 0;
    a: {
        while (($stringIndex + $this.$leaf.$charCount() | 0) <= $matchResult.$rightBound) {
            var$5 = $this.$leaf.$accepts($stringIndex, $testString);
            if (var$5 <= 0)
                break a;
            $stringIndex = $stringIndex + var$5 | 0;
            $i = $i + 1 | 0;
        }
    }
    while (true) {
        if ($i < 0)
            return (-1);
        var$5 = $this.$next2.$matches1($stringIndex, $testString, $matchResult);
        if (var$5 >= 0)
            break;
        $stringIndex = $stringIndex - $this.$leaf.$charCount() | 0;
        $i = $i + (-1) | 0;
    }
    return var$5;
},
jur_LeafQuantifierSet_getName = $this => {
    return $rt_s(200);
};
function jur_CompositeQuantifierSet() {
    jur_LeafQuantifierSet.call(this);
    this.$quantifier0 = null;
}
let jur_CompositeQuantifierSet__init_ = ($this, $quant, $innerSet, $next, $type) => {
    jur_LeafQuantifierSet__init_($this, $innerSet, $next, $type);
    $this.$quantifier0 = $quant;
},
jur_CompositeQuantifierSet__init_0 = (var_0, var_1, var_2, var_3) => {
    let var_4 = new jur_CompositeQuantifierSet();
    jur_CompositeQuantifierSet__init_(var_4, var_0, var_1, var_2, var_3);
    return var_4;
},
jur_CompositeQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let var$4, $min, $max, $i, $shift;
    var$4 = $this.$quantifier0;
    $min = var$4.$min0;
    $max = var$4.$max0;
    $i = 0;
    while (true) {
        if ($i >= $min) {
            a: {
                while ($i < $max) {
                    if (($stringIndex + $this.$leaf.$charCount() | 0) > $matchResult.$rightBound)
                        break a;
                    $shift = $this.$leaf.$accepts($stringIndex, $testString);
                    if ($shift < 1)
                        break a;
                    $stringIndex = $stringIndex + $shift | 0;
                    $i = $i + 1 | 0;
                }
            }
            while (true) {
                if ($i < $min)
                    return (-1);
                $shift = $this.$next2.$matches1($stringIndex, $testString, $matchResult);
                if ($shift >= 0)
                    break;
                $stringIndex = $stringIndex - $this.$leaf.$charCount() | 0;
                $i = $i + (-1) | 0;
            }
            return $shift;
        }
        if (($stringIndex + $this.$leaf.$charCount() | 0) > $matchResult.$rightBound) {
            $matchResult.$hitEnd = 1;
            return (-1);
        }
        $shift = $this.$leaf.$accepts($stringIndex, $testString);
        if ($shift < 1)
            break;
        $stringIndex = $stringIndex + $shift | 0;
        $i = $i + 1 | 0;
    }
    return (-1);
},
jur_CompositeQuantifierSet_getName = $this => {
    return jur_Quantifier_toString($this.$quantifier0);
},
jur_GroupQuantifierSet = $rt_classWithoutFields(jur_QuantifierSet),
jur_GroupQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $nextIndex;
    if (!$this.$innerSet.$hasConsumed($matchResult))
        return $this.$next2.$matches1($stringIndex, $testString, $matchResult);
    $nextIndex = $this.$innerSet.$matches1($stringIndex, $testString, $matchResult);
    if ($nextIndex >= 0)
        return $nextIndex;
    return $this.$next2.$matches1($stringIndex, $testString, $matchResult);
},
jur_GroupQuantifierSet_getName = $this => {
    return $rt_s(201);
},
jur_AltQuantifierSet = $rt_classWithoutFields(jur_LeafQuantifierSet),
jur_AltQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $shift;
    $shift = $this.$innerSet.$matches1($stringIndex, $testString, $matchResult);
    if ($shift < 0)
        $shift = $this.$next2.$matches1($stringIndex, $testString, $matchResult);
    return $shift;
},
jur_AltQuantifierSet_setNext = ($this, $next) => {
    $this.$next2 = $next;
    $this.$innerSet.$setNext($next);
},
jur_UnifiedQuantifierSet = $rt_classWithoutFields(jur_LeafQuantifierSet),
jur_UnifiedQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    while (($stringIndex + $this.$leaf.$charCount() | 0) <= $matchResult.$rightBound && $this.$leaf.$accepts($stringIndex, $testString) > 0) {
        $stringIndex = $stringIndex + $this.$leaf.$charCount() | 0;
    }
    return $this.$next2.$matches1($stringIndex, $testString, $matchResult);
},
jur_UnifiedQuantifierSet_find = ($this, $stringIndex, $testString, $matchResult) => {
    let $startSearch, $newSearch, $newSearch_0;
    $startSearch = $this.$next2.$find0($stringIndex, $testString, $matchResult);
    if ($startSearch < 0)
        return (-1);
    $newSearch = $startSearch - $this.$leaf.$charCount() | 0;
    while ($newSearch >= $stringIndex && $this.$leaf.$accepts($newSearch, $testString) > 0) {
        $newSearch_0 = $newSearch - $this.$leaf.$charCount() | 0;
        $startSearch = $newSearch;
        $newSearch = $newSearch_0;
    }
    return $startSearch;
},
jur_AbstractCharClass$PredefinedCharacterClasses = $rt_classWithoutFields(),
jur_AbstractCharClass$PredefinedCharacterClasses_space = null,
jur_AbstractCharClass$PredefinedCharacterClasses_digit = null,
jur_AbstractCharClass$PredefinedCharacterClasses_contents = null,
jur_AbstractCharClass$PredefinedCharacterClasses__clinit_ = () => {
    let var$1, var$2, var$3, var$4;
    jur_AbstractCharClass$PredefinedCharacterClasses_space = jur_AbstractCharClass$LazySpace__init_0();
    jur_AbstractCharClass$PredefinedCharacterClasses_digit = jur_AbstractCharClass$LazyDigit__init_();
    var$1 = $rt_createArray($rt_arraycls(jl_Object), 194);
    var$2 = var$1.data;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(202);
    var$4[1] = jur_AbstractCharClass$LazyLower__init_0();
    var$2[0] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(203);
    var$4[1] = jur_AbstractCharClass$LazyUpper__init_();
    var$2[1] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(204);
    var$4[1] = jur_AbstractCharClass$LazyASCII__init_0();
    var$2[2] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(205);
    var$4[1] = jur_AbstractCharClass$LazyAlpha__init_0();
    var$2[3] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(206);
    var$4[1] = jur_AbstractCharClass$PredefinedCharacterClasses_digit;
    var$2[4] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(207);
    var$4[1] = jur_AbstractCharClass$LazyAlnum__init_0();
    var$2[5] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(208);
    var$4[1] = jur_AbstractCharClass$LazyPunct__init_();
    var$2[6] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(209);
    var$4[1] = jur_AbstractCharClass$LazyGraph__init_();
    var$2[7] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(210);
    var$4[1] = jur_AbstractCharClass$LazyPrint__init_();
    var$2[8] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(211);
    var$4[1] = jur_AbstractCharClass$LazyBlank__init_();
    var$2[9] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(212);
    var$4[1] = jur_AbstractCharClass$LazyCntrl__init_();
    var$2[10] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(213);
    var$4[1] = jur_AbstractCharClass$LazyXDigit__init_();
    var$2[11] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(214);
    var$4[1] = jur_AbstractCharClass$LazyJavaLowerCase__init_0();
    var$2[12] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(215);
    var$4[1] = jur_AbstractCharClass$LazyJavaUpperCase__init_();
    var$2[13] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(216);
    var$4[1] = jur_AbstractCharClass$LazyJavaWhitespace__init_0();
    var$2[14] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(217);
    var$4[1] = jur_AbstractCharClass$LazyJavaMirrored__init_();
    var$2[15] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(218);
    var$4[1] = jur_AbstractCharClass$LazyJavaDefined__init_0();
    var$2[16] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(219);
    var$4[1] = jur_AbstractCharClass$LazyJavaDigit__init_0();
    var$2[17] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(220);
    var$4[1] = jur_AbstractCharClass$LazyJavaIdentifierIgnorable__init_0();
    var$2[18] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(221);
    var$4[1] = jur_AbstractCharClass$LazyJavaISOControl__init_();
    var$2[19] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(222);
    var$4[1] = jur_AbstractCharClass$LazyJavaJavaIdentifierPart__init_0();
    var$2[20] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(223);
    var$4[1] = jur_AbstractCharClass$LazyJavaJavaIdentifierStart__init_0();
    var$2[21] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(224);
    var$4[1] = jur_AbstractCharClass$LazyJavaLetter__init_0();
    var$2[22] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(225);
    var$4[1] = jur_AbstractCharClass$LazyJavaLetterOrDigit__init_0();
    var$2[23] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(226);
    var$4[1] = jur_AbstractCharClass$LazyJavaSpaceChar__init_0();
    var$2[24] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(227);
    var$4[1] = jur_AbstractCharClass$LazyJavaTitleCase__init_0();
    var$2[25] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(228);
    var$4[1] = jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart__init_();
    var$2[26] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(229);
    var$4[1] = jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart__init_0();
    var$2[27] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(230);
    var$4[1] = jur_AbstractCharClass$PredefinedCharacterClasses_space;
    var$2[28] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(231);
    var$4[1] = jur_AbstractCharClass$LazyWord__init_0();
    var$2[29] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(232);
    var$4[1] = jur_AbstractCharClass$LazyNonWord__init_();
    var$2[30] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(233);
    var$4[1] = jur_AbstractCharClass$PredefinedCharacterClasses_space;
    var$2[31] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(108);
    var$4[1] = jur_AbstractCharClass$LazyNonSpace__init_();
    var$2[32] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(234);
    var$4[1] = jur_AbstractCharClass$PredefinedCharacterClasses_digit;
    var$2[33] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(107);
    var$4[1] = jur_AbstractCharClass$LazyNonDigit__init_();
    var$2[34] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(235);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(0, 127);
    var$2[35] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(236);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(128, 255);
    var$2[36] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(237);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(256, 383);
    var$2[37] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(238);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(384, 591);
    var$2[38] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(239);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(592, 687);
    var$2[39] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(240);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(688, 767);
    var$2[40] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(241);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(768, 879);
    var$2[41] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(242);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(880, 1023);
    var$2[42] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(243);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(1024, 1279);
    var$2[43] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(244);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(1280, 1327);
    var$2[44] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(245);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(1328, 1423);
    var$2[45] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(246);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(1424, 1535);
    var$2[46] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(247);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(1536, 1791);
    var$2[47] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(248);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(1792, 1871);
    var$2[48] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(249);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(1872, 1919);
    var$2[49] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(250);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(1920, 1983);
    var$2[50] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(251);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(2304, 2431);
    var$2[51] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(252);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(2432, 2559);
    var$2[52] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(253);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(2560, 2687);
    var$2[53] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(254);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(2688, 2815);
    var$2[54] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(255);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(2816, 2943);
    var$2[55] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(256);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(2944, 3071);
    var$2[56] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(257);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(3072, 3199);
    var$2[57] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(258);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(3200, 3327);
    var$2[58] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(259);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(3328, 3455);
    var$2[59] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(260);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(3456, 3583);
    var$2[60] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(261);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(3584, 3711);
    var$2[61] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(262);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(3712, 3839);
    var$2[62] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(263);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(3840, 4095);
    var$2[63] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(264);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(4096, 4255);
    var$2[64] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(265);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(4256, 4351);
    var$2[65] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(266);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(4352, 4607);
    var$2[66] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(267);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(4608, 4991);
    var$2[67] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(268);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(4992, 5023);
    var$2[68] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(269);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(5024, 5119);
    var$2[69] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(270);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(5120, 5759);
    var$2[70] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(271);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(5760, 5791);
    var$2[71] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(272);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(5792, 5887);
    var$2[72] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(273);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(5888, 5919);
    var$2[73] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(274);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(5920, 5951);
    var$2[74] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(275);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(5952, 5983);
    var$2[75] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(276);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(5984, 6015);
    var$2[76] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(277);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(6016, 6143);
    var$2[77] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(278);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(6144, 6319);
    var$2[78] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(279);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(6400, 6479);
    var$2[79] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(280);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(6480, 6527);
    var$2[80] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(281);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(6528, 6623);
    var$2[81] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(282);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(6624, 6655);
    var$2[82] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(283);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(6656, 6687);
    var$2[83] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(284);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(7424, 7551);
    var$2[84] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(285);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(7552, 7615);
    var$2[85] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(286);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(7616, 7679);
    var$2[86] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(287);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(7680, 7935);
    var$2[87] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(288);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(7936, 8191);
    var$2[88] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(289);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(8192, 8303);
    var$2[89] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(290);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(8304, 8351);
    var$2[90] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(291);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(8352, 8399);
    var$2[91] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(292);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(8400, 8447);
    var$2[92] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(293);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(8448, 8527);
    var$2[93] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(294);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(8528, 8591);
    var$2[94] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(295);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(8592, 8703);
    var$2[95] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(296);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(8704, 8959);
    var$2[96] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(297);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(8960, 9215);
    var$2[97] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(298);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(9216, 9279);
    var$2[98] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(299);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(9280, 9311);
    var$2[99] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(300);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(9312, 9471);
    var$2[100] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(301);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(9472, 9599);
    var$2[101] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(302);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(9600, 9631);
    var$2[102] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(303);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(9632, 9727);
    var$2[103] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(304);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(9728, 9983);
    var$2[104] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(305);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(9984, 10175);
    var$2[105] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(306);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(10176, 10223);
    var$2[106] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(307);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(10224, 10239);
    var$2[107] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(308);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(10240, 10495);
    var$2[108] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(309);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(10496, 10623);
    var$2[109] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(310);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(10624, 10751);
    var$2[110] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(311);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(10752, 11007);
    var$2[111] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(312);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(11008, 11263);
    var$2[112] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(313);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(11264, 11359);
    var$2[113] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(314);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(11392, 11519);
    var$2[114] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(315);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(11520, 11567);
    var$2[115] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(316);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(11568, 11647);
    var$2[116] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(317);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(11648, 11743);
    var$2[117] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(318);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(11776, 11903);
    var$2[118] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(319);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(11904, 12031);
    var$2[119] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(320);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(12032, 12255);
    var$2[120] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(321);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(12272, 12287);
    var$2[121] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(322);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(12288, 12351);
    var$2[122] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(323);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(12352, 12447);
    var$2[123] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(324);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(12448, 12543);
    var$2[124] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(325);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(12544, 12591);
    var$2[125] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(326);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(12592, 12687);
    var$2[126] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(327);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(12688, 12703);
    var$2[127] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(328);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(12704, 12735);
    var$2[128] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(329);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(12736, 12783);
    var$2[129] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(330);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(12784, 12799);
    var$2[130] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(331);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(12800, 13055);
    var$2[131] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(332);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(13056, 13311);
    var$2[132] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(333);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(13312, 19893);
    var$2[133] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(334);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(19904, 19967);
    var$2[134] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(335);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(19968, 40959);
    var$2[135] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(336);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(40960, 42127);
    var$2[136] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(337);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(42128, 42191);
    var$2[137] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(338);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(42752, 42783);
    var$2[138] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(339);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(43008, 43055);
    var$2[139] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(340);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(44032, 55203);
    var$2[140] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(341);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(55296, 56191);
    var$2[141] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(342);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(56192, 56319);
    var$2[142] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(343);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(56320, 57343);
    var$2[143] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(344);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(57344, 63743);
    var$2[144] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(345);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(63744, 64255);
    var$2[145] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(346);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(64256, 64335);
    var$2[146] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(347);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(64336, 65023);
    var$2[147] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(348);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(65024, 65039);
    var$2[148] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(349);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(65040, 65055);
    var$2[149] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(350);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(65056, 65071);
    var$2[150] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(351);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(65072, 65103);
    var$2[151] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(352);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(65104, 65135);
    var$2[152] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(353);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(65136, 65279);
    var$2[153] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(354);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(65280, 65519);
    var$2[154] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(355);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(0, 1114111);
    var$2[155] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(356);
    var$4[1] = jur_AbstractCharClass$LazySpecialsBlock__init_();
    var$2[156] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(357);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(0, 1);
    var$2[157] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(358);
    var$4[1] = jur_AbstractCharClass$LazyCategoryScope__init_(62, 1);
    var$2[158] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(359);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(1, 1);
    var$2[159] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(360);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(2, 1);
    var$2[160] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(361);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(3, 0);
    var$2[161] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(362);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(4, 0);
    var$2[162] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(363);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(5, 1);
    var$2[163] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(364);
    var$4[1] = jur_AbstractCharClass$LazyCategoryScope__init_(448, 1);
    var$2[164] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(365);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(6, 1);
    var$2[165] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(366);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(7, 0);
    var$2[166] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(367);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(8, 1);
    var$2[167] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(368);
    var$4[1] = jur_AbstractCharClass$LazyCategoryScope__init_(3584, 1);
    var$2[168] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(369);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(9, 1);
    var$2[169] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(370);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(10, 1);
    var$2[170] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(371);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(11, 1);
    var$2[171] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(372);
    var$4[1] = jur_AbstractCharClass$LazyCategoryScope__init_(28672, 0);
    var$2[172] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(373);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(12, 0);
    var$2[173] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(374);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(13, 0);
    var$2[174] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(375);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(14, 0);
    var$2[175] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(376);
    var$4[1] = jur_AbstractCharClass$LazyCategoryScope__init_2(983040, 1, 1);
    var$2[176] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(377);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(15, 0);
    var$2[177] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(378);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(16, 1);
    var$2[178] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(379);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(18, 1);
    var$2[179] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(380);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_1(19, 0, 1);
    var$2[180] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(381);
    var$4[1] = jur_AbstractCharClass$LazyCategoryScope__init_(1643118592, 1);
    var$2[181] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(382);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(20, 0);
    var$2[182] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(383);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(21, 0);
    var$2[183] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(384);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(22, 0);
    var$2[184] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(385);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(23, 0);
    var$2[185] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(386);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(24, 1);
    var$2[186] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(387);
    var$4[1] = jur_AbstractCharClass$LazyCategoryScope__init_(2113929216, 1);
    var$2[187] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(388);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(25, 1);
    var$2[188] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(389);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(26, 0);
    var$2[189] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(390);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(27, 0);
    var$2[190] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(391);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(28, 1);
    var$2[191] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(392);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(29, 0);
    var$2[192] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(393);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(30, 0);
    var$2[193] = var$3;
    jur_AbstractCharClass$PredefinedCharacterClasses_contents = var$1;
};
function jur_AbstractCharClass$LazyCharClass() {
    let a = this; jl_Object.call(a);
    a.$posValue = null;
    a.$negValue = null;
}
let jur_AbstractCharClass$LazyCharClass_getValue = ($this, $negative) => {
    if (!$negative && $this.$posValue === null)
        $this.$posValue = $this.$computeValue();
    else if ($negative && $this.$negValue === null)
        $this.$negValue = jur_AbstractCharClass_setNegative($this.$computeValue(), 1);
    if ($negative)
        return $this.$negValue;
    return $this.$posValue;
},
jl_NumberFormatException = $rt_classWithoutFields(jl_IllegalArgumentException);
function jur_Quantifier() {
    let a = this; jur_SpecialToken.call(a);
    a.$min0 = 0;
    a.$max0 = 0;
}
let jur_Quantifier_toString = $this => {
    let var$1, var$2, var$3, var$4, var$5;
    var$1 = $this.$min0;
    var$2 = $this.$max0;
    var$3 = var$2 != 2147483647 ? jl_Integer_toString(var$2) : $rt_s(2);
    var$4 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$4);
    jl_AbstractStringBuilder_append(var$4, 123);
    var$5 = jl_StringBuilder_append0(var$4, var$1);
    jl_AbstractStringBuilder_append(var$5, 44);
    jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$5, var$3), 125);
    return jl_AbstractStringBuilder_toString(var$4);
},
jur_FSet$PossessiveFSet = $rt_classWithoutFields(jur_AbstractSet),
jur_FSet$PossessiveFSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    return $stringIndex;
},
jur_FSet$PossessiveFSet_getName = $this => {
    return $rt_s(394);
},
jur_FSet$PossessiveFSet_hasConsumed = ($this, $mr) => {
    return 0;
};
function ju_BitSet() {
    let a = this; jl_Object.call(a);
    a.$data = null;
    a.$length1 = 0;
}
let ju_BitSet__init_0 = $this => {
    $this.$data = $rt_createIntArray(2);
},
ju_BitSet__init_ = () => {
    let var_0 = new ju_BitSet();
    ju_BitSet__init_0(var_0);
    return var_0;
},
ju_BitSet_set0 = ($this, $bitIndex) => {
    let var$2, $index, var$4;
    if ($bitIndex < 0) {
        var$2 = new jl_IndexOutOfBoundsException;
        jl_Throwable__init_(var$2);
        $rt_throw(var$2);
    }
    $index = $bitIndex / 32 | 0;
    if ($bitIndex >= $this.$length1) {
        ju_BitSet_ensureCapacity($this, $index + 1 | 0);
        $this.$length1 = $bitIndex + 1 | 0;
    }
    var$4 = $this.$data.data;
    var$4[$index] = var$4[$index] | 1 << ($bitIndex % 32 | 0);
},
ju_BitSet_set = ($this, $fromIndex, $toIndex) => {
    let $fromDataIndex, $toDataIndex, var$5, $i, var$7;
    if ($fromIndex >= 0) {
        $fromDataIndex = $rt_compare($fromIndex, $toIndex);
        if ($fromDataIndex <= 0) {
            if (!$fromDataIndex)
                return;
            $fromDataIndex = $fromIndex / 32 | 0;
            $toDataIndex = $toIndex / 32 | 0;
            if ($toIndex > $this.$length1) {
                ju_BitSet_ensureCapacity($this, $toDataIndex + 1 | 0);
                $this.$length1 = $toIndex;
            }
            if ($fromDataIndex == $toDataIndex) {
                var$5 = $this.$data.data;
                var$5[$fromDataIndex] = var$5[$fromDataIndex] | ju_BitSet_trailingZeroBits($this, $fromIndex) & ju_BitSet_trailingOneBits($this, $toIndex);
            } else {
                var$5 = $this.$data.data;
                var$5[$fromDataIndex] = var$5[$fromDataIndex] | ju_BitSet_trailingZeroBits($this, $fromIndex);
                $i = $fromDataIndex + 1 | 0;
                while ($i < $toDataIndex) {
                    $this.$data.data[$i] = (-1);
                    $i = $i + 1 | 0;
                }
                if ($toIndex & 31) {
                    var$5 = $this.$data.data;
                    var$5[$toDataIndex] = var$5[$toDataIndex] | ju_BitSet_trailingOneBits($this, $toIndex);
                }
            }
            return;
        }
    }
    var$7 = new jl_IndexOutOfBoundsException;
    jl_Throwable__init_(var$7);
    $rt_throw(var$7);
},
ju_BitSet_trailingZeroBits = ($this, $num) => {
    return (-1) << ($num % 32 | 0);
},
ju_BitSet_trailingOneBits = ($this, $num) => {
    $num = $num % 32 | 0;
    return !$num ? 0 : (-1) >>> (32 - $num | 0) | 0;
},
ju_BitSet_clear = ($this, $bitIndex) => {
    let var$2, $index, var$4, var$5, var$6;
    if ($bitIndex < 0) {
        var$2 = new jl_IndexOutOfBoundsException;
        jl_Throwable__init_(var$2);
        $rt_throw(var$2);
    }
    $index = $bitIndex / 32 | 0;
    var$4 = $this.$data.data;
    if ($index < var$4.length) {
        var$5 = var$4[$index];
        var$6 = ($bitIndex % 32 | 0) & 31;
        var$4[$index] = var$5 & ((-2) << var$6 | ((-2) >>> (32 - var$6 | 0) | 0));
        if ($bitIndex == ($this.$length1 - 1 | 0))
            ju_BitSet_recalculateLength($this);
    }
},
ju_BitSet_get = ($this, $bitIndex) => {
    let var$2, $index, var$4;
    if ($bitIndex < 0) {
        var$2 = new jl_IndexOutOfBoundsException;
        jl_Throwable__init_(var$2);
        $rt_throw(var$2);
    }
    $index = $bitIndex / 32 | 0;
    var$4 = $this.$data.data;
    return $index < var$4.length && var$4[$index] & 1 << ($bitIndex % 32 | 0) ? 1 : 0;
},
ju_BitSet_nextSetBit = ($this, $fromIndex) => {
    let var$2, $top, $index, var$5, $i;
    if ($fromIndex < 0) {
        var$2 = new jl_IndexOutOfBoundsException;
        jl_Throwable__init_(var$2);
        $rt_throw(var$2);
    }
    $top = $this.$length1;
    if ($fromIndex >= $top)
        return (-1);
    $index = $fromIndex / 32 | 0;
    var$5 = $this.$data.data;
    $i = var$5[$index] >>> ($fromIndex % 32 | 0) | 0;
    if ($i)
        return jl_Integer_numberOfTrailingZeros($i) + $fromIndex | 0;
    $top = ($top + 31 | 0) / 32 | 0;
    $i = $index + 1 | 0;
    while ($i < $top) {
        if (var$5[$i])
            return ($i * 32 | 0) + jl_Integer_numberOfTrailingZeros(var$5[$i]) | 0;
        $i = $i + 1 | 0;
    }
    return (-1);
},
ju_BitSet_ensureCapacity = ($this, $capacity) => {
    let $newArrayLength, var$3, var$4, var$5;
    $newArrayLength = $this.$data.data.length;
    if ($newArrayLength >= $capacity)
        return;
    $newArrayLength = jl_Math_max(($capacity * 3 | 0) / 2 | 0, ($newArrayLength * 2 | 0) + 1 | 0);
    var$3 = $this.$data.data;
    var$4 = $rt_createIntArray($newArrayLength);
    var$5 = var$4.data;
    $capacity = jl_Math_min($newArrayLength, var$3.length);
    $newArrayLength = 0;
    while ($newArrayLength < $capacity) {
        var$5[$newArrayLength] = var$3[$newArrayLength];
        $newArrayLength = $newArrayLength + 1 | 0;
    }
    $this.$data = var$4;
},
ju_BitSet_recalculateLength = $this => {
    let $top, $i, $sz;
    $top = ($this.$length1 + 31 | 0) / 32 | 0;
    $this.$length1 = $top * 32 | 0;
    $i = $top - 1 | 0;
    a: {
        while (true) {
            if ($i < 0)
                break a;
            $sz = jl_Integer_numberOfLeadingZeros($this.$data.data[$i]);
            if ($sz < 32)
                break;
            $i = $i + (-1) | 0;
            $this.$length1 = $this.$length1 - 32 | 0;
        }
        $this.$length1 = $this.$length1 - $sz | 0;
    }
},
ju_BitSet_and = ($this, $set) => {
    let $i, $i_0, var$4, var$5;
    $i = jl_Math_min($this.$data.data.length, $set.$data.data.length);
    $i_0 = 0;
    while ($i_0 < $i) {
        var$4 = $this.$data.data;
        var$4[$i_0] = var$4[$i_0] & $set.$data.data[$i_0];
        $i_0 = $i_0 + 1 | 0;
    }
    while (true) {
        var$5 = $this.$data.data;
        if ($i >= var$5.length)
            break;
        var$5[$i] = 0;
        $i = $i + 1 | 0;
    }
    $this.$length1 = jl_Math_min($this.$length1, $set.$length1);
    ju_BitSet_recalculateLength($this);
},
ju_BitSet_andNot = ($this, $set) => {
    let $sz, $i, var$4;
    $sz = jl_Math_min($this.$data.data.length, $set.$data.data.length);
    $i = 0;
    while ($i < $sz) {
        var$4 = $this.$data.data;
        var$4[$i] = var$4[$i] & ($set.$data.data[$i] ^ (-1));
        $i = $i + 1 | 0;
    }
    ju_BitSet_recalculateLength($this);
},
ju_BitSet_or = ($this, $set) => {
    let $sz, $i, var$4;
    $sz = jl_Math_max($this.$length1, $set.$length1);
    $this.$length1 = $sz;
    ju_BitSet_ensureCapacity($this, ($sz + 31 | 0) / 32 | 0);
    $sz = jl_Math_min($this.$data.data.length, $set.$data.data.length);
    $i = 0;
    while ($i < $sz) {
        var$4 = $this.$data.data;
        var$4[$i] = var$4[$i] | $set.$data.data[$i];
        $i = $i + 1 | 0;
    }
},
ju_BitSet_xor = ($this, $set) => {
    let $sz, $i, var$4;
    $sz = jl_Math_max($this.$length1, $set.$length1);
    $this.$length1 = $sz;
    ju_BitSet_ensureCapacity($this, ($sz + 31 | 0) / 32 | 0);
    $sz = jl_Math_min($this.$data.data.length, $set.$data.data.length);
    $i = 0;
    while ($i < $sz) {
        var$4 = $this.$data.data;
        var$4[$i] = var$4[$i] ^ $set.$data.data[$i];
        $i = $i + 1 | 0;
    }
    ju_BitSet_recalculateLength($this);
},
ju_BitSet_isEmpty = $this => {
    return $this.$length1 ? 0 : 1;
};
function jur_LowHighSurrogateRangeSet() {
    let a = this; jur_JointSet.call(a);
    a.$surrChars = null;
    a.$alt1 = 0;
}
let jur_LowHighSurrogateRangeSet_getName = $this => {
    let var$1, var$2, var$3;
    var$1 = !$this.$alt1 ? $rt_s(32) : $rt_s(395);
    var$2 = $this.$surrChars.$toString();
    var$3 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$3);
    jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(396)), var$1), var$2);
    return jl_AbstractStringBuilder_toString(var$3);
};
function jur_CompositeRangeSet() {
    let a = this; jur_JointSet.call(a);
    a.$withoutSurrogates = null;
    a.$withSurrogates = null;
}
let jur_CompositeRangeSet__init_0 = ($this, $withoutSurrogates, $withSurrogates) => {
    jur_AbstractSet__init_($this);
    $this.$withoutSurrogates = $withoutSurrogates;
    $this.$withSurrogates = $withSurrogates;
},
jur_CompositeRangeSet__init_ = (var_0, var_1) => {
    let var_2 = new jur_CompositeRangeSet();
    jur_CompositeRangeSet__init_0(var_2, var_0, var_1);
    return var_2;
},
jur_CompositeRangeSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $shift, var$5, var$6, var$7, var$8;
    $shift = $this.$withoutSurrogates.$matches1($stringIndex, $testString, $matchResult);
    if ($shift < 0)
        a: {
            var$5 = $this.$withSurrogates;
            var$6 = $matchResult.$leftBound;
            $shift = $matchResult.$rightBound;
            var$7 = $stringIndex + 1 | 0;
            $shift = $rt_compare(var$7, $shift);
            if ($shift > 0) {
                $matchResult.$hitEnd = 1;
                $shift = (-1);
            } else {
                var$8 = jl_String_charAt($testString, $stringIndex);
                if (!var$5.$surrChars.$contains1(var$8))
                    $shift = (-1);
                else {
                    if (jl_Character_isHighSurrogate(var$8)) {
                        if ($shift < 0 && jl_Character_isLowSurrogate(jl_String_charAt($testString, var$7))) {
                            $shift = (-1);
                            break a;
                        }
                    } else if (jl_Character_isLowSurrogate(var$8) && $stringIndex > var$6 && jl_Character_isHighSurrogate(jl_String_charAt($testString, $stringIndex - 1 | 0))) {
                        $shift = (-1);
                        break a;
                    }
                    $shift = var$5.$next2.$matches1(var$7, $testString, $matchResult);
                }
            }
        }
    if ($shift >= 0)
        return $shift;
    return (-1);
},
jur_CompositeRangeSet_setNext = ($this, $next) => {
    $this.$next2 = $next;
    $this.$withSurrogates.$next2 = $next;
    $this.$withoutSurrogates.$setNext($next);
},
jur_CompositeRangeSet_getName = $this => {
    let var$1, var$2, var$3;
    var$1 = $this.$withoutSurrogates;
    var$2 = $this.$withSurrogates;
    var$3 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$3);
    jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(397)), var$1), $rt_s(398)), var$2);
    return jl_AbstractStringBuilder_toString(var$3);
},
jur_CompositeRangeSet_hasConsumed = ($this, $matchResult) => {
    return 1;
},
jur_CompositeRangeSet_first = ($this, $set) => {
    return 1;
};
function jur_SupplRangeSet() {
    let a = this; jur_JointSet.call(a);
    a.$chars = null;
    a.$alt0 = 0;
}
let jur_SupplRangeSet__init_ = ($this, $cc) => {
    jur_AbstractSet__init_($this);
    $this.$chars = $cc.$getInstance0();
    $this.$alt0 = $cc.$alt;
},
jur_SupplRangeSet__init_0 = var_0 => {
    let var_1 = new jur_SupplRangeSet();
    jur_SupplRangeSet__init_(var_1, var_0);
    return var_1;
},
jur_SupplRangeSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $strLength, $low, $high, $offset;
    $strLength = $matchResult.$rightBound;
    if ($stringIndex < $strLength) {
        $low = $stringIndex + 1 | 0;
        $high = jl_String_charAt($testString, $stringIndex);
        if ($this.$contains1($high)) {
            $offset = $this.$next2.$matches1($low, $testString, $matchResult);
            if ($offset > 0)
                return $offset;
        }
        if ($low < $strLength) {
            $stringIndex = $low + 1 | 0;
            $low = jl_String_charAt($testString, $low);
            if (jl_Character_isSurrogatePair($high, $low) && $this.$contains1(jl_Character_toCodePoint($high, $low)))
                return $this.$next2.$matches1($stringIndex, $testString, $matchResult);
        }
    }
    return (-1);
},
jur_SupplRangeSet_getName = $this => {
    let var$1, var$2, var$3;
    var$1 = !$this.$alt0 ? $rt_s(32) : $rt_s(395);
    var$2 = $this.$chars.$toString();
    var$3 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$3);
    jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(396)), var$1), var$2);
    return jl_AbstractStringBuilder_toString(var$3);
},
jur_SupplRangeSet_contains = ($this, $ch) => {
    return $this.$chars.$contains1($ch);
},
jur_SupplRangeSet_first = ($this, $set) => {
    if ($set instanceof jur_SupplCharSet)
        return $this.$chars.$contains1($set.$ch1);
    if ($set instanceof jur_CharSet)
        return $this.$chars.$contains1($set.$ch0);
    if ($set instanceof jur_SupplRangeSet)
        return jur_AbstractCharClass_intersects($this.$chars, $set.$chars);
    if (!($set instanceof jur_RangeSet))
        return 1;
    return jur_AbstractCharClass_intersects($this.$chars, $set.$chars0);
},
jur_SupplRangeSet_getChars = $this => {
    return $this.$chars;
},
jur_SupplRangeSet_setNext = ($this, $next) => {
    $this.$next2 = $next;
},
jur_SupplRangeSet_hasConsumed = ($this, $mr) => {
    return 1;
},
jur_UCISupplRangeSet = $rt_classWithoutFields(jur_SupplRangeSet),
jur_UCISupplRangeSet_contains = ($this, $ch) => {
    return $this.$chars.$contains1(jl_Character_toLowerCase0(jl_Character_toUpperCase0($ch)));
},
jur_UCISupplRangeSet_getName = $this => {
    let var$1, var$2, var$3;
    var$1 = !$this.$alt0 ? $rt_s(32) : $rt_s(395);
    var$2 = $this.$chars.$toString();
    var$3 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$3);
    jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(399)), var$1), var$2);
    return jl_AbstractStringBuilder_toString(var$3);
};
function jur_UCIRangeSet() {
    let a = this; jur_LeafSet.call(a);
    a.$chars1 = null;
    a.$alt2 = 0;
}
let jur_UCIRangeSet__init_0 = ($this, $cc) => {
    jur_LeafSet__init_($this);
    $this.$chars1 = $cc.$getInstance0();
    $this.$alt2 = $cc.$alt;
},
jur_UCIRangeSet__init_ = var_0 => {
    let var_1 = new jur_UCIRangeSet();
    jur_UCIRangeSet__init_0(var_1, var_0);
    return var_1;
},
jur_UCIRangeSet_accepts = ($this, $strIndex, $testString) => {
    return !$this.$chars1.$contains1(jl_Character_toLowerCase(jl_Character_toUpperCase(jl_String_charAt($testString, $strIndex)))) ? (-1) : 1;
},
jur_UCIRangeSet_getName = $this => {
    let var$1, var$2, var$3;
    var$1 = !$this.$alt2 ? $rt_s(32) : $rt_s(395);
    var$2 = $this.$chars1.$toString();
    var$3 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$3);
    jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(399)), var$1), var$2);
    return jl_AbstractStringBuilder_toString(var$3);
};
function jur_RangeSet() {
    let a = this; jur_LeafSet.call(a);
    a.$chars0 = null;
    a.$alt3 = 0;
}
let jur_RangeSet__init_0 = ($this, $cc) => {
    jur_LeafSet__init_($this);
    $this.$chars0 = $cc.$getInstance0();
    $this.$alt3 = $cc.$alt;
},
jur_RangeSet__init_ = var_0 => {
    let var_1 = new jur_RangeSet();
    jur_RangeSet__init_0(var_1, var_0);
    return var_1;
},
jur_RangeSet_accepts = ($this, $strIndex, $testString) => {
    return !$this.$chars0.$contains1(jl_String_charAt($testString, $strIndex)) ? (-1) : 1;
},
jur_RangeSet_getName = $this => {
    let var$1, var$2, var$3;
    var$1 = !$this.$alt3 ? $rt_s(32) : $rt_s(395);
    var$2 = $this.$chars0.$toString();
    var$3 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$3);
    jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(396)), var$1), var$2);
    return jl_AbstractStringBuilder_toString(var$3);
},
jur_RangeSet_first = ($this, $set) => {
    if ($set instanceof jur_CharSet)
        return $this.$chars0.$contains1($set.$ch0);
    if ($set instanceof jur_RangeSet)
        return jur_AbstractCharClass_intersects($this.$chars0, $set.$chars0);
    if (!($set instanceof jur_SupplRangeSet)) {
        if (!($set instanceof jur_SupplCharSet))
            return 1;
        return 0;
    }
    return jur_AbstractCharClass_intersects($this.$chars0, $set.$chars);
};
function jur_HangulDecomposedCharSet() {
    let a = this; jur_JointSet.call(a);
    a.$decomposedChar = null;
    a.$decomposedCharUTF160 = null;
    a.$decomposedCharLength = 0;
}
let jur_HangulDecomposedCharSet__init_0 = ($this, $decomposedChar, $decomposedCharLength) => {
    jur_AbstractSet__init_($this);
    $this.$decomposedChar = $decomposedChar;
    $this.$decomposedCharLength = $decomposedCharLength;
},
jur_HangulDecomposedCharSet__init_ = (var_0, var_1) => {
    let var_2 = new jur_HangulDecomposedCharSet();
    jur_HangulDecomposedCharSet__init_0(var_2, var_0, var_1);
    return var_2;
},
jur_HangulDecomposedCharSet_setNext = ($this, $next) => {
    $this.$next2 = $next;
},
jur_HangulDecomposedCharSet_getDecomposedChar = $this => {
    if ($this.$decomposedCharUTF160 === null)
        $this.$decomposedCharUTF160 = jl_String__init_0($this.$decomposedChar);
    return $this.$decomposedCharUTF160;
},
jur_HangulDecomposedCharSet_getName = $this => {
    let var$1, var$2;
    var$1 = jur_HangulDecomposedCharSet_getDecomposedChar($this);
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_StringBuilder_append(jl_StringBuilder_append(var$2, $rt_s(400)), var$1);
    return jl_AbstractStringBuilder_toString(var$2);
},
jur_HangulDecomposedCharSet_matches = ($this, $strIndex, $testString, $matchResult) => {
    let $rightBound, $decompSyllable, $vIndex, $tIndex, var$8, $curSymb, $lIndex, $i, $decompCurSymb, $syllIndex;
    $rightBound = $matchResult.$rightBound;
    $decompSyllable = $rt_createIntArray(3);
    $vIndex = (-1);
    $tIndex = (-1);
    if ($strIndex >= $rightBound)
        return (-1);
    var$8 = $strIndex + 1 | 0;
    $curSymb = jl_String_charAt($testString, $strIndex);
    $strIndex = $curSymb - 44032 | 0;
    if ($strIndex >= 0 && $strIndex < 11172) {
        $lIndex = 4352 + ($strIndex / 588 | 0) | 0;
        $i = 4449 + (($strIndex % 588 | 0) / 28 | 0) | 0;
        $strIndex = $strIndex % 28 | 0;
        $decompCurSymb = !$strIndex ? $rt_createIntArrayFromData([$lIndex, $i]) : $rt_createIntArrayFromData([$lIndex, $i, 4519 + $strIndex | 0]);
    } else
        $decompCurSymb = null;
    if ($decompCurSymb !== null) {
        $decompCurSymb = $decompCurSymb.data;
        $i = 0;
        $strIndex = $decompCurSymb.length;
        $syllIndex = $this.$decomposedCharLength;
        if ($strIndex != $syllIndex)
            return (-1);
        while (true) {
            if ($i >= $syllIndex)
                return $this.$next2.$matches1(var$8, $testString, $matchResult);
            if ($decompCurSymb[$i] != $this.$decomposedChar.data[$i])
                break;
            $i = $i + 1 | 0;
        }
        return (-1);
    }
    $decompSyllable = $decompSyllable.data;
    $decompSyllable[0] = $curSymb;
    $lIndex = $curSymb - 4352 | 0;
    if ($lIndex >= 0 && $lIndex < 19) {
        if (var$8 < $rightBound) {
            $curSymb = jl_String_charAt($testString, var$8);
            $vIndex = $curSymb - 4449 | 0;
        }
        if ($vIndex >= 0 && $vIndex < 21) {
            $lIndex = var$8 + 1 | 0;
            $decompSyllable[1] = $curSymb;
            if ($lIndex < $rightBound) {
                $curSymb = jl_String_charAt($testString, $lIndex);
                $tIndex = $curSymb - 4519 | 0;
            }
            if ($tIndex >= 0 && $tIndex < 28) {
                a: {
                    $strIndex = $lIndex + 1 | 0;
                    $decompSyllable[2] = $curSymb;
                    if ($this.$decomposedCharLength == 3) {
                        $lIndex = $decompSyllable[0];
                        $decompCurSymb = $this.$decomposedChar.data;
                        if ($lIndex == $decompCurSymb[0] && $decompSyllable[1] == $decompCurSymb[1] && $decompSyllable[2] == $decompCurSymb[2]) {
                            $strIndex = $this.$next2.$matches1($strIndex, $testString, $matchResult);
                            break a;
                        }
                    }
                    $strIndex = (-1);
                }
                return $strIndex;
            }
            b: {
                if ($this.$decomposedCharLength == 2) {
                    $strIndex = $decompSyllable[0];
                    $decompCurSymb = $this.$decomposedChar.data;
                    if ($strIndex == $decompCurSymb[0] && $decompSyllable[1] == $decompCurSymb[1]) {
                        $strIndex = $this.$next2.$matches1($lIndex, $testString, $matchResult);
                        break b;
                    }
                }
                $strIndex = (-1);
            }
            return $strIndex;
        }
        return (-1);
    }
    return (-1);
},
jur_HangulDecomposedCharSet_first = ($this, $set) => {
    return $set instanceof jur_HangulDecomposedCharSet && !jl_String_equals(jur_HangulDecomposedCharSet_getDecomposedChar($set), jur_HangulDecomposedCharSet_getDecomposedChar($this)) ? 0 : 1;
},
jur_HangulDecomposedCharSet_hasConsumed = ($this, $matchResult) => {
    return 1;
};
function jur_CharSet() {
    jur_LeafSet.call(this);
    this.$ch0 = 0;
}
let jur_CharSet__init_0 = ($this, $ch) => {
    jur_LeafSet__init_($this);
    $this.$ch0 = $ch;
},
jur_CharSet__init_ = var_0 => {
    let var_1 = new jur_CharSet();
    jur_CharSet__init_0(var_1, var_0);
    return var_1;
},
jur_CharSet_charCount = $this => {
    return 1;
},
jur_CharSet_accepts = ($this, $strIndex, $testString) => {
    return $this.$ch0 != jl_String_charAt($testString, $strIndex) ? (-1) : 1;
},
jur_CharSet_find = ($this, $strIndex, $testStr, $matchResult) => {
    let $strLength, var$5, var$6;
    if (!($testStr instanceof jl_String))
        return jur_AbstractSet_find($this, $strIndex, $testStr, $matchResult);
    $strLength = $matchResult.$rightBound;
    while (true) {
        if ($strIndex >= $strLength)
            return (-1);
        var$5 = jl_String_indexOf($testStr, $this.$ch0, $strIndex);
        if (var$5 < 0)
            return (-1);
        var$6 = $this.$next2;
        $strIndex = var$5 + 1 | 0;
        if (var$6.$matches1($strIndex, $testStr, $matchResult) >= 0)
            break;
    }
    return var$5;
},
jur_CharSet_findBack = ($this, $strIndex, $lastIndex, $testStr, $matchResult) => {
    let var$5;
    if (!($testStr instanceof jl_String))
        return jur_AbstractSet_findBack($this, $strIndex, $lastIndex, $testStr, $matchResult);
    a: {
        while (true) {
            if ($lastIndex < $strIndex)
                return (-1);
            var$5 = jl_String_lastIndexOf0($testStr, $this.$ch0, $lastIndex);
            if (var$5 < 0)
                break a;
            if (var$5 < $strIndex)
                break a;
            if ($this.$next2.$matches1(var$5 + 1 | 0, $testStr, $matchResult) >= 0)
                break;
            $lastIndex = var$5 + (-1) | 0;
        }
        return var$5;
    }
    return (-1);
},
jur_CharSet_getName = $this => {
    let var$1, var$2;
    var$1 = $this.$ch0;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_AbstractStringBuilder_append(var$2, var$1);
    return jl_AbstractStringBuilder_toString(var$2);
},
jur_CharSet_first = ($this, $set) => {
    if ($set instanceof jur_CharSet)
        return $set.$ch0 != $this.$ch0 ? 0 : 1;
    if (!($set instanceof jur_RangeSet)) {
        if ($set instanceof jur_SupplRangeSet)
            return $set.$contains1($this.$ch0);
        if (!($set instanceof jur_SupplCharSet))
            return 1;
        return 0;
    }
    return jur_RangeSet_accepts($set, 0, jl_Character_toString($this.$ch0)) <= 0 ? 0 : 1;
};
function jur_UCICharSet() {
    jur_LeafSet.call(this);
    this.$ch2 = 0;
}
let jur_UCICharSet__init_0 = ($this, $ch) => {
    jur_LeafSet__init_($this);
    $this.$ch2 = jl_Character_toLowerCase(jl_Character_toUpperCase($ch));
},
jur_UCICharSet__init_ = var_0 => {
    let var_1 = new jur_UCICharSet();
    jur_UCICharSet__init_0(var_1, var_0);
    return var_1;
},
jur_UCICharSet_accepts = ($this, $strIndex, $testString) => {
    return $this.$ch2 != jl_Character_toLowerCase(jl_Character_toUpperCase(jl_String_charAt($testString, $strIndex))) ? (-1) : 1;
},
jur_UCICharSet_getName = $this => {
    let var$1, var$2;
    var$1 = $this.$ch2;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$2, $rt_s(401)), var$1);
    return jl_AbstractStringBuilder_toString(var$2);
};
function jur_CICharSet() {
    let a = this; jur_LeafSet.call(a);
    a.$ch4 = 0;
    a.$supplement = 0;
}
let jur_CICharSet__init_0 = ($this, $ch) => {
    jur_LeafSet__init_($this);
    $this.$ch4 = $ch;
    $this.$supplement = jur_Pattern_getSupplement($ch);
},
jur_CICharSet__init_ = var_0 => {
    let var_1 = new jur_CICharSet();
    jur_CICharSet__init_0(var_1, var_0);
    return var_1;
},
jur_CICharSet_accepts = ($this, $strIndex, $testString) => {
    return $this.$ch4 != jl_String_charAt($testString, $strIndex) && $this.$supplement != jl_String_charAt($testString, $strIndex) ? (-1) : 1;
},
jur_CICharSet_getName = $this => {
    let var$1, var$2;
    var$1 = $this.$ch4;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_AbstractStringBuilder_append(jl_StringBuilder_append(var$2, $rt_s(402)), var$1);
    return jl_AbstractStringBuilder_toString(var$2);
};
function jur_DecomposedCharSet() {
    let a = this; jur_JointSet.call(a);
    a.$readCharsForCodePoint = 0;
    a.$decomposedCharUTF16 = null;
    a.$decomposedChar0 = null;
    a.$decomposedCharLength0 = 0;
}
let jur_DecomposedCharSet__init_ = ($this, $decomposedChar, $decomposedCharLength) => {
    jur_AbstractSet__init_($this);
    $this.$readCharsForCodePoint = 1;
    $this.$decomposedChar0 = $decomposedChar;
    $this.$decomposedCharLength0 = $decomposedCharLength;
},
jur_DecomposedCharSet__init_0 = (var_0, var_1) => {
    let var_2 = new jur_DecomposedCharSet();
    jur_DecomposedCharSet__init_(var_2, var_0, var_1);
    return var_2;
},
jur_DecomposedCharSet_setNext = ($this, $next) => {
    $this.$next2 = $next;
},
jur_DecomposedCharSet_matches = ($this, $strIndex, $testString, $matchResult) => {
    let $decCodePoint, $rightBound, $curChar, var$7, $decCurCodePoint, var$9, var$10, $readCodePoints;
    $decCodePoint = $rt_createIntArray(4);
    $rightBound = $matchResult.$rightBound;
    if ($strIndex >= $rightBound)
        return (-1);
    $curChar = jur_DecomposedCharSet_codePointAt($this, $strIndex, $testString, $rightBound);
    var$7 = $strIndex + $this.$readCharsForCodePoint | 0;
    $decCurCodePoint = jur_Lexer_getDecomposition($curChar);
    if ($decCurCodePoint === null) {
        $decCurCodePoint = $decCodePoint.data;
        $strIndex = 1;
        $decCurCodePoint[0] = $curChar;
    } else {
        $strIndex = $decCurCodePoint.data.length;
        jl_System_fastArraycopy($decCurCodePoint, 0, $decCodePoint, 0, $strIndex);
        $strIndex = 0 + $strIndex | 0;
    }
    a: {
        if (var$7 < $rightBound) {
            var$9 = $decCodePoint.data;
            $curChar = jur_DecomposedCharSet_codePointAt($this, var$7, $testString, $rightBound);
            while ($strIndex < 4) {
                if (!(($curChar != 832 ? 0 : 1) | ($curChar != 833 ? 0 : 1) | ($curChar != 835 ? 0 : 1) | ($curChar != 836 ? 0 : 1))) {
                    var$10 = $strIndex + 1 | 0;
                    var$9[$strIndex] = $curChar;
                } else {
                    $decCurCodePoint = (jur_Lexer_getDecomposition($curChar)).data;
                    if ($decCurCodePoint.length != 2) {
                        var$10 = $strIndex + 1 | 0;
                        var$9[$strIndex] = $decCurCodePoint[0];
                    } else {
                        $readCodePoints = $strIndex + 1 | 0;
                        var$9[$strIndex] = $decCurCodePoint[0];
                        var$10 = $readCodePoints + 1 | 0;
                        var$9[$readCodePoints] = $decCurCodePoint[1];
                    }
                }
                var$7 = var$7 + $this.$readCharsForCodePoint | 0;
                if (var$7 >= $rightBound) {
                    $strIndex = var$10;
                    break a;
                }
                $curChar = jur_DecomposedCharSet_codePointAt($this, var$7, $testString, $rightBound);
                $strIndex = var$10;
            }
        }
    }
    if ($strIndex != $this.$decomposedCharLength0)
        return (-1);
    $decCurCodePoint = $decCodePoint.data;
    $curChar = 0;
    while (true) {
        if ($curChar >= $strIndex)
            return $this.$next2.$matches1(var$7, $testString, $matchResult);
        if ($decCurCodePoint[$curChar] != $this.$decomposedChar0.data[$curChar])
            break;
        $curChar = $curChar + 1 | 0;
    }
    return (-1);
},
jur_DecomposedCharSet_getDecomposedChar = $this => {
    let $strBuff, $i;
    if ($this.$decomposedCharUTF16 === null) {
        $strBuff = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($strBuff);
        $i = 0;
        while ($i < $this.$decomposedCharLength0) {
            jl_AbstractStringBuilder_append3($strBuff, jl_Character_toChars($this.$decomposedChar0.data[$i]));
            $i = $i + 1 | 0;
        }
        $this.$decomposedCharUTF16 = jl_AbstractStringBuilder_toString($strBuff);
    }
    return $this.$decomposedCharUTF16;
},
jur_DecomposedCharSet_getName = $this => {
    let var$1, var$2;
    var$1 = jur_DecomposedCharSet_getDecomposedChar($this);
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_StringBuilder_append(jl_StringBuilder_append(var$2, $rt_s(403)), var$1);
    return jl_AbstractStringBuilder_toString(var$2);
},
jur_DecomposedCharSet_codePointAt = ($this, $strIndex, $testString, $rightBound) => {
    let $curChar, $low, $curCodePointUTF16;
    $this.$readCharsForCodePoint = 1;
    if ($strIndex >= ($rightBound - 1 | 0))
        $curChar = jl_String_charAt($testString, $strIndex);
    else {
        $rightBound = $strIndex + 1 | 0;
        $curChar = jl_String_charAt($testString, $strIndex);
        $low = jl_String_charAt($testString, $rightBound);
        if (jl_Character_isSurrogatePair($curChar, $low)) {
            $curCodePointUTF16 = $rt_createCharArray(2).data;
            $curCodePointUTF16[0] = $curChar;
            $curCodePointUTF16[1] = $low;
            $rightBound = $curCodePointUTF16.length;
            if (0 < $rightBound && $rightBound <= $rightBound) {
                $curChar = 0 < ($rightBound - 1 | 0) && jl_Character_isHighSurrogate($curCodePointUTF16[0]) && jl_Character_isLowSurrogate($curCodePointUTF16[1]) ? jl_Character_toCodePoint($curCodePointUTF16[0], $curCodePointUTF16[1]) : $curCodePointUTF16[0];
                $this.$readCharsForCodePoint = 2;
            } else {
                $testString = new jl_IndexOutOfBoundsException;
                jl_Throwable__init_($testString);
                $rt_throw($testString);
            }
        }
    }
    return $curChar;
},
jur_DecomposedCharSet_first = ($this, $set) => {
    return $set instanceof jur_DecomposedCharSet && !jl_String_equals(jur_DecomposedCharSet_getDecomposedChar($set), jur_DecomposedCharSet_getDecomposedChar($this)) ? 0 : 1;
},
jur_DecomposedCharSet_hasConsumed = ($this, $matchResult) => {
    return 1;
},
jur_UCIDecomposedCharSet = $rt_classWithoutFields(jur_DecomposedCharSet),
jur_CIDecomposedCharSet = $rt_classWithoutFields(jur_DecomposedCharSet),
jur_PossessiveGroupQuantifierSet = $rt_classWithoutFields(jur_GroupQuantifierSet),
jur_PossessiveGroupQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $stringIndex_0;
    while (true) {
        $stringIndex_0 = $this.$innerSet.$matches1($stringIndex, $testString, $matchResult);
        if ($stringIndex_0 <= 0)
            break;
        $stringIndex = $stringIndex_0;
    }
    return $this.$next2.$matches1($stringIndex, $testString, $matchResult);
},
jur_PosPlusGroupQuantifierSet = $rt_classWithoutFields(jur_GroupQuantifierSet),
jur_PosPlusGroupQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $nextIndex;
    $nextIndex = $this.$innerSet.$matches1($stringIndex, $testString, $matchResult);
    if ($nextIndex < 0)
        return (-1);
    if ($nextIndex > $stringIndex) {
        while (true) {
            $stringIndex = $this.$innerSet.$matches1($nextIndex, $testString, $matchResult);
            if ($stringIndex <= $nextIndex)
                break;
            $nextIndex = $stringIndex;
        }
        $stringIndex = $nextIndex;
    }
    return $this.$next2.$matches1($stringIndex, $testString, $matchResult);
},
jur_AltGroupQuantifierSet = $rt_classWithoutFields(jur_GroupQuantifierSet),
jur_AltGroupQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $nextIndex;
    if (!$this.$innerSet.$hasConsumed($matchResult))
        return $this.$next2.$matches1($stringIndex, $testString, $matchResult);
    $nextIndex = $this.$innerSet.$matches1($stringIndex, $testString, $matchResult);
    if ($nextIndex >= 0)
        return $nextIndex;
    return $this.$next2.$matches1($stringIndex, $testString, $matchResult);
},
jur_AltGroupQuantifierSet_setNext = ($this, $next) => {
    $this.$next2 = $next;
    $this.$innerSet.$setNext($next);
},
jur_PosAltGroupQuantifierSet = $rt_classWithoutFields(jur_AltGroupQuantifierSet),
jur_PosAltGroupQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $nextIndex;
    $nextIndex = $this.$innerSet.$matches1($stringIndex, $testString, $matchResult);
    if ($nextIndex <= 0)
        $nextIndex = $stringIndex;
    return $this.$next2.$matches1($nextIndex, $testString, $matchResult);
},
jur_PosAltGroupQuantifierSet_setNext = ($this, $next) => {
    $this.$next2 = $next;
};
function jur_CompositeGroupQuantifierSet() {
    let a = this; jur_GroupQuantifierSet.call(a);
    a.$quantifier = null;
    a.$setCounter = 0;
}
let jur_CompositeGroupQuantifierSet__init_ = ($this, $quant, $innerSet, $next, $type, $setCounter) => {
    jur_QuantifierSet__init_($this, $innerSet, $next, $type);
    $this.$quantifier = $quant;
    $this.$setCounter = $setCounter;
},
jur_CompositeGroupQuantifierSet__init_0 = (var_0, var_1, var_2, var_3, var_4) => {
    let var_5 = new jur_CompositeGroupQuantifierSet();
    jur_CompositeGroupQuantifierSet__init_(var_5, var_0, var_1, var_2, var_3, var_4);
    return var_5;
},
jur_CompositeGroupQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $enterCounter, $nextIndex;
    $enterCounter = jur_MatchResultImpl_getEnterCounter($matchResult, $this.$setCounter);
    if (!$this.$innerSet.$hasConsumed($matchResult))
        return $this.$next2.$matches1($stringIndex, $testString, $matchResult);
    if ($enterCounter >= $this.$quantifier.$max0)
        return $this.$next2.$matches1($stringIndex, $testString, $matchResult);
    $nextIndex = $this.$setCounter;
    $enterCounter = $enterCounter + 1 | 0;
    jur_MatchResultImpl_setEnterCounter($matchResult, $nextIndex, $enterCounter);
    $nextIndex = $this.$innerSet.$matches1($stringIndex, $testString, $matchResult);
    if ($nextIndex >= 0) {
        jur_MatchResultImpl_setEnterCounter($matchResult, $this.$setCounter, 0);
        return $nextIndex;
    }
    $nextIndex = $this.$setCounter;
    $enterCounter = $enterCounter + (-1) | 0;
    jur_MatchResultImpl_setEnterCounter($matchResult, $nextIndex, $enterCounter);
    if ($enterCounter >= $this.$quantifier.$min0)
        return $this.$next2.$matches1($stringIndex, $testString, $matchResult);
    jur_MatchResultImpl_setEnterCounter($matchResult, $this.$setCounter, 0);
    return (-1);
},
jur_CompositeGroupQuantifierSet_getName = $this => {
    return jur_Quantifier_toString($this.$quantifier);
},
jur_PosCompositeGroupQuantifierSet = $rt_classWithoutFields(jur_CompositeGroupQuantifierSet),
jur_PosCompositeGroupQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $counter, $max, $nextIndex;
    $counter = 0;
    $max = $this.$quantifier.$max0;
    a: {
        while (true) {
            $nextIndex = $this.$innerSet.$matches1($stringIndex, $testString, $matchResult);
            if ($nextIndex <= $stringIndex)
                break a;
            if ($counter >= $max)
                break;
            $counter = $counter + 1 | 0;
            $stringIndex = $nextIndex;
        }
    }
    if ($nextIndex < 0 && $counter < $this.$quantifier.$min0)
        return (-1);
    return $this.$next2.$matches1($stringIndex, $testString, $matchResult);
},
jur_ReluctantGroupQuantifierSet = $rt_classWithoutFields(jur_GroupQuantifierSet),
jur_ReluctantGroupQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $res;
    if (!$this.$innerSet.$hasConsumed($matchResult))
        return $this.$next2.$matches1($stringIndex, $testString, $matchResult);
    $res = $this.$next2.$matches1($stringIndex, $testString, $matchResult);
    if ($res >= 0)
        return $res;
    return $this.$innerSet.$matches1($stringIndex, $testString, $matchResult);
},
jur_RelAltGroupQuantifierSet = $rt_classWithoutFields(jur_AltGroupQuantifierSet),
jur_RelAltGroupQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $nextIndex;
    if (!$this.$innerSet.$hasConsumed($matchResult))
        return $this.$next2.$matches1($stringIndex, $testString, $matchResult);
    $nextIndex = $this.$next2.$matches1($stringIndex, $testString, $matchResult);
    if ($nextIndex < 0)
        $nextIndex = $this.$innerSet.$matches1($stringIndex, $testString, $matchResult);
    return $nextIndex;
},
jur_RelCompositeGroupQuantifierSet = $rt_classWithoutFields(jur_CompositeGroupQuantifierSet),
jur_RelCompositeGroupQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $enterCounter, var$5, $nextIndex;
    $enterCounter = jur_MatchResultImpl_getEnterCounter($matchResult, $this.$setCounter);
    if (!$this.$innerSet.$hasConsumed($matchResult))
        return $this.$next2.$matches1($stringIndex, $testString, $matchResult);
    var$5 = $this.$quantifier;
    if ($enterCounter >= var$5.$max0) {
        jur_MatchResultImpl_setEnterCounter($matchResult, $this.$setCounter, 0);
        return $this.$next2.$matches1($stringIndex, $testString, $matchResult);
    }
    if ($enterCounter < var$5.$min0) {
        jur_MatchResultImpl_setEnterCounter($matchResult, $this.$setCounter, $enterCounter + 1 | 0);
        $nextIndex = $this.$innerSet.$matches1($stringIndex, $testString, $matchResult);
    } else {
        $nextIndex = $this.$next2.$matches1($stringIndex, $testString, $matchResult);
        if ($nextIndex >= 0) {
            jur_MatchResultImpl_setEnterCounter($matchResult, $this.$setCounter, 0);
            return $nextIndex;
        }
        jur_MatchResultImpl_setEnterCounter($matchResult, $this.$setCounter, $enterCounter + 1 | 0);
        $nextIndex = $this.$innerSet.$matches1($stringIndex, $testString, $matchResult);
    }
    return $nextIndex;
},
jur_DotAllQuantifierSet = $rt_classWithoutFields(jur_QuantifierSet),
jur_DotAllQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $strLength;
    $strLength = $matchResult.$rightBound;
    if ($strLength > $stringIndex)
        return $this.$next2.$findBack($stringIndex, $strLength, $testString, $matchResult);
    return $this.$next2.$matches1($stringIndex, $testString, $matchResult);
},
jur_DotAllQuantifierSet_find = ($this, $stringIndex, $testString, $matchResult) => {
    let $strLength;
    $strLength = $matchResult.$rightBound;
    if ($this.$next2.$findBack($stringIndex, $strLength, $testString, $matchResult) >= 0)
        return $stringIndex;
    return (-1);
},
jur_DotAllQuantifierSet_getName = $this => {
    return $rt_s(404);
};
function jur_DotQuantifierSet() {
    jur_QuantifierSet.call(this);
    this.$lt = null;
}
let jur_DotQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $strLength, $startSearch;
    $strLength = $matchResult.$rightBound;
    $startSearch = jur_DotQuantifierSet_findLineTerminator($this, $stringIndex, $strLength, $testString);
    if ($startSearch >= 0)
        $strLength = $startSearch;
    if ($strLength > $stringIndex)
        return $this.$next2.$findBack($stringIndex, $strLength, $testString, $matchResult);
    return $this.$next2.$matches1($stringIndex, $testString, $matchResult);
},
jur_DotQuantifierSet_find = ($this, $stringIndex, $testString, $matchResult) => {
    let $strLength, $res, $nextSearch, $leftBound;
    $strLength = $matchResult.$rightBound;
    $res = $this.$next2.$find0($stringIndex, $testString, $matchResult);
    if ($res < 0)
        return (-1);
    $nextSearch = jur_DotQuantifierSet_findLineTerminator($this, $res, $strLength, $testString);
    if ($nextSearch >= 0)
        $strLength = $nextSearch;
    $nextSearch = jl_Math_max($res, $this.$next2.$findBack($res, $strLength, $testString, $matchResult));
    if ($nextSearch <= 0)
        $leftBound = $nextSearch ? (-1) : 0;
    else {
        $leftBound = $nextSearch - 1 | 0;
        a: {
            while (true) {
                if ($leftBound < $stringIndex) {
                    $leftBound = (-1);
                    break a;
                }
                if ($this.$lt.$isLineTerminator(jl_String_charAt($testString, $leftBound)))
                    break;
                $leftBound = $leftBound + (-1) | 0;
            }
        }
    }
    if ($leftBound >= $stringIndex)
        $stringIndex = $leftBound >= $nextSearch ? $leftBound : $leftBound + 1 | 0;
    return $stringIndex;
},
jur_DotQuantifierSet_findLineTerminator = ($this, $i, $to, $testString) => {
    while (true) {
        if ($i >= $to)
            return (-1);
        if ($this.$lt.$isLineTerminator(jl_String_charAt($testString, $i)))
            break;
        $i = $i + 1 | 0;
    }
    return $i;
},
jur_DotQuantifierSet_getName = $this => {
    return $rt_s(405);
},
jur_AbstractLineTerminator = $rt_classWithoutFields(),
jur_AbstractLineTerminator_unixLT = null,
jur_AbstractLineTerminator_unicodeLT = null,
jur_AbstractLineTerminator_getInstance = $flag => {
    let var$2;
    if (!($flag & 1)) {
        var$2 = jur_AbstractLineTerminator_unicodeLT;
        if (var$2 !== null)
            return var$2;
        var$2 = new jur_AbstractLineTerminator$2;
        jur_AbstractLineTerminator_unicodeLT = var$2;
        return var$2;
    }
    var$2 = jur_AbstractLineTerminator_unixLT;
    if (var$2 !== null)
        return var$2;
    var$2 = new jur_AbstractLineTerminator$1;
    jur_AbstractLineTerminator_unixLT = var$2;
    return var$2;
},
jur_PossessiveQuantifierSet = $rt_classWithoutFields(jur_LeafQuantifierSet),
jur_PossessiveQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let var$4;
    a: {
        while (true) {
            if (($stringIndex + $this.$leaf.$charCount() | 0) > $matchResult.$rightBound)
                break a;
            var$4 = $this.$leaf.$accepts($stringIndex, $testString);
            if (var$4 < 1)
                break;
            $stringIndex = $stringIndex + var$4 | 0;
        }
    }
    return $this.$next2.$matches1($stringIndex, $testString, $matchResult);
},
jur_PossessiveAltQuantifierSet = $rt_classWithoutFields(jur_AltQuantifierSet),
jur_PossessiveAltQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let var$4;
    if (($stringIndex + $this.$leaf.$charCount() | 0) <= $matchResult.$rightBound) {
        var$4 = $this.$leaf.$accepts($stringIndex, $testString);
        if (var$4 >= 1)
            $stringIndex = $stringIndex + var$4 | 0;
    }
    return $this.$next2.$matches1($stringIndex, $testString, $matchResult);
},
jur_PossessiveCompositeQuantifierSet = $rt_classWithoutFields(jur_CompositeQuantifierSet),
jur_PossessiveCompositeQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let var$4, $min, $max, $i, $shift;
    var$4 = $this.$quantifier0;
    $min = var$4.$min0;
    $max = var$4.$max0;
    $i = 0;
    while (true) {
        if ($i >= $min) {
            a: {
                while (true) {
                    if ($i >= $max)
                        break a;
                    if (($stringIndex + $this.$leaf.$charCount() | 0) > $matchResult.$rightBound)
                        break a;
                    $shift = $this.$leaf.$accepts($stringIndex, $testString);
                    if ($shift < 1)
                        break;
                    $stringIndex = $stringIndex + $shift | 0;
                    $i = $i + 1 | 0;
                }
            }
            return $this.$next2.$matches1($stringIndex, $testString, $matchResult);
        }
        if (($stringIndex + $this.$leaf.$charCount() | 0) > $matchResult.$rightBound) {
            $matchResult.$hitEnd = 1;
            return (-1);
        }
        $shift = $this.$leaf.$accepts($stringIndex, $testString);
        if ($shift < 1)
            break;
        $stringIndex = $stringIndex + $shift | 0;
        $i = $i + 1 | 0;
    }
    return (-1);
},
jur_ReluctantQuantifierSet = $rt_classWithoutFields(jur_LeafQuantifierSet),
jur_ReluctantQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let var$4;
    while (true) {
        var$4 = $this.$next2.$matches1($stringIndex, $testString, $matchResult);
        if (var$4 >= 0)
            break;
        if (($stringIndex + $this.$leaf.$charCount() | 0) <= $matchResult.$rightBound) {
            var$4 = $this.$leaf.$accepts($stringIndex, $testString);
            $stringIndex = $stringIndex + var$4 | 0;
        }
        if (var$4 < 1)
            return (-1);
    }
    return var$4;
},
jur_ReluctantAltQuantifierSet = $rt_classWithoutFields(jur_AltQuantifierSet),
jur_ReluctantAltQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $shift;
    $shift = $this.$next2.$matches1($stringIndex, $testString, $matchResult);
    if ($shift >= 0)
        return $shift;
    return $this.$innerSet.$matches1($stringIndex, $testString, $matchResult);
},
jur_ReluctantCompositeQuantifierSet = $rt_classWithoutFields(jur_CompositeQuantifierSet),
jur_ReluctantCompositeQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let var$4, $min, $max, $i, var$8, var$9;
    var$4 = $this.$quantifier0;
    $min = var$4.$min0;
    $max = var$4.$max0;
    $i = 0;
    while (true) {
        if ($i >= $min) {
            a: {
                while (true) {
                    var$8 = $this.$next2.$matches1($stringIndex, $testString, $matchResult);
                    if (var$8 >= 0)
                        break;
                    if (($stringIndex + $this.$leaf.$charCount() | 0) <= $matchResult.$rightBound) {
                        var$8 = $this.$leaf.$accepts($stringIndex, $testString);
                        $stringIndex = $stringIndex + var$8 | 0;
                        $i = $i + 1 | 0;
                    }
                    if (var$8 < 1)
                        break a;
                    if ($i > $max)
                        break a;
                }
                return var$8;
            }
            return (-1);
        }
        if (($stringIndex + $this.$leaf.$charCount() | 0) > $matchResult.$rightBound) {
            $matchResult.$hitEnd = 1;
            return (-1);
        }
        var$9 = $this.$leaf.$accepts($stringIndex, $testString);
        if (var$9 < 1)
            break;
        $stringIndex = $stringIndex + var$9 | 0;
        $i = $i + 1 | 0;
    }
    return (-1);
},
jur_SOLSet = $rt_classWithoutFields(jur_AbstractSet),
jur_SOLSet_matches = ($this, $strIndex, $testString, $matchResult) => {
    if ($strIndex && !($matchResult.$anchoringBounds && $strIndex == $matchResult.$leftBound))
        return (-1);
    return $this.$next2.$matches1($strIndex, $testString, $matchResult);
},
jur_SOLSet_hasConsumed = ($this, $matchResult) => {
    return 0;
},
jur_SOLSet_getName = $this => {
    return $rt_s(406);
};
function jur_WordBoundary() {
    jur_AbstractSet.call(this);
    this.$positive = 0;
}
let jur_WordBoundary__init_0 = ($this, $positive) => {
    jur_AbstractSet__init_($this);
    $this.$positive = $positive;
},
jur_WordBoundary__init_ = var_0 => {
    let var_1 = new jur_WordBoundary();
    jur_WordBoundary__init_0(var_1, var_0);
    return var_1;
},
jur_WordBoundary_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $ch1, $ch2, $leftBound;
    $ch1 = $stringIndex < $matchResult.$rightBound ? jl_String_charAt($testString, $stringIndex) : 32;
    $ch2 = !$stringIndex ? 32 : jl_String_charAt($testString, $stringIndex - 1 | 0);
    $leftBound = $matchResult.$transparentBounds ? 0 : $matchResult.$leftBound;
    return ($ch1 != 32 && !jur_WordBoundary_isSpace($this, $ch1, $stringIndex, $leftBound, $testString) ? 0 : 1) ^ ($ch2 != 32 && !jur_WordBoundary_isSpace($this, $ch2, $stringIndex - 1 | 0, $leftBound, $testString) ? 0 : 1) ^ $this.$positive ? (-1) : $this.$next2.$matches1($stringIndex, $testString, $matchResult);
},
jur_WordBoundary_hasConsumed = ($this, $matchResult) => {
    return 0;
},
jur_WordBoundary_getName = $this => {
    return $rt_s(407);
},
jur_WordBoundary_isSpace = ($this, $ch, $index, $leftBound, $testString) => {
    let var$5;
    if (!jl_Character_isLetterOrDigit($ch) && $ch != 95) {
        a: {
            if (jl_Character_getType($ch) == 6)
                while (true) {
                    $index = $index + (-1) | 0;
                    if ($index < $leftBound)
                        break a;
                    var$5 = jl_String_charAt($testString, $index);
                    if (jl_Character_isLetterOrDigit(var$5))
                        return 0;
                    if (jl_Character_getType(var$5) != 6)
                        return 1;
                }
        }
        return 1;
    }
    return 0;
},
jur_PreviousMatch = $rt_classWithoutFields(jur_AbstractSet),
jur_PreviousMatch_matches = ($this, $stringIndex, $testString, $matchResult) => {
    if ($stringIndex != $matchResult.$previousMatch)
        return (-1);
    return $this.$next2.$matches1($stringIndex, $testString, $matchResult);
},
jur_PreviousMatch_hasConsumed = ($this, $matchResult) => {
    return 0;
},
jur_PreviousMatch_getName = $this => {
    return $rt_s(408);
};
function jur_EOLSet() {
    jur_AbstractSet.call(this);
    this.$consCounter0 = 0;
}
let jur_EOLSet__init_ = ($this, $counter) => {
    jur_AbstractSet__init_($this);
    $this.$consCounter0 = $counter;
},
jur_EOLSet__init_0 = var_0 => {
    let var_1 = new jur_EOLSet();
    jur_EOLSet__init_(var_1, var_0);
    return var_1;
},
jur_EOLSet_matches = ($this, $strIndex, $testString, $matchResult) => {
    let $rightBound, var$5, $ch;
    $rightBound = !$matchResult.$anchoringBounds ? $testString.$nativeString.length : $matchResult.$rightBound;
    if ($strIndex >= $rightBound) {
        jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter0, 0);
        return $this.$next2.$matches1($strIndex, $testString, $matchResult);
    }
    var$5 = $rightBound - $strIndex | 0;
    if (var$5 == 2 && jl_String_charAt($testString, $strIndex) == 13 && jl_String_charAt($testString, $strIndex + 1 | 0) == 10) {
        jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter0, 0);
        return $this.$next2.$matches1($strIndex, $testString, $matchResult);
    }
    a: {
        if (var$5 == 1) {
            $ch = jl_String_charAt($testString, $strIndex);
            if ($ch == 10)
                break a;
            if ($ch == 13)
                break a;
            if ($ch == 133)
                break a;
            if (($ch | 1) == 8233)
                break a;
        }
        return (-1);
    }
    jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter0, 0);
    return $this.$next2.$matches1($strIndex, $testString, $matchResult);
},
jur_EOLSet_hasConsumed = ($this, $matchResult) => {
    let $res;
    $res = !jur_MatchResultImpl_getConsumed($matchResult, $this.$consCounter0) ? 0 : 1;
    jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter0, (-1));
    return $res;
},
jur_EOLSet_getName = $this => {
    return $rt_s(409);
},
jur_EOISet = $rt_classWithoutFields(jur_AbstractSet),
jur_EOISet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    if ($stringIndex < (!$matchResult.$transparentBounds ? $matchResult.$rightBound : $testString.$nativeString.length))
        return (-1);
    $matchResult.$hitEnd = 1;
    $matchResult.$requireEnd = 1;
    return $this.$next2.$matches1($stringIndex, $testString, $matchResult);
},
jur_EOISet_hasConsumed = ($this, $matchResult) => {
    return 0;
},
jur_EOISet_getName = $this => {
    return $rt_s(410);
};
function jur_MultiLineSOLSet() {
    jur_AbstractSet.call(this);
    this.$lt1 = null;
}
let jur_MultiLineSOLSet_matches = ($this, $strIndex, $testString, $matchResult) => {
    a: {
        if ($strIndex != $matchResult.$rightBound) {
            if (!$strIndex)
                break a;
            if ($matchResult.$anchoringBounds && $strIndex == $matchResult.$leftBound)
                break a;
            if ($this.$lt1.$isAfterLineTerminator(jl_String_charAt($testString, $strIndex - 1 | 0), jl_String_charAt($testString, $strIndex)))
                break a;
        }
        return (-1);
    }
    return $this.$next2.$matches1($strIndex, $testString, $matchResult);
},
jur_MultiLineSOLSet_hasConsumed = ($this, $matchResult) => {
    return 0;
},
jur_MultiLineSOLSet_getName = $this => {
    return $rt_s(411);
},
jur_DotAllSet = $rt_classWithoutFields(jur_JointSet),
jur_DotAllSet__init_ = $this => {
    jur_AbstractSet__init_($this);
},
jur_DotAllSet__init_0 = () => {
    let var_0 = new jur_DotAllSet();
    jur_DotAllSet__init_(var_0);
    return var_0;
},
jur_DotAllSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $strLength, var$5, $high, var$7;
    $strLength = $matchResult.$rightBound;
    var$5 = $stringIndex + 1 | 0;
    if (var$5 > $strLength) {
        $matchResult.$hitEnd = 1;
        return (-1);
    }
    $high = jl_String_charAt($testString, $stringIndex);
    if (jl_Character_isHighSurrogate($high)) {
        var$7 = $stringIndex + 2 | 0;
        if (var$7 <= $strLength && jl_Character_isSurrogatePair($high, jl_String_charAt($testString, var$5)))
            return $this.$next2.$matches1(var$7, $testString, $matchResult);
    }
    return $this.$next2.$matches1(var$5, $testString, $matchResult);
},
jur_DotAllSet_getName = $this => {
    return $rt_s(412);
},
jur_DotAllSet_setNext = ($this, $next) => {
    $this.$next2 = $next;
},
jur_DotAllSet_getType = $this => {
    return (-2147483602);
},
jur_DotAllSet_hasConsumed = ($this, $matchResult) => {
    return 1;
};
function jur_DotSet() {
    jur_JointSet.call(this);
    this.$lt0 = null;
}
let jur_DotSet__init_ = ($this, $lt) => {
    jur_AbstractSet__init_($this);
    $this.$lt0 = $lt;
},
jur_DotSet__init_0 = var_0 => {
    let var_1 = new jur_DotSet();
    jur_DotSet__init_(var_1, var_0);
    return var_1;
},
jur_DotSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $strLength, var$5, $high, $low;
    $strLength = $matchResult.$rightBound;
    var$5 = $stringIndex + 1 | 0;
    if (var$5 > $strLength) {
        $matchResult.$hitEnd = 1;
        return (-1);
    }
    $high = jl_String_charAt($testString, $stringIndex);
    if (jl_Character_isHighSurrogate($high)) {
        $stringIndex = $stringIndex + 2 | 0;
        if ($stringIndex <= $strLength) {
            $low = jl_String_charAt($testString, var$5);
            if (jl_Character_isSurrogatePair($high, $low))
                return $this.$lt0.$isLineTerminator(jl_Character_toCodePoint($high, $low)) ? (-1) : $this.$next2.$matches1($stringIndex, $testString, $matchResult);
        }
    }
    return $this.$lt0.$isLineTerminator($high) ? (-1) : $this.$next2.$matches1(var$5, $testString, $matchResult);
},
jur_DotSet_getName = $this => {
    return $rt_s(112);
},
jur_DotSet_setNext = ($this, $next) => {
    $this.$next2 = $next;
},
jur_DotSet_getType = $this => {
    return (-2147483602);
},
jur_DotSet_hasConsumed = ($this, $matchResult) => {
    return 1;
};
function jur_UEOLSet() {
    jur_AbstractSet.call(this);
    this.$consCounter2 = 0;
}
let jur_UEOLSet__init_ = ($this, $counter) => {
    jur_AbstractSet__init_($this);
    $this.$consCounter2 = $counter;
},
jur_UEOLSet__init_0 = var_0 => {
    let var_1 = new jur_UEOLSet();
    jur_UEOLSet__init_(var_1, var_0);
    return var_1;
},
jur_UEOLSet_matches = ($this, $strIndex, $testString, $matchResult) => {
    let $rightBound;
    $rightBound = !$matchResult.$anchoringBounds ? $testString.$nativeString.length : $matchResult.$rightBound;
    if ($strIndex >= $rightBound) {
        jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter2, 0);
        return $this.$next2.$matches1($strIndex, $testString, $matchResult);
    }
    if (($rightBound - $strIndex | 0) == 1 && jl_String_charAt($testString, $strIndex) == 10) {
        jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter2, 1);
        return $this.$next2.$matches1($strIndex + 1 | 0, $testString, $matchResult);
    }
    return (-1);
},
jur_UEOLSet_hasConsumed = ($this, $matchResult) => {
    let $res;
    $res = !jur_MatchResultImpl_getConsumed($matchResult, $this.$consCounter2) ? 0 : 1;
    jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter2, (-1));
    return $res;
},
jur_UEOLSet_getName = $this => {
    return $rt_s(409);
};
function jur_UMultiLineEOLSet() {
    jur_AbstractSet.call(this);
    this.$consCounter3 = 0;
}
let jur_UMultiLineEOLSet__init_ = ($this, $counter) => {
    jur_AbstractSet__init_($this);
    $this.$consCounter3 = $counter;
},
jur_UMultiLineEOLSet__init_0 = var_0 => {
    let var_1 = new jur_UMultiLineEOLSet();
    jur_UMultiLineEOLSet__init_(var_1, var_0);
    return var_1;
},
jur_UMultiLineEOLSet_matches = ($this, $strIndex, $testString, $matchResult) => {
    if ((!$matchResult.$anchoringBounds ? $testString.$nativeString.length - $strIndex | 0 : $matchResult.$rightBound - $strIndex | 0) <= 0) {
        jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter3, 0);
        return $this.$next2.$matches1($strIndex, $testString, $matchResult);
    }
    if (jl_String_charAt($testString, $strIndex) != 10)
        return (-1);
    jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter3, 1);
    return $this.$next2.$matches1($strIndex + 1 | 0, $testString, $matchResult);
},
jur_UMultiLineEOLSet_hasConsumed = ($this, $matchResult) => {
    let $res;
    $res = !jur_MatchResultImpl_getConsumed($matchResult, $this.$consCounter3) ? 0 : 1;
    jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter3, (-1));
    return $res;
},
jur_UMultiLineEOLSet_getName = $this => {
    return $rt_s(413);
};
function jur_MultiLineEOLSet() {
    jur_AbstractSet.call(this);
    this.$consCounter = 0;
}
let jur_MultiLineEOLSet__init_0 = ($this, $counter) => {
    jur_AbstractSet__init_($this);
    $this.$consCounter = $counter;
},
jur_MultiLineEOLSet__init_ = var_0 => {
    let var_1 = new jur_MultiLineEOLSet();
    jur_MultiLineEOLSet__init_0(var_1, var_0);
    return var_1;
},
jur_MultiLineEOLSet_matches = ($this, $strIndex, $testString, $matchResult) => {
    let $strDif, $ch1, $ch2;
    $strDif = !$matchResult.$anchoringBounds ? $testString.$nativeString.length - $strIndex | 0 : $matchResult.$rightBound - $strIndex | 0;
    if (!$strDif) {
        jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter, 0);
        return $this.$next2.$matches1($strIndex, $testString, $matchResult);
    }
    if ($strDif < 2) {
        $ch1 = jl_String_charAt($testString, $strIndex);
        $ch2 = 97;
    } else {
        $ch1 = jl_String_charAt($testString, $strIndex);
        $ch2 = jl_String_charAt($testString, $strIndex + 1 | 0);
    }
    switch ($ch1) {
        case 10:
        case 133:
        case 8232:
        case 8233:
            jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter, 0);
            return $this.$next2.$matches1($strIndex, $testString, $matchResult);
        case 13:
            if ($ch2 != 10) {
                jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter, 0);
                return $this.$next2.$matches1($strIndex, $testString, $matchResult);
            }
            jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter, 0);
            return $this.$next2.$matches1($strIndex, $testString, $matchResult);
        default:
    }
    return (-1);
},
jur_MultiLineEOLSet_hasConsumed = ($this, $matchResult) => {
    let $res;
    $res = !jur_MatchResultImpl_getConsumed($matchResult, $this.$consCounter) ? 0 : 1;
    jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter, (-1));
    return $res;
},
jur_MultiLineEOLSet_getName = $this => {
    return $rt_s(414);
};
function jur_CIBackReferenceSet() {
    let a = this; jur_JointSet.call(a);
    a.$referencedGroup = 0;
    a.$consCounter1 = 0;
}
let jur_CIBackReferenceSet__init_ = ($this, $groupIndex, $consCounter) => {
    jur_AbstractSet__init_($this);
    $this.$referencedGroup = $groupIndex;
    $this.$consCounter1 = $consCounter;
},
jur_CIBackReferenceSet__init_0 = (var_0, var_1) => {
    let var_2 = new jur_CIBackReferenceSet();
    jur_CIBackReferenceSet__init_(var_2, var_0, var_1);
    return var_2;
},
jur_CIBackReferenceSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $group, $i, var$6, var$7;
    $group = jur_CIBackReferenceSet_getString($this, $matchResult);
    if ($group !== null && ($stringIndex + $group.$nativeString.length | 0) <= $matchResult.$rightBound) {
        $i = 0;
        while (true) {
            if ($i >= $group.$nativeString.length) {
                jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter1, $group.$nativeString.length);
                return $this.$next2.$matches1($stringIndex + $group.$nativeString.length | 0, $testString, $matchResult);
            }
            var$6 = jl_String_charAt($group, $i);
            var$7 = $stringIndex + $i | 0;
            if (var$6 != jl_String_charAt($testString, var$7) && jur_Pattern_getSupplement(jl_String_charAt($group, $i)) != jl_String_charAt($testString, var$7))
                break;
            $i = $i + 1 | 0;
        }
        return (-1);
    }
    return (-1);
},
jur_CIBackReferenceSet_setNext = ($this, $next) => {
    $this.$next2 = $next;
},
jur_CIBackReferenceSet_getString = ($this, $matchResult) => {
    let var$2, var$3;
    var$2 = $this.$referencedGroup;
    var$3 = jur_MatchResultImpl_getStart($matchResult, var$2);
    var$2 = jur_MatchResultImpl_getEnd($matchResult, var$2);
    return (var$2 | var$3 | (var$2 - var$3 | 0)) >= 0 && var$2 <= $matchResult.$string3.$nativeString.length ? jl_String_substring($matchResult.$string3, var$3, var$2) : null;
},
jur_CIBackReferenceSet_getName = $this => {
    let var$1, var$2;
    var$1 = $this.$groupIndex;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_StringBuilder_append0(jl_StringBuilder_append(var$2, $rt_s(415)), var$1);
    return jl_AbstractStringBuilder_toString(var$2);
},
jur_CIBackReferenceSet_hasConsumed = ($this, $matchResult) => {
    let $res;
    $res = !jur_MatchResultImpl_getConsumed($matchResult, $this.$consCounter1) ? 0 : 1;
    jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter1, (-1));
    return $res;
},
jur_BackReferenceSet = $rt_classWithoutFields(jur_CIBackReferenceSet),
jur_BackReferenceSet__init_0 = ($this, $groupIndex, $consCounter) => {
    jur_CIBackReferenceSet__init_($this, $groupIndex, $consCounter);
},
jur_BackReferenceSet__init_ = (var_0, var_1) => {
    let var_2 = new jur_BackReferenceSet();
    jur_BackReferenceSet__init_0(var_2, var_0, var_1);
    return var_2;
},
jur_BackReferenceSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $group, $shift;
    $group = jur_CIBackReferenceSet_getString($this, $matchResult);
    if ($group !== null && ($stringIndex + $group.$nativeString.length | 0) <= $matchResult.$rightBound) {
        $shift = !jl_String_startsWith0($testString, $group, $stringIndex) ? (-1) : $group.$nativeString.length;
        if ($shift < 0)
            return (-1);
        jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter1, $shift);
        return $this.$next2.$matches1($stringIndex + $shift | 0, $testString, $matchResult);
    }
    return (-1);
},
jur_BackReferenceSet_find = ($this, $strIndex, $testString, $matchResult) => {
    let $group, $strLength, var$6;
    $group = jur_CIBackReferenceSet_getString($this, $matchResult);
    $strLength = $matchResult.$leftBound;
    if ($group !== null && ($strIndex + $group.$nativeString.length | 0) <= $strLength) {
        while (true) {
            if ($strIndex > $strLength)
                return (-1);
            var$6 = jl_String_indexOf1($testString, $group, $strIndex);
            if (var$6 < 0)
                return (-1);
            if ($this.$next2.$matches1(var$6 + $group.$nativeString.length | 0, $testString, $matchResult) >= 0)
                break;
            $strIndex = var$6 + 1 | 0;
        }
        return var$6;
    }
    return (-1);
},
jur_BackReferenceSet_findBack = ($this, $strIndex, $lastIndex, $testString, $matchResult) => {
    let $group, var$6;
    $group = jur_CIBackReferenceSet_getString($this, $matchResult);
    if ($group === null)
        return (-1);
    a: {
        while (true) {
            if ($lastIndex < $strIndex)
                return (-1);
            var$6 = jl_Math_min($lastIndex, $testString.$nativeString.length - $group.$nativeString.length | 0);
            b: {
                c: while (true) {
                    if (var$6 < 0) {
                        var$6 = (-1);
                        break b;
                    }
                    $lastIndex = 0;
                    while (true) {
                        if ($lastIndex >= $group.$nativeString.length)
                            break c;
                        if (jl_String_charAt($testString, var$6 + $lastIndex | 0) != jl_String_charAt($group, $lastIndex))
                            break;
                        $lastIndex = $lastIndex + 1 | 0;
                    }
                    var$6 = var$6 + (-1) | 0;
                }
            }
            if (var$6 < 0)
                break a;
            if (var$6 < $strIndex)
                break a;
            if ($this.$next2.$matches1(var$6 + $group.$nativeString.length | 0, $testString, $matchResult) >= 0)
                break;
            $lastIndex = var$6 + (-1) | 0;
        }
        return var$6;
    }
    return (-1);
},
jur_BackReferenceSet_first = ($this, $set) => {
    return 1;
},
jur_BackReferenceSet_getName = $this => {
    let var$1, var$2;
    var$1 = $this.$groupIndex;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_StringBuilder_append0(jl_StringBuilder_append(var$2, $rt_s(416)), var$1);
    return jl_AbstractStringBuilder_toString(var$2);
};
function jur_UCIBackReferenceSet() {
    jur_CIBackReferenceSet.call(this);
    this.$groupIndex1 = 0;
}
let jur_UCIBackReferenceSet__init_ = ($this, $groupIndex, $consCounter) => {
    jur_CIBackReferenceSet__init_($this, $groupIndex, $consCounter);
},
jur_UCIBackReferenceSet__init_0 = (var_0, var_1) => {
    let var_2 = new jur_UCIBackReferenceSet();
    jur_UCIBackReferenceSet__init_(var_2, var_0, var_1);
    return var_2;
},
jur_UCIBackReferenceSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $group, $i;
    $group = jur_CIBackReferenceSet_getString($this, $matchResult);
    if ($group !== null && ($stringIndex + $group.$nativeString.length | 0) <= $matchResult.$rightBound) {
        $i = 0;
        while (true) {
            if ($i >= $group.$nativeString.length) {
                jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter1, $group.$nativeString.length);
                return $this.$next2.$matches1($stringIndex + $group.$nativeString.length | 0, $testString, $matchResult);
            }
            if (jl_Character_toLowerCase(jl_Character_toUpperCase(jl_String_charAt($group, $i))) != jl_Character_toLowerCase(jl_Character_toUpperCase(jl_String_charAt($testString, $stringIndex + $i | 0))))
                break;
            $i = $i + 1 | 0;
        }
        return (-1);
    }
    return (-1);
},
jur_UCIBackReferenceSet_getName = $this => {
    let var$1, var$2;
    var$1 = $this.$groupIndex1;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_StringBuilder_append0(jl_StringBuilder_append(var$2, $rt_s(417)), var$1);
    return jl_AbstractStringBuilder_toString(var$2);
},
jl_StringBuffer = $rt_classWithoutFields(jl_AbstractStringBuilder),
jl_StringBuffer_insert0 = ($this, var$1, var$2, var$3, var$4) => {
    jl_AbstractStringBuilder_insert1($this, var$1, var$2, var$3, var$4);
    return $this;
},
jl_StringBuffer_append = ($this, var$1, var$2, var$3) => {
    jl_AbstractStringBuilder_append5($this, var$1, var$2, var$3);
    return $this;
},
jl_StringBuffer_insert1 = ($this, var$1, var$2, var$3, var$4) => {
    jl_AbstractStringBuilder_insert($this, var$1, var$2, var$3, var$4);
    return $this;
},
jl_StringBuffer_append0 = ($this, var$1, var$2, var$3) => {
    jl_AbstractStringBuilder_append2($this, var$1, var$2, var$3);
    return $this;
},
jl_StringBuffer_ensureCapacity = ($this, var$1) => {
    jl_AbstractStringBuilder_ensureCapacity($this, var$1);
},
jl_StringBuffer_insert2 = ($this, var$1, var$2) => {
    jl_AbstractStringBuilder_insert2($this, var$1, var$2);
    return $this;
},
jl_StringBuffer_insert = ($this, var$1, var$2) => {
    jl_AbstractStringBuilder_insert0($this, var$1, var$2);
    return $this;
};
function jur_SequenceSet() {
    let a = this; jur_LeafSet.call(a);
    a.$string = null;
    a.$leftToRight = null;
    a.$rightToLeft = null;
}
let jur_SequenceSet_accepts = ($this, $strIndex, $testString) => {
    return !jur_SequenceSet_startsWith($this, $testString, $strIndex) ? (-1) : $this.$charCount0;
},
jur_SequenceSet_find = ($this, $strIndex, $testString, $matchResult) => {
    let $strLength, var$5, var$6;
    $strLength = $matchResult.$rightBound;
    while (true) {
        if ($strIndex > $strLength)
            return (-1);
        var$5 = jl_String_charAt($this.$string, $this.$charCount0 - 1 | 0);
        a: {
            while (true) {
                var$6 = $this.$charCount0;
                if ($strIndex > ($strLength - var$6 | 0)) {
                    $strIndex = (-1);
                    break a;
                }
                var$6 = jl_String_charAt($testString, ($strIndex + var$6 | 0) - 1 | 0);
                if (var$6 == var$5 && jur_SequenceSet_startsWith($this, $testString, $strIndex))
                    break;
                $strIndex = $strIndex + jur_SequenceSet$IntHash_get($this.$leftToRight, var$6) | 0;
            }
        }
        if ($strIndex < 0)
            return (-1);
        if ($this.$next2.$matches1($strIndex + $this.$charCount0 | 0, $testString, $matchResult) >= 0)
            break;
        $strIndex = $strIndex + 1 | 0;
    }
    return $strIndex;
},
jur_SequenceSet_findBack = ($this, $strIndex, $lastIndex, $testString, $matchResult) => {
    let var$5, var$6;
    while (true) {
        if ($lastIndex < $strIndex)
            return (-1);
        var$5 = jl_String_charAt($this.$string, 0);
        var$6 = ($testString.$nativeString.length - $lastIndex | 0) - $this.$charCount0 | 0;
        if (var$6 <= 0)
            $lastIndex = $lastIndex + var$6 | 0;
        a: {
            while (true) {
                if ($lastIndex < $strIndex) {
                    $lastIndex = (-1);
                    break a;
                }
                var$6 = jl_String_charAt($testString, $lastIndex);
                if (var$6 == var$5 && jur_SequenceSet_startsWith($this, $testString, $lastIndex))
                    break;
                $lastIndex = $lastIndex - jur_SequenceSet$IntHash_get($this.$rightToLeft, var$6) | 0;
            }
        }
        if ($lastIndex < 0)
            return (-1);
        if ($this.$next2.$matches1($lastIndex + $this.$charCount0 | 0, $testString, $matchResult) >= 0)
            break;
        $lastIndex = $lastIndex + (-1) | 0;
    }
    return $lastIndex;
},
jur_SequenceSet_getName = $this => {
    let var$1, var$2;
    var$1 = $this.$string;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_StringBuilder_append(jl_StringBuilder_append(var$2, $rt_s(418)), var$1);
    return jl_AbstractStringBuilder_toString(var$2);
},
jur_SequenceSet_first = ($this, $set) => {
    let var$2;
    if ($set instanceof jur_CharSet)
        return $set.$ch0 != jl_String_charAt($this.$string, 0) ? 0 : 1;
    if ($set instanceof jur_RangeSet)
        return jur_RangeSet_accepts($set, 0, jl_String_substring($this.$string, 0, 1)) <= 0 ? 0 : 1;
    if (!($set instanceof jur_SupplRangeSet)) {
        if (!($set instanceof jur_SupplCharSet))
            return 1;
        return $this.$string.$nativeString.length > 1 && $set.$ch1 == jl_Character_toCodePoint(jl_String_charAt($this.$string, 0), jl_String_charAt($this.$string, 1)) ? 1 : 0;
    }
    a: {
        b: {
            $set = $set;
            if (!$set.$contains1(jl_String_charAt($this.$string, 0))) {
                if ($this.$string.$nativeString.length <= 1)
                    break b;
                if (!$set.$contains1(jl_Character_toCodePoint(jl_String_charAt($this.$string, 0), jl_String_charAt($this.$string, 1))))
                    break b;
            }
            var$2 = 1;
            break a;
        }
        var$2 = 0;
    }
    return var$2;
},
jur_SequenceSet_startsWith = ($this, $str, $from) => {
    let $i;
    $i = 0;
    while ($i < $this.$charCount0) {
        if (jl_String_charAt($str, $i + $from | 0) != jl_String_charAt($this.$string, $i))
            return 0;
        $i = $i + 1 | 0;
    }
    return 1;
};
function jur_UCISequenceSet() {
    jur_LeafSet.call(this);
    this.$string2 = null;
}
let jur_UCISequenceSet__init_ = ($this, $substring) => {
    let $res, $i, var$4;
    jur_LeafSet__init_($this);
    $res = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($res);
    $i = 0;
    while (true) {
        var$4 = $rt_compare($i, $substring.$length0);
        if (var$4 >= 0) {
            $this.$string2 = jl_AbstractStringBuilder_toString($res);
            $this.$charCount0 = $res.$length0;
            return;
        }
        if ($i < 0)
            break;
        if (var$4 >= 0)
            break;
        jl_AbstractStringBuilder_append($res, jl_Character_toLowerCase(jl_Character_toUpperCase($substring.$buffer.data[$i])));
        $i = $i + 1 | 0;
    }
    $substring = new jl_IndexOutOfBoundsException;
    jl_Throwable__init_($substring);
    $rt_throw($substring);
},
jur_UCISequenceSet__init_0 = var_0 => {
    let var_1 = new jur_UCISequenceSet();
    jur_UCISequenceSet__init_(var_1, var_0);
    return var_1;
},
jur_UCISequenceSet_accepts = ($this, $strIndex, $testString) => {
    let $i;
    $i = 0;
    while (true) {
        if ($i >= $this.$string2.$nativeString.length)
            return $this.$string2.$nativeString.length;
        if (jl_String_charAt($this.$string2, $i) != jl_Character_toLowerCase(jl_Character_toUpperCase(jl_String_charAt($testString, $strIndex + $i | 0))))
            break;
        $i = $i + 1 | 0;
    }
    return (-1);
},
jur_UCISequenceSet_getName = $this => {
    let var$1, var$2;
    var$1 = $this.$string2;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_StringBuilder_append(jl_StringBuilder_append(var$2, $rt_s(419)), var$1);
    return jl_AbstractStringBuilder_toString(var$2);
};
function jur_CISequenceSet() {
    jur_LeafSet.call(this);
    this.$string1 = null;
}
let jur_CISequenceSet_accepts = ($this, $strIndex, $testString) => {
    let $i, var$4, var$5;
    $i = 0;
    while (true) {
        if ($i >= $this.$string1.$nativeString.length)
            return $this.$string1.$nativeString.length;
        var$4 = jl_String_charAt($this.$string1, $i);
        var$5 = $strIndex + $i | 0;
        if (var$4 != jl_String_charAt($testString, var$5) && jur_Pattern_getSupplement(jl_String_charAt($this.$string1, $i)) != jl_String_charAt($testString, var$5))
            break;
        $i = $i + 1 | 0;
    }
    return (-1);
},
jur_CISequenceSet_getName = $this => {
    let var$1, var$2;
    var$1 = $this.$string1;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_StringBuilder_append(jl_StringBuilder_append(var$2, $rt_s(420)), var$1);
    return jl_AbstractStringBuilder_toString(var$2);
};
function jur_UCISupplCharSet() {
    jur_LeafSet.call(this);
    this.$ch3 = 0;
}
let jur_UCISupplCharSet_accepts = ($this, $strIndex, $testString) => {
    let $low, $high;
    $low = $strIndex + 1 | 0;
    $high = jl_String_charAt($testString, $strIndex);
    $low = jl_String_charAt($testString, $low);
    return $this.$ch3 != jl_Character_toLowerCase0(jl_Character_toUpperCase0(jl_Character_toCodePoint($high, $low))) ? (-1) : 2;
},
jur_UCISupplCharSet_getName = $this => {
    let var$1, var$2;
    var$1 = jl_String__init_0(jl_Character_toChars($this.$ch3));
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_StringBuilder_append(jl_StringBuilder_append(var$2, $rt_s(401)), var$1);
    return jl_AbstractStringBuilder_toString(var$2);
};
function jur_LowSurrogateCharSet() {
    jur_JointSet.call(this);
    this.$low = 0;
}
let jur_LowSurrogateCharSet__init_0 = ($this, $low) => {
    jur_AbstractSet__init_($this);
    $this.$low = $low;
},
jur_LowSurrogateCharSet__init_ = var_0 => {
    let var_1 = new jur_LowSurrogateCharSet();
    jur_LowSurrogateCharSet__init_0(var_1, var_0);
    return var_1;
},
jur_LowSurrogateCharSet_setNext = ($this, $next) => {
    $this.$next2 = $next;
},
jur_LowSurrogateCharSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let var$4, $low;
    var$4 = $stringIndex + 1 | 0;
    if (var$4 > $matchResult.$rightBound) {
        $matchResult.$hitEnd = 1;
        return (-1);
    }
    $low = jl_String_charAt($testString, $stringIndex);
    if ($stringIndex > $matchResult.$leftBound && jl_Character_isHighSurrogate(jl_String_charAt($testString, $stringIndex - 1 | 0)))
        return (-1);
    if ($this.$low != $low)
        return (-1);
    return $this.$next2.$matches1(var$4, $testString, $matchResult);
},
jur_LowSurrogateCharSet_find = ($this, $strIndex, $testStr, $matchResult) => {
    let $startStr, $strLength, var$6, var$7;
    if (!($testStr instanceof jl_String))
        return jur_AbstractSet_find($this, $strIndex, $testStr, $matchResult);
    $startStr = $matchResult.$leftBound;
    $strLength = $matchResult.$rightBound;
    while (true) {
        if ($strIndex >= $strLength)
            return (-1);
        var$6 = jl_String_indexOf($testStr, $this.$low, $strIndex);
        if (var$6 < 0)
            return (-1);
        if (var$6 > $startStr && jl_Character_isHighSurrogate(jl_String_charAt($testStr, var$6 - 1 | 0))) {
            $strIndex = var$6 + 1 | 0;
            continue;
        }
        var$7 = $this.$next2;
        $strIndex = var$6 + 1 | 0;
        if (var$7.$matches1($strIndex, $testStr, $matchResult) >= 0)
            break;
    }
    return var$6;
},
jur_LowSurrogateCharSet_findBack = ($this, $strIndex, $lastIndex, $testStr, $matchResult) => {
    let $startStr, var$6;
    if (!($testStr instanceof jl_String))
        return jur_AbstractSet_findBack($this, $strIndex, $lastIndex, $testStr, $matchResult);
    $startStr = $matchResult.$leftBound;
    a: {
        while (true) {
            if ($lastIndex < $strIndex)
                return (-1);
            var$6 = jl_String_lastIndexOf0($testStr, $this.$low, $lastIndex);
            if (var$6 < 0)
                break a;
            if (var$6 < $strIndex)
                break a;
            if (var$6 > $startStr && jl_Character_isHighSurrogate(jl_String_charAt($testStr, var$6 - 1 | 0))) {
                $lastIndex = var$6 + (-2) | 0;
                continue;
            }
            if ($this.$next2.$matches1(var$6 + 1 | 0, $testStr, $matchResult) >= 0)
                break;
            $lastIndex = var$6 + (-1) | 0;
        }
        return var$6;
    }
    return (-1);
},
jur_LowSurrogateCharSet_getName = $this => {
    let var$1, var$2;
    var$1 = $this.$low;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_AbstractStringBuilder_append(var$2, var$1);
    return jl_AbstractStringBuilder_toString(var$2);
},
jur_LowSurrogateCharSet_first = ($this, $set) => {
    if ($set instanceof jur_CharSet)
        return 0;
    if ($set instanceof jur_RangeSet)
        return 0;
    if ($set instanceof jur_SupplRangeSet)
        return 0;
    if ($set instanceof jur_SupplCharSet)
        return 0;
    if ($set instanceof jur_HighSurrogateCharSet)
        return 0;
    if (!($set instanceof jur_LowSurrogateCharSet))
        return 1;
    return $set.$low != $this.$low ? 0 : 1;
},
jur_LowSurrogateCharSet_hasConsumed = ($this, $matchResult) => {
    return 1;
};
function jur_HighSurrogateCharSet() {
    jur_JointSet.call(this);
    this.$high = 0;
}
let jur_HighSurrogateCharSet__init_0 = ($this, $high) => {
    jur_AbstractSet__init_($this);
    $this.$high = $high;
},
jur_HighSurrogateCharSet__init_ = var_0 => {
    let var_1 = new jur_HighSurrogateCharSet();
    jur_HighSurrogateCharSet__init_0(var_1, var_0);
    return var_1;
},
jur_HighSurrogateCharSet_setNext = ($this, $next) => {
    $this.$next2 = $next;
},
jur_HighSurrogateCharSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $strLength, var$5, $low, $high;
    $strLength = $matchResult.$rightBound;
    var$5 = $stringIndex + 1 | 0;
    $low = $rt_compare(var$5, $strLength);
    if ($low > 0) {
        $matchResult.$hitEnd = 1;
        return (-1);
    }
    $high = jl_String_charAt($testString, $stringIndex);
    if ($low < 0 && jl_Character_isLowSurrogate(jl_String_charAt($testString, var$5)))
        return (-1);
    if ($this.$high != $high)
        return (-1);
    return $this.$next2.$matches1(var$5, $testString, $matchResult);
},
jur_HighSurrogateCharSet_find = ($this, $strIndex, $testStr, $matchResult) => {
    let $strLength, var$5;
    if (!($testStr instanceof jl_String))
        return jur_AbstractSet_find($this, $strIndex, $testStr, $matchResult);
    $strLength = $matchResult.$rightBound;
    while (true) {
        if ($strIndex >= $strLength)
            return (-1);
        var$5 = jl_String_indexOf($testStr, $this.$high, $strIndex);
        if (var$5 < 0)
            return (-1);
        $strIndex = var$5 + 1 | 0;
        if ($strIndex < $strLength && jl_Character_isLowSurrogate(jl_String_charAt($testStr, $strIndex))) {
            $strIndex = var$5 + 2 | 0;
            continue;
        }
        if ($this.$next2.$matches1($strIndex, $testStr, $matchResult) >= 0)
            break;
    }
    return var$5;
},
jur_HighSurrogateCharSet_findBack = ($this, $strIndex, $lastIndex, $testStr, $matchResult) => {
    let $strLength, var$6;
    if (!($testStr instanceof jl_String))
        return jur_AbstractSet_findBack($this, $strIndex, $lastIndex, $testStr, $matchResult);
    $strLength = $matchResult.$rightBound;
    a: {
        while (true) {
            if ($lastIndex < $strIndex)
                return (-1);
            var$6 = jl_String_lastIndexOf0($testStr, $this.$high, $lastIndex);
            if (var$6 < 0)
                break a;
            if (var$6 < $strIndex)
                break a;
            $lastIndex = var$6 + 1 | 0;
            if ($lastIndex < $strLength && jl_Character_isLowSurrogate(jl_String_charAt($testStr, $lastIndex))) {
                $lastIndex = var$6 + (-1) | 0;
                continue;
            }
            if ($this.$next2.$matches1($lastIndex, $testStr, $matchResult) >= 0)
                break;
            $lastIndex = var$6 + (-1) | 0;
        }
        return var$6;
    }
    return (-1);
},
jur_HighSurrogateCharSet_getName = $this => {
    let var$1, var$2;
    var$1 = $this.$high;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_AbstractStringBuilder_append(var$2, var$1);
    return jl_AbstractStringBuilder_toString(var$2);
},
jur_HighSurrogateCharSet_first = ($this, $set) => {
    if ($set instanceof jur_CharSet)
        return 0;
    if ($set instanceof jur_RangeSet)
        return 0;
    if ($set instanceof jur_SupplRangeSet)
        return 0;
    if ($set instanceof jur_SupplCharSet)
        return 0;
    if ($set instanceof jur_LowSurrogateCharSet)
        return 0;
    if (!($set instanceof jur_HighSurrogateCharSet))
        return 1;
    return $set.$high != $this.$high ? 0 : 1;
},
jur_HighSurrogateCharSet_hasConsumed = ($this, $matchResult) => {
    return 1;
};
function jur_SupplCharSet() {
    let a = this; jur_LeafSet.call(a);
    a.$high0 = 0;
    a.$low0 = 0;
    a.$ch1 = 0;
}
let jur_SupplCharSet_accepts = ($this, $strIndex, $testString) => {
    let $low, $high;
    $low = $strIndex + 1 | 0;
    $high = jl_String_charAt($testString, $strIndex);
    $low = jl_String_charAt($testString, $low);
    return $this.$high0 == $high && $this.$low0 == $low ? 2 : (-1);
},
jur_SupplCharSet_find = ($this, $strIndex, $testStr, $matchResult) => {
    let $strLength, $ch;
    if (!($testStr instanceof jl_String))
        return jur_AbstractSet_find($this, $strIndex, $testStr, $matchResult);
    $strLength = $matchResult.$rightBound;
    while ($strIndex < $strLength) {
        $strIndex = jl_String_indexOf($testStr, $this.$high0, $strIndex);
        if ($strIndex < 0)
            return (-1);
        $strIndex = $strIndex + 1 | 0;
        if ($strIndex >= $strLength)
            continue;
        $ch = jl_String_charAt($testStr, $strIndex);
        if ($this.$low0 == $ch && $this.$next2.$matches1($strIndex + 1 | 0, $testStr, $matchResult) >= 0)
            return $strIndex + (-1) | 0;
        $strIndex = $strIndex + 1 | 0;
    }
    return (-1);
},
jur_SupplCharSet_findBack = ($this, $strIndex, $lastIndex, $testStr, $matchResult) => {
    let var$5;
    if (!($testStr instanceof jl_String))
        return jur_AbstractSet_findBack($this, $strIndex, $lastIndex, $testStr, $matchResult);
    a: {
        while (true) {
            if ($lastIndex < $strIndex)
                return (-1);
            var$5 = jl_String_lastIndexOf0($testStr, $this.$low0, $lastIndex) + (-1) | 0;
            if (var$5 < 0)
                break a;
            if (var$5 < $strIndex)
                break a;
            if ($this.$high0 == jl_String_charAt($testStr, var$5) && $this.$next2.$matches1(var$5 + 2 | 0, $testStr, $matchResult) >= 0)
                break;
            $lastIndex = var$5 + (-1) | 0;
        }
        return var$5;
    }
    return (-1);
},
jur_SupplCharSet_getName = $this => {
    let var$1, var$2, var$3;
    var$1 = $this.$high0;
    var$2 = $this.$low0;
    var$3 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$3);
    jl_AbstractStringBuilder_append(var$3, var$1);
    jl_AbstractStringBuilder_append(var$3, var$2);
    return jl_AbstractStringBuilder_toString(var$3);
},
jur_SupplCharSet_first = ($this, $set) => {
    if ($set instanceof jur_SupplCharSet)
        return $set.$ch1 != $this.$ch1 ? 0 : 1;
    if ($set instanceof jur_SupplRangeSet)
        return $set.$contains1($this.$ch1);
    if ($set instanceof jur_CharSet)
        return 0;
    if (!($set instanceof jur_RangeSet))
        return 1;
    return 0;
},
jur_AbstractLineTerminator$1 = $rt_classWithoutFields(jur_AbstractLineTerminator),
jur_AbstractLineTerminator$1_isLineTerminator = ($this, $ch) => {
    return $ch != 10 ? 0 : 1;
},
jur_AbstractLineTerminator$1_isAfterLineTerminator = ($this, $ch, $ch2) => {
    return $ch != 10 ? 0 : 1;
},
jur_AbstractLineTerminator$2 = $rt_classWithoutFields(jur_AbstractLineTerminator),
jur_AbstractLineTerminator$2_isLineTerminator = ($this, $ch) => {
    return $ch != 10 && $ch != 13 && $ch != 133 && ($ch | 1) != 8233 ? 0 : 1;
},
jur_AbstractLineTerminator$2_isAfterLineTerminator = ($this, $ch, $ch2) => {
    a: {
        b: {
            if ($ch != 10 && $ch != 133 && ($ch | 1) != 8233) {
                if ($ch != 13)
                    break b;
                if ($ch2 == 10)
                    break b;
            }
            $ch = 1;
            break a;
        }
        $ch = 0;
    }
    return $ch;
};
function jur_SequenceSet$IntHash() {
    let a = this; jl_Object.call(a);
    a.$table0 = null;
    a.$values0 = null;
    a.$mask = 0;
    a.$size6 = 0;
}
let jur_SequenceSet$IntHash__init_0 = ($this, $size) => {
    let var$2, var$3;
    while (true) {
        var$2 = $this.$mask;
        if ($size < var$2)
            break;
        $this.$mask = var$2 << 1 | 1;
    }
    var$3 = var$2 << 1 | 1;
    $this.$mask = var$3;
    var$3 = var$3 + 1 | 0;
    $this.$table0 = $rt_createIntArray(var$3);
    $this.$values0 = $rt_createIntArray(var$3);
    $this.$size6 = $size;
},
jur_SequenceSet$IntHash__init_ = var_0 => {
    let var_1 = new jur_SequenceSet$IntHash();
    jur_SequenceSet$IntHash__init_0(var_1, var_0);
    return var_1;
},
jur_SequenceSet$IntHash_put = ($this, $key, $value) => {
    let $i, var$4, $hashCode, var$6;
    $i = 0;
    var$4 = $this.$mask;
    $hashCode = $key & var$4;
    while (true) {
        var$6 = $this.$table0.data;
        if (!var$6[$hashCode])
            break;
        if (var$6[$hashCode] == $key)
            break;
        $i = ($i + 1 | 0) & var$4;
        $hashCode = ($hashCode + $i | 0) & var$4;
    }
    var$6[$hashCode] = $key;
    $this.$values0.data[$hashCode] = $value;
},
jur_SequenceSet$IntHash_get = ($this, $key) => {
    let var$2, $hashCode, $i, $storedKey;
    var$2 = $this.$mask;
    $hashCode = $key & var$2;
    $i = 0;
    while (true) {
        $storedKey = $this.$table0.data[$hashCode];
        if (!$storedKey)
            break;
        if ($storedKey == $key)
            return $this.$values0.data[$hashCode];
        $i = ($i + 1 | 0) & var$2;
        $hashCode = ($hashCode + $i | 0) & var$2;
    }
    return $this.$size6;
},
jur_AbstractCharClass$LazySpace = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazySpace__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazySpace__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazySpace();
    jur_AbstractCharClass$LazySpace__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazySpace_computeValue = $this => {
    return jur_CharClass_add0(jur_CharClass_add(jur_CharClass__init_(), 9, 13), 32);
},
jur_AbstractCharClass$LazyDigit = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyDigit__init_0 = $this => {
    return;
},
jur_AbstractCharClass$LazyDigit__init_ = () => {
    let var_0 = new jur_AbstractCharClass$LazyDigit();
    jur_AbstractCharClass$LazyDigit__init_0(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyDigit_computeValue = $this => {
    return jur_CharClass_add(jur_CharClass__init_(), 48, 57);
},
jur_AbstractCharClass$LazyLower = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyLower__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyLower__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyLower();
    jur_AbstractCharClass$LazyLower__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyLower_computeValue = $this => {
    return jur_CharClass_add(jur_CharClass__init_(), 97, 122);
},
jur_AbstractCharClass$LazyUpper = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyUpper__init_0 = $this => {
    return;
},
jur_AbstractCharClass$LazyUpper__init_ = () => {
    let var_0 = new jur_AbstractCharClass$LazyUpper();
    jur_AbstractCharClass$LazyUpper__init_0(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyUpper_computeValue = $this => {
    return jur_CharClass_add(jur_CharClass__init_(), 65, 90);
},
jur_AbstractCharClass$LazyASCII = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyASCII__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyASCII__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyASCII();
    jur_AbstractCharClass$LazyASCII__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyASCII_computeValue = $this => {
    return jur_CharClass_add(jur_CharClass__init_(), 0, 127);
},
jur_AbstractCharClass$LazyAlpha = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyAlpha__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyAlpha__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyAlpha();
    jur_AbstractCharClass$LazyAlpha__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyAlpha_computeValue = $this => {
    return jur_CharClass_add(jur_CharClass_add(jur_CharClass__init_(), 97, 122), 65, 90);
},
jur_AbstractCharClass$LazyAlnum = $rt_classWithoutFields(jur_AbstractCharClass$LazyAlpha),
jur_AbstractCharClass$LazyAlnum__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyAlnum__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyAlnum();
    jur_AbstractCharClass$LazyAlnum__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyAlnum_computeValue = $this => {
    return jur_CharClass_add(jur_AbstractCharClass$LazyAlpha_computeValue($this), 48, 57);
},
jur_AbstractCharClass$LazyPunct = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyPunct__init_0 = $this => {
    return;
},
jur_AbstractCharClass$LazyPunct__init_ = () => {
    let var_0 = new jur_AbstractCharClass$LazyPunct();
    jur_AbstractCharClass$LazyPunct__init_0(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyPunct_computeValue = $this => {
    return jur_CharClass_add(jur_CharClass_add(jur_CharClass_add(jur_CharClass__init_(), 33, 64), 91, 96), 123, 126);
},
jur_AbstractCharClass$LazyGraph = $rt_classWithoutFields(jur_AbstractCharClass$LazyAlnum),
jur_AbstractCharClass$LazyGraph__init_0 = $this => {
    return;
},
jur_AbstractCharClass$LazyGraph__init_ = () => {
    let var_0 = new jur_AbstractCharClass$LazyGraph();
    jur_AbstractCharClass$LazyGraph__init_0(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyGraph_computeValue = $this => {
    return jur_CharClass_add(jur_CharClass_add(jur_CharClass_add(jur_AbstractCharClass$LazyAlnum_computeValue($this), 33, 64), 91, 96), 123, 126);
},
jur_AbstractCharClass$LazyPrint = $rt_classWithoutFields(jur_AbstractCharClass$LazyGraph),
jur_AbstractCharClass$LazyPrint__init_0 = $this => {
    return;
},
jur_AbstractCharClass$LazyPrint__init_ = () => {
    let var_0 = new jur_AbstractCharClass$LazyPrint();
    jur_AbstractCharClass$LazyPrint__init_0(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyPrint_computeValue = $this => {
    return jur_CharClass_add0(jur_AbstractCharClass$LazyGraph_computeValue($this), 32);
},
jur_AbstractCharClass$LazyBlank = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyBlank__init_0 = $this => {
    return;
},
jur_AbstractCharClass$LazyBlank__init_ = () => {
    let var_0 = new jur_AbstractCharClass$LazyBlank();
    jur_AbstractCharClass$LazyBlank__init_0(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyBlank_computeValue = $this => {
    return jur_CharClass_add0(jur_CharClass_add0(jur_CharClass__init_(), 32), 9);
},
jur_AbstractCharClass$LazyCntrl = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyCntrl__init_0 = $this => {
    return;
};
let jur_AbstractCharClass$LazyCntrl__init_ = () => {
    let var_0 = new jur_AbstractCharClass$LazyCntrl();
    jur_AbstractCharClass$LazyCntrl__init_0(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyCntrl_computeValue = $this => {
    return jur_CharClass_add0(jur_CharClass_add(jur_CharClass__init_(), 0, 31), 127);
},
jur_AbstractCharClass$LazyXDigit = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyXDigit__init_0 = $this => {
    return;
},
jur_AbstractCharClass$LazyXDigit__init_ = () => {
    let var_0 = new jur_AbstractCharClass$LazyXDigit();
    jur_AbstractCharClass$LazyXDigit__init_0(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyXDigit_computeValue = $this => {
    return jur_CharClass_add(jur_CharClass_add(jur_CharClass_add(jur_CharClass__init_(), 48, 57), 97, 102), 65, 70);
},
jur_AbstractCharClass$LazyJavaLowerCase = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaLowerCase__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyJavaLowerCase__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaLowerCase();
    jur_AbstractCharClass$LazyJavaLowerCase__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaLowerCase_computeValue = $this => {
    let $chCl;
    $chCl = new jur_AbstractCharClass$LazyJavaLowerCase$1;
    $chCl.$this$023 = $this;
    jur_AbstractCharClass__init_($chCl);
    $chCl.$mayContainSupplCodepoints = 1;
    return $chCl;
},
jur_AbstractCharClass$LazyJavaUpperCase = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaUpperCase__init_0 = $this => {
    return;
},
jur_AbstractCharClass$LazyJavaUpperCase__init_ = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaUpperCase();
    jur_AbstractCharClass$LazyJavaUpperCase__init_0(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaUpperCase_computeValue = $this => {
    let $chCl;
    $chCl = new jur_AbstractCharClass$LazyJavaUpperCase$1;
    $chCl.$this$026 = $this;
    jur_AbstractCharClass__init_($chCl);
    $chCl.$mayContainSupplCodepoints = 1;
    return $chCl;
},
jur_AbstractCharClass$LazyJavaWhitespace = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaWhitespace__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyJavaWhitespace__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaWhitespace();
    jur_AbstractCharClass$LazyJavaWhitespace__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaWhitespace_computeValue = $this => {
    let var$1;
    var$1 = new jur_AbstractCharClass$LazyJavaWhitespace$1;
    var$1.$this$021 = $this;
    jur_AbstractCharClass__init_(var$1);
    return var$1;
},
jur_AbstractCharClass$LazyJavaMirrored = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaMirrored__init_0 = $this => {
    return;
},
jur_AbstractCharClass$LazyJavaMirrored__init_ = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaMirrored();
    jur_AbstractCharClass$LazyJavaMirrored__init_0(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaMirrored_computeValue = $this => {
    let var$1;
    var$1 = new jur_AbstractCharClass$LazyJavaMirrored$1;
    var$1.$this$019 = $this;
    jur_AbstractCharClass__init_(var$1);
    return var$1;
},
jur_AbstractCharClass$LazyJavaDefined = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaDefined__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyJavaDefined__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaDefined();
    jur_AbstractCharClass$LazyJavaDefined__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaDefined_computeValue = $this => {
    let $chCl;
    $chCl = new jur_AbstractCharClass$LazyJavaDefined$1;
    $chCl.$this$033 = $this;
    jur_AbstractCharClass__init_($chCl);
    ju_BitSet_set($chCl.$lowHighSurrogates, 0, 2048);
    $chCl.$mayContainSupplCodepoints = 1;
    return $chCl;
},
jur_AbstractCharClass$LazyJavaDigit = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaDigit__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyJavaDigit__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaDigit();
    jur_AbstractCharClass$LazyJavaDigit__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaDigit_computeValue = $this => {
    let $chCl;
    $chCl = new jur_AbstractCharClass$LazyJavaDigit$1;
    $chCl.$this$028 = $this;
    jur_AbstractCharClass__init_($chCl);
    $chCl.$mayContainSupplCodepoints = 1;
    return $chCl;
},
jur_AbstractCharClass$LazyJavaIdentifierIgnorable = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaIdentifierIgnorable__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyJavaIdentifierIgnorable__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaIdentifierIgnorable();
    jur_AbstractCharClass$LazyJavaIdentifierIgnorable__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaIdentifierIgnorable_computeValue = $this => {
    let $chCl;
    $chCl = new jur_AbstractCharClass$LazyJavaIdentifierIgnorable$1;
    $chCl.$this$036 = $this;
    jur_AbstractCharClass__init_($chCl);
    $chCl.$mayContainSupplCodepoints = 1;
    return $chCl;
},
jur_AbstractCharClass$LazyJavaISOControl = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaISOControl__init_0 = $this => {
    return;
},
jur_AbstractCharClass$LazyJavaISOControl__init_ = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaISOControl();
    jur_AbstractCharClass$LazyJavaISOControl__init_0(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaISOControl_computeValue = $this => {
    let var$1;
    var$1 = new jur_AbstractCharClass$LazyJavaISOControl$1;
    var$1.$this$024 = $this;
    jur_AbstractCharClass__init_(var$1);
    return var$1;
},
jur_AbstractCharClass$LazyJavaJavaIdentifierPart = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaJavaIdentifierPart__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyJavaJavaIdentifierPart__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaJavaIdentifierPart();
    jur_AbstractCharClass$LazyJavaJavaIdentifierPart__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaJavaIdentifierPart_computeValue = $this => {
    let $chCl;
    $chCl = new jur_AbstractCharClass$LazyJavaJavaIdentifierPart$1;
    $chCl.$this$010 = $this;
    jur_AbstractCharClass__init_($chCl);
    $chCl.$mayContainSupplCodepoints = 1;
    return $chCl;
},
jur_AbstractCharClass$LazyJavaJavaIdentifierStart = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaJavaIdentifierStart__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyJavaJavaIdentifierStart__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaJavaIdentifierStart();
    jur_AbstractCharClass$LazyJavaJavaIdentifierStart__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaJavaIdentifierStart_computeValue = $this => {
    let $chCl;
    $chCl = new jur_AbstractCharClass$LazyJavaJavaIdentifierStart$1;
    $chCl.$this$029 = $this;
    jur_AbstractCharClass__init_($chCl);
    $chCl.$mayContainSupplCodepoints = 1;
    return $chCl;
},
jur_AbstractCharClass$LazyJavaLetter = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaLetter__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyJavaLetter__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaLetter();
    jur_AbstractCharClass$LazyJavaLetter__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaLetter_computeValue = $this => {
    let $chCl;
    $chCl = new jur_AbstractCharClass$LazyJavaLetter$1;
    $chCl.$this$032 = $this;
    jur_AbstractCharClass__init_($chCl);
    $chCl.$mayContainSupplCodepoints = 1;
    return $chCl;
};
let jur_AbstractCharClass$LazyJavaLetterOrDigit = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaLetterOrDigit__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyJavaLetterOrDigit__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaLetterOrDigit();
    jur_AbstractCharClass$LazyJavaLetterOrDigit__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaLetterOrDigit_computeValue = $this => {
    let $chCl;
    $chCl = new jur_AbstractCharClass$LazyJavaLetterOrDigit$1;
    $chCl.$this$035 = $this;
    jur_AbstractCharClass__init_($chCl);
    $chCl.$mayContainSupplCodepoints = 1;
    return $chCl;
},
jur_AbstractCharClass$LazyJavaSpaceChar = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaSpaceChar__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyJavaSpaceChar__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaSpaceChar();
    jur_AbstractCharClass$LazyJavaSpaceChar__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaSpaceChar_computeValue = $this => {
    let var$1;
    var$1 = new jur_AbstractCharClass$LazyJavaSpaceChar$1;
    var$1.$this$022 = $this;
    jur_AbstractCharClass__init_(var$1);
    return var$1;
},
jur_AbstractCharClass$LazyJavaTitleCase = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaTitleCase__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyJavaTitleCase__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaTitleCase();
    jur_AbstractCharClass$LazyJavaTitleCase__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaTitleCase_computeValue = $this => {
    let var$1;
    var$1 = new jur_AbstractCharClass$LazyJavaTitleCase$1;
    var$1.$this$030 = $this;
    jur_AbstractCharClass__init_(var$1);
    return var$1;
},
jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart__init_0 = $this => {
    return;
},
jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart__init_ = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart();
    jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart__init_0(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart_computeValue = $this => {
    let $chCl;
    $chCl = new jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart$1;
    $chCl.$this$011 = $this;
    jur_AbstractCharClass__init_($chCl);
    $chCl.$mayContainSupplCodepoints = 1;
    return $chCl;
},
jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart();
    jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart_computeValue = $this => {
    let $chCl;
    $chCl = new jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart$1;
    $chCl.$this$040 = $this;
    jur_AbstractCharClass__init_($chCl);
    $chCl.$mayContainSupplCodepoints = 1;
    return $chCl;
},
jur_AbstractCharClass$LazyWord = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyWord__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyWord__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyWord();
    jur_AbstractCharClass$LazyWord__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyWord_computeValue = $this => {
    return jur_CharClass_add0(jur_CharClass_add(jur_CharClass_add(jur_CharClass_add(jur_CharClass__init_(), 97, 122), 65, 90), 48, 57), 95);
},
jur_AbstractCharClass$LazyNonWord = $rt_classWithoutFields(jur_AbstractCharClass$LazyWord),
jur_AbstractCharClass$LazyNonWord__init_0 = $this => {
    return;
},
jur_AbstractCharClass$LazyNonWord__init_ = () => {
    let var_0 = new jur_AbstractCharClass$LazyNonWord();
    jur_AbstractCharClass$LazyNonWord__init_0(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyNonWord_computeValue = $this => {
    let $chCl;
    $chCl = jur_AbstractCharClass_setNegative(jur_AbstractCharClass$LazyWord_computeValue($this), 1);
    $chCl.$mayContainSupplCodepoints = 1;
    return $chCl;
},
jur_AbstractCharClass$LazyNonSpace = $rt_classWithoutFields(jur_AbstractCharClass$LazySpace),
jur_AbstractCharClass$LazyNonSpace__init_0 = $this => {
    return;
},
jur_AbstractCharClass$LazyNonSpace__init_ = () => {
    let var_0 = new jur_AbstractCharClass$LazyNonSpace();
    jur_AbstractCharClass$LazyNonSpace__init_0(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyNonSpace_computeValue = $this => {
    let $chCl;
    $chCl = jur_AbstractCharClass_setNegative(jur_AbstractCharClass$LazySpace_computeValue($this), 1);
    $chCl.$mayContainSupplCodepoints = 1;
    return $chCl;
},
jur_AbstractCharClass$LazyNonDigit = $rt_classWithoutFields(jur_AbstractCharClass$LazyDigit),
jur_AbstractCharClass$LazyNonDigit__init_0 = $this => {
    return;
},
jur_AbstractCharClass$LazyNonDigit__init_ = () => {
    let var_0 = new jur_AbstractCharClass$LazyNonDigit();
    jur_AbstractCharClass$LazyNonDigit__init_0(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyNonDigit_computeValue = $this => {
    let $chCl;
    $chCl = jur_AbstractCharClass_setNegative(jur_AbstractCharClass$LazyDigit_computeValue($this), 1);
    $chCl.$mayContainSupplCodepoints = 1;
    return $chCl;
};
function jur_AbstractCharClass$LazyRange() {
    let a = this; jur_AbstractCharClass$LazyCharClass.call(a);
    a.$start6 = 0;
    a.$end3 = 0;
}
let jur_AbstractCharClass$LazyRange__init_0 = ($this, $start, $end) => {
    $this.$start6 = $start;
    $this.$end3 = $end;
},
jur_AbstractCharClass$LazyRange__init_ = (var_0, var_1) => {
    let var_2 = new jur_AbstractCharClass$LazyRange();
    jur_AbstractCharClass$LazyRange__init_0(var_2, var_0, var_1);
    return var_2;
},
jur_AbstractCharClass$LazyRange_computeValue = $this => {
    return jur_CharClass_add(jur_CharClass__init_(), $this.$start6, $this.$end3);
},
jur_AbstractCharClass$LazySpecialsBlock = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazySpecialsBlock__init_0 = $this => {
    return;
},
jur_AbstractCharClass$LazySpecialsBlock__init_ = () => {
    let var_0 = new jur_AbstractCharClass$LazySpecialsBlock();
    jur_AbstractCharClass$LazySpecialsBlock__init_0(var_0);
    return var_0;
},
jur_AbstractCharClass$LazySpecialsBlock_computeValue = $this => {
    return jur_CharClass_add(jur_CharClass_add(jur_CharClass__init_(), 65279, 65279), 65520, 65533);
};
function jur_AbstractCharClass$LazyCategory() {
    let a = this; jur_AbstractCharClass$LazyCharClass.call(a);
    a.$category1 = 0;
    a.$mayContainSupplCodepoints0 = 0;
    a.$containsAllSurrogates0 = 0;
}
let jur_AbstractCharClass$LazyCategory__init_0 = ($this, $cat, $mayContainSupplCodepoints) => {
    $this.$mayContainSupplCodepoints0 = $mayContainSupplCodepoints;
    $this.$category1 = $cat;
},
jur_AbstractCharClass$LazyCategory__init_ = (var_0, var_1) => {
    let var_2 = new jur_AbstractCharClass$LazyCategory();
    jur_AbstractCharClass$LazyCategory__init_0(var_2, var_0, var_1);
    return var_2;
},
jur_AbstractCharClass$LazyCategory__init_2 = ($this, $cat, $mayContainSupplCodepoints, $containsAllSurrogates) => {
    $this.$containsAllSurrogates0 = $containsAllSurrogates;
    $this.$mayContainSupplCodepoints0 = $mayContainSupplCodepoints;
    $this.$category1 = $cat;
},
jur_AbstractCharClass$LazyCategory__init_1 = (var_0, var_1, var_2) => {
    let var_3 = new jur_AbstractCharClass$LazyCategory();
    jur_AbstractCharClass$LazyCategory__init_2(var_3, var_0, var_1, var_2);
    return var_3;
},
jur_AbstractCharClass$LazyCategory_computeValue = $this => {
    let $chCl;
    $chCl = jur_UnicodeCategory__init_0($this.$category1);
    if ($this.$containsAllSurrogates0)
        ju_BitSet_set($chCl.$lowHighSurrogates, 0, 2048);
    $chCl.$mayContainSupplCodepoints = $this.$mayContainSupplCodepoints0;
    return $chCl;
};
function jur_AbstractCharClass$LazyCategoryScope() {
    let a = this; jur_AbstractCharClass$LazyCharClass.call(a);
    a.$category0 = 0;
    a.$mayContainSupplCodepoints1 = 0;
    a.$containsAllSurrogates = 0;
}
let jur_AbstractCharClass$LazyCategoryScope__init_1 = ($this, $cat, $mayContainSupplCodepoints) => {
    $this.$mayContainSupplCodepoints1 = $mayContainSupplCodepoints;
    $this.$category0 = $cat;
},
jur_AbstractCharClass$LazyCategoryScope__init_ = (var_0, var_1) => {
    let var_2 = new jur_AbstractCharClass$LazyCategoryScope();
    jur_AbstractCharClass$LazyCategoryScope__init_1(var_2, var_0, var_1);
    return var_2;
},
jur_AbstractCharClass$LazyCategoryScope__init_0 = ($this, $cat, $mayContainSupplCodepoints, $containsAllSurrogates) => {
    $this.$containsAllSurrogates = $containsAllSurrogates;
    $this.$mayContainSupplCodepoints1 = $mayContainSupplCodepoints;
    $this.$category0 = $cat;
},
jur_AbstractCharClass$LazyCategoryScope__init_2 = (var_0, var_1, var_2) => {
    let var_3 = new jur_AbstractCharClass$LazyCategoryScope();
    jur_AbstractCharClass$LazyCategoryScope__init_0(var_3, var_0, var_1, var_2);
    return var_3;
},
jur_AbstractCharClass$LazyCategoryScope_computeValue = $this => {
    let $chCl;
    $chCl = new jur_UnicodeCategoryScope;
    jur_UnicodeCategory__init_($chCl, $this.$category0);
    if ($this.$containsAllSurrogates)
        ju_BitSet_set($chCl.$lowHighSurrogates, 0, 2048);
    $chCl.$mayContainSupplCodepoints = $this.$mayContainSupplCodepoints1;
    return $chCl;
},
jl_NegativeArraySizeException = $rt_classWithoutFields(jl_RuntimeException),
jur_IntHash = $rt_classWithoutFields(),
otpp_ResourceAccessor = $rt_classWithoutFields(),
otciu_UnicodeHelper = $rt_classWithoutFields(),
otciu_UnicodeHelper_decodeCaseMapping = $text => {
    let $flow, $sz, $data, var$5, $last, $i, var$8;
    $flow = otci_CharFlow__init_(jl_String_toCharArray($text));
    $sz = otci_Base46_decodeUnsigned($flow);
    $data = $rt_createIntArray($sz * 2 | 0);
    var$5 = $data.data;
    $last = 0;
    $i = 0;
    while ($i < $sz) {
        $last = $last + otci_Base46_decodeUnsigned($flow) | 0;
        var$8 = $i * 2 | 0;
        var$5[var$8] = $last;
        var$5[var$8 + 1 | 0] = otci_Base46_decode($flow);
        $i = $i + 1 | 0;
    }
    return $data;
},
otciu_UnicodeHelper_createCharMapping = $data => {
    let $result, var$3, $last, $lastValue, $i, var$7, $key, $value, var$10, var$11;
    $result = $rt_createIntArray(65536);
    var$3 = $result.data;
    $last = 0;
    $lastValue = 0;
    $i = 0;
    a: {
        while (true) {
            var$7 = $data.data;
            if ($i >= var$7.length)
                break a;
            $key = var$7[$i];
            $value = var$7[$i + 1 | 0];
            var$10 = var$3.length;
            if ($key < var$10)
                var$10 = $key;
            else if ($key == $last)
                break;
            ju_Arrays_fill0($result, $last, var$10, $lastValue);
            $i = $i + 2 | 0;
            $last = var$10;
            $lastValue = $value;
        }
    }
    var$11 = new otciu_CharMapping;
    var$11.$binarySearchTable = $data;
    var$11.$fastTable = $result;
    return var$11;
},
otciu_UnicodeHelper_decodeByte = $c => {
    if ($c > 92)
        return (($c - 32 | 0) - 2 | 0) << 24 >> 24;
    if ($c <= 34)
        return ($c - 32 | 0) << 24 >> 24;
    return (($c - 32 | 0) - 1 | 0) << 24 >> 24;
};
function otciu_CharMapping() {
    let a = this; jl_Object.call(a);
    a.$binarySearchTable = null;
    a.$fastTable = null;
}
function otciu_UnicodeHelper$Range() {
    let a = this; jl_Object.call(a);
    a.$start5 = 0;
    a.$end4 = 0;
    a.$data0 = null;
}
let otciu_UnicodeHelper$Range__init_0 = ($this, $start, $end, $data) => {
    $this.$start5 = $start;
    $this.$end4 = $end;
    $this.$data0 = $data;
},
otciu_UnicodeHelper$Range__init_ = (var_0, var_1, var_2) => {
    let var_3 = new otciu_UnicodeHelper$Range();
    otciu_UnicodeHelper$Range__init_0(var_3, var_0, var_1, var_2);
    return var_3;
};
function otci_CharFlow() {
    let a = this; jl_Object.call(a);
    a.$characters = null;
    a.$pointer = 0;
}
let otci_CharFlow__init_0 = ($this, $characters) => {
    $this.$characters = $characters;
},
otci_CharFlow__init_ = var_0 => {
    let var_1 = new otci_CharFlow();
    otci_CharFlow__init_0(var_1, var_0);
    return var_1;
},
otci_Base46 = $rt_classWithoutFields(),
otci_Base46_decodeUnsigned = $seq => {
    let $number, $pos, var$4, $hasMore, $digit;
    $number = 0;
    $pos = 1;
    while (true) {
        var$4 = $seq.$characters.data;
        $hasMore = $seq.$pointer;
        $seq.$pointer = $hasMore + 1 | 0;
        $digit = var$4[$hasMore];
        $digit = $digit < 34 ? $digit - 32 | 0 : $digit >= 92 ? ($digit - 32 | 0) - 2 | 0 : ($digit - 32 | 0) - 1 | 0;
        $hasMore = ($digit % 2 | 0) != 1 ? 0 : 1;
        $number = $number + $rt_imul($pos, $digit / 2 | 0) | 0;
        $pos = $pos * 46 | 0;
        if (!$hasMore)
            break;
    }
    return $number;
},
otci_Base46_decode = $seq => {
    let $number, $result;
    $number = otci_Base46_decodeUnsigned($seq);
    $result = $number / 2 | 0;
    if ($number % 2 | 0)
        $result =  -$result | 0;
    return $result;
};
function ju_AbstractList$1() {
    let a = this; jl_Object.call(a);
    a.$index1 = 0;
    a.$modCount2 = 0;
    a.$size2 = 0;
    a.$removeIndex = 0;
    a.$this$0 = null;
}
let ju_AbstractList$1_hasNext = $this => {
    return $this.$index1 >= $this.$size2 ? 0 : 1;
},
ju_AbstractList$1_next = $this => {
    let var$1, var$2;
    ju_AbstractList$1_checkConcurrentModification($this);
    var$1 = $this.$index1;
    $this.$removeIndex = var$1;
    var$2 = $this.$this$0;
    $this.$index1 = var$1 + 1 | 0;
    return var$2.$get0(var$1);
},
ju_AbstractList$1_checkConcurrentModification = $this => {
    let var$1;
    if ($this.$modCount2 >= $this.$this$0.$modCount)
        return;
    var$1 = new ju_ConcurrentModificationException;
    jl_Throwable__init_(var$1);
    $rt_throw(var$1);
},
jl_ArrayIndexOutOfBoundsException = $rt_classWithoutFields(jl_IndexOutOfBoundsException),
jn_ReadOnlyBufferException = $rt_classWithoutFields(jl_UnsupportedOperationException),
jn_BufferOverflowException = $rt_classWithoutFields(jl_RuntimeException),
jnc_BufferUnderflowException = $rt_classWithoutFields(jl_RuntimeException),
jnc_BufferOverflowException = $rt_classWithoutFields(jl_RuntimeException);
function jnc_MalformedInputException() {
    jnc_CharacterCodingException.call(this);
    this.$length4 = 0;
}
let jnc_MalformedInputException_getMessage = $this => {
    let var$1, var$2;
    var$1 = $this.$length4;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_StringBuilder_append0(jl_StringBuilder_append(var$2, $rt_s(421)), var$1);
    return jl_AbstractStringBuilder_toString(var$2);
};
function jnc_UnmappableCharacterException() {
    jnc_CharacterCodingException.call(this);
    this.$length3 = 0;
}
let jnc_UnmappableCharacterException_getMessage = $this => {
    let var$1, var$2;
    var$1 = $this.$length3;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_StringBuilder_append0(jl_StringBuilder_append(var$2, $rt_s(422)), var$1);
    return jl_AbstractStringBuilder_toString(var$2);
},
juf_UnaryOperator = $rt_classWithoutFields(0),
igbc_Compiler$compile$lambda$_2_0 = $rt_classWithoutFields(),
igbc_Compiler$compile$lambda$_2_0_apply = (var$0, var$1) => {
    let var$2, var$3, var$4, var$5, var$6, var$7, var$8, var$9;
    var$1 = var$1;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    var$3 = 0;
    var$4 = 0;
    var$5 = 0;
    var$6 = (jl_String_toCharArray(var$1)).data;
    var$7 = var$6.length;
    var$8 = 0;
    a: {
        while (var$8 < var$7) {
            var$9 = var$6[var$8];
            if (var$9 == 34) {
                if (var$5 && var$4)
                    jl_AbstractStringBuilder_append(var$2, var$9);
                else {
                    var$4 = var$4 ? 0 : 1;
                    var$5 = 0;
                    jl_AbstractStringBuilder_append(var$2, var$9);
                }
            } else if (var$9 == 92) {
                var$5 = var$5 ? 0 : 1;
                jl_AbstractStringBuilder_append(var$2, var$9);
            } else if (var$9 != 47)
                jl_AbstractStringBuilder_append(var$2, var$9);
            else if (!var$4 && !var$5) {
                if (var$3) {
                    var$1 = jl_StringBuilder__init_(jl_StringBuilder_substring(var$2, 0, var$2.$length0 - 1 | 0));
                    break a;
                }
                var$3 = 1;
                jl_AbstractStringBuilder_append(var$2, var$9);
            } else
                jl_AbstractStringBuilder_append(var$2, var$9);
            var$8 = var$8 + 1 | 0;
        }
        var$1 = var$2;
    }
    return jl_AbstractStringBuilder_toString(var$1);
},
igbc_Compiler$compile$lambda$_2_1 = $rt_classWithoutFields(),
igbc_Compiler$compile$lambda$_2_1_apply = (var$0, var$1) => {
    let var$2, var$3, var$4, var$5, var$6, var$7, var$8, var$9, var$10, var$11;
    var$1 = var$1;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    var$3 = 0;
    var$4 = 0;
    var$5 = 0;
    var$6 = 0;
    var$7 = (jl_String_toCharArray(var$1)).data;
    var$8 = var$7.length;
    var$9 = 0;
    while (var$9 < var$8) {
        a: {
            var$10 = var$7[var$9];
            var$11 = igbcu_CommentUtils_IS_IN_MULTILINE_COMMENT;
            if (!var$11) {
                if (!var$5 && var$4 && var$10 == 42) {
                    igbcu_CommentUtils_IS_IN_MULTILINE_COMMENT = 1;
                    var$4 = 0;
                    var$2 = jl_StringBuilder__init_(jl_StringBuilder_substring(var$2, 0, var$2.$length0 - 1 | 0));
                    break a;
                }
                if (!var$6 && var$10 == 34)
                    var$5 = var$5 ? 0 : 1;
            } else if (var$3 && var$10 == 47) {
                igbcu_CommentUtils_IS_IN_MULTILINE_COMMENT = 0;
                var$3 = 0;
                break a;
            }
            var$3 = var$10 != 42 ? 0 : 1;
            var$4 = var$10 != 47 ? 0 : 1;
            var$6 = var$10 != 92 ? 0 : 1;
            if (!var$11)
                jl_AbstractStringBuilder_append(var$2, var$10);
        }
        var$9 = var$9 + 1 | 0;
    }
    return jl_AbstractStringBuilder_toString(var$2);
},
juf_Predicate = $rt_classWithoutFields(0),
igbc_Compiler$compile$lambda$_2_2 = $rt_classWithoutFields(),
igbc_Compiler$compile$lambda$_2_3 = $rt_classWithoutFields(),
igbc_Compiler$compile$lambda$_2_3_apply = (var$0, var$1) => {
    return jl_String_replace(var$1, $rt_s(423), $rt_s(2));
},
igbcu_CommentUtils = $rt_classWithoutFields(),
igbcu_CommentUtils_IS_IN_MULTILINE_COMMENT = 0,
igbcu_CommentUtils__clinit_ = () => {
    igbcu_CommentUtils_IS_IN_MULTILINE_COMMENT = 0;
};
function igbcu_BracketUtil() {
    let a = this; jl_Object.call(a);
    a.$code0 = null;
    a.$beforeBracket = null;
    a.$contains2 = null;
    a.$owner2 = null;
    a.$compilation = null;
}
let igbcu_BracketUtil_parseBrackets = $code => {
    let $out, $indentationCount, $currentBlock, var$5, var$6, var$7, var$8, var$9, var$10, $s;
    $out = igbcu_BracketUtil__init_($code, ju_ArrayList__init_(), null, $rt_s(2));
    $code = jl_String_replace(jl_String_replace(jl_String_replace(jl_String_replace($code, $rt_s(4), $rt_s(32)), $rt_s(424), $rt_s(4)), $rt_s(425), $rt_s(426)), $rt_s(427), $rt_s(428));
    $indentationCount = 0;
    $currentBlock = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($currentBlock);
    var$5 = (jl_String_split($code, $rt_s(4))).data;
    var$6 = var$5.length;
    var$7 = 0;
    var$8 = $out;
    while (true) {
        if (var$7 >= var$6) {
            if (!$indentationCount)
                return $out;
            $code = new igbce_WrongBracketUsageException;
            jl_Throwable__init_0($code, $rt_s(429));
            $rt_throw($code);
        }
        var$9 = jl_String_replaceFirst(var$5[var$7], $rt_s(430), $rt_s(2));
        if (jl_String_contains(var$9, $rt_s(425))) {
            $indentationCount = $indentationCount + 1 | 0;
            var$8.$code0 = jl_AbstractStringBuilder_toString($currentBlock);
            $currentBlock = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($currentBlock);
            var$10 = igbcu_BracketUtil__init_(jl_AbstractStringBuilder_toString($currentBlock), ju_ArrayList__init_(), var$8, jl_String_replace(var$9, $rt_s(425), $rt_s(2)));
        } else if (!jl_String_contains(var$9, $rt_s(427))) {
            if (!$indentationCount)
                var$10 = var$8;
            else {
                jl_AbstractStringBuilder_append0($currentBlock, var$9);
                jl_AbstractStringBuilder_append0($currentBlock, $rt_s(4));
                var$10 = var$8;
            }
        } else {
            $indentationCount = $indentationCount + (-1) | 0;
            if ($indentationCount < 0)
                break;
            var$9 = jl_AbstractStringBuilder_toString($currentBlock);
            var$8.$code0 = var$9;
            $s = var$8.$beforeBracket;
            $code = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($code);
            jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($code, $s), $rt_s(426)), var$9), 125);
            var$9 = jl_AbstractStringBuilder_toString($code);
            $currentBlock = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($currentBlock);
            if ($indentationCount > 0) {
                $currentBlock = var$8.$owner2;
                $code = $currentBlock.$code0;
                $s = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_($s);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($s, $code), var$9), 10);
                $currentBlock.$code0 = jl_AbstractStringBuilder_toString($s);
                $currentBlock = jl_StringBuilder__init_(var$8.$owner2.$code0);
            }
            var$10 = var$8.$owner2;
        }
        var$7 = var$7 + 1 | 0;
        var$8 = var$10;
    }
    $code = new igbce_WrongIndentationException;
    jl_Throwable__init_0($code, $rt_s(431));
    $rt_throw($code);
},
igbcu_BracketUtil__init_0 = ($this, $code, $contains, $owner, $beforeBracket) => {
    $this.$compilation = ju_ArrayList__init_();
    $this.$code0 = $code;
    $this.$contains2 = $contains;
    $this.$owner2 = $owner;
    $this.$beforeBracket = $beforeBracket;
    if ($owner !== null)
        ju_ArrayList_add($owner.$contains2, $this);
},
igbcu_BracketUtil__init_ = (var_0, var_1, var_2, var_3) => {
    let var_4 = new igbcu_BracketUtil();
    igbcu_BracketUtil__init_0(var_4, var_0, var_1, var_2, var_3);
    return var_4;
},
igbcu_SymbolParser = $rt_classWithoutFields(),
igbcu_SymbolParser_parseSymbols = $code => {
    let $hasSeenOtherThanUses, $declarationUtils, var$4, $hasSeenExtend, $hasSeenImplement, var$7, var$8, var$9, var$10, $usesSymbol, var$12, var$13, var$14, $decl, var$16;
    $code = jl_String_replace(jl_String_replace(jl_String_replace(jl_String_replace($code, $rt_s(4), $rt_s(32)), $rt_s(424), $rt_s(4)), $rt_s(425), $rt_s(426)), $rt_s(427), $rt_s(428));
    $hasSeenOtherThanUses = 0;
    $declarationUtils = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($declarationUtils);
    var$4 = (jl_String_split($code, $rt_s(4))).data;
    $hasSeenExtend = var$4.length;
    $hasSeenImplement = 0;
    while ($hasSeenImplement < $hasSeenExtend) {
        $code = var$4[$hasSeenImplement];
        if (jl_String_contains($code, $rt_s(425)))
            $hasSeenOtherThanUses = $hasSeenOtherThanUses + 1 | 0;
        if (jl_String_contains($code, $rt_s(427)))
            $hasSeenOtherThanUses = $hasSeenOtherThanUses + (-1) | 0;
        if (!$hasSeenOtherThanUses && !jl_String_contains($code, $rt_s(427))) {
            jl_AbstractStringBuilder_append0($declarationUtils, $code);
            jl_AbstractStringBuilder_append0($declarationUtils, $rt_s(4));
        }
        $hasSeenImplement = $hasSeenImplement + 1 | 0;
    }
    $code = jusi_SimpleStreamImpl_filter(ju_Arrays_stream(jl_String_split(jl_AbstractStringBuilder_toString($declarationUtils), $rt_s(4))), new igbcu_SymbolParser$parseSymbols$lambda$_1_0);
    var$7 = new jus_Collectors$joining$lambda$_8_0;
    var$7.$_06 = $rt_s(4);
    var$4 = $rt_createArray(jus_Collector$Characteristics, 0);
    var$8 = new ju_GenericEnumSet;
    jl_Object__init_(var$8);
    var$8.$cls = $rt_cls(jus_Collector$Characteristics);
    $declarationUtils = $rt_cls(jus_Collector$Characteristics).$platformClass;
    $declarationUtils.$clinit();
    var$9 = otp_Platform_getEnumConstants($declarationUtils);
    if (var$9 === null) {
        $code = new jl_ClassCastException;
        jl_Throwable__init_($code);
        $rt_throw($code);
    }
    $hasSeenOtherThanUses = var$9.data.length;
    $hasSeenOtherThanUses = !$hasSeenOtherThanUses ? 0 : (($hasSeenOtherThanUses - 1 | 0) / 32 | 0) + 1 | 0;
    a: {
        var$8.$bits0 = $rt_createIntArray($hasSeenOtherThanUses);
        ju_Objects_requireNonNull(var$4);
        var$10 = new ju_Arrays$ArrayAsList;
        var$10.$array2 = var$4;
        if (var$10 instanceof ju_GenericEnumSet) {
            $declarationUtils = var$10;
            if (var$8.$cls === $declarationUtils.$cls) {
                $hasSeenOtherThanUses = 0;
                while (true) {
                    var$4 = var$8.$bits0.data;
                    if ($hasSeenOtherThanUses >= var$4.length)
                        break;
                    $hasSeenExtend = var$4[$hasSeenOtherThanUses];
                    var$9 = $declarationUtils.$bits0.data;
                    if (($hasSeenExtend | var$9[$hasSeenOtherThanUses]) != var$4[$hasSeenOtherThanUses])
                        var$4[$hasSeenOtherThanUses] = var$4[$hasSeenOtherThanUses] | var$9[$hasSeenOtherThanUses];
                    $hasSeenOtherThanUses = $hasSeenOtherThanUses + 1 | 0;
                }
                break a;
            }
        }
        ju_AbstractCollection_addAll(var$8, var$10);
    }
    $usesSymbol = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($usesSymbol);
    while (jusi_WrappingStreamImpl_next($code, jusi_SimpleStreamImpl$collect$lambda$_26_0__init_0(var$7, $usesSymbol))) {
    }
    $code = jl_String_replaceAll(jl_StringBuilder_toString(jl_StringBuilder_append5(jl_StringBuilder_insert($usesSymbol, 0, $rt_s(2)), $rt_s(2))), $rt_s(423), $rt_s(2));
    $declarationUtils = ju_ArrayList__init_();
    $hasSeenOtherThanUses = 0;
    $hasSeenExtend = 0;
    $hasSeenImplement = 0;
    $usesSymbol = igbcs_UsesSymbol__init_();
    var$4 = (jl_String_split($code, $rt_s(4))).data;
    var$12 = var$4.length;
    var$13 = 0;
    while (var$13 < var$12) {
        var$7 = jl_String_replaceFirst(var$4[var$13], $rt_s(430), $rt_s(2));
        if (jl_String_startsWith(var$7, $rt_s(432))) {
            if ($hasSeenOtherThanUses)
                $rt_throw(igbce_CompilerException__init_($rt_s(433)));
            igbcs_UsesSymbol_add($usesSymbol, var$7);
            if (ju_AbstractCollection_isEmpty($declarationUtils))
                ju_ArrayList_add($declarationUtils, $usesSymbol);
        } else {
            if (!$hasSeenOtherThanUses) {
                var$14 = jl_System_out();
                $hasSeenOtherThanUses = ju_HashMap_size($usesSymbol.$mappings);
                $code = jl_StringBuilder__init_0();
                jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append($code, $rt_s(434)), $hasSeenOtherThanUses), $rt_s(435));
                var$14.$println0(jl_StringBuilder_toString($code));
            }
            $hasSeenOtherThanUses = 1;
        }
        if (jl_String_startsWith(var$7, $rt_s(436))) {
            if ($hasSeenImplement)
                $rt_throw(igbce_CompilerException__init_($rt_s(437)));
            $hasSeenImplement = 1;
            $code = igbcs_ImplementingSymbol__init_(var$7);
            ju_ArrayList_add($declarationUtils, $code);
            $decl = jl_System_out();
            var$16 = $code.$size3;
            $code = jl_StringBuilder__init_0();
            jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append($code, $rt_s(434)), var$16), $rt_s(438));
            $decl.$println0(jl_StringBuilder_toString($code));
        } else if (jl_String_startsWith(var$7, $rt_s(439))) {
            if ($hasSeenExtend)
                $rt_throw(igbce_CompilerException__init_($rt_s(440)));
            $hasSeenExtend = 1;
            ju_ArrayList_add($declarationUtils, igbcs_ExtendingSymbol__init_0(var$7));
            (jl_System_out()).$println0($rt_s(441));
        } else if ($hasSeenOtherThanUses)
            ju_ArrayList_add($declarationUtils, igbcs_FieldSymbol__init_(var$7));
        var$13 = var$13 + 1 | 0;
    }
    return $declarationUtils;
},
igbcu_SymbolParser_countArrays = $input => {
    let $count, $index;
    $count = 0;
    $index = jl_String_indexOf1($input, $rt_s(72), 0);
    while ($index != (-1)) {
        $count = $count + 1 | 0;
        $index = jl_String_indexOf1($input, $rt_s(72), $index + 2 | 0);
    }
    return $count;
};
function igbcs_Symbol() {
    jl_Object.call(this);
    this.$declaration = null;
}
let igbcs_Symbol__init_ = ($this, $declaration) => {
    $this.$declaration = $declaration;
},
igbcs_Symbol_map = ($uses, $toMap) => {
    let $mapped, var$4;
    $mapped = ju_HashMap_get($uses.$mappings, $toMap);
    if ($mapped === null) {
        $uses = $uses.$validClassesFull;
        var$4 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$4);
        jl_StringBuilder_append(jl_StringBuilder_append(var$4, $rt_s(442)), $toMap);
        if (!ju_AbstractCollection_contains($uses, jl_AbstractStringBuilder_toString(var$4))) {
            $uses = new igbce_SymbolNotFoundException;
            $mapped = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($mapped);
            jl_StringBuilder_append(jl_StringBuilder_append($mapped, $toMap), $rt_s(443));
            jl_Throwable__init_0($uses, jl_AbstractStringBuilder_toString($mapped));
            $rt_throw($uses);
        }
    }
    if ($mapped === null) {
        $uses = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($uses);
        jl_StringBuilder_append(jl_StringBuilder_append($uses, $rt_s(442)), $toMap);
        $mapped = jl_AbstractStringBuilder_toString($uses);
    }
    return $mapped;
};
function igbcs_UsesSymbol() {
    let a = this; igbcs_Symbol.call(a);
    a.$mappings = null;
    a.$validClassesFull = null;
}
let igbcs_UsesSymbol__init_0 = $this => {
    igbcs_Symbol__init_($this, $rt_s(2));
    $this.$mappings = ju_HashMap__init_();
    $this.$validClassesFull = ju_ArrayList__init_();
},
igbcs_UsesSymbol__init_ = () => {
    let var_0 = new igbcs_UsesSymbol();
    igbcs_UsesSymbol__init_0(var_0);
    return var_0;
},
igbcs_UsesSymbol_applyChanges = ($this, $apiClass, $thizLol) => {
    return;
},
igbcs_UsesSymbol_add = ($this, $str) => {
    $str = jl_String_replace(jl_String_replace($str, $rt_s(432), $rt_s(2)), $rt_s(32), $rt_s(2));
    ju_HashMap_put($this.$mappings, jl_String_substring0($str, jl_String_lastIndexOf($str, 46) + 1 | 0), jl_String_replace0($str, 46, 47));
},
igbce_CompilerException = $rt_classWithoutFields(jl_RuntimeException),
igbce_CompilerException__init_0 = ($this, $message) => {
    jl_Throwable__init_0($this, $message);
},
igbce_CompilerException__init_ = var_0 => {
    let var_1 = new igbce_CompilerException();
    igbce_CompilerException__init_0(var_1, var_0);
    return var_1;
},
igbcm_MethodCompiler = $rt_classWithoutFields(),
igbcm_MethodCompiler_parseMethodTypes = ($code, $uses, $clazz) => {
    let $symbols, $out, $mainArgument, $method, $staticis, $finalis, $visibilityType, $returnType, $arrayCount, $descGen, $name;
    $symbols = jl_String_trim($code);
    if (jl_String_equals($symbols, $rt_s(24))) {
        $out = igbca_APIMethod__init_($rt_s(24), $clazz);
        $out.$outputType = igbcat_Argument__init_(ooa_Type_VOID_TYPE);
        $mainArgument = igbcat_Argument__init_(ooa_Type_getType($rt_s(444)));
        $mainArgument.$name2 = $rt_s(445);
        ju_ArrayList_add($out.$arguments, $mainArgument);
        $out.$type1 = igbcat_AccessType__init_(igbcat_VisibilityType_PUBLIC, 0);
        $out.$isStatic0 = 1;
        return $out;
    }
    $code = jl_String_replace($symbols, $rt_s(446), $rt_s(32));
    $symbols = ju_List_of(jl_String_split(jl_String_substring($code, 0, jl_String_indexOf0($code, 40)), $rt_s(32)));
    $method = igbca_APIMethod__init_(ju_TemplateCollections$ImmutableArrayList_get($symbols, ju_TemplateCollections$ImmutableArrayList_size($symbols) - 1 | 0), $clazz);
    $staticis = ju_AbstractCollection_contains($symbols, $rt_s(447));
    $finalis = ju_AbstractCollection_contains($symbols, $rt_s(448));
    $visibilityType = igbcat_VisibilityType_PUBLIC;
    if (ju_AbstractCollection_contains($symbols, $rt_s(449)))
        $visibilityType = igbcat_VisibilityType_PRIVATE;
    else if (ju_AbstractCollection_contains($symbols, $rt_s(450)))
        $visibilityType = igbcat_VisibilityType_PACKAGE_PRIVATE;
    else if (ju_AbstractCollection_contains($symbols, $rt_s(451)))
        $visibilityType = igbcat_VisibilityType_PROTECTED;
    a: {
        $method.$type1 = igbcat_AccessType__init_($visibilityType, $finalis);
        $method.$isStatic0 = $staticis;
        $returnType = ju_TemplateCollections$ImmutableArrayList_get($symbols, ju_TemplateCollections$ImmutableArrayList_size($symbols) - 2 | 0);
        $arrayCount = igbcu_SymbolParser_countArrays($returnType);
        $clazz = jl_String_replaceAll($returnType, $rt_s(103), $rt_s(2));
        $staticis = (-1);
        switch (jl_String_hashCode($clazz)) {
            case -1325958191:
                if (!jl_String_equals($clazz, $rt_s(100)))
                    break a;
                $staticis = 6;
                break a;
            case 104431:
                if (!jl_String_equals($clazz, $rt_s(97)))
                    break a;
                $staticis = 0;
                break a;
            case 3039496:
                if (!jl_String_equals($clazz, $rt_s(95)))
                    break a;
                $staticis = 4;
                break a;
            case 3052374:
                if (!jl_String_equals($clazz, $rt_s(94)))
                    break a;
                $staticis = 3;
                break a;
            case 3327612:
                if (!jl_String_equals($clazz, $rt_s(99)))
                    break a;
                $staticis = 2;
                break a;
            case 3625364:
                if (!jl_String_equals($clazz, $rt_s(101)))
                    break a;
                $staticis = 8;
                break a;
            case 64711720:
                if (!jl_String_equals($clazz, $rt_s(93)))
                    break a;
                $staticis = 1;
                break a;
            case 97526364:
                if (!jl_String_equals($clazz, $rt_s(98)))
                    break a;
                $staticis = 7;
                break a;
            case 109413500:
                if (!jl_String_equals($clazz, $rt_s(96)))
                    break a;
                $staticis = 5;
                break a;
            default:
        }
    }
    b: {
        switch ($staticis) {
            case 0:
                break;
            case 1:
                $descGen = $rt_s(110);
                break b;
            case 2:
                $descGen = $rt_s(106);
                break b;
            case 3:
                $descGen = $rt_s(33);
                break b;
            case 4:
                $descGen = $rt_s(109);
                break b;
            case 5:
                $descGen = $rt_s(108);
                break b;
            case 6:
                $descGen = $rt_s(107);
                break b;
            case 7:
                $descGen = $rt_s(37);
                break b;
            case 8:
                $descGen = $rt_s(111);
                break b;
            default:
                $clazz = igbcs_Symbol_map($uses, $clazz);
                $symbols = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_($symbols);
                jl_AbstractStringBuilder_append($symbols, 76);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append($symbols, $clazz), 59);
                $descGen = jl_AbstractStringBuilder_toString($symbols);
                break b;
        }
        $descGen = $rt_s(113);
    }
    $clazz = jl_String_repeat($rt_s(105), $arrayCount);
    $symbols = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($symbols);
    jl_StringBuilder_append(jl_StringBuilder_append($symbols, $clazz), $descGen);
    $symbols = jl_AbstractStringBuilder_toString($symbols);
    $method.$outputType = igbcat_Argument__init_(ooa_Type_getType($symbols));
    $clazz = $method.$arguments;
    $code = jl_String_substring0($code, jl_String_indexOf0($code, 40));
    $symbols = ju_ArrayList__init_();
    $code = jur_Pattern_matcher(jur_Pattern_compile($rt_s(452)), $code);
    while (jur_Matcher_find($code)) {
        $name = jur_Matcher_group($code, 1);
        $descGen = jur_Matcher_group($code, 2);
        ju_ArrayList_add($symbols, igbcat_Argument__init_1(igbcs_Symbol_map($uses, $name), $descGen));
    }
    ju_AbstractCollection_addAll($clazz, $symbols);
    return $method;
},
igbcm_MethodCompiler_compile = ($code, $imports, $clazz, $method) => {
    let var$5, var$6, var$7;
    a: {
        var$5 = jl_System_out();
        var$6 = $method.$name;
        var$7 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$7);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$7, $rt_s(453)), var$6), 34);
        var$5.$println0(jl_AbstractStringBuilder_toString(var$7));
        var$5 = new igbcm_MethodCodeCompiler;
        var$5.$clazz0 = $clazz;
        var$5.$method0 = $method;
        var$5.$code1 = $code;
        var$5.$symbol0 = $imports;
        if (jl_String_isEmpty(jl_String_replace(jl_String_replace($code.$code0, $rt_s(32), $rt_s(2)), $rt_s(4), $rt_s(2)))) {
            if (jl_String_equals(var$5.$method0.$outputType.$type0, $rt_s(101))) {
                ju_ArrayList_add(var$5.$method0.$code, new igbcaci_ReturnCode);
                break a;
            }
            igbce_StandardCodeExceptions_noreturn(var$5.$method0);
        }
        igbcm_MethodCodeCompiler_recursiveCompilation(var$5, var$5.$code1);
        ju_AbstractCollection_addAll(var$5.$method0.$code, var$5.$code1.$compilation);
        if (jl_String_equals(var$5.$method0.$outputType.$type0, $rt_s(101)))
            ju_ArrayList_add(var$5.$method0.$code, new igbcaci_ReturnCode);
        else {
            $code = ju_Collection_stream(var$5.$method0.$code);
            $imports = new igbcm_MethodCodeCompiler$compile$lambda$_1_0;
            $clazz = new jusi_AnyMatchConsumer;
            $clazz.$predicate = $imports;
            while (!$clazz.$matched && jusi_StreamOverSpliterator_next($code, $clazz)) {
            }
            if ($clazz.$matched ? 0 : 1)
                igbce_StandardCodeExceptions_noreturn(var$5.$method0);
        }
    }
},
juz_ZipException = $rt_classWithoutFields(ji_IOException);
function jnci_BufferedDecoder() {
    let a = this; jnc_CharsetDecoder.call(a);
    a.$inArray = null;
    a.$outArray0 = null;
}
let jnci_BufferedDecoder__init_ = ($this, $cs, $averageCharsPerByte, $maxCharsPerByte) => {
    let var$4;
    $this.$replacement = $rt_s(454);
    var$4 = jnc_CodingErrorAction_REPORT;
    $this.$malformedAction = var$4;
    $this.$unmappableAction0 = var$4;
    if ($averageCharsPerByte <= 0.0) {
        $cs = new jl_IllegalArgumentException;
        var$4 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$4);
        jl_StringBuilder_append1(jl_StringBuilder_append(var$4, $rt_s(455)), $averageCharsPerByte);
        jl_Throwable__init_0($cs, jl_AbstractStringBuilder_toString(var$4));
        $rt_throw($cs);
    }
    if ($maxCharsPerByte > 0.0) {
        $this.$charset1 = $cs;
        $this.$averageCharsPerByte = $averageCharsPerByte;
        $this.$maxCharsPerByte = $maxCharsPerByte;
        $this.$inArray = $rt_createByteArray(512);
        $this.$outArray0 = $rt_createCharArray(512);
        return;
    }
    $cs = new jl_IllegalArgumentException;
    var$4 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$4);
    jl_StringBuilder_append1(jl_StringBuilder_append(var$4, $rt_s(456)), $maxCharsPerByte);
    jl_Throwable__init_0($cs, jl_AbstractStringBuilder_toString(var$4));
    $rt_throw($cs);
},
jnci_BufferedDecoder_decodeLoop = ($this, $in, $out) => {
    let $inArray, $inPos, $inSize, $outArray, $i, var$8, var$9, var$10, $outPos, var$12, $outSize, var$14, $result, $controller;
    $inArray = $this.$inArray;
    $inPos = 0;
    $inSize = 0;
    $outArray = $this.$outArray0;
    a: {
        b: {
            while (true) {
                if (($inPos + 32 | 0) > $inSize && jn_Buffer_hasRemaining($in)) {
                    $i = $inPos;
                    while ($i < $inSize) {
                        var$8 = $inArray.data;
                        var$8[$i - $inPos | 0] = var$8[$i];
                        $i = $i + 1 | 0;
                    }
                    var$9 = $inArray.data;
                    var$10 = $inSize - $inPos | 0;
                    $outPos = jn_Buffer_remaining($in) + var$10 | 0;
                    $i = var$9.length;
                    $inSize = jl_Math_min($outPos, $i);
                    var$12 = $inSize - var$10 | 0;
                    if (var$10 < 0)
                        break b;
                    if (var$10 > $i)
                        break b;
                    $outPos = var$10 + var$12 | 0;
                    if ($outPos > $i) {
                        $in = new jl_IndexOutOfBoundsException;
                        $out = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_($out);
                        jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append($out, $rt_s(457)), $outPos), $rt_s(135)), $i);
                        jl_Throwable__init_0($in, jl_AbstractStringBuilder_toString($out));
                        $rt_throw($in);
                    }
                    if (jn_Buffer_remaining($in) < var$12) {
                        $in = new jn_BufferUnderflowException;
                        jl_Throwable__init_($in);
                        $rt_throw($in);
                    }
                    if (var$12 < 0) {
                        $in = new jl_IndexOutOfBoundsException;
                        $out = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_($out);
                        jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append($out, $rt_s(136)), var$12), $rt_s(137));
                        jl_Throwable__init_0($in, jl_AbstractStringBuilder_toString($out));
                        $rt_throw($in);
                    }
                    $outSize = $in.$position0;
                    $i = $outSize + $in.$start1 | 0;
                    $inPos = 0;
                    while ($inPos < var$12) {
                        var$14 = var$10 + 1 | 0;
                        var$8 = $in.$array1.data;
                        $outPos = $i + 1 | 0;
                        var$9[var$10] = var$8[$i];
                        $inPos = $inPos + 1 | 0;
                        var$10 = var$14;
                        $i = $outPos;
                    }
                    $in.$position0 = $outSize + var$12 | 0;
                    $inPos = 0;
                }
                if (!jn_Buffer_hasRemaining($out)) {
                    $result = !jn_Buffer_hasRemaining($in) && $inPos >= $inSize ? jnc_CoderResult_UNDERFLOW : jnc_CoderResult_OVERFLOW;
                    break a;
                }
                var$8 = $outArray.data;
                $outSize = jn_Buffer_remaining($out);
                var$14 = var$8.length;
                $outSize = jl_Math_min($outSize, var$14);
                $controller = new jnci_BufferedDecoder$Controller;
                $controller.$in0 = $in;
                $controller.$out1 = $out;
                $result = $this.$arrayDecode($inArray, $inPos, $inSize, $outArray, 0, $outSize, $controller);
                $inPos = $controller.$inPosition;
                if ($result === null && 0 == $controller.$outPosition)
                    $result = jnc_CoderResult_UNDERFLOW;
                var$10 = $controller.$outPosition;
                $i = 0;
                if ($out.$readOnly0) {
                    $in = new jn_ReadOnlyBufferException;
                    jl_Throwable__init_($in);
                    $rt_throw($in);
                }
                if (jn_Buffer_remaining($out) < var$10)
                    break;
                if ($i > var$14) {
                    $in = new jl_IndexOutOfBoundsException;
                    $out = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_($out);
                    jl_AbstractStringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append($out, $rt_s(138)), $i), $rt_s(133)), var$14), 41);
                    jl_Throwable__init_0($in, jl_AbstractStringBuilder_toString($out));
                    $rt_throw($in);
                }
                $outPos = $i + var$10 | 0;
                if ($outPos > var$14) {
                    $in = new jl_IndexOutOfBoundsException;
                    $out = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_($out);
                    jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append($out, $rt_s(142)), $outPos), $rt_s(135)), var$14);
                    jl_Throwable__init_0($in, jl_AbstractStringBuilder_toString($out));
                    $rt_throw($in);
                }
                if (var$10 < 0) {
                    $in = new jl_IndexOutOfBoundsException;
                    $out = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_($out);
                    jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append($out, $rt_s(136)), var$10), $rt_s(137));
                    jl_Throwable__init_0($in, jl_AbstractStringBuilder_toString($out));
                    $rt_throw($in);
                }
                var$14 = $out.$position0;
                var$12 = 0;
                while (var$12 < var$10) {
                    $outPos = var$14 + 1 | 0;
                    $outSize = $i + 1 | 0;
                    jn_CharBufferOverArray_putChar($out, var$14, var$8[$i]);
                    var$12 = var$12 + 1 | 0;
                    var$14 = $outPos;
                    $i = $outSize;
                }
                $out.$position0 = $out.$position0 + var$10 | 0;
                if ($result !== null)
                    break a;
            }
            $in = new jn_BufferOverflowException;
            jl_Throwable__init_($in);
            $rt_throw($in);
        }
        $in = new jl_IndexOutOfBoundsException;
        $out = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($out);
        jl_AbstractStringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append($out, $rt_s(138)), var$10), $rt_s(133)), $i), 41);
        jl_Throwable__init_0($in, jl_AbstractStringBuilder_toString($out));
        $rt_throw($in);
    }
    jn_Buffer_position($in, $in.$position0 - ($inSize - $inPos | 0) | 0);
    return $result;
},
jnci_UTF8Decoder = $rt_classWithoutFields(jnci_BufferedDecoder),
jnci_UTF8Decoder_arrayDecode = ($this, $inArray, $inPos, $inSize, $outArray, $outPos, $outSize, $controller) => {
    let $result, var$9, $b2, $b, $b2_0, $b3, $c, $b4, $code;
    $result = null;
    a: {
        b: {
            c: {
                while ($inPos < $inSize) {
                    if ($outPos >= $outSize)
                        break a;
                    var$9 = $inArray.data;
                    $b2 = $inPos + 1 | 0;
                    $b = var$9[$inPos] & 255;
                    if (!($b & 128)) {
                        var$9 = $outArray.data;
                        $b2_0 = $outPos + 1 | 0;
                        var$9[$outPos] = $b & 65535;
                    } else if (($b & 224) == 192) {
                        if ($b2 >= $inSize) {
                            $inPos = $b2 + (-1) | 0;
                            if (jnci_BufferedDecoder$Controller_hasMoreInput($controller, 2))
                                break a;
                            $result = jnc_CoderResult_UNDERFLOW;
                            break a;
                        }
                        $inPos = $b2 + 1 | 0;
                        $b2 = var$9[$b2];
                        if (!jnci_UTF8Decoder_checkMidByte($this, $b2)) {
                            $inPos = $inPos + (-2) | 0;
                            $result = jnc_CoderResult_malformedForLength(1);
                            break a;
                        }
                        var$9 = $outArray.data;
                        $b2_0 = $outPos + 1 | 0;
                        var$9[$outPos] = (($b & 31) << 6 | $b2 & 63) & 65535;
                        $b2 = $inPos;
                    } else if (($b & 240) == 224) {
                        if (($b2 + 2 | 0) > $inSize) {
                            $inPos = $b2 + (-1) | 0;
                            if (jnci_BufferedDecoder$Controller_hasMoreInput($controller, 3))
                                break a;
                            $result = jnc_CoderResult_UNDERFLOW;
                            break a;
                        }
                        $inPos = $b2 + 1 | 0;
                        $b2_0 = var$9[$b2];
                        $b2 = $inPos + 1 | 0;
                        $b3 = var$9[$inPos];
                        if (!jnci_UTF8Decoder_checkMidByte($this, $b2_0))
                            break b;
                        if (!jnci_UTF8Decoder_checkMidByte($this, $b3))
                            break b;
                        $c = (($b & 15) << 12 | ($b2_0 & 63) << 6 | $b3 & 63) & 65535;
                        if (jl_Character_isSurrogate($c)) {
                            $inPos = $b2 + (-3) | 0;
                            $result = jnc_CoderResult_malformedForLength(3);
                            break a;
                        }
                        var$9 = $outArray.data;
                        $b2_0 = $outPos + 1 | 0;
                        var$9[$outPos] = $c;
                    } else {
                        if (($b & 248) != 240) {
                            $inPos = $b2 + (-1) | 0;
                            $result = jnc_CoderResult_malformedForLength(1);
                            break a;
                        }
                        if (($b2 + 3 | 0) > $inSize) {
                            $inPos = $b2 + (-1) | 0;
                            if (jnci_BufferedDecoder$Controller_hasMoreInput($controller, 4))
                                break a;
                            $result = jnc_CoderResult_UNDERFLOW;
                            break a;
                        }
                        if (($outPos + 2 | 0) > $outSize) {
                            $inPos = $b2 + (-1) | 0;
                            if (jnci_BufferedDecoder$Controller_hasMoreOutput($controller, 2))
                                break a;
                            $result = jnc_CoderResult_OVERFLOW;
                            break a;
                        }
                        $inPos = $b2 + 1 | 0;
                        $b2_0 = var$9[$b2];
                        $b4 = $inPos + 1 | 0;
                        $b3 = var$9[$inPos];
                        $b2 = $b4 + 1 | 0;
                        $b4 = var$9[$b4];
                        if (!jnci_UTF8Decoder_checkMidByte($this, $b2_0))
                            break c;
                        if (!jnci_UTF8Decoder_checkMidByte($this, $b3))
                            break c;
                        if (!jnci_UTF8Decoder_checkMidByte($this, $b4))
                            break c;
                        var$9 = $outArray.data;
                        $code = ($b & 7) << 18 | ($b2_0 & 63) << 12 | ($b3 & 63) << 6 | $b4 & 63;
                        $inPos = $outPos + 1 | 0;
                        var$9[$outPos] = jl_Character_highSurrogate($code);
                        $b2_0 = $inPos + 1 | 0;
                        var$9[$inPos] = jl_Character_lowSurrogate($code);
                    }
                    $inPos = $b2;
                    $outPos = $b2_0;
                }
                break a;
            }
            $inPos = $b2 + (-3) | 0;
            $result = jnc_CoderResult_malformedForLength(1);
            break a;
        }
        $inPos = $b2 + (-3) | 0;
        $result = jnc_CoderResult_malformedForLength(1);
    }
    $controller.$inPosition = $inPos;
    $controller.$outPosition = $outPos;
    return $result;
},
jnci_UTF8Decoder_checkMidByte = ($this, $b) => {
    return ($b & 192) != 128 ? 0 : 1;
};
function ju_HashMap$HashEntry() {
    let a = this; ju_MapEntry.call(a);
    a.$origKeyHash = 0;
    a.$next4 = null;
}
function jur_AbstractCharClass$1() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$lHS = null;
    a.$this$034 = null;
}
let jur_AbstractCharClass$1_contains = ($this, $ch) => {
    let $index;
    $index = $ch - 55296 | 0;
    return $index >= 0 && $index < 2048 ? $this.$altSurrogates ^ ju_BitSet_get($this.$val$lHS, $index) : 0;
};
function jur_AbstractCharClass$2() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$lHS0 = null;
    a.$val$thisClass = null;
    a.$this$031 = null;
}
let jur_AbstractCharClass$2_contains = ($this, $ch) => {
    let $index, $containslHS;
    $index = $ch - 55296 | 0;
    $containslHS = $index >= 0 && $index < 2048 ? $this.$altSurrogates ^ ju_BitSet_get($this.$val$lHS0, $index) : 0;
    return $this.$val$thisClass.$contains1($ch) && !$containslHS ? 1 : 0;
};
function jur_CharClass$18() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$bs = null;
    a.$this$012 = null;
}
let jur_CharClass$18_contains = ($this, $ch) => {
    return $this.$alt ^ ju_BitSet_get($this.$val$bs, $ch);
},
jur_CharClass$18_toString = $this => {
    let $temp, $i, var$3;
    $temp = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($temp);
    $i = ju_BitSet_nextSetBit($this.$val$bs, 0);
    while ($i >= 0) {
        jl_AbstractStringBuilder_append3($temp, jl_Character_toChars($i));
        jl_AbstractStringBuilder_append($temp, 124);
        $i = ju_BitSet_nextSetBit($this.$val$bs, $i + 1 | 0);
    }
    var$3 = $temp.$length0;
    if (var$3 > 0)
        jl_StringBuilder_deleteCharAt($temp, var$3 - 1 | 0);
    return jl_AbstractStringBuilder_toString($temp);
};
function jur_CharClass$1() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$cc1 = null;
    a.$this$025 = null;
}
let jur_CharClass$1_contains = ($this, $ch) => {
    return $this.$val$cc1.$contains1($ch);
};
function jur_CharClass$3() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$curAlt = 0;
    a.$val$cc = null;
    a.$this$01 = null;
}
let jur_CharClass$3_contains = ($this, $ch) => {
    return !($this.$val$curAlt ^ ju_BitSet_get($this.$this$01.$bits, $ch)) && !($this.$val$curAlt ^ $this.$this$01.$inverted ^ $this.$val$cc.$contains1($ch)) ? 0 : 1;
};
function jur_CharClass$2() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$curAlt0 = 0;
    a.$val$cc3 = null;
    a.$this$02 = null;
}
let jur_CharClass$2_contains = ($this, $ch) => {
    return !($this.$val$curAlt0 ^ ju_BitSet_get($this.$this$02.$bits, $ch)) && !($this.$val$curAlt0 ^ $this.$this$02.$inverted ^ $this.$val$cc3.$contains1($ch)) ? 1 : 0;
};
function jur_CharClass$5() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$curAlt10 = 0;
    a.$val$nb4 = null;
    a.$val$cc2 = null;
    a.$this$015 = null;
}
let jur_CharClass$5_contains = ($this, $ch) => {
    return $this.$val$curAlt10 ^ (!$this.$val$nb4.$contains1($ch) && !$this.$val$cc2.$contains1($ch) ? 0 : 1);
};
function jur_CharClass$4() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$curAlt2 = 0;
    a.$val$nb2 = null;
    a.$val$cc0 = null;
    a.$this$038 = null;
}
let jur_CharClass$4_contains = ($this, $ch) => {
    return $this.$val$curAlt2 ^ (!$this.$val$nb2.$contains1($ch) && !$this.$val$cc0.$contains1($ch) ? 0 : 1) ? 0 : 1;
};
function jur_CharClass$7() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$clazz2 = null;
    a.$this$039 = null;
}
let jur_CharClass$7_contains = ($this, $ch) => {
    return jur_CharClass_contains($this.$val$clazz2, $ch);
};
function jur_CharClass$6() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$clazz8 = null;
    a.$this$017 = null;
}
let jur_CharClass$6_contains = ($this, $ch) => {
    return jur_CharClass_contains($this.$val$clazz8, $ch) ? 0 : 1;
};
function jur_CharClass$9() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$clazz4 = null;
    a.$val$curAlt1 = 0;
    a.$this$06 = null;
}
let jur_CharClass$9_contains = ($this, $ch) => {
    return !jur_CharClass_contains($this.$val$clazz4, $ch) && !($this.$val$curAlt1 ^ ju_BitSet_get($this.$this$06.$bits, $ch)) ? 0 : 1;
};
function jur_CharClass$8() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$clazz5 = null;
    a.$val$curAlt5 = 0;
    a.$this$04 = null;
}
let jur_CharClass$8_contains = ($this, $ch) => {
    return !jur_CharClass_contains($this.$val$clazz5, $ch) && !($this.$val$curAlt5 ^ ju_BitSet_get($this.$this$04.$bits, $ch)) ? 1 : 0;
};
function jur_CharClass$11() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$curAlt7 = 0;
    a.$val$nb3 = null;
    a.$val$clazz9 = null;
    a.$this$013 = null;
}
let jur_CharClass$11_contains = ($this, $ch) => {
    return !($this.$val$curAlt7 ^ $this.$val$nb3.$contains1($ch)) && !jur_CharClass_contains($this.$val$clazz9, $ch) ? 0 : 1;
};
function jur_CharClass$10() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$curAlt9 = 0;
    a.$val$nb0 = null;
    a.$val$clazz = null;
    a.$this$016 = null;
}
let jur_CharClass$10_contains = ($this, $ch) => {
    return !($this.$val$curAlt9 ^ $this.$val$nb0.$contains1($ch)) && !jur_CharClass_contains($this.$val$clazz, $ch) ? 1 : 0;
};
function jur_CharClass$13() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$clazz0 = null;
    a.$this$018 = null;
}
let jur_CharClass$13_contains = ($this, $ch) => {
    return jur_CharClass_contains($this.$val$clazz0, $ch);
};
function jur_CharClass$12() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$clazz1 = null;
    a.$this$037 = null;
}
let jur_CharClass$12_contains = ($this, $ch) => {
    return jur_CharClass_contains($this.$val$clazz1, $ch) ? 0 : 1;
};
function jur_CharClass$15() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$clazz10 = null;
    a.$val$curAlt4 = 0;
    a.$this$09 = null;
}
let jur_CharClass$15_contains = ($this, $ch) => {
    return jur_CharClass_contains($this.$val$clazz10, $ch) && $this.$val$curAlt4 ^ ju_BitSet_get($this.$this$09.$bits, $ch) ? 1 : 0;
};
function jur_CharClass$14() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$clazz6 = null;
    a.$val$curAlt3 = 0;
    a.$this$05 = null;
}
let jur_CharClass$14_contains = ($this, $ch) => {
    return jur_CharClass_contains($this.$val$clazz6, $ch) && $this.$val$curAlt3 ^ ju_BitSet_get($this.$this$05.$bits, $ch) ? 0 : 1;
};
function jur_CharClass$17() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$curAlt8 = 0;
    a.$val$nb1 = null;
    a.$val$clazz3 = null;
    a.$this$014 = null;
}
let jur_CharClass$17_contains = ($this, $ch) => {
    return $this.$val$curAlt8 ^ $this.$val$nb1.$contains1($ch) && jur_CharClass_contains($this.$val$clazz3, $ch) ? 1 : 0;
};
function jur_CharClass$16() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$curAlt6 = 0;
    a.$val$nb = null;
    a.$val$clazz7 = null;
    a.$this$020 = null;
}
let jur_CharClass$16_contains = ($this, $ch) => {
    return $this.$val$curAlt6 ^ $this.$val$nb.$contains1($ch) && jur_CharClass_contains($this.$val$clazz7, $ch) ? 0 : 1;
},
ju_TemplateCollections$AbstractImmutableList = $rt_classWithoutFields(ju_AbstractList);
function ju_TemplateCollections$ImmutableArrayList() {
    ju_TemplateCollections$AbstractImmutableList.call(this);
    this.$list = null;
}
let ju_TemplateCollections$ImmutableArrayList__init_0 = ($this, $list) => {
    $this.$list = $list;
},
ju_TemplateCollections$ImmutableArrayList__init_ = var_0 => {
    let var_1 = new ju_TemplateCollections$ImmutableArrayList();
    ju_TemplateCollections$ImmutableArrayList__init_0(var_1, var_0);
    return var_1;
},
ju_TemplateCollections$ImmutableArrayList_get = ($this, $index) => {
    return $this.$list.data[$index];
},
ju_TemplateCollections$ImmutableArrayList_size = $this => {
    return $this.$list.data.length;
},
ju_TemplateCollections$ImmutableArrayList_remove = ($this, var$1) => {
    let var$2;
    var$2 = new jl_UnsupportedOperationException;
    jl_Throwable__init_(var$2);
    $rt_throw(var$2);
},
igbce_WrongIndentationException = $rt_classWithoutFields(igbce_CompilerException),
igbce_WrongBracketUsageException = $rt_classWithoutFields(igbce_CompilerException),
igbcu_SymbolParser$parseSymbols$lambda$_1_0 = $rt_classWithoutFields(),
igbcu_SymbolParser$parseSymbols$lambda$_1_0_test = (var$0, var$1) => {
    return jl_String_isEmpty(jl_String_trim(var$1)) ? 0 : 1;
},
jus_Collectors = $rt_classWithoutFields();
function igbcs_ImplementingSymbol() {
    igbcs_Symbol.call(this);
    this.$size3 = 0;
}
let igbcs_ImplementingSymbol__init_0 = ($this, $declaration) => {
    let var$2, var$3, var$4;
    igbcs_Symbol__init_($this, $declaration);
    var$2 = 0;
    var$3 = 0;
    while (true) {
        a: {
            while (var$2 < $declaration.$nativeString.length) {
                var$4 = var$2 + 1 | 0;
                if (!(jl_String_charAt($declaration, var$2) != 44 ? 0 : 1))
                    var$2 = 1;
                else {
                    var$3 = var$3 + 1 | 0;
                    var$2 = 1;
                }
                if (!var$2) {
                    var$2 = var$4;
                    break a;
                }
                var$2 = var$4;
            }
        }
        if (!(var$2 >= $declaration.$nativeString.length ? 0 : 1))
            break;
    }
    $this.$size3 = Long_lo(Long_add(Long_fromInt(var$3), Long_fromInt(1)));
},
igbcs_ImplementingSymbol__init_ = var_0 => {
    let var_1 = new igbcs_ImplementingSymbol();
    igbcs_ImplementingSymbol__init_0(var_1, var_0);
    return var_1;
},
igbcs_ImplementingSymbol_applyChanges = ($this, $apiClass, $uses) => {
    let var$3, var$4, var$5, $extender;
    var$3 = (jl_String_split(jl_String_replace(jl_String_replace(jl_String_replace(jl_String_replace($this.$declaration, $rt_s(436), $rt_s(2)), $rt_s(105), $rt_s(2)), $rt_s(458), $rt_s(2)), $rt_s(32), $rt_s(2)), $rt_s(459))).data;
    var$4 = var$3.length;
    var$5 = 0;
    while (var$5 < var$4) {
        $extender = var$3[var$5];
        ju_ArrayList_add($apiClass.$interfaces, igbcs_Symbol_map($uses, $extender));
        var$5 = var$5 + 1 | 0;
    }
},
igbcs_ExtendingSymbol = $rt_classWithoutFields(igbcs_Symbol),
igbcs_ExtendingSymbol__init_ = ($this, $declaration) => {
    igbcs_Symbol__init_($this, $declaration);
},
igbcs_ExtendingSymbol__init_0 = var_0 => {
    let var_1 = new igbcs_ExtendingSymbol();
    igbcs_ExtendingSymbol__init_(var_1, var_0);
    return var_1;
},
igbcs_ExtendingSymbol_applyChanges = ($this, $apiClass, $uses) => {
    $apiClass.$extendingClass = igbcs_Symbol_map($uses, jl_String_replace(jl_String_replace($this.$declaration, $rt_s(32), $rt_s(2)), $rt_s(460), $rt_s(2)));
},
igbcs_FieldSymbol = $rt_classWithoutFields(igbcs_Symbol),
igbcs_FieldSymbol__init_0 = ($this, $declaration) => {
    igbcs_Symbol__init_($this, $declaration);
},
igbcs_FieldSymbol__init_ = var_0 => {
    let var_1 = new igbcs_FieldSymbol();
    igbcs_FieldSymbol__init_0(var_1, var_0);
    return var_1;
},
igbcs_FieldSymbol_applyChanges = ($this, $apiClass, $uses) => {
    let $fieldDeclaration, $symbols, $fieldName, $fieldDesc, $staticis, $finalis, $visibilityType, $arrayCount, var$11, $descGen, $field;
    if (jl_String_isEmpty(jl_String_trim($this.$declaration)))
        return;
    $fieldDeclaration = $this.$declaration;
    if (jl_String_contains($fieldDeclaration, $rt_s(461)))
        $fieldDeclaration = (jl_String_split($this.$declaration, $rt_s(461))).data[0];
    $symbols = ju_List_of(jl_String_split($fieldDeclaration, $rt_s(32)));
    $fieldName = ju_TemplateCollections$ImmutableArrayList_get($symbols, ju_TemplateCollections$ImmutableArrayList_size($symbols) - 1 | 0);
    $fieldDesc = ju_TemplateCollections$ImmutableArrayList_get($symbols, ju_TemplateCollections$ImmutableArrayList_size($symbols) - 2 | 0);
    $staticis = ju_AbstractCollection_contains($symbols, $rt_s(447));
    $finalis = ju_AbstractCollection_contains($symbols, $rt_s(448));
    $visibilityType = igbcat_VisibilityType_PUBLIC;
    if (ju_AbstractCollection_contains($symbols, $rt_s(449)))
        $visibilityType = igbcat_VisibilityType_PRIVATE;
    else if (ju_AbstractCollection_contains($symbols, $rt_s(450)))
        $visibilityType = igbcat_VisibilityType_PACKAGE_PRIVATE;
    else if (ju_AbstractCollection_contains($symbols, $rt_s(451)))
        $visibilityType = igbcat_VisibilityType_PROTECTED;
    a: {
        $arrayCount = igbcu_SymbolParser_countArrays($fieldDesc);
        $symbols = jl_String_replaceAll($fieldDesc, $rt_s(103), $rt_s(2));
        var$11 = (-1);
        switch (jl_String_hashCode($symbols)) {
            case -1325958191:
                if (!jl_String_equals($symbols, $rt_s(100)))
                    break a;
                var$11 = 6;
                break a;
            case 104431:
                if (!jl_String_equals($symbols, $rt_s(97)))
                    break a;
                var$11 = 0;
                break a;
            case 3039496:
                if (!jl_String_equals($symbols, $rt_s(95)))
                    break a;
                var$11 = 4;
                break a;
            case 3052374:
                if (!jl_String_equals($symbols, $rt_s(94)))
                    break a;
                var$11 = 3;
                break a;
            case 3327612:
                if (!jl_String_equals($symbols, $rt_s(99)))
                    break a;
                var$11 = 2;
                break a;
            case 64711720:
                if (!jl_String_equals($symbols, $rt_s(93)))
                    break a;
                var$11 = 1;
                break a;
            case 97526364:
                if (!jl_String_equals($symbols, $rt_s(98)))
                    break a;
                var$11 = 7;
                break a;
            case 109413500:
                if (!jl_String_equals($symbols, $rt_s(96)))
                    break a;
                var$11 = 5;
                break a;
            default:
        }
    }
    b: {
        switch (var$11) {
            case 0:
                break;
            case 1:
                $descGen = $rt_s(110);
                break b;
            case 2:
                $descGen = $rt_s(106);
                break b;
            case 3:
                $descGen = $rt_s(33);
                break b;
            case 4:
                $descGen = $rt_s(109);
                break b;
            case 5:
                $descGen = $rt_s(108);
                break b;
            case 6:
                $descGen = $rt_s(107);
                break b;
            case 7:
                $descGen = $rt_s(37);
                break b;
            default:
                $uses = igbcs_Symbol_map($uses, $symbols);
                $symbols = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_($symbols);
                jl_AbstractStringBuilder_append($symbols, 76);
                jl_AbstractStringBuilder_append(jl_StringBuilder_append($symbols, $uses), 59);
                $descGen = jl_AbstractStringBuilder_toString($symbols);
                break b;
        }
        $descGen = $rt_s(113);
    }
    $uses = jl_String_repeat($rt_s(105), $arrayCount);
    $symbols = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($symbols);
    jl_StringBuilder_append(jl_StringBuilder_append($symbols, $uses), $descGen);
    $symbols = jl_AbstractStringBuilder_toString($symbols);
    $field = igbca_APIField__init_($apiClass, $fieldName, $symbols, igbcat_AccessType__init_($visibilityType, $finalis), $staticis);
    ju_ArrayList_add($apiClass.$fields, $field);
    $apiClass = jl_System_out();
    $uses = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($uses);
    jl_StringBuilder_append(jl_StringBuilder_append($uses, $rt_s(462)), $fieldName);
    $apiClass.$println0(jl_AbstractStringBuilder_toString($uses));
};
function igbcm_MethodCodeCompiler() {
    let a = this; jl_Record.call(a);
    a.$clazz0 = null;
    a.$method0 = null;
    a.$code1 = null;
    a.$symbol0 = null;
}
let igbcm_MethodCodeCompiler_lastCompiledStatementDescriptor = null,
igbcm_MethodCodeCompiler_recursiveCompilation = ($this, $bracket) => {
    let var$2, var$3, var$4, var$5, var$6, var$7;
    var$2 = $bracket.$contains2;
    var$3 = 0;
    while (var$3 < var$2.$size0) {
        igbcm_MethodCodeCompiler_recursiveCompilation($this, var$2.$array.data[var$3]);
        var$3 = var$3 + 1 | 0;
    }
    a: {
        if ($bracket === $this.$code1)
            ju_AbstractCollection_addAll($bracket.$compilation, igbcm_MethodCodeCompiler_compileCode($this, $bracket));
        else {
            b: {
                var$2 = jl_String_substring(jl_String_replace($bracket.$beforeBracket, $rt_s(32), $rt_s(2)), 0, jl_String_indexOf0($bracket.$beforeBracket, 40));
                var$3 = (-1);
                switch (jl_String_hashCode(var$2)) {
                    case 3357:
                        if (!jl_String_equals(var$2, $rt_s(463)))
                            break b;
                        var$3 = 0;
                        break b;
                    default:
                }
            }
            switch (var$3) {
                case 0:
                    var$2 = $bracket.$beforeBracket;
                    var$2 = jl_String_substring(var$2, jl_String_indexOf0(var$2, 40) + 1 | 0, $bracket.$beforeBracket.$nativeString.length - 2 | 0);
                    var$4 = jl_String_startsWith(jl_String_trim(var$2), $rt_s(464));
                    if (var$4)
                        var$2 = jl_String_substring0(var$2, jl_String_indexOf0(var$2, 33) + 1 | 0);
                    var$5 = $bracket.$compilation;
                    var$6 = new igbcaci_IfStatementCode;
                    var$2 = igbcmc_StatementCompiler_compileStatement(igbcm_MethodCodeCompiler_statementCompiler($this), var$2, 1);
                    var$7 = ju_AbstractCollection_toArray(igbcm_MethodCodeCompiler_compileCode($this, $bracket), $rt_createArray(igbcac_APIMethodCode, 0));
                    $bracket = ju_ArrayList__init_();
                    var$6.$codes0 = $bracket;
                    var$6.$reason = var$2;
                    ju_AbstractCollection_addAll($bracket, jus_Stream_toList(ju_Arrays_stream(var$7)));
                    var$6.$reversed = var$4;
                    ju_ArrayList_add(var$5, var$6);
                    break a;
                default:
            }
            $bracket = $bracket.$beforeBracket;
            var$2 = new igbce_SymbolNotFoundException;
            var$5 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$5);
            jl_StringBuilder_append(jl_StringBuilder_append(var$5, $rt_s(465)), $bracket);
            jl_Throwable__init_0(var$2, jl_AbstractStringBuilder_toString(var$5));
            $rt_throw(var$2);
        }
    }
},
igbcm_MethodCodeCompiler_compileCode = ($this, $bracket) => {
    let $code, $compiler, $currentBracket, $indentationCount, var$6, var$7, var$8, $line, $compiled;
    $code = ju_ArrayList__init_();
    $compiler = igbcmc_StatementCompiler__init_($this);
    $currentBracket = (-1);
    $indentationCount = 0;
    var$6 = (jl_String_split($bracket.$code0, $rt_s(4))).data;
    var$7 = var$6.length;
    var$8 = 0;
    while (var$8 < var$7) {
        $line = var$6[var$8];
        if (jl_String_contains($line, $rt_s(425)))
            $indentationCount = $indentationCount + 1 | 0;
        a: {
            if (jl_String_contains($line, $rt_s(427))) {
                $indentationCount = $indentationCount + (-1) | 0;
                if (!$indentationCount) {
                    $currentBracket = $currentBracket + 1 | 0;
                    ju_AbstractCollection_addAll($code, (ju_ArrayList_get($bracket.$contains2, $currentBracket)).$compilation);
                    break a;
                }
            }
            if (!$indentationCount) {
                $compiled = igbcmc_StatementCompiler_compileStatement($compiler, jl_String_trim($line), 1);
                ju_ArrayList_add($code, jl_String_equals(igbcm_MethodCodeCompiler_lastCompiledStatementDescriptor, $rt_s(111)) ? $compiled : $compiled instanceof igbcaci_DisbandReturn ? $compiled : igbcaci_DisbandReturn__init_($compiled));
            }
        }
        var$8 = var$8 + 1 | 0;
    }
    return $code;
},
igbcm_MethodCodeCompiler_statementCompiler = $this => {
    return igbcmc_StatementCompiler__init_($this);
},
igbcm_MethodCodeCompiler_clazz = $this => {
    return $this.$clazz0;
},
igbcm_MethodCodeCompiler_method = $this => {
    return $this.$method0;
},
igbcm_MethodCodeCompiler_symbol = $this => {
    return $this.$symbol0;
},
igbcm_MethodCodeCompiler__clinit_ = () => {
    igbcm_MethodCodeCompiler_lastCompiledStatementDescriptor = $rt_s(2);
},
jus_BaseStream = $rt_classWithoutFields(0),
jus_Stream = $rt_classWithoutFields(0),
jus_Stream_toList = $this => {
    return ju_TemplateCollections$ImmutableArrayList__init_(jusi_SimpleStreamImpl_toArray0($this));
},
jusi_SimpleStreamImpl = $rt_classWithoutFields(),
jusi_SimpleStreamImpl_filter = ($this, $predicate) => {
    let var$2;
    var$2 = new jusi_FilteringStreamImpl;
    jusi_WrappingStreamImpl__init_(var$2, $this);
    var$2.$filter0 = $predicate;
    return var$2;
},
jusi_SimpleStreamImpl_map = ($this, $mapper) => {
    let var$2;
    var$2 = new jusi_MappingStreamImpl;
    jusi_WrappingStreamImpl__init_(var$2, $this);
    var$2.$mapper = $mapper;
    return var$2;
},
jusi_SimpleStreamImpl_toArray0 = $this => {
    return jusi_SimpleStreamImpl_toArray($this, new jusi_SimpleStreamImpl$toArray$lambda$_20_0);
},
jusi_SimpleStreamImpl_toArray = ($this, $generator) => {
    let $estimatedSize, $array, $consumer, var$5, $list, $array_0, $i;
    $estimatedSize = $this.$estimateSize();
    if ($estimatedSize >= 0) {
        $array = $generator.$apply0($estimatedSize);
        $consumer = new jusi_SimpleStreamImpl$ArrayFillingConsumer;
        $consumer.$array3 = $array;
        while ($this.$next1($consumer)) {
        }
        var$5 = $array.data;
        $estimatedSize = $consumer.$index5;
        if ($estimatedSize < var$5.length)
            $array = ju_Arrays_copyOf0($array, $estimatedSize);
        return $array;
    }
    $list = ju_ArrayList__init_();
    while (true) {
        ju_Objects_requireNonNull($list);
        $consumer = new jusi_SimpleStreamImpl$toArray$lambda$_21_0;
        $consumer.$_05 = $list;
        if (!$this.$next1($consumer))
            break;
    }
    $array_0 = $generator.$apply0($list.$size0);
    $i = 0;
    while (true) {
        $generator = $array_0.data;
        if ($i >= $generator.length)
            break;
        $generator[$i] = ju_ArrayList_get($list, $i);
        $i = $i + 1 | 0;
    }
    return $array_0;
},
jusi_SimpleStreamImpl_findFirst = $this => {
    let $consumer, var$2;
    $consumer = new jusi_FindFirstConsumer;
    while ($consumer.$result === null && jusi_WrappingStreamImpl_next($this, $consumer)) {
    }
    $consumer = $consumer.$result;
    if ($consumer !== null)
        var$2 = ju_Optional__init_(ju_Objects_requireNonNull($consumer));
    else {
        if (ju_Optional_emptyInstance === null)
            ju_Optional_emptyInstance = ju_Optional__init_(null);
        var$2 = ju_Optional_emptyInstance;
    }
    return var$2;
};
function jusi_ArrayStreamImpl() {
    let a = this; jusi_SimpleStreamImpl.call(a);
    a.$array4 = null;
    a.$index3 = 0;
    a.$end2 = 0;
    a.$size4 = 0;
}
let jusi_ArrayStreamImpl_next = ($this, $consumer) => {
    let var$2, var$3;
    a: {
        while (true) {
            var$2 = $this.$index3;
            if (var$2 >= $this.$end2)
                break a;
            var$3 = $this.$array4.data;
            $this.$index3 = var$2 + 1 | 0;
            if ($consumer.$test(var$3[var$2]))
                continue;
            else
                break;
        }
    }
    return $this.$index3 >= $this.$end2 ? 0 : 1;
},
jusi_ArrayStreamImpl_estimateSize = $this => {
    return $this.$size4;
},
juf_IntPredicate = $rt_classWithoutFields(0),
igbcs_ImplementingSymbol$_init_$lambda$_0_0 = $rt_classWithoutFields(),
igbce_StandardCodeExceptions = $rt_classWithoutFields(),
igbce_StandardCodeExceptions_noreturn = $method => {
    let var$2, var$3;
    var$2 = new igbce_NoReturnException;
    $method = $method.$name;
    var$3 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$3);
    jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(466)), $method), $rt_s(467));
    jl_Throwable__init_0(var$2, jl_AbstractStringBuilder_toString(var$3));
    $rt_throw(var$2);
},
igbcm_MethodCodeCompiler$compile$lambda$_1_0 = $rt_classWithoutFields(),
jnc_Charset$Charsets = $rt_classWithoutFields(),
jnc_Charset$Charsets_value = null,
jnc_Charset$Charsets_$callClinit = () => {
    jnc_Charset$Charsets_$callClinit = $rt_eraseClinit(jnc_Charset$Charsets);
    jnc_Charset$Charsets__clinit_();
},
jnc_Charset$Charsets__clinit_ = () => {
    let $charsets, var$2, var$3, $charset;
    jnc_Charset$Charsets_value = ju_HashMap__init_();
    $charsets = $rt_createArray(jnc_Charset, 6).data;
    jnc_StandardCharsets_$callClinit();
    $charsets[0] = jnc_StandardCharsets_UTF_8;
    $charsets[1] = jnc_StandardCharsets_US_ASCII;
    $charsets[2] = jnc_StandardCharsets_ISO_8859_1;
    $charsets[3] = jnc_StandardCharsets_UTF_16;
    $charsets[4] = jnc_StandardCharsets_UTF_16BE;
    $charsets[5] = jnc_StandardCharsets_UTF_16LE;
    var$2 = $charsets.length;
    var$3 = 0;
    while (var$3 < var$2) {
        $charset = $charsets[var$3];
        ju_HashMap_put(jnc_Charset$Charsets_value, $charset.$canonicalName, $charset);
        var$3 = var$3 + 1 | 0;
    }
};
function jnc_UnsupportedCharsetException() {
    jl_IllegalArgumentException.call(this);
    this.$charsetName0 = null;
}
function jur_Matcher$1() {
    let a = this; jl_Object.call(a);
    a.$grN = 0;
    a.$val$gr = 0;
    a.$this$07 = null;
}
let jur_Matcher$1__init_ = ($this, $this$0, var$2) => {
    $this.$this$07 = $this$0;
    $this.$val$gr = var$2;
    $this.$grN = var$2;
},
jur_Matcher$1__init_0 = (var_0, var_1) => {
    let var_2 = new jur_Matcher$1();
    jur_Matcher$1__init_(var_2, var_0, var_1);
    return var_2;
},
jur_Matcher$1_toString = $this => {
    return jur_Matcher_group($this.$this$07, $this.$grN);
},
juf_BiConsumer = $rt_classWithoutFields(0);
function jus_Collectors$joining$lambda$_8_0() {
    jl_Object.call(this);
    this.$_06 = null;
}
let juf_BiFunction = $rt_classWithoutFields(0),
juf_BinaryOperator = $rt_classWithoutFields(0);
function jus_Collectors$joining$lambda$_8_1() {
    jl_Object.call(this);
    this.$_012 = null;
}
let juf_Supplier = $rt_classWithoutFields(0),
jus_Collectors$joining$lambda$_8_2 = $rt_classWithoutFields();
function jus_Collectors$joining$lambda$_8_3() {
    let a = this; jl_Object.call(a);
    a.$_011 = null;
    a.$_13 = null;
}
let jus_Collector$Characteristics = $rt_classWithoutFields(jl_Enum),
jus_Collector$Characteristics_CONCURRENT = null,
jus_Collector$Characteristics_UNORDERED = null,
jus_Collector$Characteristics_IDENTITY_FINISH = null,
jus_Collector$Characteristics_$VALUES = null,
jus_Collector$Characteristics_values = () => {
    return jus_Collector$Characteristics_$VALUES.$clone0();
},
jus_Collector$Characteristics__clinit_ = () => {
    let var$1, var$2, var$3;
    var$1 = new jus_Collector$Characteristics;
    jl_Enum__init_(var$1, $rt_s(468), 0);
    jus_Collector$Characteristics_CONCURRENT = var$1;
    var$1 = new jus_Collector$Characteristics;
    jl_Enum__init_(var$1, $rt_s(469), 1);
    jus_Collector$Characteristics_UNORDERED = var$1;
    var$1 = new jus_Collector$Characteristics;
    jl_Enum__init_(var$1, $rt_s(470), 2);
    jus_Collector$Characteristics_IDENTITY_FINISH = var$1;
    var$2 = $rt_createArray(jus_Collector$Characteristics, 3);
    var$3 = var$2.data;
    var$3[0] = jus_Collector$Characteristics_CONCURRENT;
    var$3[1] = jus_Collector$Characteristics_UNORDERED;
    var$3[2] = var$1;
    jus_Collector$Characteristics_$VALUES = var$2;
},
jus_Collector = $rt_classWithoutFields(0),
igbce_SymbolNotFoundException = $rt_classWithoutFields(igbce_CompilerException),
juf_Consumer = $rt_classWithoutFields(0);
function igbcm_MethodCodeCompiler$recursiveCompilation$lambda$_2_0() {
    jl_Object.call(this);
    this.$_013 = null;
}
let igbce_NoReturnException = $rt_classWithoutFields(igbce_CompilerException),
ju_Set = $rt_classWithoutFields(0),
ju_AbstractSet = $rt_classWithoutFields(ju_AbstractCollection),
ju_EnumSet = $rt_classWithoutFields(ju_AbstractSet);
function jus_CollectorImpl() {
    let a = this; jl_Object.call(a);
    a.$supplier = null;
    a.$accumulator = null;
    a.$combiner = null;
    a.$finisher = null;
    a.$characteristics = null;
}
function igbcmc_StatementCompiler() {
    jl_Record.call(this);
    this.$compiler = null;
}
let igbcmc_StatementCompiler__init_0 = ($this, $compiler) => {
    $this.$compiler = $compiler;
},
igbcmc_StatementCompiler__init_ = var_0 => {
    let var_1 = new igbcmc_StatementCompiler();
    igbcmc_StatementCompiler__init_0(var_1, var_0);
    return var_1;
},
igbcmc_StatementCompiler_compileStatement = ($this, $input, $first) => {
    let $fieldAccessPattern, $fieldAccessMatcher, $methodCallPattern, $implicitMethodCallPattern, var$7, $value, $methodCallMatcher, $implicitMethodCallMatcher, var$11, $a, var$13, $object, $field, $method, $arguments, $assignmentMatcher;
    if (!jl_String_contains($input, $rt_s(471)) && !jl_String_contains($input, $rt_s(461)) && $first) {
        $fieldAccessPattern = new igbce_CompilerException;
        $fieldAccessMatcher = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($fieldAccessMatcher);
        jl_StringBuilder_append(jl_StringBuilder_append($fieldAccessMatcher, $rt_s(472)), $input);
        jl_Throwable__init_0($fieldAccessPattern, jl_AbstractStringBuilder_toString($fieldAccessMatcher));
        $rt_throw($fieldAccessPattern);
    }
    if (jl_String_startsWith($input, $rt_s(38)) && jl_String_endsWith($input, $rt_s(38)) && !$first)
        return igbcacigl_LoadConstantCode__init_(igbcu_StringParser_parse(jl_String_substring($input, 1, $input.$nativeString.length - 1 | 0)));
    if (jl_String_startsWith($input, $rt_s(38))) {
        $fieldAccessPattern = $this.$compiler;
        $fieldAccessMatcher = igbcu_StringParser_parse(jl_String_substring($input, 1, igbcu_StringParser_find($input)));
        $input = jl_String_substring0($input, igbcu_StringParser_find($input) + 2 | 0);
        $methodCallPattern = jl_String_substring($input, 0, jl_String_indexOf0($input, 40));
        $input = jl_String_substring($input, jl_String_indexOf0($input, 40) + 1 | 0, $input.$nativeString.length - 1 | 0);
        $implicitMethodCallPattern = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($implicitMethodCallPattern);
        var$7 = 0;
        while (true) {
            if (var$7 >= 10) {
                $value = jl_AbstractStringBuilder_toString($implicitMethodCallPattern);
                $methodCallMatcher = igbcat_Argument__init_1($rt_s(473), $value);
                ju_ArrayList_add($fieldAccessPattern.$method0.$arguments, $methodCallMatcher);
                $implicitMethodCallPattern = igbcmc_MethodCallCompiler__init_(igbcu_CodeCompilerUtils__init_($fieldAccessPattern), $fieldAccessPattern.$clazz0, $fieldAccessPattern.$symbol0, $fieldAccessPattern.$method0);
                $implicitMethodCallMatcher = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_($implicitMethodCallMatcher);
                jl_StringBuilder_append(jl_StringBuilder_append($implicitMethodCallMatcher, $rt_s(474)), $value);
                $input = igbcmc_MethodCallCompiler_compile($implicitMethodCallPattern, jl_AbstractStringBuilder_toString($implicitMethodCallMatcher), $methodCallPattern, $input);
                if ($input instanceof igbcacigc_MethodCallCode) {
                    ju_ArrayList_remove($input.$arguments0, 0);
                    ju_ArrayList_add0($input.$arguments0, 0, igbcacigl_LoadConstantCode__init_($fieldAccessMatcher));
                }
                $fieldAccessPattern = $fieldAccessPattern.$method0.$arguments;
                var$7 = ju_AbstractList_indexOf($fieldAccessPattern, $methodCallMatcher);
                if (var$7 >= 0)
                    ju_ArrayList_remove($fieldAccessPattern, var$7);
                if ($first) {
                    igbcm_MethodCodeCompiler_lastCompiledStatementDescriptor = $rt_s(111);
                    $input = igbcaci_DisbandReturn__init_($input);
                }
                return $input;
            }
            var$11 = $rt_s(475).$nativeString.length;
            if (var$11 <= 0)
                break;
            jl_AbstractStringBuilder_append($implicitMethodCallPattern, jl_String_charAt($rt_s(475), jl_Math_randomImpl() * var$11 | 0));
            var$7 = var$7 + 1 | 0;
        }
        $input = new jl_IllegalArgumentException;
        jl_Throwable__init_($input);
        $rt_throw($input);
    }
    if (!jl_String_contains($input, $rt_s(461))) {
        $a = jl_String_split0($input, $rt_s(476), 2);
        var$13 = $a.data;
        var$13[0] = jl_String_replace(var$13[0], $rt_s(32), $rt_s(2));
        $input = jl_String_join0($rt_s(471), $a);
    }
    $fieldAccessMatcher = jur_Pattern_matcher(jur_Pattern_compile($rt_s(477)), $input);
    if (jur_Matcher_matches($fieldAccessMatcher)) {
        $object = jur_Matcher_group($fieldAccessMatcher, 1);
        $field = jur_Matcher_group($fieldAccessMatcher, 2);
        $input = new igbcmc_FieldGetCompiler;
        $methodCallMatcher = igbcu_CodeCompilerUtils__init_($this.$compiler);
        $fieldAccessPattern = $this.$compiler;
        igbcmc_FieldGetCompiler__init_0($input, $methodCallMatcher, $fieldAccessPattern.$clazz0, $fieldAccessPattern.$symbol0, $fieldAccessPattern.$method0);
        return igbcmc_FieldGetCompiler_compile($input, $object, $field);
    }
    $methodCallMatcher = jur_Pattern_matcher(jur_Pattern_compile($rt_s(478)), $input);
    if (jur_Matcher_matches($methodCallMatcher)) {
        $object = jur_Matcher_group($methodCallMatcher, 1);
        $method = jur_Matcher_group($methodCallMatcher, 2);
        $arguments = jur_Matcher_group($methodCallMatcher, 3);
        $input = new igbcmc_MethodCallCompiler;
        $fieldAccessPattern = igbcu_CodeCompilerUtils__init_($this.$compiler);
        $fieldAccessMatcher = $this.$compiler;
        igbcmc_MethodCallCompiler__init_0($input, $fieldAccessPattern, $fieldAccessMatcher.$clazz0, $fieldAccessMatcher.$symbol0, $fieldAccessMatcher.$method0);
        return igbcmc_MethodCallCompiler_compile($input, $object, $method, $arguments);
    }
    $implicitMethodCallMatcher = jur_Pattern_matcher(jur_Pattern_compile($rt_s(479)), $input);
    if (!jur_Matcher_matches($implicitMethodCallMatcher)) {
        $assignmentMatcher = jur_Pattern_matcher(jur_Pattern_compile($rt_s(480)), $input);
        if (!jur_Matcher_matches($assignmentMatcher)) {
            $fieldAccessPattern = new igbce_CompilerException;
            $fieldAccessMatcher = jl_StringBuilder__init_0();
            jl_StringBuilder_append(jl_StringBuilder_append($fieldAccessMatcher, $rt_s(472)), $input);
            igbce_CompilerException__init_0($fieldAccessPattern, jl_StringBuilder_toString($fieldAccessMatcher));
            $rt_throw($fieldAccessPattern);
        }
        $field = jur_Matcher_group($assignmentMatcher, 1);
        $value = jur_Matcher_group($assignmentMatcher, 2);
        return igbcmc_FieldSetCompiler_compile(igbcmc_FieldSetCompiler__init_0(igbcu_CodeCompilerUtils__init_($this.$compiler), igbcm_MethodCodeCompiler_clazz($this.$compiler), igbcm_MethodCodeCompiler_symbol($this.$compiler), igbcm_MethodCodeCompiler_method($this.$compiler)), $field, $value, $first);
    }
    $method = jur_Matcher_group($implicitMethodCallMatcher, 1);
    $arguments = jur_Matcher_group($implicitMethodCallMatcher, 2);
    $object = $rt_s(481);
    if ((igbcm_MethodCodeCompiler_method($this.$compiler)).$isStatic0)
        $object = (igbcm_MethodCodeCompiler_clazz($this.$compiler)).$name0;
    return igbcmc_MethodCallCompiler_compile(igbcmc_MethodCallCompiler__init_(igbcu_CodeCompilerUtils__init_($this.$compiler), igbcm_MethodCodeCompiler_clazz($this.$compiler), igbcm_MethodCodeCompiler_symbol($this.$compiler), igbcm_MethodCodeCompiler_method($this.$compiler)), $object, $method, $arguments);
};
function igbcm_IfStatementHandler() {
    let a = this; jl_Record.call(a);
    a.$compiler1 = null;
    a.$bracket = null;
}
let jnc_StandardCharsets = $rt_classWithoutFields(),
jnc_StandardCharsets_UTF_8 = null,
jnc_StandardCharsets_US_ASCII = null,
jnc_StandardCharsets_ISO_8859_1 = null,
jnc_StandardCharsets_UTF_16 = null,
jnc_StandardCharsets_UTF_16BE = null,
jnc_StandardCharsets_UTF_16LE = null,
jnc_StandardCharsets_$callClinit = () => {
    jnc_StandardCharsets_$callClinit = $rt_eraseClinit(jnc_StandardCharsets);
    jnc_StandardCharsets__clinit_();
},
jnc_StandardCharsets__clinit_ = () => {
    let var$1;
    jnc_StandardCharsets_UTF_8 = jnci_UTF8Charset_INSTANCE;
    var$1 = new jnci_AsciiCharset;
    jnc_Charset__init_(var$1, $rt_s(482), $rt_createArray(jl_String, 0));
    jnc_StandardCharsets_US_ASCII = var$1;
    var$1 = new jnci_Iso8859Charset;
    jnc_Charset__init_(var$1, $rt_s(483), $rt_createArray(jl_String, 0));
    jnc_StandardCharsets_ISO_8859_1 = var$1;
    jnc_StandardCharsets_UTF_16 = jnci_UTF16Charset__init_($rt_s(484), 1, 0);
    jnc_StandardCharsets_UTF_16BE = jnci_UTF16Charset__init_($rt_s(485), 0, 0);
    jnc_StandardCharsets_UTF_16LE = jnci_UTF16Charset__init_($rt_s(486), 0, 1);
};
function ju_GenericEnumSet() {
    let a = this; ju_EnumSet.call(a);
    a.$cls = null;
    a.$bits0 = null;
}
let ju_GenericEnumSet_add = ($this, var$1) => {
    let var$2, var$3, var$4, var$5, var$6;
    var$1 = var$1;
    var$2 = jl_Object_getClass(var$1);
    if (var$2 !== $this.$cls && jl_Class_getSuperclass(var$2) !== $this.$cls) {
        var$1 = new jl_ClassCastException;
        jl_Throwable__init_(var$1);
        $rt_throw(var$1);
    }
    var$3 = var$1.$ordinal;
    var$4 = var$3 / 32 | 0;
    var$5 = 1 << (var$3 % 32 | 0);
    var$6 = $this.$bits0.data;
    if (var$6[var$4] & var$5)
        var$5 = 0;
    else {
        var$6[var$4] = var$6[var$4] | var$5;
        var$5 = 1;
    }
    return var$5;
};
function ju_Arrays$ArrayAsList() {
    ju_AbstractList.call(this);
    this.$array2 = null;
}
let ju_Arrays$ArrayAsList_get = ($this, $index) => {
    return $this.$array2.data[$index];
},
ju_Arrays$ArrayAsList_size = $this => {
    return $this.$array2.data.length;
},
igbcu_StringParser = $rt_classWithoutFields(),
igbcu_StringParser_parse = $string => {
    return jl_String_replace(jl_String_replace(jl_String_replace(jl_String_replace(jl_String_replace(jl_String_replace(jl_String_replace(jl_String_replace($string, $rt_s(487), $rt_s(488)), $rt_s(489), $rt_s(38)), $rt_s(490), $rt_s(491)), $rt_s(492), $rt_s(493)), $rt_s(494), $rt_s(495)), $rt_s(496), $rt_s(4)), $rt_s(497), $rt_s(423)), $rt_s(498), $rt_s(499));
},
igbcu_StringParser_find = $input => {
    let $escaped, $i, $c;
    $escaped = 0;
    $i = 1;
    while (true) {
        if ($i >= $input.$nativeString.length)
            return (-1);
        $c = jl_String_charAt($input, $i);
        if ($c == 34 && !$escaped)
            break;
        $escaped = $c == 92 && !$escaped ? 1 : 0;
        $i = $i + 1 | 0;
    }
    return $i;
};
function igbcmc_StringConstantMethodCompiler() {
    jl_Record.call(this);
    this.$compiler2 = null;
}
function igbcmc_FieldGetCompiler() {
    let a = this; jl_Record.call(a);
    a.$compilerUtils1 = null;
    a.$clazz2 = null;
    a.$imports1 = null;
    a.$method1 = null;
}
let igbcmc_FieldGetCompiler__init_0 = ($this, $compilerUtils, $clazz, $imports, $method) => {
    $this.$compilerUtils1 = $compilerUtils;
    $this.$clazz2 = $clazz;
    $this.$imports1 = $imports;
    $this.$method1 = $method;
},
igbcmc_FieldGetCompiler__init_ = (var_0, var_1, var_2, var_3) => {
    let var_4 = new igbcmc_FieldGetCompiler();
    igbcmc_FieldGetCompiler__init_0(var_4, var_0, var_1, var_2, var_3);
    return var_4;
},
igbcmc_FieldGetCompiler_compile = ($this, $object, $field) => {
    let $instance, $f, $either, $either0;
    if (jl_String_equals($field, $rt_s(15))) {
        igbcm_MethodCodeCompiler_lastCompiledStatementDescriptor = $rt_s(500);
        return new igbcacigp_NullCode;
    }
    $instance = null;
    if (!igbcu_CodeCompilerUtils_getObjectType($this.$compilerUtils1, $object)) {
        if (!jl_String_equals($object, $this.$clazz2.$name0))
            $f = (igbcmc_FieldGetCompiler_searchField($this, igbca_APILoader_get(igbcs_Symbol_map($this.$imports1, $object)), $field)).$aInstance;
        else {
            $either = igbcmc_FieldGetCompiler_searchField($this, $this.$clazz2, $field);
            $object = $either.$bInstance;
            if ($object === null)
                $f = $either.$aInstance;
            else {
                $either0 = igbcmc_FieldGetCompiler_handleGetArgumentCode($this, $object, $field);
                $object = $either0.$bInstance;
                if ($object !== null)
                    return $object;
                $f = $either0.$aInstance;
            }
        }
    } else if (jl_String_equals($object, $rt_s(481))) {
        $either = igbcmc_FieldGetCompiler_searchField($this, $this.$clazz2, $field);
        $object = $either.$bInstance;
        if ($object !== null) {
            igbcm_MethodCodeCompiler_lastCompiledStatementDescriptor = ooa_Type_getDescriptor(igbcat_Argument_compile($object.$argument));
            return $either.$bInstance;
        }
        if ($this.$method1.$isStatic0) {
            $object = new igbce_CompilerException;
            jl_Throwable__init_0($object, $rt_s(501));
            $rt_throw($object);
        }
        $f = $either.$aInstance;
        $instance = new igbcacigp_ThisCode;
    } else {
        $instance = igbcu_CodeCompilerUtils_searchScope($this.$compilerUtils1, $object);
        if ($instance instanceof igbcacigl_GetArgumentCode) {
            $either = igbcmc_FieldGetCompiler_handleGetArgumentCode($this, $instance, $field);
            $object = $either.$bInstance;
            if ($object !== null)
                return $object;
            $f = $either.$aInstance;
        } else {
            if (!($instance instanceof igbcacigc_FieldGetCode)) {
                $object = new igbce_CompilerException;
                $field = jl_Class_getName(jl_Object_getClass($instance));
                $instance = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_($instance);
                jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($instance, $rt_s(502)), $field), $rt_s(503));
                jl_Throwable__init_0($object, jl_AbstractStringBuilder_toString($instance));
                $rt_throw($object);
            }
            $f = (igbcmc_FieldGetCompiler_searchField($this, igbcacigc_FieldGetCode_getOwner($instance), $field)).$aInstance;
        }
    }
    igbcm_MethodCodeCompiler_lastCompiledStatementDescriptor = $f.$desc0;
    return igbcacigc_FieldGetCode__init_($f, $instance !== null ? 0 : 1, $instance);
},
igbcmc_FieldGetCompiler_handleGetArgumentCode = ($this, $arg, $field) => {
    let $compiled, $either, var$5;
    $compiled = igbcat_Argument_compile($arg.$argument);
    if (ooa_Type_getSort($compiled) != 10 && ooa_Type_getSort($compiled) != 9) {
        $arg = new igbce_CompilerException;
        jl_Throwable__init_0($arg, $rt_s(504));
        $rt_throw($arg);
    }
    if (ooa_Type_getSort($compiled) != 9) {
        $either = igbcmc_FieldGetCompiler_searchField($this, igbca_APILoader_get(jl_String_substring($compiled.$valueBuffer, $compiled.$valueBegin, $compiled.$valueEnd)), $field);
        $arg = $either.$bInstance;
        if ($arg === null)
            return igbcau_Either__init_0($either.$aInstance, 1);
        igbcm_MethodCodeCompiler_lastCompiledStatementDescriptor = ooa_Type_getDescriptor(igbcat_Argument_compile($arg.$argument));
        return igbcau_Either__init_1($either.$bInstance);
    }
    if (!jl_String_equals($field, $rt_s(505))) {
        $arg = new igbce_SymbolNotFoundException;
        $compiled = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($compiled);
        jl_StringBuilder_append(jl_StringBuilder_append($compiled, $field), $rt_s(506));
        jl_Throwable__init_0($arg, jl_AbstractStringBuilder_toString($compiled));
        $rt_throw($arg);
    }
    igbcm_MethodCodeCompiler_lastCompiledStatementDescriptor = $rt_s(113);
    $either = new igbcau_Either;
    var$5 = new igbcacigc_FieldGetCode;
    var$5.$owner4 = ooa_Type_getDescriptor($compiled);
    var$5.$name10 = $rt_s(505);
    var$5.$desc3 = $rt_s(113);
    var$5.$isStatic2 = 0;
    var$5.$instance = $arg;
    igbcau_Either__init_($either, var$5);
    return $either;
},
igbcmc_FieldGetCompiler_searchField = ($this, $apiClass1, $field) => {
    let var$3, $apiField, $argument;
    var$3 = ju_AbstractList_iterator($this.$method1.$arguments);
    while (true) {
        if (!ju_AbstractList$1_hasNext(var$3)) {
            var$3 = ju_AbstractList_iterator($apiClass1.$fields);
            while (true) {
                if (!ju_AbstractList$1_hasNext(var$3)) {
                    if (!jl_String_equals($apiClass1.$extendingClass, $rt_s(75)))
                        return igbcmc_FieldGetCompiler_searchField($this, igbca_APILoader_get($apiClass1.$extendingClass), $field);
                    var$3 = new igbce_SymbolNotFoundException;
                    $apiClass1 = $apiClass1.$fullName;
                    $apiField = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_($apiField);
                    jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($apiField, $field), $rt_s(507)), $apiClass1);
                    jl_Throwable__init_0(var$3, jl_AbstractStringBuilder_toString($apiField));
                    $rt_throw(var$3);
                }
                $apiField = ju_AbstractList$1_next(var$3);
                if (jl_String_equals($apiField.$name1, $field))
                    break;
            }
            return igbcau_Either__init_0($apiField, 1);
        }
        $argument = ju_AbstractList$1_next(var$3);
        if (jl_String_equals($argument.$name2, $field))
            break;
    }
    return igbcau_Either__init_1(igbcacigl_GetArgumentCode__init_($this.$method1, $argument));
};
function igbcu_CodeCompilerUtils() {
    jl_Record.call(this);
    this.$compiler0 = null;
}
let igbcu_CodeCompilerUtils__init_0 = ($this, $compiler) => {
    $this.$compiler0 = $compiler;
},
igbcu_CodeCompilerUtils__init_ = var_0 => {
    let var_1 = new igbcu_CodeCompilerUtils();
    igbcu_CodeCompilerUtils__init_0(var_1, var_0);
    return var_1;
},
igbcu_CodeCompilerUtils_parseArguments = ($this, $arguments, $args) => {
    let $descBuilder, var$4, var$5, var$6, $s, var$8, var$9, $$je;
    $descBuilder = jl_StringBuilder__init_($rt_s(471));
    var$4 = (jl_String_split($arguments, $rt_s(459))).data;
    var$5 = var$4.length;
    var$6 = 0;
    while (var$6 < var$5) {
        a: {
            $arguments = jl_String_trim(var$4[var$6]);
            if (!jl_String_isEmpty($arguments)) {
                if (jl_String_startsWith($arguments, $rt_s(38)) && jl_String_endsWith($arguments, $rt_s(38))) {
                    ju_ArrayList_add($args, igbcacigl_LoadConstantCode__init_(igbcu_StringParser_parse(jl_String_substring($arguments, 1, $arguments.$nativeString.length - 1 | 0))));
                    jl_AbstractStringBuilder_append0($descBuilder, $rt_s(508));
                } else if (!jl_String_endsWith($arguments, $rt_s(509)) && !jl_String_endsWith($arguments, $rt_s(37))) {
                    if (!jl_String_endsWith($arguments, $rt_s(234)) && !jl_String_endsWith($arguments, $rt_s(107))) {
                        try {
                            ju_ArrayList_add($args, igbcacigl_LoadConstantCode__init_(jl_Integer_valueOf(jl_Integer_parseInt0($arguments))));
                            jl_StringBuilder_append2($descBuilder, $rt_s(113));
                            break a;
                        } catch ($$e) {
                            $$je = $rt_wrapException($$e);
                            if ($$je instanceof jl_NumberFormatException) {
                            } else {
                                throw $$e;
                            }
                        }
                        try {
                            ju_ArrayList_add($args, igbcacigl_LoadConstantCode__init_(jl_Float_valueOf(jl_Float_parseFloat($arguments))));
                            jl_StringBuilder_append2($descBuilder, $rt_s(37));
                            break a;
                        } catch ($$e) {
                            $$je = $rt_wrapException($$e);
                            if ($$je instanceof jl_Exception) {
                            } else {
                                throw $$e;
                            }
                        }
                        $s = igbcm_MethodCodeCompiler_statementCompiler($this.$compiler0);
                        var$8 = $this.$compiler0;
                        var$9 = !var$8.$method0.$isStatic0 ? $rt_s(481) : var$8.$clazz0.$name0;
                        var$8 = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_(var$8);
                        var$9 = jl_StringBuilder_append(var$8, var$9);
                        jl_AbstractStringBuilder_append(var$9, 46);
                        jl_StringBuilder_append(var$9, $arguments);
                        ju_ArrayList_add($args, igbcmc_StatementCompiler_compileStatement($s, jl_AbstractStringBuilder_toString(var$8), 0));
                        jl_AbstractStringBuilder_append0($descBuilder, igbcm_MethodCodeCompiler_lastCompiledStatementDescriptor);
                    } else {
                        ju_ArrayList_add($args, igbcacigl_LoadConstantCode__init_(jl_Double_valueOf(jl_Double_parseDouble($arguments))));
                        jl_AbstractStringBuilder_append0($descBuilder, $rt_s(107));
                    }
                } else {
                    ju_ArrayList_add($args, igbcacigl_LoadConstantCode__init_(jl_Float_valueOf(jl_Float_parseFloat($arguments))));
                    jl_AbstractStringBuilder_append0($descBuilder, $rt_s(37));
                }
            }
        }
        var$6 = var$6 + 1 | 0;
    }
    jl_AbstractStringBuilder_append0($descBuilder, $rt_s(510));
    return jl_AbstractStringBuilder_toString($descBuilder);
},
igbcu_CodeCompilerUtils_getObjectType = ($this, $object) => {
    let $$je;
    if (jl_String_equals($object, $this.$compiler0.$clazz0.$name0))
        return 0;
    a: {
        try {
            igbcs_Symbol_map(igbcm_MethodCodeCompiler_symbol($this.$compiler0), $object);
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_Exception) {
                break a;
            } else {
                throw $$e;
            }
        }
        return 0;
    }
    return 1;
},
igbcu_CodeCompilerUtils_searchScope = ($this, $object) => {
    let $f, var$3, $argument;
    if (jl_String_contains($object, $rt_s(112)))
        return igbcmc_StatementCompiler_compileStatement(igbcm_MethodCodeCompiler_statementCompiler($this.$compiler0), $object, 0);
    $f = ju_AbstractList_iterator($this.$compiler0.$method0.$arguments);
    while (true) {
        if (!ju_AbstractList$1_hasNext($f)) {
            $f = igbcu_CodeCompilerUtils_searchField($this, $this.$compiler0.$clazz0, $object);
            $object = new igbcacigc_FieldGetCode;
            var$3 = $f.$isStatic1;
            igbcacigc_FieldGetCode__init_0($object, $f, var$3, var$3 ? null : new igbcacigp_ThisCode);
            return $object;
        }
        $argument = ju_AbstractList$1_next($f);
        if (jl_String_equals($argument.$name2, $object))
            break;
    }
    return igbcacigl_GetArgumentCode__init_($this.$compiler0.$method0, $argument);
},
igbcu_CodeCompilerUtils_searchField = ($this, $apiClass1, $field) => {
    let var$3, $apiField;
    var$3 = ju_AbstractList_iterator($apiClass1.$fields);
    while (true) {
        if (!ju_AbstractList$1_hasNext(var$3)) {
            if (!jl_String_equals($apiClass1.$extendingClass, $rt_s(75)))
                return igbcu_CodeCompilerUtils_searchField($this, igbca_APILoader_get($apiClass1.$extendingClass), $field);
            $apiClass1 = new igbce_SymbolNotFoundException;
            var$3 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$3);
            jl_StringBuilder_append(jl_StringBuilder_append(var$3, $field), $rt_s(511));
            jl_Throwable__init_0($apiClass1, jl_AbstractStringBuilder_toString(var$3));
            $rt_throw($apiClass1);
        }
        $apiField = ju_AbstractList$1_next(var$3);
        if (jl_String_equals($apiField.$name1, $field))
            break;
    }
    return $apiField;
};
function igbcmc_MethodCallCompiler() {
    let a = this; jl_Record.call(a);
    a.$compilerUtils0 = null;
    a.$clazz3 = null;
    a.$imports0 = null;
    a.$method3 = null;
}
let igbcmc_MethodCallCompiler__init_0 = ($this, $compilerUtils, $clazz, $imports, $method) => {
    $this.$compilerUtils0 = $compilerUtils;
    $this.$clazz3 = $clazz;
    $this.$imports0 = $imports;
    $this.$method3 = $method;
},
igbcmc_MethodCallCompiler__init_ = (var_0, var_1, var_2, var_3) => {
    let var_4 = new igbcmc_MethodCallCompiler();
    igbcmc_MethodCallCompiler__init_0(var_4, var_0, var_1, var_2, var_3);
    return var_4;
},
igbcmc_MethodCallCompiler_compile = ($this, $object, $method, $arguments) => {
    let $arguments0, $desc, $clazz0, $instance, $fgc, $gac, $method1, var$11, $$je;
    $arguments0 = ju_ArrayList__init_();
    $desc = igbcu_CodeCompilerUtils_parseArguments($this.$compilerUtils0, $arguments, $arguments0);
    $clazz0 = null;
    $instance = null;
    if (!igbcu_CodeCompilerUtils_getObjectType($this.$compilerUtils0, $object))
        $clazz0 = igbca_APILoader_get($object);
    else if (jl_String_equals($object, $rt_s(481))) {
        if ($this.$method3.$isStatic0) {
            $object = new igbce_CompilerException;
            jl_Throwable__init_0($object, $rt_s(501));
            $rt_throw($object);
        }
        $instance = new igbcacigp_ThisCode;
        $clazz0 = $this.$clazz3;
    } else {
        $instance = igbcu_CodeCompilerUtils_searchScope($this.$compilerUtils0, $object);
        if ($instance instanceof igbcacigc_FieldGetCode) {
            $fgc = $instance;
            if ((igbcacigc_FieldGetCode_getField($fgc)).$desc0.$nativeString.length != 1)
                $clazz0 = igbca_APILoader_get(jl_String_substring((igbcacigc_FieldGetCode_getField($fgc)).$desc0, 1, jl_String_lastIndexOf((igbcacigc_FieldGetCode_getField($fgc)).$desc0, 59)));
            else {
                a: {
                    b: {
                        switch (jl_String_charAt((igbcacigc_FieldGetCode_getField($fgc)).$desc0, 0)) {
                            case 67:
                                break;
                            case 68:
                                $object = $rt_s(512);
                                break a;
                            case 69:
                            case 71:
                            case 72:
                            case 75:
                            case 76:
                            case 77:
                            case 78:
                            case 79:
                            case 80:
                            case 81:
                            case 82:
                            case 84:
                            case 85:
                            case 86:
                            case 87:
                            case 88:
                            case 89:
                                break b;
                            case 70:
                                $object = $rt_s(513);
                                break a;
                            case 73:
                                $object = $rt_s(514);
                                break a;
                            case 74:
                                $object = $rt_s(515);
                                break a;
                            case 83:
                                $object = $rt_s(516);
                                break a;
                            case 90:
                                $object = $rt_s(517);
                                break a;
                            default:
                                break b;
                        }
                        $object = $rt_s(518);
                        break a;
                    }
                    $object = $rt_s(519);
                }
                $clazz0 = igbca_APILoader_get($object);
            }
        } else if ($instance instanceof igbcacigl_GetArgumentCode) {
            $gac = $instance;
            $object = $gac.$argument;
            if ($object.$arrayCount > 0) {
                $object = new jl_UnsupportedOperationException;
                jl_Throwable__init_0($object, $rt_s(520));
                $rt_throw($object);
            }
            if (ooa_Type_getSort(igbcat_Argument_compile($object)) != 10) {
                $object = new igbce_CompilerException;
                jl_Throwable__init_0($object, $rt_s(521));
                $rt_throw($object);
            }
            $clazz0 = igbca_APILoader_get(jl_String_replace0(ooa_Type_getClassName(igbcat_Argument_compile($gac.$argument)), 46, 47));
        }
    }
    if ($clazz0 === null) {
        $object = new jl_IllegalStateException;
        jl_Throwable__init_0($object, $rt_s(522));
        $rt_throw($object);
    }
    $method1 = igbcmc_MethodCallCompiler_findMethod($this, $clazz0, $method, $desc);
    if ($method1 === null && !jl_String_equals($method, $rt_s(119))) {
        c: {
            var$11 = ju_AbstractCollection_toArray($arguments0, $rt_createArray(igbcacig_ValueReturnCode, 0));
            if (jl_String_equals($method, $rt_s(124)) && jl_String_equals($desc, $rt_s(523))) {
                var$11 = var$11.data;
                igbcm_MethodCodeCompiler_lastCompiledStatementDescriptor = $rt_s(111);
                $method = var$11[0];
                $object = igbcacigc_MethodCallCode__init_0(igbca_APIClass_getMethod(igbca_APILoader_getOrMake($rt_s(524)), $rt_s(124), $rt_s(525)), 0, $rt_wrapArray(igbcacig_ValueReturnCode, [igbcacigc_FieldGetCode__init_(igbca_APIClass_getField(igbca_APILoader_getOrMake($rt_s(526)), $rt_s(129), $rt_s(527)), 1, null), $method]));
            } else
                try {
                    $object = igbca_APILoader_get(igbcs_Symbol_map($this.$imports0, $method));
                    $arguments = null;
                    $object = ju_AbstractList_iterator($object.$methods);
                    while (ju_AbstractList$1_hasNext($object)) {
                        $arguments0 = ju_AbstractList$1_next($object);
                        if (jl_String_equals($arguments0.$name, $rt_s(78)) && jl_String_equals(jl_String_concat($desc, $rt_s(111)), igbca_APIMethod_compileDesc($arguments0)))
                            $arguments = $arguments0;
                    }
                    if ($arguments === null)
                        $rt_throw(jl_Exception__init_0($rt_s(528)));
                    $object = igbcacigc_NewInstanceCode__init_($arguments, var$11);
                    break c;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_Exception) {
                        $arguments = new igbce_SymbolNotFoundException;
                        $object = $clazz0.$fullName;
                        $arguments0 = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_($arguments0);
                        $object = jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($arguments0, $object), $rt_s(529)), $method);
                        jl_AbstractStringBuilder_append($object, 32);
                        jl_StringBuilder_append(jl_StringBuilder_append($object, $desc), $rt_s(506));
                        jl_Throwable__init_0($arguments, jl_AbstractStringBuilder_toString($arguments0));
                        $rt_throw($arguments);
                    } else {
                        throw $$e;
                    }
                }
        }
        return $object;
    }
    if (jl_String_equals($method, $rt_s(119)))
        $method1 = igbcmc_MethodCallCompiler_findMethod($this, $clazz0, $rt_s(119), $rt_s(530));
    if ($method1 === null) {
        $object = new igbce_SymbolNotFoundException;
        $arguments = $clazz0.$fullName;
        $arguments0 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($arguments0);
        $arguments = jl_StringBuilder_append($arguments0, $arguments);
        jl_AbstractStringBuilder_append($arguments, 46);
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($arguments, $method), $desc), $rt_s(506));
        jl_Throwable__init_0($object, jl_AbstractStringBuilder_toString($arguments0));
        $rt_throw($object);
    }
    if ($instance !== null && !$method1.$isStatic0)
        ju_ArrayList_add0($arguments0, 0, $instance);
    if (!$method1.$isStatic0 && !(!($instance instanceof igbcacigp_ThisCode) && $instance !== null)) {
        $object = $this.$method3;
        if ($object.$isStatic0) {
            $method = new igbce_CompilerException;
            $arguments = $method1.$name;
            $object = $object.$name;
            $arguments0 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($arguments0);
            jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($arguments0, $rt_s(531)), $arguments), $rt_s(532)), $object), $rt_s(533));
            jl_Throwable__init_0($method, jl_AbstractStringBuilder_toString($arguments0));
            $rt_throw($method);
        }
    }
    igbcm_MethodCodeCompiler_lastCompiledStatementDescriptor = ooa_Type_getDescriptor(igbcat_Argument_compile($method1.$outputType));
    return igbcacigc_MethodCallCode__init_0($method1, $method1.$isStatic0, ju_AbstractCollection_toArray($arguments0, $rt_createArray(igbcacig_ValueReturnCode, 0)));
},
igbcmc_MethodCallCompiler_findMethod = ($this, $apiClass, $methodName, $methodDesc) => {
    let var$4, $apiMethod;
    var$4 = ju_AbstractList_iterator($apiClass.$methods);
    while (true) {
        if (!ju_AbstractList$1_hasNext(var$4)) {
            if (jl_String_equals($apiClass.$extendingClass, $rt_s(75)))
                return null;
            return igbcmc_MethodCallCompiler_findMethod($this, igbca_APILoader_get($apiClass.$extendingClass), $methodName, $methodDesc);
        }
        $apiMethod = ju_AbstractList$1_next(var$4);
        if (jl_String_equals($apiMethod.$name, $methodName) && jl_String_startsWith(igbca_APIMethod_compileDesc($apiMethod), $methodDesc))
            break;
    }
    return $apiMethod;
};
function igbcmc_FieldSetCompiler() {
    let a = this; jl_Record.call(a);
    a.$compilerUtils = null;
    a.$clazz1 = null;
    a.$imports = null;
    a.$method2 = null;
}
let igbcmc_FieldSetCompiler__init_ = ($this, $compilerUtils, $clazz, $imports, $method) => {
    $this.$compilerUtils = $compilerUtils;
    $this.$clazz1 = $clazz;
    $this.$imports = $imports;
    $this.$method2 = $method;
},
igbcmc_FieldSetCompiler__init_0 = (var_0, var_1, var_2, var_3) => {
    let var_4 = new igbcmc_FieldSetCompiler();
    igbcmc_FieldSetCompiler__init_(var_4, var_0, var_1, var_2, var_3);
    return var_4;
},
igbcmc_FieldSetCompiler_compile = ($this, $field, $value, $first) => {
    let var$4, $fieldCode, $fgc, $field1, $toSet;
    if (jl_String_contains($field, $rt_s(112))) {
        var$4 = (jl_String_split0($field, $rt_s(534), 2)).data;
        $fieldCode = igbcmc_FieldGetCompiler_compile(igbcmc_FieldGetCompiler__init_($this.$compilerUtils, $this.$clazz1, $this.$imports, $this.$method2), var$4[0], var$4[1]);
    } else {
        $fgc = $this.$method2;
        $fieldCode = !$fgc.$isStatic0 ? igbcmc_FieldGetCompiler_compile(igbcmc_FieldGetCompiler__init_($this.$compilerUtils, $this.$clazz1, $this.$imports, $fgc), $rt_s(481), $field) : igbcmc_FieldGetCompiler_compile(igbcmc_FieldGetCompiler__init_($this.$compilerUtils, $this.$clazz1, $this.$imports, $fgc), $this.$clazz1.$name0, $field);
    }
    if (!($fieldCode instanceof igbcacigc_FieldGetCode)) {
        $fgc = new igbce_CompilerException;
        $field1 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($field1);
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($field1, $rt_s(535)), $field), $rt_s(536)), $value);
        jl_Throwable__init_0($fgc, jl_AbstractStringBuilder_toString($field1));
        $rt_throw($fgc);
    }
    $field1 = igbcacigc_FieldGetCode_getField($fieldCode);
    $toSet = igbcmc_StatementCompiler_compileStatement(igbcm_MethodCodeCompiler_statementCompiler($this.$compilerUtils.$compiler0), $value, 0);
    igbcm_MethodCodeCompiler_lastCompiledStatementDescriptor = !$first ? $field1.$desc0 : $rt_s(111);
    $field = new igbcacigl_SetFieldCode;
    $field.$dup = $first ? 0 : 1;
    $field.$field = $field1;
    $field.$value9 = $toSet;
    return $field;
},
juf_IntFunction = $rt_classWithoutFields(0),
igbcm_IfStatementHandler$compile$lambda$_1_0 = $rt_classWithoutFields(),
igbcacigp_NullCode = $rt_classWithoutFields(igbcacig_ValueReturnCode);
function igbcacigl_GetArgumentCode() {
    let a = this; igbcacig_ValueReturnCode.call(a);
    a.$argumentOrdinal = 0;
    a.$isMethodStatic = 0;
    a.$argument = null;
}
let igbcacigl_GetArgumentCode__init_0 = ($this, $apiMethod, $argument) => {
    $this.$argumentOrdinal = ju_AbstractList_indexOf($apiMethod.$arguments, $argument);
    $this.$isMethodStatic = $apiMethod.$isStatic0;
    $this.$argument = $argument;
},
igbcacigl_GetArgumentCode__init_ = (var_0, var_1) => {
    let var_2 = new igbcacigl_GetArgumentCode();
    igbcacigl_GetArgumentCode__init_0(var_2, var_0, var_1);
    return var_2;
},
igbcacigp_ThisCode = $rt_classWithoutFields(igbcacig_ValueReturnCode),
jnci_AsciiCharset = $rt_classWithoutFields(jnc_Charset),
jnci_AsciiCharset_newDecoder = $this => {
    let var$1;
    var$1 = new jnci_AsciiDecoder;
    jnci_BufferedDecoder__init_(var$1, $this, 1.0, 1.0);
    return var$1;
},
jnci_Iso8859Charset = $rt_classWithoutFields(jnc_Charset),
jnci_Iso8859Charset_newDecoder = $this => {
    let var$1;
    var$1 = new jnci_Iso8859Decoder;
    jnci_BufferedDecoder__init_(var$1, $this, 1.0, 1.0);
    return var$1;
};
function jnci_UTF16Charset() {
    let a = this; jnc_Charset.call(a);
    a.$bom0 = 0;
    a.$littleEndian0 = 0;
}
let jnci_UTF16Charset__init_0 = ($this, $canonicalName, $bom, $littleEndian) => {
    jnc_Charset__init_($this, $canonicalName, $rt_createArray(jl_String, 0));
    $this.$bom0 = $bom;
    $this.$littleEndian0 = $littleEndian;
},
jnci_UTF16Charset__init_ = (var_0, var_1, var_2) => {
    let var_3 = new jnci_UTF16Charset();
    jnci_UTF16Charset__init_0(var_3, var_0, var_1, var_2);
    return var_3;
},
jnci_UTF16Charset_newDecoder = $this => {
    let var$1, var$2, var$3;
    var$1 = new jnci_UTF16Decoder;
    var$2 = $this.$bom0;
    var$3 = $this.$littleEndian0;
    jnci_BufferedDecoder__init_(var$1, $this, 0.5, 0.5);
    var$1.$bom = var$2;
    var$1.$littleEndian = var$3;
    return var$1;
},
jur_RandomGenerator = $rt_classWithoutFields(0),
ju_Random = $rt_classWithoutFields();
function igbcau_Either() {
    let a = this; jl_Object.call(a);
    a.$aInstance = null;
    a.$bInstance = null;
}
let igbcau_Either__init_2 = ($this, $a, $aa) => {
    let var$3;
    if ($a !== null) {
        $this.$aInstance = $a;
        $this.$bInstance = null;
        return;
    }
    var$3 = new jl_NullPointerException;
    jl_Throwable__init_0(var$3, $rt_s(537));
    $rt_throw(var$3);
},
igbcau_Either__init_0 = (var_0, var_1) => {
    let var_2 = new igbcau_Either();
    igbcau_Either__init_2(var_2, var_0, var_1);
    return var_2;
},
igbcau_Either__init_ = ($this, $b) => {
    let var$2;
    if ($b !== null) {
        $this.$aInstance = null;
        $this.$bInstance = $b;
        return;
    }
    var$2 = new jl_NullPointerException;
    jl_Throwable__init_0(var$2, $rt_s(537));
    $rt_throw(var$2);
},
igbcau_Either__init_1 = var_0 => {
    let var_1 = new igbcau_Either();
    igbcau_Either__init_(var_1, var_0);
    return var_1;
};
function igbca_APILoader$get$lambda$_2_0() {
    jl_Object.call(this);
    this.$_09 = null;
}
let igbca_APILoader$get$lambda$_2_0_test = (var$0, var$1) => {
    let var$2;
    var$1 = var$1;
    var$2 = var$0.$_09;
    return jl_String_equals(var$1.$fullName, var$2);
};
function ju_Optional() {
    jl_Object.call(this);
    this.$value8 = null;
}
let ju_Optional_emptyInstance = null,
ju_Optional__init_0 = ($this, $value) => {
    $this.$value8 = $value;
},
ju_Optional__init_ = var_0 => {
    let var_1 = new ju_Optional();
    ju_Optional__init_0(var_1, var_0);
    return var_1;
};
function jl_Float() {
    jl_Number.call(this);
    this.$value2 = 0.0;
}
let jl_Float_TYPE = null,
jl_Float_valueOf = $d => {
    let var$2;
    var$2 = new jl_Float;
    var$2.$value2 = $d;
    return var$2;
},
jl_Float_toString = $this => {
    let var$1, var$2;
    var$1 = $this.$value2;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    return jl_AbstractStringBuilder_toString(jl_StringBuilder_append1(var$2, var$1));
},
jl_Float_equals = ($this, $other) => {
    let var$2, var$3, var$4;
    if ($this === $other)
        return 1;
    a: {
        if ($other instanceof jl_Float) {
            var$2 = $this.$value2;
            var$3 = $other.$value2;
            if (var$2 !== var$2 ? (var$3 === var$3 ? 0 : 1) : $rt_floatToRawIntBits(var$2) != $rt_floatToRawIntBits(var$3) ? 0 : 1) {
                var$4 = 1;
                break a;
            }
        }
        var$4 = 0;
    }
    return var$4;
},
jl_Float_parseFloat = $string => {
    let $start, $end, $negative, $c, $mantissa, $exp, $mantissaPos, $hasOneDigit, var$10, $negativeExp, $numExp;
    if (jl_String_isEmpty($string)) {
        $string = new jl_NumberFormatException;
        jl_Throwable__init_($string);
        $rt_throw($string);
    }
    $start = 0;
    $end = $string.$nativeString.length;
    while (true) {
        if (jl_String_charAt($string, $start) > 32) {
            while (jl_String_charAt($string, $end - 1 | 0) <= 32) {
                $end = $end + (-1) | 0;
            }
            $negative = 0;
            if (jl_String_charAt($string, $start) == 45) {
                $start = $start + 1 | 0;
                $negative = 1;
            } else if (jl_String_charAt($string, $start) == 43)
                $start = $start + 1 | 0;
            if ($start == $end) {
                $string = new jl_NumberFormatException;
                jl_Throwable__init_($string);
                $rt_throw($string);
            }
            a: {
                $c = jl_String_charAt($string, $start);
                $mantissa = 0;
                $exp = (-1);
                $mantissaPos = 100000000;
                $hasOneDigit = 0;
                if ($c != 46) {
                    $hasOneDigit = 1;
                    if ($c >= 48 && $c <= 57) {
                        b: {
                            while ($start < $end) {
                                if (jl_String_charAt($string, $start) != 48)
                                    break b;
                                $start = $start + 1 | 0;
                            }
                        }
                        while ($start < $end) {
                            var$10 = jl_String_charAt($string, $start);
                            if (var$10 < 48)
                                break a;
                            if (var$10 > 57)
                                break a;
                            if ($mantissaPos > 0) {
                                $mantissa = $mantissa + $rt_imul($mantissaPos, var$10 - 48 | 0) | 0;
                                $mantissaPos = $rt_udiv($mantissaPos, 10);
                            }
                            $exp = $exp + 1 | 0;
                            $start = $start + 1 | 0;
                        }
                    } else {
                        $string = new jl_NumberFormatException;
                        jl_Throwable__init_($string);
                        $rt_throw($string);
                    }
                }
            }
            if ($start < $end && jl_String_charAt($string, $start) == 46) {
                $start = $start + 1 | 0;
                c: {
                    while (true) {
                        if ($start >= $end)
                            break c;
                        $c = jl_String_charAt($string, $start);
                        var$10 = $rt_compare($c, 48);
                        if (var$10 < 0)
                            break c;
                        if ($c > 57)
                            break;
                        if (!$mantissa && !var$10)
                            $exp = $exp + (-1) | 0;
                        else if ($mantissaPos > 0) {
                            $mantissa = $mantissa + $rt_imul($mantissaPos, $c - 48 | 0) | 0;
                            $mantissaPos = $rt_udiv($mantissaPos, 10);
                        }
                        $start = $start + 1 | 0;
                        $hasOneDigit = 1;
                    }
                }
                if (!$hasOneDigit) {
                    $string = new jl_NumberFormatException;
                    jl_Throwable__init_($string);
                    $rt_throw($string);
                }
            }
            if ($start < $end) {
                $c = jl_String_charAt($string, $start);
                if ($c != 101 && $c != 69) {
                    $string = new jl_NumberFormatException;
                    jl_Throwable__init_($string);
                    $rt_throw($string);
                }
                $c = $start + 1 | 0;
                $negativeExp = 0;
                if ($c == $end) {
                    $string = new jl_NumberFormatException;
                    jl_Throwable__init_($string);
                    $rt_throw($string);
                }
                if (jl_String_charAt($string, $c) == 45) {
                    $c = $c + 1 | 0;
                    $negativeExp = 1;
                } else if (jl_String_charAt($string, $c) == 43)
                    $c = $c + 1 | 0;
                $numExp = 0;
                $start = 0;
                d: {
                    while (true) {
                        if ($c >= $end)
                            break d;
                        $mantissaPos = jl_String_charAt($string, $c);
                        if ($mantissaPos < 48)
                            break d;
                        if ($mantissaPos > 57)
                            break;
                        $numExp = (10 * $numExp | 0) + ($mantissaPos - 48 | 0) | 0;
                        $start = 1;
                        $c = $c + 1 | 0;
                    }
                }
                if (!$start) {
                    $string = new jl_NumberFormatException;
                    jl_Throwable__init_($string);
                    $rt_throw($string);
                }
                if ($negativeExp)
                    $numExp =  -$numExp | 0;
                $exp = $exp + $numExp | 0;
            }
            return otcit_FloatSynthesizer_synthesizeFloat($mantissa, $exp, $negative);
        }
        $start = $start + 1 | 0;
        if ($start == $end)
            break;
    }
    $string = new jl_NumberFormatException;
    jl_Throwable__init_($string);
    $rt_throw($string);
},
jl_Float__clinit_ = () => {
    jl_Float_TYPE = $rt_cls($rt_floatcls);
};
function jl_Double() {
    jl_Number.call(this);
    this.$value5 = 0.0;
}
let jl_Double_TYPE = null,
jl_Double_valueOf = $d => {
    let var$2;
    var$2 = new jl_Double;
    var$2.$value5 = $d;
    return var$2;
},
jl_Double_parseDouble = $string => {
    let $start, $end, $negative, $c, $mantissa, $exp, $hasOneDigit, $mantissaPos, var$10, $negativeExp, $numExp;
    if (jl_String_isEmpty($string)) {
        $string = new jl_NumberFormatException;
        jl_Throwable__init_($string);
        $rt_throw($string);
    }
    $start = 0;
    $end = $string.$nativeString.length;
    while (true) {
        if (jl_String_charAt($string, $start) > 32) {
            while (jl_String_charAt($string, $end - 1 | 0) <= 32) {
                $end = $end + (-1) | 0;
            }
            $negative = 0;
            if (jl_String_charAt($string, $start) == 45) {
                $start = $start + 1 | 0;
                $negative = 1;
            } else if (jl_String_charAt($string, $start) == 43)
                $start = $start + 1 | 0;
            if ($start == $end) {
                $string = new jl_NumberFormatException;
                jl_Throwable__init_($string);
                $rt_throw($string);
            }
            a: {
                $c = jl_String_charAt($string, $start);
                $mantissa = Long_ZERO;
                $exp = (-1);
                $hasOneDigit = 0;
                $mantissaPos = Long_create(2808348672, 232830643);
                if ($c != 46) {
                    $hasOneDigit = 1;
                    if ($c >= 48 && $c <= 57) {
                        b: {
                            while ($start < $end) {
                                if (jl_String_charAt($string, $start) != 48)
                                    break b;
                                $start = $start + 1 | 0;
                            }
                        }
                        while ($start < $end) {
                            var$10 = jl_String_charAt($string, $start);
                            if (var$10 < 48)
                                break a;
                            if (var$10 > 57)
                                break a;
                            if (Long_gt($mantissaPos, Long_ZERO)) {
                                $mantissa = Long_add($mantissa, Long_mul($mantissaPos, Long_fromInt(var$10 - 48 | 0)));
                                $mantissaPos = jl_Long_divideUnsigned($mantissaPos, Long_fromInt(10));
                            }
                            $exp = $exp + 1 | 0;
                            $start = $start + 1 | 0;
                        }
                    } else {
                        $string = new jl_NumberFormatException;
                        jl_Throwable__init_($string);
                        $rt_throw($string);
                    }
                }
            }
            if ($start < $end && jl_String_charAt($string, $start) == 46) {
                $start = $start + 1 | 0;
                c: {
                    while (true) {
                        if ($start >= $end)
                            break c;
                        $c = jl_String_charAt($string, $start);
                        var$10 = $rt_compare($c, 48);
                        if (var$10 < 0)
                            break c;
                        if ($c > 57)
                            break;
                        if (Long_eq($mantissa, Long_ZERO) && !var$10)
                            $exp = $exp + (-1) | 0;
                        else if (Long_gt($mantissaPos, Long_ZERO)) {
                            $mantissa = Long_add($mantissa, Long_mul($mantissaPos, Long_fromInt($c - 48 | 0)));
                            $mantissaPos = jl_Long_divideUnsigned($mantissaPos, Long_fromInt(10));
                        }
                        $start = $start + 1 | 0;
                        $hasOneDigit = 1;
                    }
                }
                if (!$hasOneDigit) {
                    $string = new jl_NumberFormatException;
                    jl_Throwable__init_($string);
                    $rt_throw($string);
                }
            }
            if ($start < $end) {
                $c = jl_String_charAt($string, $start);
                if ($c != 101 && $c != 69) {
                    $string = new jl_NumberFormatException;
                    jl_Throwable__init_($string);
                    $rt_throw($string);
                }
                $c = $start + 1 | 0;
                $negativeExp = 0;
                if ($c == $end) {
                    $string = new jl_NumberFormatException;
                    jl_Throwable__init_($string);
                    $rt_throw($string);
                }
                if (jl_String_charAt($string, $c) == 45) {
                    $c = $c + 1 | 0;
                    $negativeExp = 1;
                } else if (jl_String_charAt($string, $c) == 43)
                    $c = $c + 1 | 0;
                $numExp = 0;
                $start = 0;
                d: {
                    while (true) {
                        if ($c >= $end)
                            break d;
                        $hasOneDigit = jl_String_charAt($string, $c);
                        if ($hasOneDigit < 48)
                            break d;
                        if ($hasOneDigit > 57)
                            break;
                        $numExp = (10 * $numExp | 0) + ($hasOneDigit - 48 | 0) | 0;
                        $start = 1;
                        $c = $c + 1 | 0;
                    }
                }
                if (!$start) {
                    $string = new jl_NumberFormatException;
                    jl_Throwable__init_($string);
                    $rt_throw($string);
                }
                if ($negativeExp)
                    $numExp =  -$numExp | 0;
                $exp = $exp + $numExp | 0;
            }
            return otcit_DoubleSynthesizer_synthesizeDouble($mantissa, $exp, $negative);
        }
        $start = $start + 1 | 0;
        if ($start == $end)
            break;
    }
    $string = new jl_NumberFormatException;
    jl_Throwable__init_($string);
    $rt_throw($string);
},
jl_Double_toString = $this => {
    let var$1, var$2;
    var$1 = $this.$value5;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_AbstractStringBuilder_insert3(var$2, var$2.$length0, var$1);
    return jl_AbstractStringBuilder_toString(var$2);
},
jl_Double_equals = ($this, $other) => {
    if ($this === $other)
        return 1;
    return $other instanceof jl_Double && $rt_equalDoubles($this.$value5, $other.$value5) ? 1 : 0;
},
jl_Double__clinit_ = () => {
    jl_Double_TYPE = $rt_cls($rt_doublecls);
},
igbcu_DefaultFunctions = $rt_classWithoutFields(),
igbcacigc_NewInstanceCode = $rt_classWithoutFields(igbcacigc_MethodCallCode),
igbcacigc_NewInstanceCode__init_0 = ($this, $method1, $array) => {
    igbcacigc_MethodCallCode__init_($this, $method1, $method1.$isStatic0, $array);
},
igbcacigc_NewInstanceCode__init_ = (var_0, var_1) => {
    let var_2 = new igbcacigc_NewInstanceCode();
    igbcacigc_NewInstanceCode__init_0(var_2, var_0, var_1);
    return var_2;
},
otcit_FloatSynthesizer = $rt_classWithoutFields(),
otcit_FloatSynthesizer_mantissa10Table = null,
otcit_FloatSynthesizer_exp10Table = null,
otcit_FloatSynthesizer_synthesizeFloat = ($mantissa, $exp, $negative) => {
    let $indexInTable, var$5, $binMantissa, $binExp, $binMantissaShift, $iee754;
    $indexInTable = 50 + $exp | 0;
    if ($mantissa && $indexInTable >= 0) {
        var$5 = otcit_FloatSynthesizer_mantissa10Table.data;
        if ($indexInTable >= var$5.length)
            return !$negative ? Infinity : (-Infinity);
        $binMantissa = otcit_FloatAnalyzer_mulAndShiftRight($mantissa, var$5[$indexInTable], 0);
        $binExp = otcit_FloatSynthesizer_exp10Table.data[$indexInTable] - 1 | 0;
        $binMantissaShift = (32 - jl_Integer_numberOfLeadingZeros($binMantissa) | 0) - 30 | 0;
        $mantissa = $binMantissaShift >= 0 ? $binMantissa >>> $binMantissaShift | 0 : $binMantissa << ( -$binMantissaShift | 0);
        $exp = $binExp + $binMantissaShift | 0;
        if ($exp >= 255)
            return !$negative ? Infinity : (-Infinity);
        $mantissa = $mantissa + 32 | 0;
        if ($mantissa & (-1073741824)) {
            $mantissa = $mantissa >>> 1 | 0;
            $exp = $exp + 1 | 0;
        }
        if ($exp <= 0) {
            $mantissa = $mantissa >> jl_Math_min(( -$exp | 0) + 1 | 0, 32);
            $exp = 0;
        }
        $iee754 = ($mantissa >>> 6 | 0) & 8388607 | $exp << 23;
        if ($negative)
            $iee754 = $iee754 ^ (-2147483648);
        return $rt_intBitsToFloat($iee754);
    }
    return $rt_intBitsToFloat(!$negative ? 0 : (-2147483648));
},
otcit_FloatSynthesizer__clinit_ = () => {
    otcit_FloatSynthesizer_mantissa10Table = $rt_createIntArrayFromData([(-1598972629), (-924973963), (-82475629), (-1662160004), (-1003958181), (-181205903), (-1723866425), (-1081091207), (-277622185), (-1784126602), (-1156416428), (-371778711), (-1842974431), (-1229976214), (-463728444), (-1900443013), (-1301811943), (-553523104), (-1956564676), (-1371964021), (-641213203), (-2011370988), (-1440471911), (-726848064), (-2064892776), (-1507374146), (-810475859), (-2117160148), (-1572708361), (-892143627), (-41437709),
    (-1636511304), (-971897307), (-141129809), (-1698818867), (-1049781759), (-238485375), (-1759666096), (-1125840795), (-333559170), (-1819087217), (-1200117198), (-426404673), (-1877115657), (-1272652747), (-517074110), (-1933784055), (-1343488244), (-605618481), (-1989124287), (-1412663534), (-692087594), (-2043167482), (-1480217529), (-776530087), (-2095944040), (-1546188227), (-858993459), (-2147483648), (-1610612736), (-939524096), (-100663296), (-1673527296), (-1018167296), (-198967296), (-1734967296),
    (-1094967296), (-294967296), (-1794967296), (-1169967296), (-388717296), (-1853561046), (-1243209483), (-480270030), (-1910781505), (-1314735057), (-569676998), (-1966660859), (-1384584250), (-656988489), (-2021230542), (-1452796353), (-742253617), (-2074521247), (-1519409734), (-825520344), (-2126562951), (-1584461865), (-906835507), (-59802560), (-1647989336), (-986244846), (-159064233), (-1710027882), (-1063793028), (-255999461), (-1770612399), (-1139523675), (-350662770), (-1829776967)]);
    otcit_FloatSynthesizer_exp10Table = $rt_createIntArrayFromData([(-35), (-32), (-29), (-25), (-22), (-19), (-15), (-12), (-9), (-5), (-2), 1, 5, 8, 11, 15, 18, 21, 25, 28, 31, 35, 38, 41, 45, 48, 51, 55, 58, 61, 64, 68, 71, 74, 78, 81, 84, 88, 91, 94, 98, 101, 104, 108, 111, 114, 118, 121, 124, 128, 131, 134, 138, 141, 144, 148, 151, 154, 158, 161, 164, 167, 171, 174, 177, 181, 184, 187, 191, 194, 197, 201, 204, 207, 211, 214, 217, 221, 224, 227, 231, 234, 237, 241, 244, 247, 251, 254, 257, 260, 264, 267,
    270, 274, 277, 280, 284, 287, 290, 294]);
},
otcit_DoubleSynthesizer = $rt_classWithoutFields(),
otcit_DoubleSynthesizer_mantissa10Table = null,
otcit_DoubleSynthesizer_exp10Table = null,
otcit_DoubleSynthesizer_synthesizeDouble = ($mantissa, $exp, $negative) => {
    let $indexInTable, var$5, $binMantissa, $binExp, $binMantissaShift, $low, $iee754, $binMantissaWithoutError, $error, $correction, $cmp;
    $indexInTable = 330 + $exp | 0;
    if (Long_ne($mantissa, Long_ZERO) && $indexInTable >= 0) {
        var$5 = otcit_DoubleSynthesizer_mantissa10Table.data;
        if ($indexInTable >= var$5.length)
            return !$negative ? Infinity : (-Infinity);
        $binMantissa = otcit_DoubleAnalyzer_mulAndShiftRight($mantissa, var$5[$indexInTable], 0);
        $binExp = otcit_DoubleSynthesizer_exp10Table.data[$indexInTable];
        if (Long_eq($binMantissa, Long_ZERO))
            $exp = 64;
        else {
            $binMantissaShift = 0;
            $low = Long_shru($binMantissa, 32);
            if (Long_ne($low, Long_ZERO))
                $binMantissaShift = 32;
            else
                $low = $binMantissa;
            $iee754 = Long_shru($low, 16);
            if (Long_eq($iee754, Long_ZERO))
                $iee754 = $low;
            else
                $binMantissaShift = $binMantissaShift | 16;
            $binMantissaWithoutError = Long_shru($iee754, 8);
            if (Long_eq($binMantissaWithoutError, Long_ZERO))
                $binMantissaWithoutError = $iee754;
            else
                $binMantissaShift = $binMantissaShift | 8;
            $iee754 = Long_shru($binMantissaWithoutError, 4);
            if (Long_eq($iee754, Long_ZERO))
                $iee754 = $binMantissaWithoutError;
            else
                $binMantissaShift = $binMantissaShift | 4;
            $binMantissaWithoutError = Long_shru($iee754, 2);
            if (Long_eq($binMantissaWithoutError, Long_ZERO))
                $binMantissaWithoutError = $iee754;
            else
                $binMantissaShift = $binMantissaShift | 2;
            if (Long_ne(Long_shru($binMantissaWithoutError, 1), Long_ZERO))
                $binMantissaShift = $binMantissaShift | 1;
            $exp = (64 - $binMantissaShift | 0) - 1 | 0;
        }
        $binMantissaShift = (64 - $exp | 0) - 58 | 0;
        $iee754 = $binMantissaShift >= 0 ? Long_shru($binMantissa, $binMantissaShift) : Long_shl($binMantissa,  -$binMantissaShift | 0);
        $exp = $binExp + $binMantissaShift | 0;
        if ($exp >= 2047)
            return !$negative ? Infinity : (-Infinity);
        $error = Long_lo(Long_and($iee754, Long_fromInt(31)));
        $correction = 16;
        $binMantissaShift = $error - 16 | 0;
        if ($binMantissaShift < 0)
            $binMantissaShift =  -$binMantissaShift | 0;
        if ($binMantissaShift <= 1) {
            $binMantissaWithoutError = Long_and($iee754, Long_fromInt(-32));
            $cmp = jl_Long_compareUnsigned(Long_sub($mantissa, otcit_DoubleSynthesizer_calcDecMantissa($binMantissaWithoutError, 32, $indexInTable, $exp)), Long_sub(otcit_DoubleSynthesizer_calcDecMantissa(Long_add($binMantissaWithoutError, Long_fromInt(32)), 32, $indexInTable, $exp), $mantissa));
            if ($cmp < 0)
                $correction =  -$error | 0;
            else if ($cmp > 0)
                $correction = 32 - $error | 0;
        }
        $mantissa = Long_add($iee754, Long_fromInt($correction));
        if (Long_ne(Long_and($mantissa, Long_create(0, 4227858432)), Long_ZERO)) {
            $mantissa = Long_shru($mantissa, 1);
            $exp = $exp + 1 | 0;
        }
        if ($exp <= 0) {
            $mantissa = Long_shr($mantissa, jl_Math_min(( -$exp | 0) + 1 | 0, 64));
            $exp = 0;
        }
        $iee754 = Long_or(Long_and(Long_shru($mantissa, 5), Long_create(4294967295, 1048575)), Long_shl(Long_fromInt($exp), 52));
        if ($negative)
            $iee754 = Long_xor($iee754, Long_create(0, 2147483648));
        return $rt_longBitsToDouble($iee754);
    }
    return $rt_longBitsToDouble((!$negative ? Long_ZERO : Long_create(0, 2147483648)));
},
otcit_DoubleSynthesizer_calcDecMantissa = ($mantissa, $lowerBit, $indexInTable, $binExp) => {
    let $half, $shift, $decMantissa, $lowerPos, $decMantissaHi, $upperPos, $posCmp;
    $half = $lowerBit >>> 1 | 0;
    $shift = 7 - (otcit_DoubleAnalyzer_exp10Table.data[$indexInTable] - $binExp | 0) | 0;
    $decMantissa = otcit_DoubleAnalyzer_mulAndShiftRight($mantissa, otcit_DoubleAnalyzer_mantissa10Table.data[$indexInTable], $shift);
    $lowerPos = Long_fromInt($half);
    $decMantissaHi = otcit_DoubleAnalyzer_mulAndShiftRight(Long_add($mantissa, $lowerPos), otcit_DoubleAnalyzer_mantissa10Table.data[$indexInTable], $shift);
    $lowerPos = otcit_DoubleAnalyzer_findLowerDistance($decMantissa, otcit_DoubleAnalyzer_mulAndShiftRight(Long_sub($mantissa, $lowerPos), otcit_DoubleAnalyzer_mantissa10Table.data[$indexInTable], $shift));
    $upperPos = otcit_DoubleAnalyzer_findUpperDistance($decMantissa, $decMantissaHi);
    $posCmp = jl_Long_compareUnsigned($lowerPos, $upperPos);
    return $posCmp > 0 ? Long_mul(jl_Long_divideUnsigned($decMantissa, $lowerPos), $lowerPos) : $posCmp < 0 ? Long_add(Long_mul(jl_Long_divideUnsigned($decMantissa, $upperPos), $upperPos), $upperPos) : Long_mul(jl_Long_divideUnsigned(Long_add($decMantissa, Long_div($upperPos, Long_fromInt(2))), $upperPos), $upperPos);
},
otcit_DoubleSynthesizer__clinit_ = () => {
    otcit_DoubleSynthesizer_mantissa10Table = $rt_createLongArrayFromData([Long_create(136053384, 4203730336), Long_create(85033365, 2627331460), Long_create(106291706, 3284164325), Long_create(1206606457, 4105205406), Long_create(3975354508, 2565753378), Long_create(2821709486, 3207191723), Long_create(2453395034, 4008989654), Long_create(459630072, 2505618534), Long_create(2722021238, 3132023167), Long_create(2328784724, 3915028959), Long_create(3066103188, 2446893099), Long_create(2758887162, 3058616374),
    Long_create(1301125304, 3823270468), Long_create(2960686963, 2389544042), Long_create(1553375056, 2986930053), Long_create(3015460644, 3733662566), Long_create(810921078, 2333539104), Long_create(1013651348, 2916923880), Long_create(1267064185, 3646154850), Long_create(1865656940, 2278846781), Long_create(3405812998, 2848558476), Long_create(4257266248, 3560698095), Long_create(4271404141, 2225436309), Long_create(2118029704, 2781795387), Long_create(1573795306, 3477244234), Long_create(2057363890, 2173277646),
    Long_create(424221215, 2716597058), Long_create(2677760167, 3395746322), Long_create(1199716561, 4244682903), Long_create(2360435586, 2652926814), Long_create(803060835, 3316158518), Long_create(3151309692, 4145198147), Long_create(1432697645, 2590748842), Long_create(3938355705, 3238436052), Long_create(627977335, 4048045066), Long_create(1466227658, 2530028166), Long_create(3980268221, 3162535207), Long_create(3901593452, 3953169009), Long_create(827883171, 2470730631), Long_create(4256079436, 3088413288),
    Long_create(1025131999, 3860516611), Long_create(103836588, 2412822882), Long_create(2277279383, 3016028602), Long_create(699115580, 3770035753), Long_create(3121301798, 2356272345), Long_create(680401775, 2945340432), Long_create(850502219, 3681675540), Long_create(2679047535, 2301047212), Long_create(3348809418, 2876309015), Long_create(3112269949, 3595386269), Long_create(2482039630, 2247116418), Long_create(955065890, 2808895523), Long_create(120090538, 3511119404), Long_create(2222540234, 2194449627),
    Long_create(1704433469, 2743062034), Long_create(4278025484, 3428827542), Long_create(3200048207, 4286034428), Long_create(4147513777, 2678771517), Long_create(1963166750, 3348464397), Long_create(3527700261, 4185580496), Long_create(2204812663, 2615987810), Long_create(608532181, 3269984763), Long_create(3981890698, 4087480953), Long_create(878068951, 2554675596), Long_create(1097586188, 3193344495), Long_create(298240911, 3991680619), Long_create(3944496953, 2494800386), Long_create(2783137544, 3118500483),
    Long_create(2405180106, 3898125604), Long_create(3650721214, 2436328502), Long_create(2415917870, 3045410628), Long_create(3019897337, 3806763285), Long_create(2424306748, 2379227053), Long_create(4104125259, 2974033816), Long_create(835189277, 3717542271), Long_create(2132606034, 2323463919), Long_create(1592015719, 2904329899), Long_create(916277825, 3630412374), Long_create(3793899112, 2269007733), Long_create(1521148418, 2836259667), Long_create(827693699, 3545324584), Long_create(517308562, 2215827865),
    Long_create(1720377526, 2769784831), Long_create(1076730084, 3462231039), Long_create(2283569038, 2163894399), Long_create(1780719474, 2704867999), Long_create(1152157519, 3381084999), Long_create(366455074, 4226356249), Long_create(2913388981, 2641472655), Long_create(2567994403, 3301840819), Long_create(2136251179, 4127301024), Long_create(1335156987, 2579563140), Long_create(1668946234, 3224453925), Long_create(3159924616, 4030567406), Long_create(901211061, 2519104629), Long_create(2200255651, 3148880786),
    Long_create(602835915, 3936100983), Long_create(1987385183, 2460063114), Long_create(336747831, 3075078893), Long_create(1494676613, 3843848616), Long_create(934172883, 2402405385), Long_create(2241457928, 3003006731), Long_create(1728080585, 3753758414), Long_create(6308542, 2346099009), Long_create(1081627501, 2932623761), Long_create(2425776201, 3665779701), Long_create(2052981037, 2291112313), Long_create(3639968121, 2863890391), Long_create(3476218327, 3579862989), Long_create(2709507366, 2237414368),
    Long_create(3386884208, 2796767960), Long_create(4233605260, 3495959950), Long_create(1572261463, 2184974969), Long_create(3039068653, 2731218711), Long_create(2725093993, 3414023389), Long_create(185142019, 4267529237), Long_create(652584674, 2667205773), Long_create(1889472666, 3334007216), Long_create(2361840833, 4167509020), Long_create(3623634168, 2604693137), Long_create(1308317239, 3255866422), Long_create(3782880196, 4069833027), Long_create(1827429211, 2543645642), Long_create(136802865, 3179557053),
    Long_create(1244745406, 3974446316), Long_create(2925449527, 2484028947), Long_create(2583070084, 3105036184), Long_create(3228837605, 3881295230), Long_create(944281679, 2425809519), Long_create(106610275, 3032261899), Long_create(3354488316, 3790327373), Long_create(2633426109, 2368954608), Long_create(3291782637, 2961193260), Long_create(4114728296, 3701491575), Long_create(4182317921, 2313432234), Long_create(3080413753, 2891790293), Long_create(629291719, 3614737867), Long_create(4151403709, 2259211166),
    Long_create(3041770988, 2824013958), Long_create(1654730087, 3530017448), Long_create(1034206304, 2206260905), Long_create(2366499704, 2757826131), Long_create(1884382806, 3447282664), Long_create(1177739254, 2154551665), Long_create(2545915892, 2693189581), Long_create(4256136688, 3366486976), Long_create(1025203564, 4208108721), Long_create(3325106788, 2630067950), Long_create(2008899837, 3287584938), Long_create(363641148, 4109481173), Long_create(764146629, 2568425733), Long_create(2028925111, 3210532166),
    Long_create(388672741, 4013165208), Long_create(242920463, 2508228255), Long_create(3524876051, 3135285318), Long_create(2258611415, 3919106648), Long_create(1411632134, 2449441655), Long_create(690798344, 3061802069), Long_create(1937239754, 3827252586), Long_create(2284516670, 2392032866), Long_create(708162190, 2990041083), Long_create(4106428209, 3737551353), Long_create(955904895, 2335969596), Long_create(1194881119, 2919961995), Long_create(419859574, 3649952494), Long_create(3483637706, 2281220308),
    Long_create(59579836, 2851525386), Long_create(2221958443, 3564406732), Long_create(3536207675, 2227754207), Long_create(3346517770, 2784692759), Long_create(3109405388, 3480865949), Long_create(2480249280, 2175541218), Long_create(952827952, 2719426523), Long_create(117293116, 3399283154), Long_create(2294100043, 4249103942), Long_create(360070703, 2655689964), Long_create(450088378, 3319612455), Long_create(3783835945, 4149515568), Long_create(2364897466, 2593447230), Long_create(808638184, 3241809038),
    Long_create(3158281378, 4052261297), Long_create(363313125, 2532663311), Long_create(3675366878, 3165829138), Long_create(2446724950, 3957286423), Long_create(3139815830, 2473304014), Long_create(1777286139, 3091630018), Long_create(74124026, 3864537523), Long_create(3804423900, 2415335951), Long_create(3681788051, 3019169939), Long_create(3528493240, 3773962424), Long_create(2205308275, 2358726515), Long_create(1682893520, 2948408144), Long_create(2103616900, 3685510180), Long_create(3462244210, 2303443862),
    Long_create(2180321615, 2879304828), Long_create(2725402019, 3599131035), Long_create(1166505350, 2249456897), Long_create(2531873511, 2811821121), Long_create(4238583713, 3514776401), Long_create(1038502085, 2196735251), Long_create(224385782, 2745919064), Long_create(280482227, 3432398830), Long_create(2498086432, 4290498537), Long_create(4245658580, 2681561585), Long_create(2085847753, 3351951982), Long_create(459826043, 4189939978), Long_create(1361133101, 2618712486), Long_create(3848900024, 3273390607),
    Long_create(3737383206, 4091738259), Long_create(1798993592, 2557336412), Long_create(2248741990, 3196670515), Long_create(1737185663, 3995838144), Long_create(1085741040, 2497398840), Long_create(1357176300, 3121748550), Long_create(3843954022, 3902185687), Long_create(4013084000, 2438866054), Long_create(2868871352, 3048582568), Long_create(3586089190, 3810728210), Long_create(3315047568, 2381705131), Long_create(3070067636, 2977131414), Long_create(1690100897, 3721414268), Long_create(3203796708, 2325883917),
    Long_create(783520414, 2907354897), Long_create(2053142341, 3634193621), Long_create(1820084875, 2271371013), Long_create(3348847918, 2839213766), Long_create(2038576249, 3549017208), Long_create(1274110156, 2218135755), Long_create(518895871, 2772669694), Long_create(2796103486, 3465837117), Long_create(2284435591, 2166148198), Long_create(708060841, 2707685248), Long_create(885076051, 3384606560), Long_create(1106345064, 4230758200), Long_create(691465665, 2644223875), Long_create(4085557553, 3305279843),
    Long_create(4033205117, 4131599804), Long_create(373269550, 2582249878), Long_create(2614070586, 3227812347), Long_create(2193846408, 4034765434), Long_create(2444895829, 2521728396), Long_create(3056119787, 3152160495), Long_create(2746407909, 3940200619), Long_create(1179634031, 2462625387), Long_create(400800715, 3078281734), Long_create(2648484542, 3847852167), Long_create(3265915575, 2404907604), Long_create(4082394468, 3006134505), Long_create(1881767613, 3757668132), Long_create(3323588406, 2348542582),
    Long_create(2007001860, 2935678228), Long_create(2508752325, 3669597785), Long_create(4252324763, 2293498615), Long_create(4241664130, 2866873269), Long_create(2080854690, 3583591587), Long_create(763663269, 2239744742), Long_create(3102062735, 2799680927), Long_create(2803836594, 3499601159), Long_create(3363010608, 2187250724), Long_create(4203763259, 2734063405), Long_create(2033478602, 3417579257), Long_create(3615590077, 4271974071), Long_create(3870356534, 2669983794), Long_create(2690462020, 3337479743),
    Long_create(2289335700, 4171849679), Long_create(3041447549, 2607406049), Long_create(580583964, 3259257562), Long_create(2873213603, 4074071952), Long_create(1795758502, 2546294970), Long_create(97214479, 3182868713), Long_create(1195259923, 3978585891), Long_create(210166540, 2486616182), Long_create(2410191823, 3108270227), Long_create(1938997955, 3885337784), Long_create(1211873722, 2428336115), Long_create(441100328, 3035420144), Long_create(551375410, 3794275180), Long_create(2492093279, 2371421987),
    Long_create(2041374775, 2964277484), Long_create(2551718469, 3705346855), Long_create(3205436779, 2315841784), Long_create(4006795974, 2894802230), Long_create(2861011319, 3618502788), Long_create(3935615723, 2261564242), Long_create(2772036005, 2826955303), Long_create(2391303183, 3533694129), Long_create(4178919049, 2208558830), Long_create(3076165163, 2760698538), Long_create(1697722806, 3450873173), Long_create(1597947666, 2156795733), Long_create(3071176406, 2695994666), Long_create(1691486860, 3369993333),
    Long_create(3188100399, 4212491666), Long_create(3066304573, 2632807291), Long_create(2759138893, 3291009114), Long_create(1301439968, 4113761393), Long_create(3497754540, 2571100870), Long_create(2224709527, 3213876088), Long_create(2780886909, 4017345110), Long_create(664312494, 2510840694), Long_create(2977874265, 3138550867), Long_create(2648601008, 3923188584), Long_create(1655375630, 2451992865), Long_create(3142961361, 3064991081), Long_create(707476230, 3831238852), Long_create(2589656291, 2394524282),
    Long_create(1089586716, 2993155353), Long_create(2435725219, 3741444191), Long_create(3132940998, 2338402619), Long_create(2842434424, 2923003274), Long_create(1405559382, 3653754093), Long_create(1415345525, 2283596308), Long_create(1769181907, 2854495385), Long_create(3285219208, 3568119231), Long_create(3663874741, 2230074519), Long_create(3506101602, 2787593149), Long_create(1161401530, 3484491437), Long_create(1262746869, 2177807148), Long_create(1578433586, 2722258935), Long_create(899300158, 3402823669),
    Long_create(2197867022, 4253529586), Long_create(2447408712, 2658455991), Long_create(1985519067, 3323069989), Long_create(3555640657, 4153837486), Long_create(1148533587, 2596148429), Long_create(2509408807, 3245185536), Long_create(3136761009, 4056481920), Long_create(1960475631, 2535301200), Long_create(2450594539, 3169126500), Long_create(3063243173, 3961408125), Long_create(2451397895, 2475880078), Long_create(916763721, 3094850098), Long_create(3293438299, 3868562622), Long_create(984657113, 2417851639),
    Long_create(157079567, 3022314549), Long_create(1270091283, 3777893186), Long_create(1867548876, 2361183241), Long_create(3408177919, 2951479051), Long_create(3186480575, 3689348814), Long_create(917808535, 2305843009), Long_create(2221002493, 2882303761), Long_create(3849994940, 3602879701), Long_create(2943117750, 2251799813), Long_create(457671715, 2814749767), Long_create(3793315116, 3518437208), Long_create(2370821947, 2199023255), Long_create(1889785610, 2748779069), Long_create(3435973837, 3435973836),
    Long_create(0, 2147483648), Long_create(0, 2684354560), Long_create(0, 3355443200), Long_create(0, 4194304000), Long_create(0, 2621440000), Long_create(0, 3276800000), Long_create(0, 4096000000), Long_create(0, 2560000000), Long_create(0, 3200000000), Long_create(0, 4000000000), Long_create(0, 2500000000), Long_create(0, 3125000000), Long_create(0, 3906250000), Long_create(0, 2441406250), Long_create(2147483648, 3051757812), Long_create(2684354560, 3814697265), Long_create(67108864, 2384185791), Long_create(3305111552, 2980232238),
    Long_create(1983905792, 3725290298), Long_create(2313682944, 2328306436), Long_create(2892103680, 2910383045), Long_create(393904128, 3637978807), Long_create(1856802816, 2273736754), Long_create(173519872, 2842170943), Long_create(3438125312, 3552713678), Long_create(1075086496, 2220446049), Long_create(2417599944, 2775557561), Long_create(4095741754, 3469446951), Long_create(4170451332, 2168404344), Long_create(918096869, 2710505431), Long_create(73879263, 3388131789), Long_create(1166090902, 4235164736),
    Long_create(728806814, 2646977960), Long_create(911008517, 3308722450), Long_create(3286244295, 4135903062), Long_create(980160860, 2584939414), Long_create(3372684723, 3231174267), Long_create(3142114080, 4038967834), Long_create(3037563124, 2524354896), Long_create(3796953905, 3155443620), Long_create(451225085, 3944304526), Long_create(3503241150, 2465190328), Long_create(84084142, 3081487911), Long_create(3326330649, 3851859888), Long_create(2078956656, 2407412430), Long_create(451212172, 3009265538),
    Long_create(2711498863, 3761581922), Long_create(2768428613, 2350988701), Long_create(239310295, 2938735877), Long_create(1372879692, 3673419846), Long_create(4079275280, 2295887403), Long_create(4025352276, 2869859254), Long_create(2884206696, 3587324068), Long_create(3950112833, 2242077542), Long_create(2790157394, 2802596928), Long_create(3487696742, 3503246160), Long_create(2179810464, 2189528850), Long_create(577279432, 2736911063), Long_create(3942824762, 3421138828), Long_create(633563656, 4276423536),
    Long_create(395977285, 2672764710), Long_create(2642455254, 3340955887), Long_create(2229327244, 4176194859), Long_create(856458615, 2610121787), Long_create(4291798741, 3262652233), Long_create(2143522955, 4078315292), Long_create(3487185495, 2548947057), Long_create(1137756396, 3186183822), Long_create(3569679143, 3982729777), Long_create(620436729, 2489206111), Long_create(3996771383, 3111507638), Long_create(2848480580, 3889384548), Long_create(3927784011, 2430865342), Long_create(2762246365, 3038581678),
    Long_create(1305324309, 3798227098), Long_create(1889569517, 2373891936), Long_create(2361961896, 2967364920), Long_create(2952452370, 3709206150), Long_create(771540907, 2318253844), Long_create(964426134, 2897817305), Long_create(2279274492, 3622271631), Long_create(3035159293, 2263919769), Long_create(572723645, 2829899712), Long_create(715904556, 3537374640), Long_create(447440347, 2210859150), Long_create(2706784082, 2763573937), Long_create(162254631, 3454467422), Long_create(3322634616, 2159042138),
    Long_create(2005809622, 2698802673), Long_create(3581003852, 3373503341), Long_create(1255029343, 4216879177), Long_create(3468747899, 2635549485), Long_create(1114709402, 3294436857), Long_create(2467128577, 4118046071), Long_create(3152568096, 2573778794), Long_create(1793226473, 3217223493), Long_create(3315274915, 4021529366), Long_create(998304998, 2513455854), Long_create(3395364895, 3141819817), Long_create(1022980647, 3927274772), Long_create(2786846552, 2454546732), Long_create(3483558190, 3068183415),
    Long_create(3280705914, 3835229269), Long_create(2587312108, 2397018293), Long_create(12914663, 2996272867), Long_create(3237368801, 3745341083), Long_create(1486484589, 2340838177), Long_create(2931847560, 2926047721), Long_create(443583978, 3657559652), Long_create(2424723634, 2285974782), Long_create(883420895, 2857468478), Long_create(3251759766, 3571835597), Long_create(2569220766, 2232397248), Long_create(3211525958, 2790496560), Long_create(4014407447, 3488120700), Long_create(361521006, 2180075438),
    Long_create(2599384906, 2725094297), Long_create(28005660, 3406367872), Long_create(35007075, 4257959840), Long_create(21879422, 2661224900), Long_create(27349278, 3326531125), Long_create(1107928421, 4158163906), Long_create(1766197087, 2598852441), Long_create(3281488183, 3248565551), Long_create(3028118405, 4060706939), Long_create(1355703091, 2537941837), Long_create(2768370688, 3172427296), Long_create(3460463360, 3965534120), Long_create(2162789600, 2478458825), Long_create(3777228824, 3098073531),
    Long_create(3647794206, 3872591914), Long_create(3353613203, 2420369946), Long_create(2044532855, 3025462433), Long_create(3629407893, 3781828041), Long_create(657767197, 2363642526), Long_create(2969692644, 2954553157), Long_create(490890333, 3693191447), Long_create(1917419194, 2308244654), Long_create(249290345, 2885305818), Long_create(2459096579, 3606632272), Long_create(1536935362, 2254145170), Long_create(4068652851, 2817681462), Long_create(2938332415, 3522101828), Long_create(3983941407, 2201313642),
    Long_create(2832443111, 2751642053), Long_create(319328417, 3439552567), Long_create(1810192997, 2149720354), Long_create(115257598, 2687150443), Long_create(3365297469, 3358938053), Long_create(985396365, 4198672567), Long_create(2226485464, 2624170354), Long_create(635623182, 3280212943), Long_create(4015754449, 4100266178), Long_create(3583588355, 2562666361), Long_create(1258259972, 3203332952), Long_create(1572824965, 4004166190), Long_create(4204241075, 2502603868), Long_create(960334048, 3128254836),
    Long_create(1200417559, 3910318545), Long_create(3434615535, 2443949090), Long_create(2145785770, 3054936363), Long_create(1608490389, 3818670454), Long_create(4226531965, 2386669033), Long_create(2061939484, 2983336292), Long_create(2577424355, 3729170365), Long_create(2147761134, 2330731478), Long_create(537217770, 2913414348), Long_create(671522212, 3641767935), Long_create(2030314119, 2276104959), Long_create(1464150824, 2845131199), Long_create(756446706, 3556413999), Long_create(2083391927, 2222758749),
    Long_create(3677981733, 2778448436), Long_create(302509871, 3473060546), Long_create(1262810493, 2170662841), Long_create(2652254940, 2713328551), Long_create(2241576851, 3391660689), Long_create(3875712888, 4239575861), Long_create(2959191467, 2649734913), Long_create(477763862, 3312168642), Long_create(2744688476, 4140210802), Long_create(2789172121, 2587631751), Long_create(2412723328, 3234539689), Long_create(4089645983, 4043174611), Long_create(2019157828, 2526984132), Long_create(2523947285, 3158730165),
    Long_create(4228675930, 3948412706), Long_create(3716664280, 2467757941), Long_create(1424604878, 3084697427), Long_create(707014274, 3855871784), Long_create(441883921, 2409919865), Long_create(1626096725, 3012399831), Long_create(958879083, 3765499789), Long_create(1136170339, 2353437368), Long_create(1420212923, 2941796710), Long_create(3922749802, 3677245887), Long_create(4062331362, 2298278679), Long_create(4004172379, 2872848349), Long_create(1783990002, 3591060437), Long_create(1651864663, 2244412773),
    Long_create(3138572653, 2805515966), Long_create(1775732168, 3506894958), Long_create(36090781, 2191809349), Long_create(1118855300, 2739761686), Long_create(3546052773, 3424702107), Long_create(3358824142, 4280877634), Long_create(3173006913, 2675548521), Long_create(745033169, 3344435652), Long_create(931291462, 4180544565), Long_create(1118928076, 2612840353), Long_create(2472401918, 3266050441), Long_create(4164244222, 4082563051), Long_create(2065781727, 2551601907), Long_create(1508485334, 3189502384),
    Long_create(1885606668, 3986877980), Long_create(3325987816, 2491798737), Long_create(936259297, 3114748422), Long_create(3317807770, 3893435527), Long_create(3684242592, 2433397204), Long_create(310335944, 3041746506), Long_create(2535403578, 3802183132), Long_create(3732110884, 2376364457), Long_create(1443913133, 2970455572), Long_create(1804891417, 3713069465), Long_create(3812411696, 2320668415), Long_create(3691772795, 2900835519), Long_create(3540974170, 3626044399), Long_create(3823721592, 2266277749),
    Long_create(1558426518, 2832847187), Long_create(874291324, 3541058984), Long_create(546432078, 2213161865), Long_create(1756781921, 2766452331), Long_create(1122235577, 3458065414), Long_create(3922622708, 2161290883), Long_create(3829536561, 2701613604), Long_create(491953405, 3377017006), Long_create(2762425404, 4221271257), Long_create(115903142, 2638294536), Long_create(144878927, 3297868170), Long_create(2328582307, 4122335212), Long_create(3602847590, 2576459507), Long_create(3429817663, 3220574384),
    Long_create(4287272079, 4025717980), Long_create(532061401, 2516073738), Long_create(2812560400, 3145092172), Long_create(3515700500, 3931365215), Long_create(3807925548, 2457103259), Long_create(3686165111, 3071379074), Long_create(2460222741, 3839223843), Long_create(1000768301, 2399514902), Long_create(3398444024, 2999393627), Long_create(3174313207, 3749242034), Long_create(3057687578, 2343276271), Long_create(2748367649, 2929095339), Long_create(2361717737, 3661369174), Long_create(402331761, 2288355734),
    Long_create(2650398350, 2860444667), Long_create(2239256113, 3575555834), Long_create(2473276895, 2234722396), Long_create(3091596119, 2793402995), Long_create(2790753324, 3491753744), Long_create(1744220828, 2182346090), Long_create(32792387, 2727932613), Long_create(1114732307, 3409915766), Long_create(3540899032, 4262394707), Long_create(1676190983, 2663996692), Long_create(2095238729, 3329995865), Long_create(3692790235, 4162494831), Long_create(3918606633, 2601559269), Long_create(1677032819, 3251949087),
    Long_create(1022549200, 4064936359), Long_create(2249705986, 2540585224), Long_create(2812132482, 3175731530), Long_create(1367681955, 3969664413), Long_create(1391672134, 2481040258), Long_create(3887073815, 3101300322), Long_create(2711358621, 3876625403), Long_create(1157728226, 2422890877), Long_create(2520902107, 3028613596), Long_create(3151127633, 3785766995), Long_create(1432583859, 2366104372), Long_create(1790729824, 2957630465), Long_create(3312154103, 3697038081), Long_create(459483579, 2310648801),
    Long_create(1648096297, 2888311001), Long_create(3133862196, 3610388751), Long_create(3569276608, 2256492969), Long_create(1240370288, 2820616212), Long_create(1550462860, 3525770265), Long_create(3653393848, 2203606415), Long_create(3493000486, 2754508019), Long_create(3292508783, 3443135024), Long_create(2057817989, 2151959390), Long_create(424788839, 2689949238), Long_create(2678469697, 3362436547), Long_create(2274345297, 4203045684), Long_create(3568949458, 2626903552), Long_create(166219527, 3283629441),
    Long_create(1281516233, 4104536801), Long_create(3485302206, 2565335500), Long_create(61660461, 3206669376), Long_create(77075576, 4008336720), Long_create(48172235, 2505210450), Long_create(2207698942, 3131513062), Long_create(612140029, 3914391328), Long_create(382587518, 2446494580), Long_create(478234398, 3058118225), Long_create(1671534821, 3822647781), Long_create(1581580175, 2389154863), Long_create(903233395, 2986443579), Long_create(55299920, 3733054474), Long_create(1108304274, 2333159046)]);
    otcit_DoubleSynthesizer_exp10Table = $rt_createShortArrayFromData([(-76), (-72), (-69), (-66), (-62), (-59), (-56), (-52), (-49), (-46), (-42), (-39), (-36), (-32), (-29), (-26), (-22), (-19), (-16), (-12), (-9), (-6), (-2), 1, 4, 8, 11, 14, 17, 21, 24, 27, 31, 34, 37, 41, 44, 47, 51, 54, 57, 61, 64, 67, 71, 74, 77, 81, 84, 87, 91, 94, 97, 101, 104, 107, 110, 114, 117, 120, 124, 127, 130, 134, 137, 140, 144, 147, 150, 154, 157, 160, 164, 167, 170, 174, 177, 180, 184, 187, 190, 194, 197, 200, 204, 207, 210,
    213, 217, 220, 223, 227, 230, 233, 237, 240, 243, 247, 250, 253, 257, 260, 263, 267, 270, 273, 277, 280, 283, 287, 290, 293, 297, 300, 303, 306, 310, 313, 316, 320, 323, 326, 330, 333, 336, 340, 343, 346, 350, 353, 356, 360, 363, 366, 370, 373, 376, 380, 383, 386, 390, 393, 396, 400, 403, 406, 409, 413, 416, 419, 423, 426, 429, 433, 436, 439, 443, 446, 449, 453, 456, 459, 463, 466, 469, 473, 476, 479, 483, 486, 489, 493, 496, 499, 502, 506, 509, 512, 516, 519, 522, 526, 529, 532, 536, 539, 542, 546, 549,
    552, 556, 559, 562, 566, 569, 572, 576, 579, 582, 586, 589, 592, 595, 599, 602, 605, 609, 612, 615, 619, 622, 625, 629, 632, 635, 639, 642, 645, 649, 652, 655, 659, 662, 665, 669, 672, 675, 679, 682, 685, 689, 692, 695, 698, 702, 705, 708, 712, 715, 718, 722, 725, 728, 732, 735, 738, 742, 745, 748, 752, 755, 758, 762, 765, 768, 772, 775, 778, 782, 785, 788, 791, 795, 798, 801, 805, 808, 811, 815, 818, 821, 825, 828, 831, 835, 838, 841, 845, 848, 851, 855, 858, 861, 865, 868, 871, 875, 878, 881, 885, 888,
    891, 894, 898, 901, 904, 908, 911, 914, 918, 921, 924, 928, 931, 934, 938, 941, 944, 948, 951, 954, 958, 961, 964, 968, 971, 974, 978, 981, 984, 987, 991, 994, 997, 1001, 1004, 1007, 1011, 1014, 1017, 1021, 1024, 1027, 1031, 1034, 1037, 1041, 1044, 1047, 1051, 1054, 1057, 1061, 1064, 1067, 1071, 1074, 1077, 1081, 1084, 1087, 1090, 1094, 1097, 1100, 1104, 1107, 1110, 1114, 1117, 1120, 1124, 1127, 1130, 1134, 1137, 1140, 1144, 1147, 1150, 1154, 1157, 1160, 1164, 1167, 1170, 1174, 1177, 1180, 1183, 1187, 1190,
    1193, 1197, 1200, 1203, 1207, 1210, 1213, 1217, 1220, 1223, 1227, 1230, 1233, 1237, 1240, 1243, 1247, 1250, 1253, 1257, 1260, 1263, 1267, 1270, 1273, 1276, 1280, 1283, 1286, 1290, 1293, 1296, 1300, 1303, 1306, 1310, 1313, 1316, 1320, 1323, 1326, 1330, 1333, 1336, 1340, 1343, 1346, 1350, 1353, 1356, 1360, 1363, 1366, 1370, 1373, 1376, 1379, 1383, 1386, 1389, 1393, 1396, 1399, 1403, 1406, 1409, 1413, 1416, 1419, 1423, 1426, 1429, 1433, 1436, 1439, 1443, 1446, 1449, 1453, 1456, 1459, 1463, 1466, 1469, 1472,
    1476, 1479, 1482, 1486, 1489, 1492, 1496, 1499, 1502, 1506, 1509, 1512, 1516, 1519, 1522, 1526, 1529, 1532, 1536, 1539, 1542, 1546, 1549, 1552, 1556, 1559, 1562, 1566, 1569, 1572, 1575, 1579, 1582, 1585, 1589, 1592, 1595, 1599, 1602, 1605, 1609, 1612, 1615, 1619, 1622, 1625, 1629, 1632, 1635, 1639, 1642, 1645, 1649, 1652, 1655, 1659, 1662, 1665, 1668, 1672, 1675, 1678, 1682, 1685, 1688, 1692, 1695, 1698, 1702, 1705, 1708, 1712, 1715, 1718, 1722, 1725, 1728, 1732, 1735, 1738, 1742, 1745, 1748, 1752, 1755,
    1758, 1761, 1765, 1768, 1771, 1775, 1778, 1781, 1785, 1788, 1791, 1795, 1798, 1801, 1805, 1808, 1811, 1815, 1818, 1821, 1825, 1828, 1831, 1835, 1838, 1841, 1845, 1848, 1851, 1855, 1858, 1861, 1864, 1868, 1871, 1874, 1878, 1881, 1884, 1888, 1891, 1894, 1898, 1901, 1904, 1908, 1911, 1914, 1918, 1921, 1924, 1928, 1931, 1934, 1938, 1941, 1944, 1948, 1951, 1954, 1957, 1961, 1964, 1967, 1971, 1974, 1977, 1981, 1984, 1987, 1991, 1994, 1997, 2001, 2004, 2007, 2011, 2014, 2017, 2021, 2024, 2027, 2031, 2034, 2037,
    2041, 2044, 2047, 2051, 2054, 2057, 2060, 2064, 2067, 2070, 2074, 2077, 2080, 2084, 2087, 2090, 2094, 2097, 2100, 2104, 2107, 2110, 2114]);
},
otcit_FloatAnalyzer = $rt_classWithoutFields(),
otcit_FloatAnalyzer_MAX_MANTISSA = 0,
otcit_FloatAnalyzer_mantissa10Table = null,
otcit_FloatAnalyzer_exp10Table = null,
otcit_FloatAnalyzer_analyze = ($d, $result) => {
    let $bits, $mantissa, $exponent, var$6, $decExponent, $upperPos, $upperPos_0, $mantissaShift, $decMantissa, $decMantissaHi, $decMantissaLow, $lowerPos, $lowerPos_0, $posCmp;
    $bits = (isNaN($d) ? 1 : 0) ? 2143289344 : $rt_floatToRawIntBits($d);
    $result.$sign0 = !($bits & (-2147483648)) ? 0 : 1;
    $mantissa = $bits & 8388607;
    $exponent = $bits >> 23 & 255;
    if (!$mantissa && !$exponent) {
        $result.$mantissa = 0;
        $result.$exponent0 = 0;
        return;
    }
    if ($exponent)
        $bits = $mantissa | 8388608;
    else {
        $bits = $mantissa << 1;
        while (Long_eq(Long_and(Long_fromInt($bits), Long_fromInt(8388608)), Long_ZERO)) {
            $bits = $bits << 1;
            $exponent = $exponent + (-1) | 0;
        }
    }
    var$6 = otcit_FloatAnalyzer_exp10Table.data;
    $mantissa = 0;
    $decExponent = var$6.length;
    if ($mantissa > $decExponent) {
        $result = new jl_IllegalArgumentException;
        jl_Throwable__init_($result);
        $rt_throw($result);
    }
    $upperPos = $decExponent - 1 | 0;
    a: {
        while (true) {
            if ($mantissa > $upperPos) {
                $decExponent = ( -$mantissa | 0) - 1 | 0;
                break a;
            }
            $decExponent = ($mantissa + $upperPos | 0) / 2 | 0;
            $upperPos_0 = var$6[$decExponent];
            if ($upperPos_0 == $exponent)
                break;
            if ($exponent >= $upperPos_0)
                $mantissa = $decExponent + 1 | 0;
            else
                $upperPos = $decExponent - 1 | 0;
        }
    }
    if ($decExponent < 0)
        $decExponent =  -$decExponent | 0;
    $mantissa = $decExponent + 1 | 0;
    $mantissaShift = 9 + ($exponent - var$6[$mantissa] | 0) | 0;
    $decMantissa = otcit_FloatAnalyzer_mulAndShiftRight($bits, otcit_FloatAnalyzer_mantissa10Table.data[$mantissa], $mantissaShift);
    if ($decMantissa < otcit_FloatAnalyzer_MAX_MANTISSA) {
        while ($rt_ucmp($decMantissa, otcit_FloatAnalyzer_MAX_MANTISSA) <= 0) {
            $decExponent = $decExponent + (-1) | 0;
            $decMantissa = ($decMantissa * 10 | 0) + 9 | 0;
        }
        var$6 = otcit_FloatAnalyzer_exp10Table.data;
        $mantissa = $decExponent + 1 | 0;
        $mantissaShift = 9 + ($exponent - var$6[$mantissa] | 0) | 0;
        $decMantissa = otcit_FloatAnalyzer_mulAndShiftRight($bits, otcit_FloatAnalyzer_mantissa10Table.data[$mantissa], $mantissaShift);
    }
    $mantissa = $bits << 1;
    $bits = $mantissa + 1 | 0;
    var$6 = otcit_FloatAnalyzer_mantissa10Table.data;
    $exponent = $decExponent + 1 | 0;
    $upperPos = var$6[$exponent];
    $upperPos_0 = $mantissaShift - 1 | 0;
    $decMantissaHi = otcit_FloatAnalyzer_mulAndShiftRight($bits, $upperPos, $upperPos_0);
    $decMantissaLow = otcit_FloatAnalyzer_mulAndShiftRight($mantissa - 1 | 0, otcit_FloatAnalyzer_mantissa10Table.data[$exponent], $upperPos_0);
    $lowerPos = 1;
    while (true) {
        $lowerPos_0 = $lowerPos * 10 | 0;
        if ($rt_ucmp($rt_udiv($decMantissa, $lowerPos_0), $rt_udiv($decMantissaLow, $lowerPos_0)) <= 0)
            break;
        $lowerPos = $lowerPos_0;
    }
    $upperPos = 1;
    while (true) {
        $upperPos_0 = $upperPos * 10 | 0;
        if ($rt_ucmp($rt_udiv($decMantissa, $upperPos_0), $rt_udiv($decMantissaHi, $upperPos_0)) >= 0)
            break;
        $upperPos = $upperPos_0;
    }
    $posCmp = $rt_ucmp($lowerPos, $upperPos);
    $mantissa = $posCmp > 0 ? $rt_imul($rt_udiv($decMantissa, $lowerPos), $lowerPos) : $posCmp < 0 ? $rt_imul($rt_udiv($decMantissa, $upperPos), $upperPos) + $upperPos | 0 : $rt_imul($rt_udiv(($decMantissa + ($upperPos / 2 | 0) | 0), $upperPos), $upperPos);
    if (jl_Long_compareUnsigned(Long_fromInt($mantissa), Long_fromInt(1000000000)) >= 0)
        while (true) {
            $decExponent = $decExponent + 1 | 0;
            $mantissa = $rt_udiv($mantissa, 10);
            if ($rt_ucmp($mantissa, 1000000000) < 0)
                break;
        }
    else if ($rt_ucmp($mantissa, 100000000) < 0) {
        $decExponent = $decExponent + (-1) | 0;
        $mantissa = $mantissa * 10 | 0;
    }
    $result.$mantissa = $mantissa;
    $result.$exponent0 = $decExponent - 50 | 0;
},
otcit_FloatAnalyzer_mulAndShiftRight = ($a, $b, $shift) => {
    return Long_lo(Long_shru(Long_mul(Long_and(Long_fromInt($a), Long_create(4294967295, 0)), Long_and(Long_fromInt($b), Long_create(4294967295, 0))), 32 - $shift | 0));
},
otcit_FloatAnalyzer__clinit_ = () => {
    otcit_FloatAnalyzer_MAX_MANTISSA = $rt_udiv((-1), 10);
    otcit_FloatAnalyzer_mantissa10Table = $rt_createIntArrayFromData([(-18543760), (-873828468), (-1558056233), (-2105438446), (-791721136), (-1492370368), (-2052889754), (-707643228), (-1425108042), (-1999079893), (-621547450), (-1356231419), (-1943978595), (-533385374), (-1285701758), (-1887554866), (-443107408), (-1213479385), (-1829776968), (-350662770), (-1139523676), (-1770612400), (-255999462), (-1063793029), (-1710027882), (-159064234), (-986244846), (-1647989336), (-59802560), (-906835507), (-1584461865),
    (-2126562952), (-825520345), (-1519409735), (-2074521247), (-742253618), (-1452796353), (-2021230542), (-656988489), (-1384584251), (-1966660860), (-569676998), (-1314735058), (-1910781505), (-480270031), (-1243209484), (-1853561046), (-388717296), (-1169967296), (-1794967296), (-294967296), (-1094967296), (-1734967296), (-198967296), (-1018167296), (-1673527296), (-100663296), (-939524096), (-1610612736), (-2147483648), (-858993460), (-1546188227), (-2095944041), (-776530088), (-1480217529), (-2043167483),
    (-692087595), (-1412663535), (-1989124287), (-605618482), (-1343488245), (-1933784055), (-517074110), (-1272652747), (-1877115657), (-426404674), (-1200117198), (-1819087218), (-333559171), (-1125840796), (-1759666096), (-238485376), (-1049781760), (-1698818867), (-141129810), (-971897307), (-1636511305), (-41437710), (-892143627), (-1572708361), (-2117160148), (-810475859), (-1507374147), (-2064892777), (-726848065), (-1440471911), (-2011370988), (-641213203), (-1371964022), (-1956564688)]);
    otcit_FloatAnalyzer_exp10Table = $rt_createIntArrayFromData([(-37), (-34), (-31), (-28), (-24), (-21), (-18), (-14), (-11), (-8), (-4), (-1), 2, 6, 9, 12, 16, 19, 22, 26, 29, 32, 36, 39, 42, 46, 49, 52, 56, 59, 62, 65, 69, 72, 75, 79, 82, 85, 89, 92, 95, 99, 102, 105, 109, 112, 115, 119, 122, 125, 129, 132, 135, 139, 142, 145, 149, 152, 155, 158, 162, 165, 168, 172, 175, 178, 182, 185, 188, 192, 195, 198, 202, 205, 208, 212, 215, 218, 222, 225, 228, 232, 235, 238, 242, 245, 248, 252, 255, 258, 261, 265,
    268, 271, 275, 278, 281, 285, 288, 291]);
},
otcit_DoubleAnalyzer = $rt_classWithoutFields(),
otcit_DoubleAnalyzer_MAX_MANTISSA = Long_ZERO,
otcit_DoubleAnalyzer_resultForLog10 = null,
otcit_DoubleAnalyzer_mantissa10Table = null,
otcit_DoubleAnalyzer_exp10Table = null,
otcit_DoubleAnalyzer_analyze = ($d, $result) => {
    let $bits, $mantissa, $exponent, var$6, $binExponentCorrection, $mantissaShift, $decExponent, $posCmp, var$11, $decMantissa, $decMantissaHi, $lowerPos, $upperPos;
    $bits = !(isNaN($d) ? 1 : 0) ? $rt_doubleToRawLongBits($d) : Long_create(0, 2146959360);
    $result.$sign = Long_eq(Long_and($bits, Long_create(0, 2147483648)), Long_ZERO) ? 0 : 1;
    $mantissa = Long_and($bits, Long_create(4294967295, 1048575));
    $exponent = Long_lo(Long_shr($bits, 52)) & 2047;
    if (Long_eq($mantissa, Long_ZERO) && !$exponent) {
        $result.$mantissa0 = Long_ZERO;
        $result.$exponent = 0;
        return;
    }
    if ($exponent)
        $mantissa = Long_or($mantissa, Long_create(0, 1048576));
    else {
        $mantissa = Long_shl($mantissa, 1);
        while (Long_eq(Long_and($mantissa, Long_create(0, 1048576)), Long_ZERO)) {
            $mantissa = Long_shl($mantissa, 1);
            $exponent = $exponent + (-1) | 0;
        }
    }
    var$6 = otcit_DoubleAnalyzer_exp10Table.data;
    $binExponentCorrection = $exponent << 16 >> 16;
    $mantissaShift = 0;
    $decExponent = var$6.length;
    if ($mantissaShift > $decExponent) {
        $result = new jl_IllegalArgumentException;
        jl_Throwable__init_($result);
        $rt_throw($result);
    }
    $posCmp = $decExponent - 1 | 0;
    a: {
        while (true) {
            if ($mantissaShift > $posCmp) {
                $decExponent = ( -$mantissaShift | 0) - 1 | 0;
                break a;
            }
            $decExponent = ($mantissaShift + $posCmp | 0) / 2 | 0;
            var$11 = $rt_compare(var$6[$decExponent], $binExponentCorrection);
            if (!var$11)
                break;
            if (var$11 <= 0)
                $mantissaShift = $decExponent + 1 | 0;
            else
                $posCmp = $decExponent - 1 | 0;
        }
    }
    if ($decExponent < 0)
        $decExponent =  -$decExponent | 0;
    $posCmp = $decExponent + 1 | 0;
    $mantissaShift = 12 + ($exponent - var$6[$posCmp] | 0) | 0;
    $decMantissa = otcit_DoubleAnalyzer_mulAndShiftRight($mantissa, otcit_DoubleAnalyzer_mantissa10Table.data[$posCmp], $mantissaShift);
    if (Long_le($decMantissa, otcit_DoubleAnalyzer_MAX_MANTISSA)) {
        while (jl_Long_compareUnsigned($decMantissa, otcit_DoubleAnalyzer_MAX_MANTISSA) <= 0) {
            $decExponent = $decExponent + (-1) | 0;
            $decMantissa = Long_add(Long_mul($decMantissa, Long_fromInt(10)), Long_fromInt(9));
        }
        var$6 = otcit_DoubleAnalyzer_exp10Table.data;
        $binExponentCorrection = $decExponent + 1 | 0;
        $mantissaShift = 12 + ($exponent - var$6[$binExponentCorrection] | 0) | 0;
        $decMantissa = otcit_DoubleAnalyzer_mulAndShiftRight($mantissa, otcit_DoubleAnalyzer_mantissa10Table.data[$binExponentCorrection], $mantissaShift);
    }
    $mantissa = Long_shl($mantissa, 1);
    $bits = Long_add($mantissa, Long_fromInt(1));
    var$6 = otcit_DoubleAnalyzer_mantissa10Table.data;
    $binExponentCorrection = $decExponent + 1 | 0;
    $decMantissaHi = var$6[$binExponentCorrection];
    $exponent = $mantissaShift - 1 | 0;
    $decMantissaHi = otcit_DoubleAnalyzer_mulAndShiftRight($bits, $decMantissaHi, $exponent);
    $lowerPos = otcit_DoubleAnalyzer_findLowerDistance($decMantissa, otcit_DoubleAnalyzer_mulAndShiftRight(Long_sub($mantissa, Long_fromInt(1)), otcit_DoubleAnalyzer_mantissa10Table.data[$binExponentCorrection], $exponent));
    $upperPos = otcit_DoubleAnalyzer_findUpperDistance($decMantissa, $decMantissaHi);
    $posCmp = jl_Long_compareUnsigned($lowerPos, $upperPos);
    $mantissa = $posCmp > 0 ? Long_mul(jl_Long_divideUnsigned($decMantissa, $lowerPos), $lowerPos) : $posCmp < 0 ? Long_add(Long_mul(jl_Long_divideUnsigned($decMantissa, $upperPos), $upperPos), $upperPos) : Long_mul(jl_Long_divideUnsigned(Long_add($decMantissa, Long_div($upperPos, Long_fromInt(2))), $upperPos), $upperPos);
    if (jl_Long_compareUnsigned($mantissa, Long_create(2808348672, 232830643)) >= 0)
        while (true) {
            $decExponent = $decExponent + 1 | 0;
            $mantissa = jl_Long_divideUnsigned($mantissa, Long_fromInt(10));
            if (jl_Long_compareUnsigned($mantissa, Long_create(2808348672, 232830643)) < 0)
                break;
        }
    else if (jl_Long_compareUnsigned($mantissa, Long_create(1569325056, 23283064)) < 0) {
        $decExponent = $decExponent + (-1) | 0;
        $mantissa = Long_mul($mantissa, Long_fromInt(10));
    }
    $result.$mantissa0 = $mantissa;
    $result.$exponent = $decExponent - 330 | 0;
},
otcit_DoubleAnalyzer_findLowerDistance = ($mantissa, $lower) => {
    let $pos, $pos_0;
    $pos = Long_fromInt(1);
    while (true) {
        $pos_0 = Long_mul($pos, Long_fromInt(10));
        if (jl_Long_compareUnsigned(jl_Long_divideUnsigned($mantissa, $pos_0), jl_Long_divideUnsigned($lower, $pos_0)) <= 0)
            break;
        $pos = $pos_0;
    }
    return $pos;
},
otcit_DoubleAnalyzer_findUpperDistance = ($mantissa, $upper) => {
    let $pos, $pos_0;
    $pos = Long_fromInt(1);
    while (true) {
        $pos_0 = Long_mul($pos, Long_fromInt(10));
        if (jl_Long_compareUnsigned(jl_Long_divideUnsigned($mantissa, $pos_0), jl_Long_divideUnsigned($upper, $pos_0)) >= 0)
            break;
        $pos = $pos_0;
    }
    return $pos;
},
otcit_DoubleAnalyzer_mulAndShiftRight = ($a, $b, $shift) => {
    let $a1, $a2, $a3, $a4, $b1, $b2, $b3, $b4;
    $a1 = Long_and($a, Long_fromInt(65535));
    $a2 = Long_and(Long_shru($a, 16), Long_fromInt(65535));
    $a3 = Long_and(Long_shru($a, 32), Long_fromInt(65535));
    $a4 = Long_and(Long_shru($a, 48), Long_fromInt(65535));
    $b1 = Long_and($b, Long_fromInt(65535));
    $b2 = Long_and(Long_shru($b, 16), Long_fromInt(65535));
    $b3 = Long_and(Long_shru($b, 32), Long_fromInt(65535));
    $b4 = Long_and(Long_shru($b, 48), Long_fromInt(65535));
    return Long_add(Long_add(Long_add(Long_shl(Long_mul($b4, $a4), 32 + $shift | 0), Long_shl(Long_add(Long_mul($b4, $a3), Long_mul($b3, $a4)), 16 + $shift | 0)), Long_shl(Long_add(Long_add(Long_mul($b4, $a2), Long_mul($b3, $a3)), Long_mul($b2, $a4)), $shift)), Long_shru(Long_add(Long_add(Long_add(Long_mul($b3, $a1), Long_mul($b2, $a2)), Long_mul($b1, $a3)), Long_shl(Long_add(Long_add(Long_add(Long_mul($b4, $a1), Long_mul($b3, $a2)), Long_mul($b2, $a3)), Long_mul($b1, $a4)), 16)), 32 - $shift | 0));
},
otcit_DoubleAnalyzer__clinit_ = () => {
    otcit_DoubleAnalyzer_MAX_MANTISSA = jl_Long_divideUnsigned(Long_fromInt(-1), Long_fromInt(10));
    otcit_DoubleAnalyzer_resultForLog10 = otcit_DoubleAnalyzer$Result__init_0();
    otcit_DoubleAnalyzer_mantissa10Table = $rt_createLongArrayFromData([Long_create(3251292512, 2194092222), Long_create(1766094183, 3510547556), Long_create(553881887, 2808438045), Long_create(443105509, 2246750436), Long_create(3285949193, 3594800697), Long_create(910772436, 2875840558), Long_create(2446604867, 2300672446), Long_create(2196580869, 3681075914), Long_create(2616258154, 2944860731), Long_create(1234013064, 2355888585), Long_create(1974420903, 3769421736), Long_create(720543263, 3015537389), Long_create(1435428070, 2412429911),
    Long_create(578697993, 3859887858), Long_create(2180945313, 3087910286), Long_create(885762791, 2470328229), Long_create(3135207384, 3952525166), Long_create(1649172448, 3162020133), Long_create(3037324877, 2529616106), Long_create(3141732885, 4047385770), Long_create(2513386308, 3237908616), Long_create(1151715587, 2590326893), Long_create(983751480, 4144523029), Long_create(1645994643, 3315618423), Long_create(3034782633, 2652494738), Long_create(3996658754, 4243991581), Long_create(2338333544, 3395193265),
    Long_create(1870666835, 2716154612), Long_create(4073513845, 2172923689), Long_create(3940641775, 3476677903), Long_create(575533043, 2781342323), Long_create(2178413352, 2225073858), Long_create(2626467905, 3560118173), Long_create(3819161242, 2848094538), Long_create(478348616, 2278475631), Long_create(3342338164, 3645561009), Long_create(3532863990, 2916448807), Long_create(1108304273, 2333159046), Long_create(55299919, 3733054474), Long_create(903233395, 2986443579), Long_create(1581580175, 2389154863),
    Long_create(1671534821, 3822647781), Long_create(478234397, 3058118225), Long_create(382587518, 2446494580), Long_create(612140029, 3914391328), Long_create(2207698941, 3131513062), Long_create(48172235, 2505210450), Long_create(77075576, 4008336720), Long_create(61660460, 3206669376), Long_create(3485302205, 2565335500), Long_create(1281516232, 4104536801), Long_create(166219527, 3283629441), Long_create(3568949458, 2626903552), Long_create(2274345296, 4203045684), Long_create(2678469696, 3362436547), Long_create(424788838, 2689949238),
    Long_create(2057817989, 2151959390), Long_create(3292508783, 3443135024), Long_create(3493000485, 2754508019), Long_create(3653393847, 2203606415), Long_create(1550462860, 3525770265), Long_create(1240370288, 2820616212), Long_create(3569276608, 2256492969), Long_create(3133862195, 3610388751), Long_create(1648096297, 2888311001), Long_create(459483578, 2310648801), Long_create(3312154103, 3697038081), Long_create(1790729823, 2957630465), Long_create(1432583858, 2366104372), Long_create(3151127633, 3785766995),
    Long_create(2520902106, 3028613596), Long_create(1157728226, 2422890877), Long_create(2711358621, 3876625403), Long_create(3887073815, 3101300322), Long_create(1391672133, 2481040258), Long_create(1367681954, 3969664413), Long_create(2812132482, 3175731530), Long_create(2249705985, 2540585224), Long_create(1022549199, 4064936359), Long_create(1677032818, 3251949087), Long_create(3918606632, 2601559269), Long_create(3692790234, 4162494831), Long_create(2095238728, 3329995865), Long_create(1676190982, 2663996692),
    Long_create(3540899031, 4262394707), Long_create(1114732307, 3409915766), Long_create(32792386, 2727932613), Long_create(1744220827, 2182346090), Long_create(2790753324, 3491753744), Long_create(3091596118, 2793402995), Long_create(2473276894, 2234722396), Long_create(2239256113, 3575555834), Long_create(2650398349, 2860444667), Long_create(402331761, 2288355734), Long_create(2361717736, 3661369174), Long_create(2748367648, 2929095339), Long_create(3057687578, 2343276271), Long_create(3174313206, 3749242034),
    Long_create(3398444024, 2999393627), Long_create(1000768301, 2399514902), Long_create(2460222741, 3839223843), Long_create(3686165111, 3071379074), Long_create(3807925548, 2457103259), Long_create(3515700499, 3931365215), Long_create(2812560399, 3145092172), Long_create(532061401, 2516073738), Long_create(4287272078, 4025717980), Long_create(3429817663, 3220574384), Long_create(3602847589, 2576459507), Long_create(2328582306, 4122335212), Long_create(144878926, 3297868170), Long_create(115903141, 2638294536),
    Long_create(2762425404, 4221271257), Long_create(491953404, 3377017006), Long_create(3829536560, 2701613604), Long_create(3922622707, 2161290883), Long_create(1122235577, 3458065414), Long_create(1756781920, 2766452331), Long_create(546432077, 2213161865), Long_create(874291324, 3541058984), Long_create(1558426518, 2832847187), Long_create(3823721592, 2266277749), Long_create(3540974170, 3626044399), Long_create(3691772795, 2900835519), Long_create(3812411695, 2320668415), Long_create(1804891416, 3713069465),
    Long_create(1443913133, 2970455572), Long_create(3732110884, 2376364457), Long_create(2535403578, 3802183132), Long_create(310335944, 3041746506), Long_create(3684242592, 2433397204), Long_create(3317807769, 3893435527), Long_create(936259297, 3114748422), Long_create(3325987815, 2491798737), Long_create(1885606668, 3986877980), Long_create(1508485334, 3189502384), Long_create(2065781726, 2551601907), Long_create(4164244222, 4082563051), Long_create(2472401918, 3266050441), Long_create(1118928075, 2612840353),
    Long_create(931291461, 4180544565), Long_create(745033169, 3344435652), Long_create(3173006913, 2675548521), Long_create(3358824142, 4280877634), Long_create(3546052773, 3424702107), Long_create(1118855300, 2739761686), Long_create(36090780, 2191809349), Long_create(1775732167, 3506894958), Long_create(3138572652, 2805515966), Long_create(1651864662, 2244412773), Long_create(1783990001, 3591060437), Long_create(4004172378, 2872848349), Long_create(4062331362, 2298278679), Long_create(3922749802, 3677245887),
    Long_create(1420212923, 2941796710), Long_create(1136170338, 2353437368), Long_create(958879082, 3765499789), Long_create(1626096725, 3012399831), Long_create(441883920, 2409919865), Long_create(707014273, 3855871784), Long_create(1424604878, 3084697427), Long_create(3716664280, 2467757941), Long_create(4228675929, 3948412706), Long_create(2523947284, 3158730165), Long_create(2019157827, 2526984132), Long_create(4089645983, 4043174611), Long_create(2412723327, 3234539689), Long_create(2789172121, 2587631751),
    Long_create(2744688475, 4140210802), Long_create(477763862, 3312168642), Long_create(2959191467, 2649734913), Long_create(3875712888, 4239575861), Long_create(2241576851, 3391660689), Long_create(2652254940, 2713328551), Long_create(1262810493, 2170662841), Long_create(302509870, 3473060546), Long_create(3677981733, 2778448436), Long_create(2083391927, 2222758749), Long_create(756446706, 3556413999), Long_create(1464150824, 2845131199), Long_create(2030314118, 2276104959), Long_create(671522212, 3641767935),
    Long_create(537217769, 2913414348), Long_create(2147761134, 2330731478), Long_create(2577424355, 3729170365), Long_create(2061939484, 2983336292), Long_create(4226531965, 2386669033), Long_create(1608490388, 3818670454), Long_create(2145785770, 3054936363), Long_create(3434615534, 2443949090), Long_create(1200417559, 3910318545), Long_create(960334047, 3128254836), Long_create(4204241074, 2502603868), Long_create(1572824964, 4004166190), Long_create(1258259971, 3203332952), Long_create(3583588354, 2562666361),
    Long_create(4015754449, 4100266178), Long_create(635623181, 3280212943), Long_create(2226485463, 2624170354), Long_create(985396364, 4198672567), Long_create(3365297469, 3358938053), Long_create(115257597, 2687150443), Long_create(1810192996, 2149720354), Long_create(319328417, 3439552567), Long_create(2832443111, 2751642053), Long_create(3983941407, 2201313642), Long_create(2938332415, 3522101828), Long_create(4068652850, 2817681462), Long_create(1536935362, 2254145170), Long_create(2459096579, 3606632272),
    Long_create(249290345, 2885305818), Long_create(1917419194, 2308244654), Long_create(490890333, 3693191447), Long_create(2969692644, 2954553157), Long_create(657767197, 2363642526), Long_create(3629407892, 3781828041), Long_create(2044532855, 3025462433), Long_create(3353613202, 2420369946), Long_create(3647794205, 3872591914), Long_create(3777228823, 3098073531), Long_create(2162789599, 2478458825), Long_create(3460463359, 3965534120), Long_create(2768370687, 3172427296), Long_create(1355703090, 2537941837),
    Long_create(3028118404, 4060706939), Long_create(3281488183, 3248565551), Long_create(1766197087, 2598852441), Long_create(1107928421, 4158163906), Long_create(27349277, 3326531125), Long_create(21879422, 2661224900), Long_create(35007075, 4257959840), Long_create(28005660, 3406367872), Long_create(2599384905, 2725094297), Long_create(361521006, 2180075438), Long_create(4014407446, 3488120700), Long_create(3211525957, 2790496560), Long_create(2569220766, 2232397248), Long_create(3251759766, 3571835597),
    Long_create(883420894, 2857468478), Long_create(2424723634, 2285974782), Long_create(443583977, 3657559652), Long_create(2931847559, 2926047721), Long_create(1486484588, 2340838177), Long_create(3237368801, 3745341083), Long_create(12914663, 2996272867), Long_create(2587312108, 2397018293), Long_create(3280705914, 3835229269), Long_create(3483558190, 3068183415), Long_create(2786846552, 2454546732), Long_create(1022980646, 3927274772), Long_create(3395364895, 3141819817), Long_create(998304997, 2513455854),
    Long_create(3315274914, 4021529366), Long_create(1793226472, 3217223493), Long_create(3152568096, 2573778794), Long_create(2467128576, 4118046071), Long_create(1114709402, 3294436857), Long_create(3468747899, 2635549485), Long_create(1255029343, 4216879177), Long_create(3581003852, 3373503341), Long_create(2005809622, 2698802673), Long_create(3322634616, 2159042138), Long_create(162254630, 3454467422), Long_create(2706784082, 2763573937), Long_create(447440347, 2210859150), Long_create(715904555, 3537374640),
    Long_create(572723644, 2829899712), Long_create(3035159293, 2263919769), Long_create(2279274491, 3622271631), Long_create(964426134, 2897817305), Long_create(771540907, 2318253844), Long_create(2952452370, 3709206150), Long_create(2361961896, 2967364920), Long_create(1889569516, 2373891936), Long_create(1305324308, 3798227098), Long_create(2762246365, 3038581678), Long_create(3927784010, 2430865342), Long_create(2848480580, 3889384548), Long_create(3996771382, 3111507638), Long_create(620436728, 2489206111),
    Long_create(3569679143, 3982729777), Long_create(1137756396, 3186183822), Long_create(3487185494, 2548947057), Long_create(2143522954, 4078315292), Long_create(4291798741, 3262652233), Long_create(856458615, 2610121787), Long_create(2229327243, 4176194859), Long_create(2642455254, 3340955887), Long_create(395977285, 2672764710), Long_create(633563656, 4276423536), Long_create(3942824761, 3421138828), Long_create(577279431, 2736911063), Long_create(2179810463, 2189528850), Long_create(3487696741, 3503246160),
    Long_create(2790157393, 2802596928), Long_create(3950112833, 2242077542), Long_create(2884206696, 3587324068), Long_create(4025352275, 2869859254), Long_create(4079275279, 2295887403), Long_create(1372879692, 3673419846), Long_create(239310294, 2938735877), Long_create(2768428613, 2350988701), Long_create(2711498862, 3761581922), Long_create(451212171, 3009265538), Long_create(2078956655, 2407412430), Long_create(3326330649, 3851859888), Long_create(84084141, 3081487911), Long_create(3503241150, 2465190328),
    Long_create(451225085, 3944304526), Long_create(3796953905, 3155443620), Long_create(3037563124, 2524354896), Long_create(3142114080, 4038967834), Long_create(3372684723, 3231174267), Long_create(980160860, 2584939414), Long_create(3286244294, 4135903062), Long_create(911008517, 3308722450), Long_create(728806813, 2646977960), Long_create(1166090902, 4235164736), Long_create(73879262, 3388131789), Long_create(918096869, 2710505431), Long_create(4170451332, 2168404344), Long_create(4095741754, 3469446951),
    Long_create(2417599944, 2775557561), Long_create(1075086496, 2220446049), Long_create(3438125312, 3552713678), Long_create(173519872, 2842170943), Long_create(1856802816, 2273736754), Long_create(393904128, 3637978807), Long_create(2892103680, 2910383045), Long_create(2313682944, 2328306436), Long_create(1983905792, 3725290298), Long_create(3305111552, 2980232238), Long_create(67108864, 2384185791), Long_create(2684354560, 3814697265), Long_create(2147483648, 3051757812), Long_create(0, 2441406250), Long_create(0, 3906250000),
    Long_create(0, 3125000000), Long_create(0, 2500000000), Long_create(0, 4000000000), Long_create(0, 3200000000), Long_create(0, 2560000000), Long_create(0, 4096000000), Long_create(0, 3276800000), Long_create(0, 2621440000), Long_create(0, 4194304000), Long_create(0, 3355443200), Long_create(0, 2684354560), Long_create(0, 2147483648), Long_create(3435973836, 3435973836), Long_create(1889785610, 2748779069), Long_create(2370821947, 2199023255), Long_create(3793315115, 3518437208), Long_create(457671715, 2814749767),
    Long_create(2943117749, 2251799813), Long_create(3849994940, 3602879701), Long_create(2221002492, 2882303761), Long_create(917808535, 2305843009), Long_create(3186480574, 3689348814), Long_create(3408177918, 2951479051), Long_create(1867548875, 2361183241), Long_create(1270091283, 3777893186), Long_create(157079567, 3022314549), Long_create(984657113, 2417851639), Long_create(3293438299, 3868562622), Long_create(916763721, 3094850098), Long_create(2451397895, 2475880078), Long_create(3063243173, 3961408125),
    Long_create(2450594538, 3169126500), Long_create(1960475630, 2535301200), Long_create(3136761009, 4056481920), Long_create(2509408807, 3245185536), Long_create(1148533586, 2596148429), Long_create(3555640657, 4153837486), Long_create(1985519066, 3323069989), Long_create(2447408712, 2658455991), Long_create(2197867021, 4253529586), Long_create(899300158, 3402823669), Long_create(1578433585, 2722258935), Long_create(1262746868, 2177807148), Long_create(1161401530, 3484491437), Long_create(3506101601, 2787593149),
    Long_create(3663874740, 2230074519), Long_create(3285219207, 3568119231), Long_create(1769181906, 2854495385), Long_create(1415345525, 2283596308), Long_create(1405559381, 3653754093), Long_create(2842434423, 2923003274), Long_create(3132940998, 2338402619), Long_create(2435725219, 3741444191), Long_create(1089586716, 2993155353), Long_create(2589656291, 2394524282), Long_create(707476229, 3831238852), Long_create(3142961361, 3064991081), Long_create(1655375629, 2451992865), Long_create(2648601007, 3923188584),
    Long_create(2977874265, 3138550867), Long_create(664312493, 2510840694), Long_create(2780886908, 4017345110), Long_create(2224709526, 3213876088), Long_create(3497754539, 2571100870), Long_create(1301439967, 4113761393), Long_create(2759138892, 3291009114), Long_create(3066304573, 2632807291), Long_create(3188100398, 4212491666), Long_create(1691486859, 3369993333), Long_create(3071176406, 2695994666), Long_create(1597947665, 2156795733), Long_create(1697722806, 3450873173), Long_create(3076165163, 2760698538),
    Long_create(4178919049, 2208558830), Long_create(2391303182, 3533694129), Long_create(2772036005, 2826955303), Long_create(3935615722, 2261564242), Long_create(2861011319, 3618502788), Long_create(4006795973, 2894802230), Long_create(3205436779, 2315841784), Long_create(2551718468, 3705346855), Long_create(2041374775, 2964277484), Long_create(2492093279, 2371421987), Long_create(551375410, 3794275180), Long_create(441100328, 3035420144), Long_create(1211873721, 2428336115), Long_create(1938997954, 3885337784),
    Long_create(2410191822, 3108270227), Long_create(210166539, 2486616182), Long_create(1195259923, 3978585891), Long_create(97214479, 3182868713), Long_create(1795758501, 2546294970), Long_create(2873213602, 4074071952), Long_create(580583963, 3259257562), Long_create(3041447548, 2607406049), Long_create(2289335700, 4171849679), Long_create(2690462019, 3337479743), Long_create(3870356534, 2669983794), Long_create(3615590076, 4271974071), Long_create(2033478602, 3417579257), Long_create(4203763259, 2734063405),
    Long_create(3363010607, 2187250724), Long_create(2803836594, 3499601159), Long_create(3102062734, 2799680927), Long_create(763663269, 2239744742), Long_create(2080854690, 3583591587), Long_create(4241664129, 2866873269), Long_create(4252324763, 2293498615), Long_create(2508752324, 3669597785), Long_create(2007001859, 2935678228), Long_create(3323588406, 2348542582), Long_create(1881767613, 3757668132), Long_create(4082394468, 3006134505), Long_create(3265915574, 2404907604), Long_create(2648484541, 3847852167),
    Long_create(400800715, 3078281734), Long_create(1179634031, 2462625387), Long_create(2746407909, 3940200619), Long_create(3056119786, 3152160495), Long_create(2444895829, 2521728396), Long_create(2193846408, 4034765434), Long_create(2614070585, 3227812347), Long_create(373269550, 2582249878), Long_create(4033205117, 4131599804), Long_create(4085557553, 3305279843), Long_create(691465664, 2644223875), Long_create(1106345063, 4230758200), Long_create(885076050, 3384606560), Long_create(708060840, 2707685248),
    Long_create(2284435591, 2166148198), Long_create(2796103486, 3465837117), Long_create(518895870, 2772669694), Long_create(1274110155, 2218135755), Long_create(2038576249, 3549017208), Long_create(3348847917, 2839213766), Long_create(1820084875, 2271371013), Long_create(2053142340, 3634193621), Long_create(783520413, 2907354897), Long_create(3203796708, 2325883917), Long_create(1690100896, 3721414268), Long_create(3070067635, 2977131414), Long_create(3315047567, 2381705131), Long_create(3586089190, 3810728210),
    Long_create(2868871352, 3048582568), Long_create(4013084000, 2438866054), Long_create(3843954022, 3902185687), Long_create(1357176299, 3121748550), Long_create(1085741039, 2497398840), Long_create(1737185663, 3995838144), Long_create(2248741989, 3196670515), Long_create(1798993591, 2557336412), Long_create(3737383206, 4091738259), Long_create(3848900024, 3273390607), Long_create(1361133101, 2618712486), Long_create(459826043, 4189939978), Long_create(2085847752, 3351951982), Long_create(4245658579, 2681561585),
    Long_create(2498086431, 4290498537), Long_create(280482227, 3432398830), Long_create(224385781, 2745919064), Long_create(1038502084, 2196735251), Long_create(4238583712, 3514776401), Long_create(2531873511, 2811821121), Long_create(1166505349, 2249456897), Long_create(2725402018, 3599131035), Long_create(2180321615, 2879304828), Long_create(3462244210, 2303443862), Long_create(2103616899, 3685510180), Long_create(1682893519, 2948408144), Long_create(2205308275, 2358726515), Long_create(3528493240, 3773962424),
    Long_create(3681788051, 3019169939), Long_create(3804423900, 2415335951), Long_create(74124026, 3864537523), Long_create(1777286139, 3091630018), Long_create(3139815829, 2473304014), Long_create(2446724950, 3957286423), Long_create(3675366878, 3165829138), Long_create(363313125, 2532663311), Long_create(3158281377, 4052261297), Long_create(808638183, 3241809038), Long_create(2364897465, 2593447230), Long_create(3783835944, 4149515568), Long_create(450088378, 3319612455), Long_create(360070702, 2655689964),
    Long_create(2294100042, 4249103942), Long_create(117293115, 3399283154), Long_create(952827951, 2719426523), Long_create(2480249279, 2175541218), Long_create(3109405388, 3480865949), Long_create(3346517769, 2784692759), Long_create(3536207675, 2227754207), Long_create(2221958443, 3564406732), Long_create(59579836, 2851525386), Long_create(3483637705, 2281220308), Long_create(419859574, 3649952494), Long_create(1194881118, 2919961995), Long_create(955904894, 2335969596), Long_create(4106428209, 3737551353),
    Long_create(708162189, 2990041083), Long_create(2284516670, 2392032866), Long_create(1937239754, 3827252586), Long_create(690798344, 3061802069), Long_create(1411632134, 2449441655), Long_create(2258611415, 3919106648), Long_create(3524876050, 3135285318), Long_create(242920462, 2508228255), Long_create(388672740, 4013165208), Long_create(2028925110, 3210532166), Long_create(764146629, 2568425733), Long_create(363641147, 4109481173), Long_create(2008899836, 3287584938), Long_create(3325106787, 2630067950),
    Long_create(1025203564, 4208108721), Long_create(4256136688, 3366486976), Long_create(2545915891, 2693189581), Long_create(1177739254, 2154551665), Long_create(1884382806, 3447282664), Long_create(2366499704, 2757826131), Long_create(1034206304, 2206260905), Long_create(1654730086, 3530017448), Long_create(3041770987, 2824013958), Long_create(4151403708, 2259211166), Long_create(629291719, 3614737867), Long_create(3080413753, 2891790293), Long_create(4182317920, 2313432234), Long_create(4114728295, 3701491575),
    Long_create(3291782636, 2961193260), Long_create(2633426109, 2368954608), Long_create(3354488315, 3790327373), Long_create(106610275, 3032261899), Long_create(944281679, 2425809519), Long_create(3228837605, 3881295230), Long_create(2583070084, 3105036184), Long_create(2925449526, 2484028947), Long_create(1244745405, 3974446316), Long_create(136802865, 3179557053), Long_create(1827429210, 2543645642), Long_create(3782880196, 4069833027), Long_create(1308317238, 3255866422), Long_create(3623634168, 2604693137),
    Long_create(2361840832, 4167509020), Long_create(1889472666, 3334007216), Long_create(652584673, 2667205773), Long_create(185142018, 4267529237), Long_create(2725093992, 3414023389), Long_create(3039068653, 2731218711), Long_create(1572261463, 2184974969), Long_create(4233605259, 3495959950), Long_create(3386884207, 2796767960), Long_create(2709507366, 2237414368), Long_create(3476218326, 3579862989), Long_create(3639968120, 2863890391), Long_create(2052981037, 2291112313), Long_create(2425776200, 3665779701),
    Long_create(1081627501, 2932623761), Long_create(6308541, 2346099009), Long_create(1728080585, 3753758414), Long_create(2241457927, 3003006731), Long_create(934172882, 2402405385), Long_create(1494676612, 3843848616), Long_create(336747830, 3075078893), Long_create(1987385183, 2460063114), Long_create(602835915, 3936100983), Long_create(2200255650, 3148880786), Long_create(901211061, 2519104629), Long_create(3159924616, 4030567406), Long_create(1668946233, 3224453925), Long_create(1335156987, 2579563140),
    Long_create(2136251179, 4127301024), Long_create(2567994402, 3301840819), Long_create(2913388981, 2641472655), Long_create(366455074, 4226356249), Long_create(1152157518, 3381084999), Long_create(1780719474, 2704867999), Long_create(2283569038, 2163894399), Long_create(1076730083, 3462231039), Long_create(1720377526, 2769784831), Long_create(517308561, 2215827865), Long_create(827693699, 3545324584), Long_create(1521148418, 2836259667), Long_create(3793899112, 2269007733), Long_create(916277824, 3630412374),
    Long_create(1592015718, 2904329899), Long_create(2132606034, 2323463919), Long_create(835189277, 3717542271), Long_create(4104125258, 2974033816), Long_create(2424306747, 2379227053), Long_create(3019897337, 3806763285), Long_create(2415917869, 3045410628), Long_create(3650721214, 2436328502), Long_create(2405180105, 3898125604), Long_create(2783137543, 3118500483), Long_create(3944496953, 2494800386), Long_create(298240911, 3991680619), Long_create(1097586188, 3193344495), Long_create(878068950, 2554675596),
    Long_create(3981890698, 4087480953), Long_create(608532181, 3269984763), Long_create(2204812663, 2615987810), Long_create(3527700261, 4185580496), Long_create(1963166749, 3348464397), Long_create(4147513777, 2678771517), Long_create(3200048207, 4286034428), Long_create(4278025484, 3428827542), Long_create(1704433468, 2743062034), Long_create(2222540234, 2194449627), Long_create(120090538, 3511119404), Long_create(955065889, 2808895523), Long_create(2482039630, 2247116418), Long_create(3112269949, 3595386269),
    Long_create(3348809418, 2876309015), Long_create(2679047534, 2301047212), Long_create(850502218, 3681675540), Long_create(680401775, 2945340432), Long_create(3121301797, 2356272345), Long_create(699115580, 3770035753), Long_create(2277279382, 3016028602), Long_create(103836587, 2412822882), Long_create(1025131999, 3860516611), Long_create(4256079436, 3088413288), Long_create(827883168, 2470730631), Long_create(3901593088, 3953169009)]);
    otcit_DoubleAnalyzer_exp10Table = $rt_createShortArrayFromData([(-70), (-66), (-63), (-60), (-56), (-53), (-50), (-46), (-43), (-40), (-36), (-33), (-30), (-26), (-23), (-20), (-16), (-13), (-10), (-6), (-3), 0, 4, 7, 10, 14, 17, 20, 23, 27, 30, 33, 37, 40, 43, 47, 50, 53, 57, 60, 63, 67, 70, 73, 77, 80, 83, 87, 90, 93, 97, 100, 103, 107, 110, 113, 116, 120, 123, 126, 130, 133, 136, 140, 143, 146, 150, 153, 156, 160, 163, 166, 170, 173, 176, 180, 183, 186, 190, 193, 196, 200, 203, 206, 210, 213, 216, 219,
    223, 226, 229, 233, 236, 239, 243, 246, 249, 253, 256, 259, 263, 266, 269, 273, 276, 279, 283, 286, 289, 293, 296, 299, 303, 306, 309, 312, 316, 319, 322, 326, 329, 332, 336, 339, 342, 346, 349, 352, 356, 359, 362, 366, 369, 372, 376, 379, 382, 386, 389, 392, 396, 399, 402, 406, 409, 412, 415, 419, 422, 425, 429, 432, 435, 439, 442, 445, 449, 452, 455, 459, 462, 465, 469, 472, 475, 479, 482, 485, 489, 492, 495, 499, 502, 505, 508, 512, 515, 518, 522, 525, 528, 532, 535, 538, 542, 545, 548, 552, 555, 558,
    562, 565, 568, 572, 575, 578, 582, 585, 588, 592, 595, 598, 601, 605, 608, 611, 615, 618, 621, 625, 628, 631, 635, 638, 641, 645, 648, 651, 655, 658, 661, 665, 668, 671, 675, 678, 681, 685, 688, 691, 695, 698, 701, 704, 708, 711, 714, 718, 721, 724, 728, 731, 734, 738, 741, 744, 748, 751, 754, 758, 761, 764, 768, 771, 774, 778, 781, 784, 788, 791, 794, 797, 801, 804, 807, 811, 814, 817, 821, 824, 827, 831, 834, 837, 841, 844, 847, 851, 854, 857, 861, 864, 867, 871, 874, 877, 881, 884, 887, 891, 894, 897,
    900, 904, 907, 910, 914, 917, 920, 924, 927, 930, 934, 937, 940, 944, 947, 950, 954, 957, 960, 964, 967, 970, 974, 977, 980, 984, 987, 990, 993, 997, 1000, 1003, 1007, 1010, 1013, 1017, 1020, 1023, 1027, 1030, 1033, 1037, 1040, 1043, 1047, 1050, 1053, 1057, 1060, 1063, 1067, 1070, 1073, 1077, 1080, 1083, 1086, 1090, 1093, 1096, 1100, 1103, 1106, 1110, 1113, 1116, 1120, 1123, 1126, 1130, 1133, 1136, 1140, 1143, 1146, 1150, 1153, 1156, 1160, 1163, 1166, 1170, 1173, 1176, 1180, 1183, 1186, 1189, 1193, 1196,
    1199, 1203, 1206, 1209, 1213, 1216, 1219, 1223, 1226, 1229, 1233, 1236, 1239, 1243, 1246, 1249, 1253, 1256, 1259, 1263, 1266, 1269, 1273, 1276, 1279, 1282, 1286, 1289, 1292, 1296, 1299, 1302, 1306, 1309, 1312, 1316, 1319, 1322, 1326, 1329, 1332, 1336, 1339, 1342, 1346, 1349, 1352, 1356, 1359, 1362, 1366, 1369, 1372, 1376, 1379, 1382, 1385, 1389, 1392, 1395, 1399, 1402, 1405, 1409, 1412, 1415, 1419, 1422, 1425, 1429, 1432, 1435, 1439, 1442, 1445, 1449, 1452, 1455, 1459, 1462, 1465, 1469, 1472, 1475, 1478,
    1482, 1485, 1488, 1492, 1495, 1498, 1502, 1505, 1508, 1512, 1515, 1518, 1522, 1525, 1528, 1532, 1535, 1538, 1542, 1545, 1548, 1552, 1555, 1558, 1562, 1565, 1568, 1572, 1575, 1578, 1581, 1585, 1588, 1591, 1595, 1598, 1601, 1605, 1608, 1611, 1615, 1618, 1621, 1625, 1628, 1631, 1635, 1638, 1641, 1645, 1648, 1651, 1655, 1658, 1661, 1665, 1668, 1671, 1674, 1678, 1681, 1684, 1688, 1691, 1694, 1698, 1701, 1704, 1708, 1711, 1714, 1718, 1721, 1724, 1728, 1731, 1734, 1738, 1741, 1744, 1748, 1751, 1754, 1758, 1761,
    1764, 1767, 1771, 1774, 1777, 1781, 1784, 1787, 1791, 1794, 1797, 1801, 1804, 1807, 1811, 1814, 1817, 1821, 1824, 1827, 1831, 1834, 1837, 1841, 1844, 1847, 1851, 1854, 1857, 1861, 1864, 1867, 1870, 1874, 1877, 1880, 1884, 1887, 1890, 1894, 1897, 1900, 1904, 1907, 1910, 1914, 1917, 1920, 1924, 1927, 1930, 1934, 1937, 1940, 1944, 1947, 1950, 1954, 1957, 1960, 1963, 1967, 1970, 1973, 1977, 1980, 1983, 1987, 1990, 1993, 1997, 2000, 2003, 2007, 2010, 2013, 2017, 2020, 2023, 2027, 2030, 2033, 2037, 2040, 2043,
    2047, 2050, 2053, 2057, 2060, 2063, 2066, 2070, 2073, 2076, 2080, 2083, 2086, 2090, 2093, 2096, 2100, 2103, 2106, 2110, 2113, 2116, 2120]);
};
function igbca_APILoader$getOrMake$lambda$_1_0() {
    jl_Object.call(this);
    this.$_0 = null;
}
let igbca_APILoader$getOrMake$lambda$_1_0_test = (var$0, var$1) => {
    let var$2;
    var$1 = var$1;
    var$2 = var$0.$_0;
    return jl_String_equals(var$1.$fullName, var$2);
};
function igbca_APILoader$getOrMake$lambda$_1_1() {
    jl_Object.call(this);
    this.$_015 = null;
}
function otcit_DoubleAnalyzer$Result() {
    let a = this; jl_Object.call(a);
    a.$mantissa0 = Long_ZERO;
    a.$exponent = 0;
    a.$sign = 0;
}
let otcit_DoubleAnalyzer$Result__init_ = $this => {
    return;
},
otcit_DoubleAnalyzer$Result__init_0 = () => {
    let var_0 = new otcit_DoubleAnalyzer$Result();
    otcit_DoubleAnalyzer$Result__init_(var_0);
    return var_0;
},
jur_BackReferencedSingleSet = $rt_classWithoutFields(jur_SingleSet),
jur_BackReferencedSingleSet_find = ($this, $startSearch, $testString, $matchResult) => {
    let $res, $lastIndex, $saveStart;
    $res = 0;
    $lastIndex = $matchResult.$rightBound;
    a: {
        while (true) {
            if ($startSearch > $lastIndex) {
                $startSearch = $res;
                break a;
            }
            $saveStart = jur_MatchResultImpl_getStart($matchResult, $this.$groupIndex);
            jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex, $startSearch);
            $res = $this.$kid.$matches1($startSearch, $testString, $matchResult);
            if ($res >= 0)
                break;
            jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex, $saveStart);
            $startSearch = $startSearch + 1 | 0;
        }
    }
    return $startSearch;
},
jur_BackReferencedSingleSet_findBack = ($this, $stringIndex, $startSearch, $testString, $matchResult) => {
    let $res, $saveStart;
    $res = 0;
    a: {
        while (true) {
            if ($startSearch < $stringIndex) {
                $startSearch = $res;
                break a;
            }
            $saveStart = jur_MatchResultImpl_getStart($matchResult, $this.$groupIndex);
            jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex, $startSearch);
            $res = $this.$kid.$matches1($startSearch, $testString, $matchResult);
            if ($res >= 0)
                break;
            jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex, $saveStart);
            $startSearch = $startSearch + (-1) | 0;
        }
    }
    return $startSearch;
},
jur_BackReferencedSingleSet_processBackRefReplacement = $this => {
    return null;
};
function jnci_BufferedDecoder$Controller() {
    let a = this; jl_Object.call(a);
    a.$in0 = null;
    a.$out1 = null;
    a.$inPosition = 0;
    a.$outPosition = 0;
}
let jnci_BufferedDecoder$Controller_hasMoreInput = ($this, $sz) => {
    return jn_Buffer_remaining($this.$in0) < $sz ? 0 : 1;
},
jnci_BufferedDecoder$Controller_hasMoreOutput = ($this, $sz) => {
    return jn_Buffer_remaining($this.$out1) < $sz ? 0 : 1;
};
function jusi_WrappingStreamImpl() {
    jusi_SimpleStreamImpl.call(this);
    this.$sourceStream = null;
}
let jusi_WrappingStreamImpl__init_ = ($this, $sourceStream) => {
    $this.$sourceStream = $sourceStream;
},
jusi_WrappingStreamImpl_next = ($this, $consumer) => {
    return $this.$sourceStream.$next1($this.$wrap4($consumer));
},
jusi_WrappingStreamImpl_estimateSize = $this => {
    return $this.$sourceStream.$estimateSize();
};
function jusi_FilteringStreamImpl() {
    jusi_WrappingStreamImpl.call(this);
    this.$filter0 = null;
}
let jusi_FilteringStreamImpl_wrap = ($this, $consumer) => {
    let var$2;
    var$2 = new jusi_FilteringStreamImpl$wrap$lambda$_1_0;
    var$2.$_07 = $this;
    var$2.$_12 = $consumer;
    return var$2;
};
function jusi_StreamOverSpliterator() {
    jusi_SimpleStreamImpl.call(this);
    this.$spliterator = null;
}
let jusi_StreamOverSpliterator_next = ($this, $action$consumer) => {
    let $action$wantsMore, var$3, var$4;
    $action$wantsMore = 0;
    while (true) {
        var$3 = $this.$spliterator;
        if (var$3.$iterator0 === null)
            var$3.$iterator0 = ju_AbstractList_iterator(var$3.$collection);
        if (!ju_AbstractList$1_hasNext(var$3.$iterator0))
            var$4 = 0;
        else {
            $action$wantsMore = $action$consumer.$test(ju_AbstractList$1_next(var$3.$iterator0));
            var$4 = 1;
        }
        if (!var$4)
            return 0;
        if (!$action$wantsMore)
            break;
    }
    return 1;
},
jusi_StreamOverSpliterator_estimateSize = $this => {
    return Long_lo(Long_fromInt($this.$spliterator.$collection.$size0));
},
jn_BufferUnderflowException = $rt_classWithoutFields(jl_RuntimeException);
function jur_AbstractCharClass$LazyJavaLowerCase$1() {
    jur_AbstractCharClass.call(this);
    this.$this$023 = null;
}
let jur_AbstractCharClass$LazyJavaLowerCase$1_contains = ($this, $ch) => {
    return jl_Character_getType($ch) != 2 ? 0 : 1;
};
function jur_AbstractCharClass$LazyJavaUpperCase$1() {
    jur_AbstractCharClass.call(this);
    this.$this$026 = null;
}
let jur_AbstractCharClass$LazyJavaUpperCase$1_contains = ($this, $ch) => {
    return jl_Character_getType($ch) != 1 ? 0 : 1;
};
function jur_AbstractCharClass$LazyJavaWhitespace$1() {
    jur_AbstractCharClass.call(this);
    this.$this$021 = null;
}
let jur_AbstractCharClass$LazyJavaWhitespace$1_contains = ($this, $ch) => {
    return jl_Character_isWhitespace($ch);
};
function jur_AbstractCharClass$LazyJavaMirrored$1() {
    jur_AbstractCharClass.call(this);
    this.$this$019 = null;
}
let jur_AbstractCharClass$LazyJavaMirrored$1_contains = ($this, $ch) => {
    return 0;
};
function jur_AbstractCharClass$LazyJavaDefined$1() {
    jur_AbstractCharClass.call(this);
    this.$this$033 = null;
}
let jur_AbstractCharClass$LazyJavaDefined$1_contains = ($this, $ch) => {
    return !jl_Character_getType($ch) ? 0 : 1;
};
function jur_AbstractCharClass$LazyJavaDigit$1() {
    jur_AbstractCharClass.call(this);
    this.$this$028 = null;
}
let jur_AbstractCharClass$LazyJavaDigit$1_contains = ($this, $ch) => {
    return jl_Character_getType($ch) != 9 ? 0 : 1;
};
function jur_AbstractCharClass$LazyJavaIdentifierIgnorable$1() {
    jur_AbstractCharClass.call(this);
    this.$this$036 = null;
}
let jur_AbstractCharClass$LazyJavaIdentifierIgnorable$1_contains = ($this, $ch) => {
    return jl_Character_isIdentifierIgnorable($ch);
};
function jur_AbstractCharClass$LazyJavaISOControl$1() {
    jur_AbstractCharClass.call(this);
    this.$this$024 = null;
}
let jur_AbstractCharClass$LazyJavaISOControl$1_contains = ($this, $ch) => {
    a: {
        b: {
            if (!($ch >= 0 && $ch <= 31)) {
                if ($ch < 127)
                    break b;
                if ($ch > 159)
                    break b;
            }
            $ch = 1;
            break a;
        }
        $ch = 0;
    }
    return $ch;
};
function jur_AbstractCharClass$LazyJavaJavaIdentifierPart$1() {
    jur_AbstractCharClass.call(this);
    this.$this$010 = null;
}
let jur_AbstractCharClass$LazyJavaJavaIdentifierPart$1_contains = ($this, $ch) => {
    a: {
        b: {
            switch (jl_Character_getType($ch)) {
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 8:
                case 9:
                case 10:
                case 23:
                case 26:
                    break;
                case 7:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 24:
                case 25:
                    break b;
                default:
                    break b;
            }
            $ch = 1;
            break a;
        }
        $ch = jl_Character_isIdentifierIgnorable($ch);
    }
    return $ch;
};
function jur_AbstractCharClass$LazyJavaJavaIdentifierStart$1() {
    jur_AbstractCharClass.call(this);
    this.$this$029 = null;
}
let jur_AbstractCharClass$LazyJavaJavaIdentifierStart$1_contains = ($this, $ch) => {
    a: {
        b: {
            switch (jl_Character_getType($ch)) {
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 10:
                case 23:
                case 26:
                    break;
                case 6:
                case 7:
                case 8:
                case 9:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 24:
                case 25:
                    break b;
                default:
                    break b;
            }
            $ch = 1;
            break a;
        }
        $ch = jl_Character_isIdentifierIgnorable($ch);
    }
    return $ch;
};
function jur_AbstractCharClass$LazyJavaLetter$1() {
    jur_AbstractCharClass.call(this);
    this.$this$032 = null;
}
let jur_AbstractCharClass$LazyJavaLetter$1_contains = ($this, $ch) => {
    a: {
        switch (jl_Character_getType($ch)) {
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
                break;
            default:
                $ch = 0;
                break a;
        }
        $ch = 1;
    }
    return $ch;
};
function jur_AbstractCharClass$LazyJavaLetterOrDigit$1() {
    jur_AbstractCharClass.call(this);
    this.$this$035 = null;
}
let jur_AbstractCharClass$LazyJavaLetterOrDigit$1_contains = ($this, $ch) => {
    return jl_Character_isLetterOrDigit($ch);
};
function jur_AbstractCharClass$LazyJavaSpaceChar$1() {
    jur_AbstractCharClass.call(this);
    this.$this$022 = null;
}
let jur_AbstractCharClass$LazyJavaSpaceChar$1_contains = ($this, $ch) => {
    return jl_Character_isSpaceChar($ch);
};
function jur_AbstractCharClass$LazyJavaTitleCase$1() {
    jur_AbstractCharClass.call(this);
    this.$this$030 = null;
}
let jur_AbstractCharClass$LazyJavaTitleCase$1_contains = ($this, $ch) => {
    return jl_Character_getType($ch) != 3 ? 0 : 1;
};
function jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart$1() {
    jur_AbstractCharClass.call(this);
    this.$this$011 = null;
}
let jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart$1_contains = ($this, $ch) => {
    a: {
        b: {
            switch (jl_Character_getType($ch)) {
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 8:
                case 9:
                case 10:
                case 23:
                    break;
                case 7:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                    break b;
                default:
                    break b;
            }
            $ch = 1;
            break a;
        }
        $ch = jl_Character_isIdentifierIgnorable($ch);
    }
    return $ch;
};
function jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart$1() {
    jur_AbstractCharClass.call(this);
    this.$this$040 = null;
}
let jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart$1_contains = ($this, $ch) => {
    a: {
        b: {
            switch (jl_Character_getType($ch)) {
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 10:
                    break;
                case 6:
                case 7:
                case 8:
                case 9:
                    break b;
                default:
                    break b;
            }
            $ch = 1;
            break a;
        }
        $ch = jl_Character_isIdentifierIgnorable($ch);
    }
    return $ch;
};
function jur_UnicodeCategory() {
    jur_AbstractCharClass.call(this);
    this.$category = 0;
}
let jur_UnicodeCategory__init_ = ($this, $category) => {
    jur_AbstractCharClass__init_($this);
    $this.$category = $category;
},
jur_UnicodeCategory__init_0 = var_0 => {
    let var_1 = new jur_UnicodeCategory();
    jur_UnicodeCategory__init_(var_1, var_0);
    return var_1;
},
jur_UnicodeCategory_contains = ($this, $ch) => {
    return $this.$alt ^ ($this.$category != jl_Character_getType($ch & 65535) ? 0 : 1);
},
jur_UnicodeCategoryScope = $rt_classWithoutFields(jur_UnicodeCategory),
jur_UnicodeCategoryScope_contains = ($this, $ch) => {
    return $this.$alt ^ (!($this.$category >> jl_Character_getType($ch & 65535) & 1) ? 0 : 1);
},
jnci_Iso8859Decoder = $rt_classWithoutFields(jnci_BufferedDecoder),
jnci_Iso8859Decoder_arrayDecode = ($this, $inArray, $inPos, $inSize, $outArray, $outPos, $outSize, $controller) => {
    let $result, var$9, var$10, var$11, $b, var$13;
    $result = null;
    while ($inPos < $inSize && $outPos < $outSize) {
        var$9 = $inArray.data;
        var$10 = $outArray.data;
        var$11 = $inPos + 1 | 0;
        $b = var$9[$inPos] & 255;
        var$13 = $outPos + 1 | 0;
        var$10[$outPos] = $b & 65535;
        $inPos = var$11;
        $outPos = var$13;
    }
    $controller.$inPosition = $inPos;
    $controller.$outPosition = $outPos;
    return $result;
};
function jnci_UTF16Decoder() {
    let a = this; jnci_BufferedDecoder.call(a);
    a.$bom = 0;
    a.$littleEndian = 0;
}
let jnci_UTF16Decoder_arrayDecode = ($this, $inArray, $inPos, $inSize, $outArray, $outPos, $outSize, $controller) => {
    let var$8, var$9, $b;
    if ($this.$bom) {
        if (($inPos + 2 | 0) > $inSize)
            return !jn_Buffer_hasRemaining($controller.$in0) ? jnc_CoderResult_UNDERFLOW : null;
        var$8 = $inArray.data;
        $this.$bom = 0;
        var$9 = $inPos + 1 | 0;
        $b = var$8[$inPos];
        if ($b == (-1)) {
            if (var$8[var$9] != (-2))
                $inPos = var$9 + (-1) | 0;
            else {
                $inPos = var$9 + 1 | 0;
                $this.$littleEndian = 1;
            }
        } else if ($b != (-2))
            $inPos = var$9 + (-1) | 0;
        else if (var$8[var$9] != (-1))
            $inPos = var$9 + (-1) | 0;
        else {
            $inPos = var$9 + 1 | 0;
            $this.$littleEndian = 0;
        }
    }
    return !$this.$littleEndian ? jnci_UTF16Decoder_decodeBE($this, $inArray, $inPos, $inSize, $outArray, $outPos, $outSize, $controller) : jnci_UTF16Decoder_decodeLE($this, $inArray, $inPos, $inSize, $outArray, $outPos, $outSize, $controller);
},
jnci_UTF16Decoder_decodeLE = ($this, $inArray, $inPos, $inSize, $outArray, $outPos, $outSize, $controller) => {
    let $result, var$9, $b2, $b1, $c, $next;
    $result = null;
    a: {
        while ($inPos < $inSize) {
            if ($outPos >= $outSize)
                break a;
            if (($inPos + 2 | 0) > $inSize) {
                if (jnci_BufferedDecoder$Controller_hasMoreInput($controller, 2))
                    break a;
                $result = jnc_CoderResult_UNDERFLOW;
                break a;
            }
            var$9 = $inArray.data;
            $b2 = $inPos + 1 | 0;
            $b1 = var$9[$inPos] & 255;
            $inPos = $b2 + 1 | 0;
            $c = ($b1 | (var$9[$b2] & 255) << 8) & 65535;
            if (!jl_Character_isHighSurrogate($c)) {
                if (jl_Character_isLowSurrogate($c)) {
                    $inPos = $inPos + (-2) | 0;
                    $result = jnc_CoderResult_malformedForLength(2);
                    break a;
                }
                var$9 = $outArray.data;
                $b2 = $outPos + 1 | 0;
                var$9[$outPos] = $c;
                $outPos = $b2;
            } else {
                if (($inPos + 2 | 0) >= $inSize) {
                    if (!jnci_BufferedDecoder$Controller_hasMoreInput($controller, 4))
                        $result = jnc_CoderResult_UNDERFLOW;
                    $inPos = $inPos + (-2) | 0;
                    break a;
                }
                $b2 = $inPos + 1 | 0;
                $b1 = var$9[$inPos] & 255;
                $inPos = $b2 + 1 | 0;
                $next = ($b1 | (var$9[$b2] & 255) << 8) & 65535;
                if (!jl_Character_isLowSurrogate($next)) {
                    $inPos = $inPos + (-4) | 0;
                    $result = jnc_CoderResult_malformedForLength(4);
                    break a;
                }
                if (($outPos + 2 | 0) > $outSize) {
                    if (jnci_BufferedDecoder$Controller_hasMoreOutput($controller, 2))
                        break a;
                    $result = jnc_CoderResult_OVERFLOW;
                    break a;
                }
                var$9 = $outArray.data;
                $b2 = $outPos + 1 | 0;
                var$9[$outPos] = $c;
                $outPos = $b2 + 1 | 0;
                var$9[$b2] = $next;
            }
        }
    }
    $controller.$inPosition = $inPos;
    $controller.$outPosition = $outPos;
    return $result;
},
jnci_UTF16Decoder_decodeBE = ($this, $inArray, $inPos, $inSize, $outArray, $outPos, $outSize, $controller) => {
    let $result, var$9, $b2, $b1, $c, $next;
    $result = null;
    a: {
        while ($inPos < $inSize) {
            if ($outPos >= $outSize)
                break a;
            if (($inPos + 2 | 0) > $inSize) {
                if (jnci_BufferedDecoder$Controller_hasMoreInput($controller, 2))
                    break a;
                $result = jnc_CoderResult_UNDERFLOW;
                break a;
            }
            var$9 = $inArray.data;
            $b2 = $inPos + 1 | 0;
            $b1 = var$9[$inPos] & 255;
            $inPos = $b2 + 1 | 0;
            $c = (var$9[$b2] & 255 | $b1 << 8) & 65535;
            if (!jl_Character_isHighSurrogate($c)) {
                if (jl_Character_isLowSurrogate($c)) {
                    $inPos = $inPos + (-2) | 0;
                    $result = jnc_CoderResult_malformedForLength(2);
                    break a;
                }
                var$9 = $outArray.data;
                $b2 = $outPos + 1 | 0;
                var$9[$outPos] = $c;
                $outPos = $b2;
            } else {
                if (($inPos + 2 | 0) >= $inSize) {
                    if (!jnci_BufferedDecoder$Controller_hasMoreInput($controller, 4))
                        $result = jnc_CoderResult_UNDERFLOW;
                    $inPos = $inPos + (-2) | 0;
                    break a;
                }
                $b2 = $inPos + 1 | 0;
                $b1 = var$9[$inPos] & 255;
                $inPos = $b2 + 1 | 0;
                $next = (var$9[$b2] & 255 | $b1 << 8) & 65535;
                if (!jl_Character_isLowSurrogate($next)) {
                    $inPos = $inPos + (-4) | 0;
                    $result = jnc_CoderResult_malformedForLength(4);
                    break a;
                }
                if (($outPos + 2 | 0) > $outSize) {
                    if (jnci_BufferedDecoder$Controller_hasMoreOutput($controller, 2))
                        break a;
                    $result = jnc_CoderResult_OVERFLOW;
                    break a;
                }
                var$9 = $outArray.data;
                $b2 = $outPos + 1 | 0;
                var$9[$outPos] = $c;
                $outPos = $b2 + 1 | 0;
                var$9[$b2] = $next;
            }
        }
    }
    $controller.$inPosition = $inPos;
    $controller.$outPosition = $outPos;
    return $result;
},
jnci_AsciiDecoder = $rt_classWithoutFields(jnci_BufferedDecoder),
jnci_AsciiDecoder_arrayDecode = ($this, $inArray, $inPos, $inSize, $outArray, $outPos, $outSize, $controller) => {
    let $result, var$9, var$10, $b, var$12;
    $result = null;
    a: {
        while ($inPos < $inSize) {
            if ($outPos >= $outSize)
                break a;
            var$9 = $inArray.data;
            var$10 = $inPos + 1 | 0;
            $b = var$9[$inPos] & 255;
            if ($b & 128) {
                $result = jnc_CoderResult_malformedForLength(1);
                $inPos = var$10 + (-1) | 0;
                break a;
            }
            var$9 = $outArray.data;
            var$12 = $outPos + 1 | 0;
            var$9[$outPos] = $b & 65535;
            $inPos = var$10;
            $outPos = var$12;
        }
    }
    $controller.$inPosition = $inPos;
    $controller.$outPosition = $outPos;
    return $result;
},
ju_ConcurrentModificationException = $rt_classWithoutFields(jl_RuntimeException),
ju_NoSuchElementException = $rt_classWithoutFields(jl_RuntimeException);
function jnc_CharsetEncoder() {
    let a = this; jl_Object.call(a);
    a.$charset0 = null;
    a.$replacement1 = null;
    a.$averageBytesPerChar = 0.0;
    a.$maxBytesPerChar = 0.0;
    a.$malformedAction0 = null;
    a.$unmappableAction = null;
    a.$status = 0;
}
let jur_IntArrHash = $rt_classWithoutFields();
function ooa_ClassReader() {
    let a = this; jl_Object.call(a);
    a.$b = null;
    a.$header = 0;
    a.$classFileBuffer = null;
    a.$cpInfoOffsets = null;
    a.$constantUtf8Values = null;
    a.$constantDynamicValues = null;
    a.$bootstrapMethodOffsets = null;
    a.$maxStringLength = 0;
}
let ooa_ClassReader__init_ = ($this, $className) => {
    let var$2, var$3, var$4, var$5, var$6, var$7, var$8, var$9, var$10, var$11, var$12, var$13, $$je;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_AbstractStringBuilder_append0(var$2, jl_String_replace0($className, 46, 47));
    jl_AbstractStringBuilder_append0(var$2, $rt_s(156));
    var$2 = jl_AbstractStringBuilder_toString(var$2);
    jl_ClassLoader_$callClinit();
    var$2 = jl_ClassLoader_getResourceAsStream(jl_ClassLoader_getSystemClassLoader(), var$2);
    if (var$2 === null) {
        $className = new ji_IOException;
        jl_Throwable__init_0($className, $rt_s(538));
        $rt_throw($className);
    }
    var$3 = var$2.$count1 - var$2.$pos0 | 0;
    var$3 = var$3 < 256 ? 4096 : jl_Math_min(var$3, 1048576);
    a: {
        b: {
            c: {
                try {
                    $className = ji_ByteArrayOutputStream__init_();
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    $className = $$je;
                    break c;

                }
                d: {
                    e: {
                        try {
                            var$4 = $rt_createByteArray(var$3);
                            var$5 = 0;
                            while (true) {
                                var$6 = ji_ByteArrayInputStream_read(var$2, var$4, 0, var$3);
                                if (var$6 == (-1))
                                    break;
                                ji_ByteArrayOutputStream_write($className, var$4, 0, var$6);
                                var$5 = var$5 + 1 | 0;
                            }
                        } catch ($$e) {
                            $$je = $rt_wrapException($$e);
                            if ($$je instanceof jl_Throwable) {
                                var$2 = $$je;
                                break e;
                            } else{
                                $className = $$je;
                                break c;
                            }
                        }
                        f: {
                            try {
                                try {
                                    ji_OutputStream_flush($className);
                                    if (var$5 != 1)
                                        break f;
                                } catch ($$e) {
                                    $$je = $rt_wrapException($$e);
                                    if ($$je instanceof jl_Throwable) {
                                        var$2 = $$je;
                                        break e;
                                    } else {
                                        throw $$e;
                                    }
                                }
                                ji_OutputStream_close($className);
                            } catch ($$e) {
                                $$je = $rt_wrapException($$e);
                                $className = $$je;
                                break c;

                            }
                            break a;
                        }
                        try {
                            var$4 = ji_ByteArrayOutputStream_toByteArray($className);
                            break d;
                        } catch ($$e) {
                            $$je = $rt_wrapException($$e);
                            if ($$je instanceof jl_Throwable) {
                                var$2 = $$je;
                            } else{
                                $className = $$je;
                                break c;
                            }
                        }
                    }
                    try {
                        g: {
                            try {
                                ji_OutputStream_close($className);
                                break g;
                            } catch ($$e) {
                                $$je = $rt_wrapException($$e);
                                if ($$je instanceof jl_Throwable) {
                                } else {
                                    throw $$e;
                                }
                            }
                        }
                        $rt_throw(var$2);
                    } catch ($$e) {
                        $$je = $rt_wrapException($$e);
                        $className = $$je;
                        break c;

                    }
                }
                try {
                    ji_OutputStream_close($className);
                    break b;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    $className = $$je;

                }
            }
            $rt_throw($className);
        }
    }
    $this.$classFileBuffer = var$4;
    $this.$b = var$4;
    if (ooa_ClassReader_readShort($this, 6) > 66) {
        $className = new jl_IllegalArgumentException;
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        jl_AbstractStringBuilder_append0(var$2, $rt_s(539));
        jl_Throwable__init_0($className, jl_AbstractStringBuilder_toString(jl_StringBuilder_append0(var$2, ooa_ClassReader_readShort($this, 6))));
        $rt_throw($className);
    }
    var$3 = ooa_ClassReader_readUnsignedShort($this, 8);
    $this.$cpInfoOffsets = $rt_createIntArray(var$3);
    $this.$constantUtf8Values = $rt_createArray(jl_String, var$3);
    var$5 = 1;
    var$7 = 10;
    var$8 = 0;
    var$9 = 0;
    var$10 = 0;
    h: while (true) {
        if (var$5 >= var$3) {
            $this.$maxStringLength = var$8;
            $this.$header = var$7;
            var$4 = !var$10 ? null : $rt_createArray(ooa_ConstantDynamic, var$3);
            i: {
                $this.$constantDynamicValues = var$4;
                if (!var$9)
                    var$4 = null;
                else {
                    var$4 = $rt_createCharArray(var$8);
                    var$7 = ooa_ClassReader_getFirstAttributeOffset($this);
                    var$3 = ooa_ClassReader_readUnsignedShort($this, var$7 - 2 | 0);
                    while (var$3 > 0) {
                        $className = ooa_ClassReader_readUTF8($this, var$7, var$4);
                        var$5 = ooa_ClassReader_readInt($this, var$7 + 2 | 0);
                        var$6 = var$7 + 6 | 0;
                        if (jl_String_equals($rt_s(540), $className)) {
                            var$4 = $rt_createIntArray(ooa_ClassReader_readUnsignedShort($this, var$6));
                            var$11 = var$4.data;
                            var$3 = var$6 + 2 | 0;
                            var$5 = 0;
                            var$7 = var$11.length;
                            while (var$5 < var$7) {
                                var$11[var$5] = var$3;
                                var$3 = var$3 + (4 + (ooa_ClassReader_readUnsignedShort($this, var$3 + 2 | 0) * 2 | 0) | 0) | 0;
                                var$5 = var$5 + 1 | 0;
                            }
                            break i;
                        }
                        var$7 = var$6 + var$5 | 0;
                        var$3 = var$3 + (-1) | 0;
                    }
                    $className = new jl_IllegalArgumentException;
                    jl_Throwable__init_($className);
                    $rt_throw($className);
                }
            }
            $this.$bootstrapMethodOffsets = var$4;
            return;
        }
        j: {
            var$12 = var$4.data;
            var$11 = $this.$cpInfoOffsets.data;
            var$13 = var$5 + 1 | 0;
            var$6 = var$7 + 1 | 0;
            var$11[var$5] = var$6;
            switch (var$12[var$7]) {
                case 1:
                    var$5 = 3 + ooa_ClassReader_readUnsignedShort($this, var$6) | 0;
                    if (var$5 <= var$8) {
                        var$6 = var$5;
                        break j;
                    }
                    var$6 = var$5;
                    var$8 = var$5;
                    break j;
                case 2:
                case 13:
                case 14:
                    break h;
                case 3:
                case 4:
                case 9:
                case 10:
                case 11:
                case 12:
                    break;
                case 5:
                case 6:
                    var$6 = 9;
                    var$13 = var$13 + 1 | 0;
                    break j;
                case 7:
                case 8:
                case 16:
                case 19:
                case 20:
                    var$6 = 3;
                    break j;
                case 15:
                    var$6 = 4;
                    break j;
                case 17:
                    var$6 = 5;
                    var$9 = 1;
                    var$10 = 1;
                    break j;
                case 18:
                    var$6 = 5;
                    var$9 = 1;
                    break j;
                default:
                    break h;
            }
            var$6 = 5;
        }
        var$7 = var$7 + var$6 | 0;
        var$5 = var$13;
    }
    $className = new jl_IllegalArgumentException;
    jl_Throwable__init_($className);
    $rt_throw($className);
},
ooa_ClassReader__init_0 = var_0 => {
    let var_1 = new ooa_ClassReader();
    ooa_ClassReader__init_(var_1, var_0);
    return var_1;
},
ooa_ClassReader_accept = ($this, $classVisitor, $attributePrototypes, $parsingOptions) => {
    let $context, $charBuffer, $currentOffset, $accessFlags, $thisClass, $superClass, $interfaces, var$11, $i, $currentAttributeOffset, $innerClassesOffset, $enclosingMethodOffset, $signature, $sourceFile, $sourceDebugExtension, $runtimeVisibleAnnotationsOffset, $runtimeInvisibleAnnotationsOffset, $runtimeVisibleTypeAnnotationsOffset, $runtimeInvisibleTypeAnnotationsOffset, $moduleOffset, $modulePackagesOffset, $moduleMainClass, $nestHostClass, $nestMembersOffset, $permittedSubclassesOffset, $recordOffset, $attributes,
    $className, $methodIndex, $numAnnotations, $currentAnnotationOffset, $annotationDescriptor, $nextAttribute, $numberOfNestMembers, $currentNestMemberOffset, $numberOfPermittedSubclasses, $currentPermittedSubclassesOffset, $numberOfClasses, $currentClassesOffset, $recordComponentsCount, $fieldsCount, $methodsCount, $attributeName, $attributeLength, $attribute;
    $context = ooa_Context__init_();
    $context.$attributePrototypes = $attributePrototypes;
    $context.$parsingOptions = $parsingOptions;
    $charBuffer = $rt_createCharArray($this.$maxStringLength);
    $context.$charBuffer = $charBuffer;
    $currentOffset = $this.$header;
    $accessFlags = ooa_ClassReader_readUnsignedShort($this, $currentOffset);
    $thisClass = ooa_ClassReader_readClass($this, $currentOffset + 2 | 0, $charBuffer);
    $superClass = ooa_ClassReader_readClass($this, $currentOffset + 4 | 0, $charBuffer);
    $interfaces = $rt_createArray(jl_String, ooa_ClassReader_readUnsignedShort($this, $currentOffset + 6 | 0));
    var$11 = $interfaces.data;
    $currentOffset = $currentOffset + 8 | 0;
    $i = 0;
    $currentAttributeOffset = var$11.length;
    while ($i < $currentAttributeOffset) {
        var$11[$i] = ooa_ClassReader_readClass($this, $currentOffset, $charBuffer);
        $currentOffset = $currentOffset + 2 | 0;
        $i = $i + 1 | 0;
    }
    $innerClassesOffset = 0;
    $enclosingMethodOffset = 0;
    $signature = null;
    $sourceFile = null;
    $sourceDebugExtension = null;
    $runtimeVisibleAnnotationsOffset = 0;
    $runtimeInvisibleAnnotationsOffset = 0;
    $runtimeVisibleTypeAnnotationsOffset = 0;
    $runtimeInvisibleTypeAnnotationsOffset = 0;
    $moduleOffset = 0;
    $modulePackagesOffset = 0;
    $moduleMainClass = null;
    $nestHostClass = null;
    $nestMembersOffset = 0;
    $permittedSubclassesOffset = 0;
    $recordOffset = 0;
    $attributes = null;
    $currentAttributeOffset = ooa_ClassReader_getFirstAttributeOffset($this);
    $i = ooa_ClassReader_readUnsignedShort($this, $currentAttributeOffset - 2 | 0);
    a: while (true) {
        if ($i <= 0) {
            ooat_ClassNode_visit($classVisitor, ooa_ClassReader_readInt($this, $this.$cpInfoOffsets.data[1] - 7 | 0), $accessFlags, $thisClass, $signature, $superClass, $interfaces);
            if (!($parsingOptions & 2) && !($sourceFile === null && $sourceDebugExtension === null))
                ooat_ClassNode_visitSource($classVisitor, $sourceFile, $sourceDebugExtension);
            if ($moduleOffset)
                ooa_ClassReader_readModuleAttributes($this, $classVisitor, $context, $moduleOffset, $modulePackagesOffset, $moduleMainClass);
            if ($nestHostClass !== null)
                ooat_ClassNode_visitNestHost($classVisitor, $nestHostClass);
            if ($enclosingMethodOffset) {
                $className = ooa_ClassReader_readClass($this, $enclosingMethodOffset, $charBuffer);
                $methodIndex = ooa_ClassReader_readUnsignedShort($this, $enclosingMethodOffset + 2 | 0);
                ooat_ClassNode_visitOuterClass($classVisitor, $className, !$methodIndex ? null : ooa_ClassReader_readUTF8($this, $this.$cpInfoOffsets.data[$methodIndex], $charBuffer), !$methodIndex ? null : ooa_ClassReader_readUTF8($this, $this.$cpInfoOffsets.data[$methodIndex] + 2 | 0, $charBuffer));
            }
            b: {
                if ($runtimeVisibleAnnotationsOffset) {
                    $numAnnotations = ooa_ClassReader_readUnsignedShort($this, $runtimeVisibleAnnotationsOffset);
                    $currentAnnotationOffset = $runtimeVisibleAnnotationsOffset + 2 | 0;
                    while (true) {
                        $parsingOptions = $numAnnotations + (-1) | 0;
                        if ($numAnnotations <= 0)
                            break b;
                        $annotationDescriptor = ooa_ClassReader_readUTF8($this, $currentAnnotationOffset, $charBuffer);
                        $accessFlags = $currentAnnotationOffset + 2 | 0;
                        $currentAnnotationOffset = ooa_ClassReader_readElementValues($this, ooat_ClassNode_visitAnnotation($classVisitor, $annotationDescriptor, 1), $accessFlags, 1, $charBuffer);
                        $numAnnotations = $parsingOptions;
                    }
                }
            }
            c: {
                if ($runtimeInvisibleAnnotationsOffset) {
                    $numAnnotations = ooa_ClassReader_readUnsignedShort($this, $runtimeInvisibleAnnotationsOffset);
                    $currentAnnotationOffset = $runtimeInvisibleAnnotationsOffset + 2 | 0;
                    while (true) {
                        $parsingOptions = $numAnnotations + (-1) | 0;
                        if ($numAnnotations <= 0)
                            break c;
                        $annotationDescriptor = ooa_ClassReader_readUTF8($this, $currentAnnotationOffset, $charBuffer);
                        $accessFlags = $currentAnnotationOffset + 2 | 0;
                        $currentAnnotationOffset = ooa_ClassReader_readElementValues($this, ooat_ClassNode_visitAnnotation($classVisitor, $annotationDescriptor, 0), $accessFlags, 1, $charBuffer);
                        $numAnnotations = $parsingOptions;
                    }
                }
            }
            d: {
                if ($runtimeVisibleTypeAnnotationsOffset) {
                    $numAnnotations = ooa_ClassReader_readUnsignedShort($this, $runtimeVisibleTypeAnnotationsOffset);
                    $currentAnnotationOffset = $runtimeVisibleTypeAnnotationsOffset + 2 | 0;
                    while (true) {
                        $parsingOptions = $numAnnotations + (-1) | 0;
                        if ($numAnnotations <= 0)
                            break d;
                        $accessFlags = ooa_ClassReader_readTypeAnnotationTarget($this, $context, $currentAnnotationOffset);
                        $annotationDescriptor = ooa_ClassReader_readUTF8($this, $accessFlags, $charBuffer);
                        $accessFlags = $accessFlags + 2 | 0;
                        $currentAnnotationOffset = ooa_ClassReader_readElementValues($this, ooat_ClassNode_visitTypeAnnotation($classVisitor, $context.$currentTypeAnnotationTarget, $context.$currentTypeAnnotationTargetPath, $annotationDescriptor, 1), $accessFlags, 1, $charBuffer);
                        $numAnnotations = $parsingOptions;
                    }
                }
            }
            if ($runtimeInvisibleTypeAnnotationsOffset) {
                $numAnnotations = ooa_ClassReader_readUnsignedShort($this, $runtimeInvisibleTypeAnnotationsOffset);
                $currentAnnotationOffset = $runtimeInvisibleTypeAnnotationsOffset + 2 | 0;
                while (true) {
                    $parsingOptions = $numAnnotations + (-1) | 0;
                    if ($numAnnotations <= 0)
                        break;
                    $accessFlags = ooa_ClassReader_readTypeAnnotationTarget($this, $context, $currentAnnotationOffset);
                    $annotationDescriptor = ooa_ClassReader_readUTF8($this, $accessFlags, $charBuffer);
                    $accessFlags = $accessFlags + 2 | 0;
                    $currentAnnotationOffset = ooa_ClassReader_readElementValues($this, ooat_ClassNode_visitTypeAnnotation($classVisitor, $context.$currentTypeAnnotationTarget, $context.$currentTypeAnnotationTargetPath, $annotationDescriptor, 0), $accessFlags, 1, $charBuffer);
                    $numAnnotations = $parsingOptions;
                }
            }
            while ($attributes !== null) {
                $nextAttribute = $attributes.$nextAttribute;
                $attributes.$nextAttribute = null;
                ooat_ClassNode_visitAttribute($classVisitor, $attributes);
                $attributes = $nextAttribute;
            }
            e: {
                if ($nestMembersOffset) {
                    $numberOfNestMembers = ooa_ClassReader_readUnsignedShort($this, $nestMembersOffset);
                    $currentNestMemberOffset = $nestMembersOffset + 2 | 0;
                    while (true) {
                        $parsingOptions = $numberOfNestMembers + (-1) | 0;
                        if ($numberOfNestMembers <= 0)
                            break e;
                        ooat_ClassNode_visitNestMember($classVisitor, ooa_ClassReader_readClass($this, $currentNestMemberOffset, $charBuffer));
                        $currentNestMemberOffset = $currentNestMemberOffset + 2 | 0;
                        $numberOfNestMembers = $parsingOptions;
                    }
                }
            }
            f: {
                if ($permittedSubclassesOffset) {
                    $numberOfPermittedSubclasses = ooa_ClassReader_readUnsignedShort($this, $permittedSubclassesOffset);
                    $currentPermittedSubclassesOffset = $permittedSubclassesOffset + 2 | 0;
                    while (true) {
                        $parsingOptions = $numberOfPermittedSubclasses + (-1) | 0;
                        if ($numberOfPermittedSubclasses <= 0)
                            break f;
                        ooat_ClassNode_visitPermittedSubclass($classVisitor, ooa_ClassReader_readClass($this, $currentPermittedSubclassesOffset, $charBuffer));
                        $currentPermittedSubclassesOffset = $currentPermittedSubclassesOffset + 2 | 0;
                        $numberOfPermittedSubclasses = $parsingOptions;
                    }
                }
            }
            g: {
                if ($innerClassesOffset) {
                    $numberOfClasses = ooa_ClassReader_readUnsignedShort($this, $innerClassesOffset);
                    $currentClassesOffset = $innerClassesOffset + 2 | 0;
                    while (true) {
                        $accessFlags = $numberOfClasses + (-1) | 0;
                        if ($numberOfClasses <= 0)
                            break g;
                        ooat_ClassNode_visitInnerClass($classVisitor, ooa_ClassReader_readClass($this, $currentClassesOffset, $charBuffer), ooa_ClassReader_readClass($this, $currentClassesOffset + 2 | 0, $charBuffer), ooa_ClassReader_readUTF8($this, $currentClassesOffset + 4 | 0, $charBuffer), ooa_ClassReader_readUnsignedShort($this, $currentClassesOffset + 6 | 0));
                        $currentClassesOffset = $currentClassesOffset + 8 | 0;
                        $numberOfClasses = $accessFlags;
                    }
                }
            }
            h: {
                if ($recordOffset) {
                    $recordComponentsCount = ooa_ClassReader_readUnsignedShort($this, $recordOffset);
                    $parsingOptions = $recordOffset + 2 | 0;
                    while (true) {
                        $accessFlags = $recordComponentsCount + (-1) | 0;
                        if ($recordComponentsCount <= 0)
                            break h;
                        $parsingOptions = ooa_ClassReader_readRecordComponent($this, $classVisitor, $context, $parsingOptions);
                        $recordComponentsCount = $accessFlags;
                    }
                }
            }
            $fieldsCount = ooa_ClassReader_readUnsignedShort($this, $currentOffset);
            $parsingOptions = $currentOffset + 2 | 0;
            while (true) {
                $accessFlags = $fieldsCount + (-1) | 0;
                if ($fieldsCount <= 0)
                    break;
                $parsingOptions = ooa_ClassReader_readField($this, $classVisitor, $context, $parsingOptions);
                $fieldsCount = $accessFlags;
            }
            $methodsCount = ooa_ClassReader_readUnsignedShort($this, $parsingOptions);
            $parsingOptions = $parsingOptions + 2 | 0;
            while (true) {
                $accessFlags = $methodsCount + (-1) | 0;
                if ($methodsCount <= 0)
                    break;
                $parsingOptions = ooa_ClassReader_readMethod($this, $classVisitor, $context, $parsingOptions);
                $methodsCount = $accessFlags;
            }
            ooat_ClassNode_visitEnd($classVisitor);
            return;
        }
        i: {
            $attributeName = ooa_ClassReader_readUTF8($this, $currentAttributeOffset, $charBuffer);
            $attributeLength = ooa_ClassReader_readInt($this, $currentAttributeOffset + 2 | 0);
            $numberOfPermittedSubclasses = $currentAttributeOffset + 6 | 0;
            if (jl_String_equals($rt_s(541), $attributeName)) {
                $sourceFile = ooa_ClassReader_readUTF8($this, $numberOfPermittedSubclasses, $charBuffer);
                break i;
            }
            if (jl_String_equals($rt_s(542), $attributeName)) {
                $innerClassesOffset = $numberOfPermittedSubclasses;
                break i;
            }
            if (jl_String_equals($rt_s(543), $attributeName)) {
                $enclosingMethodOffset = $numberOfPermittedSubclasses;
                break i;
            }
            if (jl_String_equals($rt_s(544), $attributeName)) {
                $nestHostClass = ooa_ClassReader_readClass($this, $numberOfPermittedSubclasses, $charBuffer);
                break i;
            }
            if (jl_String_equals($rt_s(545), $attributeName)) {
                $nestMembersOffset = $numberOfPermittedSubclasses;
                break i;
            }
            if (jl_String_equals($rt_s(546), $attributeName)) {
                $permittedSubclassesOffset = $numberOfPermittedSubclasses;
                break i;
            }
            if (jl_String_equals($rt_s(547), $attributeName)) {
                $signature = ooa_ClassReader_readUTF8($this, $numberOfPermittedSubclasses, $charBuffer);
                break i;
            }
            if (jl_String_equals($rt_s(548), $attributeName)) {
                $runtimeVisibleAnnotationsOffset = $numberOfPermittedSubclasses;
                break i;
            }
            if (jl_String_equals($rt_s(549), $attributeName)) {
                $runtimeVisibleTypeAnnotationsOffset = $numberOfPermittedSubclasses;
                break i;
            }
            if (jl_String_equals($rt_s(550), $attributeName)) {
                $accessFlags = $accessFlags | 131072;
                break i;
            }
            if (jl_String_equals($rt_s(551), $attributeName)) {
                $accessFlags = $accessFlags | 4096;
                break i;
            }
            if (jl_String_equals($rt_s(552), $attributeName)) {
                if ($attributeLength > ($this.$classFileBuffer.data.length - $numberOfPermittedSubclasses | 0))
                    break a;
                $sourceDebugExtension = ooa_ClassReader_readUtf($this, $numberOfPermittedSubclasses, $attributeLength, $rt_createCharArray($attributeLength));
                break i;
            }
            if (jl_String_equals($rt_s(553), $attributeName)) {
                $runtimeInvisibleAnnotationsOffset = $numberOfPermittedSubclasses;
                break i;
            }
            if (jl_String_equals($rt_s(554), $attributeName)) {
                $runtimeInvisibleTypeAnnotationsOffset = $numberOfPermittedSubclasses;
                break i;
            }
            if (jl_String_equals($rt_s(555), $attributeName)) {
                $accessFlags = $accessFlags | 65536;
                $recordOffset = $numberOfPermittedSubclasses;
                break i;
            }
            if (jl_String_equals($rt_s(556), $attributeName)) {
                $moduleOffset = $numberOfPermittedSubclasses;
                break i;
            }
            if (jl_String_equals($rt_s(557), $attributeName)) {
                $moduleMainClass = ooa_ClassReader_readClass($this, $numberOfPermittedSubclasses, $charBuffer);
                break i;
            }
            if (jl_String_equals($rt_s(558), $attributeName)) {
                $modulePackagesOffset = $numberOfPermittedSubclasses;
                break i;
            }
            if (jl_String_equals($rt_s(540), $attributeName))
                break i;
            $attribute = ooa_ClassReader_readAttribute($this, $attributePrototypes, $attributeName, $numberOfPermittedSubclasses, $attributeLength, $charBuffer, (-1), null);
            $attribute.$nextAttribute = $attributes;
            $attributes = $attribute;
        }
        $currentAttributeOffset = $numberOfPermittedSubclasses + $attributeLength | 0;
        $i = $i + (-1) | 0;
    }
    $rt_throw(jl_IllegalArgumentException__init_());
},
ooa_ClassReader_readModuleAttributes = ($this, $classVisitor, $context, $moduleOffset, $modulePackagesOffset, $moduleMainClass) => {
    let $buffer, $moduleName, $moduleFlags, $moduleVersion, $requiresFlags, var$11, $packageCount, $currentPackageOffset, $requiresCount, $requires, $requiresVersion, $exportsCount, $exports, $exportsFlags, $exportsToCount, $exportsTo, $providesWith, $i, $opensCount, $opens, $opensFlags, $opensToCount, $opensTo, $usesCount, $providesCount, $provides, $providesWithCount;
    $buffer = $context.$charBuffer;
    $moduleName = ooa_ClassReader_readStringish($this, $moduleOffset, $buffer);
    $moduleFlags = ooa_ClassReader_readUnsignedShort($this, $moduleOffset + 2 | 0);
    $moduleVersion = ooa_ClassReader_readUTF8($this, $moduleOffset + 4 | 0, $buffer);
    $requiresFlags = $moduleOffset + 6 | 0;
    var$11 = new ooat_ModuleNode;
    $context = null;
    var$11.$api3 = 589824;
    var$11.$mv0 = $context;
    if (jl_Object_getClass(var$11) !== $rt_cls(ooat_ModuleNode)) {
        $classVisitor = new jl_IllegalStateException;
        jl_Throwable__init_($classVisitor);
        $rt_throw($classVisitor);
    }
    var$11.$name21 = $moduleName;
    var$11.$access9 = $moduleFlags;
    var$11.$version1 = $moduleVersion;
    $classVisitor.$module = var$11;
    if ($moduleMainClass !== null)
        var$11.$mainClass = $moduleMainClass;
    a: {
        if ($modulePackagesOffset) {
            $packageCount = ooa_ClassReader_readUnsignedShort($this, $modulePackagesOffset);
            $currentPackageOffset = $modulePackagesOffset + 2 | 0;
            while (true) {
                $moduleOffset = $packageCount + (-1) | 0;
                if ($packageCount <= 0)
                    break a;
                $context = ooa_ClassReader_readStringish($this, $currentPackageOffset, $buffer);
                if (var$11.$packages === null)
                    var$11.$packages = ju_ArrayList__init_0(5);
                ju_ArrayList_add(var$11.$packages, $context);
                $currentPackageOffset = $currentPackageOffset + 2 | 0;
                $packageCount = $moduleOffset;
            }
        }
    }
    $requiresCount = ooa_ClassReader_readUnsignedShort($this, $requiresFlags);
    $modulePackagesOffset = $requiresFlags + 2 | 0;
    while (true) {
        $packageCount = $requiresCount + (-1) | 0;
        if ($requiresCount <= 0)
            break;
        $requires = ooa_ClassReader_readStringish($this, $modulePackagesOffset, $buffer);
        $requiresFlags = ooa_ClassReader_readUnsignedShort($this, $modulePackagesOffset + 2 | 0);
        $requiresVersion = ooa_ClassReader_readUTF8($this, $modulePackagesOffset + 4 | 0, $buffer);
        $modulePackagesOffset = $modulePackagesOffset + 6 | 0;
        if (var$11.$requires === null)
            var$11.$requires = ju_ArrayList__init_0(5);
        $context = var$11.$requires;
        $classVisitor = new ooat_ModuleRequireNode;
        $classVisitor.$module0 = $requires;
        $classVisitor.$access8 = $requiresFlags;
        $classVisitor.$version0 = $requiresVersion;
        ju_ArrayList_add($context, $classVisitor);
        $requiresCount = $packageCount;
    }
    $exportsCount = ooa_ClassReader_readUnsignedShort($this, $modulePackagesOffset);
    $modulePackagesOffset = $modulePackagesOffset + 2 | 0;
    while (true) {
        $packageCount = $exportsCount + (-1) | 0;
        if ($exportsCount <= 0)
            break;
        $exports = ooa_ClassReader_readStringish($this, $modulePackagesOffset, $buffer);
        $exportsFlags = ooa_ClassReader_readUnsignedShort($this, $modulePackagesOffset + 2 | 0);
        $exportsToCount = ooa_ClassReader_readUnsignedShort($this, $modulePackagesOffset + 4 | 0);
        $modulePackagesOffset = $modulePackagesOffset + 6 | 0;
        $exportsTo = null;
        if ($exportsToCount) {
            $exportsTo = $rt_createArray(jl_String, $exportsToCount);
            $providesWith = $exportsTo.data;
            $i = 0;
            while ($i < $exportsToCount) {
                $providesWith[$i] = ooa_ClassReader_readStringish($this, $modulePackagesOffset, $buffer);
                $modulePackagesOffset = $modulePackagesOffset + 2 | 0;
                $i = $i + 1 | 0;
            }
        }
        if (var$11.$exports === null)
            var$11.$exports = ju_ArrayList__init_0(5);
        $context = var$11.$exports;
        $classVisitor = new ooat_ModuleExportNode;
        $moduleMainClass = ooat_Util_asArrayList($exportsTo);
        $classVisitor.$packaze0 = $exports;
        $classVisitor.$access3 = $exportsFlags;
        $classVisitor.$modules = $moduleMainClass;
        ju_ArrayList_add($context, $classVisitor);
        $exportsCount = $packageCount;
    }
    $opensCount = ooa_ClassReader_readUnsignedShort($this, $modulePackagesOffset);
    $modulePackagesOffset = $modulePackagesOffset + 2 | 0;
    while (true) {
        $packageCount = $opensCount + (-1) | 0;
        if ($opensCount <= 0)
            break;
        $opens = ooa_ClassReader_readStringish($this, $modulePackagesOffset, $buffer);
        $opensFlags = ooa_ClassReader_readUnsignedShort($this, $modulePackagesOffset + 2 | 0);
        $opensToCount = ooa_ClassReader_readUnsignedShort($this, $modulePackagesOffset + 4 | 0);
        $modulePackagesOffset = $modulePackagesOffset + 6 | 0;
        $opensTo = null;
        if ($opensToCount) {
            $opensTo = $rt_createArray(jl_String, $opensToCount);
            $providesWith = $opensTo.data;
            $i = 0;
            while ($i < $opensToCount) {
                $providesWith[$i] = ooa_ClassReader_readStringish($this, $modulePackagesOffset, $buffer);
                $modulePackagesOffset = $modulePackagesOffset + 2 | 0;
                $i = $i + 1 | 0;
            }
        }
        if (var$11.$opens === null)
            var$11.$opens = ju_ArrayList__init_0(5);
        $context = var$11.$opens;
        $classVisitor = new ooat_ModuleOpenNode;
        $moduleMainClass = ooat_Util_asArrayList($opensTo);
        $classVisitor.$packaze = $opens;
        $classVisitor.$access6 = $opensFlags;
        $classVisitor.$modules0 = $moduleMainClass;
        ju_ArrayList_add($context, $classVisitor);
        $opensCount = $packageCount;
    }
    $usesCount = ooa_ClassReader_readUnsignedShort($this, $modulePackagesOffset);
    $modulePackagesOffset = $modulePackagesOffset + 2 | 0;
    while (true) {
        $packageCount = $usesCount + (-1) | 0;
        if ($usesCount <= 0)
            break;
        $context = ooa_ClassReader_readStringish($this, $modulePackagesOffset, $buffer);
        if (var$11.$uses === null)
            var$11.$uses = ju_ArrayList__init_0(5);
        ju_ArrayList_add(var$11.$uses, $context);
        $modulePackagesOffset = $modulePackagesOffset + 2 | 0;
        $usesCount = $packageCount;
    }
    $providesCount = ooa_ClassReader_readUnsignedShort($this, $modulePackagesOffset);
    $moduleOffset = $modulePackagesOffset + 2 | 0;
    while (true) {
        $modulePackagesOffset = $providesCount + (-1) | 0;
        if ($providesCount <= 0)
            break;
        $provides = ooa_ClassReader_readStringish($this, $moduleOffset, $buffer);
        $providesWithCount = ooa_ClassReader_readUnsignedShort($this, $moduleOffset + 2 | 0);
        $moduleOffset = $moduleOffset + 4 | 0;
        $providesWith = $rt_createArray(jl_String, $providesWithCount);
        $opensTo = $providesWith.data;
        $i = 0;
        while ($i < $providesWithCount) {
            $opensTo[$i] = ooa_ClassReader_readStringish($this, $moduleOffset, $buffer);
            $moduleOffset = $moduleOffset + 2 | 0;
            $i = $i + 1 | 0;
        }
        ooat_ModuleNode_visitProvide(var$11, $provides, $providesWith);
        $providesCount = $modulePackagesOffset;
    }
},
ooa_ClassReader_readRecordComponent = ($this, $classVisitor, $context, $recordComponentOffset) => {
    let $charBuffer, $name, $descriptor, $signature, $runtimeVisibleAnnotationsOffset, $runtimeInvisibleAnnotationsOffset, $runtimeVisibleTypeAnnotationsOffset, $runtimeInvisibleTypeAnnotationsOffset, $attributes, $attributesCount, var$14, $currentAnnotationOffset, $attributeName, $attributeLength, $attribute, $recordComponentVisitor, $annotationDescriptor, $numAnnotations, $nextAttribute;
    $charBuffer = $context.$charBuffer;
    $name = ooa_ClassReader_readUTF8($this, $recordComponentOffset, $charBuffer);
    $descriptor = ooa_ClassReader_readUTF8($this, $recordComponentOffset + 2 | 0, $charBuffer);
    $recordComponentOffset = $recordComponentOffset + 4 | 0;
    $signature = null;
    $runtimeVisibleAnnotationsOffset = 0;
    $runtimeInvisibleAnnotationsOffset = 0;
    $runtimeVisibleTypeAnnotationsOffset = 0;
    $runtimeInvisibleTypeAnnotationsOffset = 0;
    $attributes = null;
    $attributesCount = ooa_ClassReader_readUnsignedShort($this, $recordComponentOffset);
    var$14 = $recordComponentOffset + 2 | 0;
    while (true) {
        $currentAnnotationOffset = $attributesCount + (-1) | 0;
        if ($attributesCount <= 0)
            break;
        $attributeName = ooa_ClassReader_readUTF8($this, var$14, $charBuffer);
        $attributeLength = ooa_ClassReader_readInt($this, var$14 + 2 | 0);
        $recordComponentOffset = var$14 + 6 | 0;
        if (jl_String_equals($rt_s(547), $attributeName))
            $signature = ooa_ClassReader_readUTF8($this, $recordComponentOffset, $charBuffer);
        else if (jl_String_equals($rt_s(548), $attributeName))
            $runtimeVisibleAnnotationsOffset = $recordComponentOffset;
        else if (jl_String_equals($rt_s(549), $attributeName))
            $runtimeVisibleTypeAnnotationsOffset = $recordComponentOffset;
        else if (jl_String_equals($rt_s(553), $attributeName))
            $runtimeInvisibleAnnotationsOffset = $recordComponentOffset;
        else if (jl_String_equals($rt_s(554), $attributeName))
            $runtimeInvisibleTypeAnnotationsOffset = $recordComponentOffset;
        else {
            $attribute = ooa_ClassReader_readAttribute($this, $context.$attributePrototypes, $attributeName, $recordComponentOffset, $attributeLength, $charBuffer, (-1), null);
            $attribute.$nextAttribute = $attributes;
            $attributes = $attribute;
        }
        var$14 = $recordComponentOffset + $attributeLength | 0;
        $attributesCount = $currentAnnotationOffset;
    }
    $recordComponentVisitor = new ooat_RecordComponentNode;
    $annotationDescriptor = null;
    $recordComponentVisitor.$api0 = 589824;
    $recordComponentVisitor.$delegate = $annotationDescriptor;
    $recordComponentVisitor.$name14 = $name;
    $recordComponentVisitor.$descriptor1 = $descriptor;
    $recordComponentVisitor.$signature1 = $signature;
    if (jl_Object_getClass($recordComponentVisitor) !== $rt_cls(ooat_RecordComponentNode)) {
        $classVisitor = new jl_IllegalStateException;
        jl_Throwable__init_($classVisitor);
        $rt_throw($classVisitor);
    }
    a: {
        $classVisitor.$recordComponents = ooat_Util_add($classVisitor.$recordComponents, $recordComponentVisitor);
        if ($runtimeVisibleAnnotationsOffset) {
            $numAnnotations = ooa_ClassReader_readUnsignedShort($this, $runtimeVisibleAnnotationsOffset);
            $currentAnnotationOffset = $runtimeVisibleAnnotationsOffset + 2 | 0;
            while (true) {
                $runtimeVisibleAnnotationsOffset = $numAnnotations + (-1) | 0;
                if ($numAnnotations <= 0)
                    break a;
                $annotationDescriptor = ooa_ClassReader_readUTF8($this, $currentAnnotationOffset, $charBuffer);
                $recordComponentOffset = $currentAnnotationOffset + 2 | 0;
                $currentAnnotationOffset = ooa_ClassReader_readElementValues($this, ooat_RecordComponentNode_visitAnnotation($recordComponentVisitor, $annotationDescriptor, 1), $recordComponentOffset, 1, $charBuffer);
                $numAnnotations = $runtimeVisibleAnnotationsOffset;
            }
        }
    }
    b: {
        if ($runtimeInvisibleAnnotationsOffset) {
            $numAnnotations = ooa_ClassReader_readUnsignedShort($this, $runtimeInvisibleAnnotationsOffset);
            $currentAnnotationOffset = $runtimeInvisibleAnnotationsOffset + 2 | 0;
            while (true) {
                $attributeLength = $numAnnotations + (-1) | 0;
                if ($numAnnotations <= 0)
                    break b;
                $annotationDescriptor = ooa_ClassReader_readUTF8($this, $currentAnnotationOffset, $charBuffer);
                $numAnnotations = $currentAnnotationOffset + 2 | 0;
                $currentAnnotationOffset = ooa_ClassReader_readElementValues($this, ooat_RecordComponentNode_visitAnnotation($recordComponentVisitor, $annotationDescriptor, 0), $numAnnotations, 1, $charBuffer);
                $numAnnotations = $attributeLength;
            }
        }
    }
    c: {
        if ($runtimeVisibleTypeAnnotationsOffset) {
            $numAnnotations = ooa_ClassReader_readUnsignedShort($this, $runtimeVisibleTypeAnnotationsOffset);
            $currentAnnotationOffset = $runtimeVisibleTypeAnnotationsOffset + 2 | 0;
            while (true) {
                $recordComponentOffset = $numAnnotations + (-1) | 0;
                if ($numAnnotations <= 0)
                    break c;
                $attributeLength = ooa_ClassReader_readTypeAnnotationTarget($this, $context, $currentAnnotationOffset);
                $annotationDescriptor = ooa_ClassReader_readUTF8($this, $attributeLength, $charBuffer);
                $attributeLength = $attributeLength + 2 | 0;
                $currentAnnotationOffset = ooa_ClassReader_readElementValues($this, ooat_RecordComponentNode_visitTypeAnnotation($recordComponentVisitor, $context.$currentTypeAnnotationTarget, $context.$currentTypeAnnotationTargetPath, $annotationDescriptor, 1), $attributeLength, 1, $charBuffer);
                $numAnnotations = $recordComponentOffset;
            }
        }
    }
    if ($runtimeInvisibleTypeAnnotationsOffset) {
        $numAnnotations = ooa_ClassReader_readUnsignedShort($this, $runtimeInvisibleTypeAnnotationsOffset);
        $currentAnnotationOffset = $runtimeInvisibleTypeAnnotationsOffset + 2 | 0;
        while (true) {
            $recordComponentOffset = $numAnnotations + (-1) | 0;
            if ($numAnnotations <= 0)
                break;
            $attributeLength = ooa_ClassReader_readTypeAnnotationTarget($this, $context, $currentAnnotationOffset);
            $annotationDescriptor = ooa_ClassReader_readUTF8($this, $attributeLength, $charBuffer);
            $attributeLength = $attributeLength + 2 | 0;
            $currentAnnotationOffset = ooa_ClassReader_readElementValues($this, ooat_RecordComponentNode_visitTypeAnnotation($recordComponentVisitor, $context.$currentTypeAnnotationTarget, $context.$currentTypeAnnotationTargetPath, $annotationDescriptor, 0), $attributeLength, 1, $charBuffer);
            $numAnnotations = $recordComponentOffset;
        }
    }
    while ($attributes !== null) {
        $nextAttribute = $attributes.$nextAttribute;
        $attributes.$nextAttribute = null;
        $recordComponentVisitor.$attrs = ooat_Util_add($recordComponentVisitor.$attrs, $attributes);
        $attributes = $nextAttribute;
    }
    return var$14;
},
ooa_ClassReader_readField = ($this, $classVisitor, $context, $fieldInfoOffset) => {
    let $charBuffer, $accessFlags, $name, $descriptor, $constantValue, $signature, $runtimeVisibleAnnotationsOffset, $runtimeInvisibleAnnotationsOffset, $runtimeVisibleTypeAnnotationsOffset, $runtimeInvisibleTypeAnnotationsOffset, $attributes, $attributesCount, $constantvalueIndex, $numAnnotations, $attributeName, $attributeLength, $attribute, $fieldVisitor, $annotationDescriptor, $currentAnnotationOffset, $nextAttribute;
    $charBuffer = $context.$charBuffer;
    $accessFlags = ooa_ClassReader_readUnsignedShort($this, $fieldInfoOffset);
    $name = ooa_ClassReader_readUTF8($this, $fieldInfoOffset + 2 | 0, $charBuffer);
    $descriptor = ooa_ClassReader_readUTF8($this, $fieldInfoOffset + 4 | 0, $charBuffer);
    $fieldInfoOffset = $fieldInfoOffset + 6 | 0;
    $constantValue = null;
    $signature = null;
    $runtimeVisibleAnnotationsOffset = 0;
    $runtimeInvisibleAnnotationsOffset = 0;
    $runtimeVisibleTypeAnnotationsOffset = 0;
    $runtimeInvisibleTypeAnnotationsOffset = 0;
    $attributes = null;
    $attributesCount = ooa_ClassReader_readUnsignedShort($this, $fieldInfoOffset);
    $constantvalueIndex = $fieldInfoOffset + 2 | 0;
    while (true) {
        $numAnnotations = $attributesCount + (-1) | 0;
        if ($attributesCount <= 0)
            break;
        a: {
            $attributeName = ooa_ClassReader_readUTF8($this, $constantvalueIndex, $charBuffer);
            $attributeLength = ooa_ClassReader_readInt($this, $constantvalueIndex + 2 | 0);
            $fieldInfoOffset = $constantvalueIndex + 6 | 0;
            if (jl_String_equals($rt_s(559), $attributeName)) {
                $constantvalueIndex = ooa_ClassReader_readUnsignedShort($this, $fieldInfoOffset);
                $constantValue = $constantvalueIndex ? ooa_ClassReader_readConst($this, $constantvalueIndex, $charBuffer) : null;
                break a;
            }
            if (jl_String_equals($rt_s(547), $attributeName)) {
                $signature = ooa_ClassReader_readUTF8($this, $fieldInfoOffset, $charBuffer);
                break a;
            }
            if (jl_String_equals($rt_s(550), $attributeName)) {
                $accessFlags = $accessFlags | 131072;
                break a;
            }
            if (jl_String_equals($rt_s(551), $attributeName)) {
                $accessFlags = $accessFlags | 4096;
                break a;
            }
            if (jl_String_equals($rt_s(548), $attributeName)) {
                $runtimeVisibleAnnotationsOffset = $fieldInfoOffset;
                break a;
            }
            if (jl_String_equals($rt_s(549), $attributeName)) {
                $runtimeVisibleTypeAnnotationsOffset = $fieldInfoOffset;
                break a;
            }
            if (jl_String_equals($rt_s(553), $attributeName)) {
                $runtimeInvisibleAnnotationsOffset = $fieldInfoOffset;
                break a;
            }
            if (jl_String_equals($rt_s(554), $attributeName)) {
                $runtimeInvisibleTypeAnnotationsOffset = $fieldInfoOffset;
                break a;
            }
            $attribute = ooa_ClassReader_readAttribute($this, $context.$attributePrototypes, $attributeName, $fieldInfoOffset, $attributeLength, $charBuffer, (-1), null);
            $attribute.$nextAttribute = $attributes;
            $attributes = $attribute;
        }
        $constantvalueIndex = $fieldInfoOffset + $attributeLength | 0;
        $attributesCount = $numAnnotations;
    }
    $fieldVisitor = new ooat_FieldNode;
    $annotationDescriptor = null;
    $fieldVisitor.$api1 = 589824;
    $fieldVisitor.$fv = $annotationDescriptor;
    $fieldVisitor.$access0 = $accessFlags;
    $fieldVisitor.$name12 = $name;
    $fieldVisitor.$desc2 = $descriptor;
    $fieldVisitor.$signature = $signature;
    $fieldVisitor.$value11 = $constantValue;
    if (jl_Object_getClass($fieldVisitor) !== $rt_cls(ooat_FieldNode)) {
        $classVisitor = new jl_IllegalStateException;
        jl_Throwable__init_($classVisitor);
        $rt_throw($classVisitor);
    }
    b: {
        ju_ArrayList_add($classVisitor.$fields0, $fieldVisitor);
        if ($runtimeVisibleAnnotationsOffset) {
            $numAnnotations = ooa_ClassReader_readUnsignedShort($this, $runtimeVisibleAnnotationsOffset);
            $currentAnnotationOffset = $runtimeVisibleAnnotationsOffset + 2 | 0;
            while (true) {
                $fieldInfoOffset = $numAnnotations + (-1) | 0;
                if ($numAnnotations <= 0)
                    break b;
                $annotationDescriptor = ooa_ClassReader_readUTF8($this, $currentAnnotationOffset, $charBuffer);
                $currentAnnotationOffset = $currentAnnotationOffset + 2 | 0;
                $currentAnnotationOffset = ooa_ClassReader_readElementValues($this, ooat_FieldNode_visitAnnotation($fieldVisitor, $annotationDescriptor, 1), $currentAnnotationOffset, 1, $charBuffer);
                $numAnnotations = $fieldInfoOffset;
            }
        }
    }
    c: {
        if ($runtimeInvisibleAnnotationsOffset) {
            $numAnnotations = ooa_ClassReader_readUnsignedShort($this, $runtimeInvisibleAnnotationsOffset);
            $currentAnnotationOffset = $runtimeInvisibleAnnotationsOffset + 2 | 0;
            while (true) {
                $fieldInfoOffset = $numAnnotations + (-1) | 0;
                if ($numAnnotations <= 0)
                    break c;
                $annotationDescriptor = ooa_ClassReader_readUTF8($this, $currentAnnotationOffset, $charBuffer);
                $currentAnnotationOffset = $currentAnnotationOffset + 2 | 0;
                $currentAnnotationOffset = ooa_ClassReader_readElementValues($this, ooat_FieldNode_visitAnnotation($fieldVisitor, $annotationDescriptor, 0), $currentAnnotationOffset, 1, $charBuffer);
                $numAnnotations = $fieldInfoOffset;
            }
        }
    }
    d: {
        if ($runtimeVisibleTypeAnnotationsOffset) {
            $numAnnotations = ooa_ClassReader_readUnsignedShort($this, $runtimeVisibleTypeAnnotationsOffset);
            $currentAnnotationOffset = $runtimeVisibleTypeAnnotationsOffset + 2 | 0;
            while (true) {
                $fieldInfoOffset = $numAnnotations + (-1) | 0;
                if ($numAnnotations <= 0)
                    break d;
                $currentAnnotationOffset = ooa_ClassReader_readTypeAnnotationTarget($this, $context, $currentAnnotationOffset);
                $annotationDescriptor = ooa_ClassReader_readUTF8($this, $currentAnnotationOffset, $charBuffer);
                $currentAnnotationOffset = $currentAnnotationOffset + 2 | 0;
                $currentAnnotationOffset = ooa_ClassReader_readElementValues($this, ooat_FieldNode_visitTypeAnnotation($fieldVisitor, $context.$currentTypeAnnotationTarget, $context.$currentTypeAnnotationTargetPath, $annotationDescriptor, 1), $currentAnnotationOffset, 1, $charBuffer);
                $numAnnotations = $fieldInfoOffset;
            }
        }
    }
    if ($runtimeInvisibleTypeAnnotationsOffset) {
        $numAnnotations = ooa_ClassReader_readUnsignedShort($this, $runtimeInvisibleTypeAnnotationsOffset);
        $currentAnnotationOffset = $runtimeInvisibleTypeAnnotationsOffset + 2 | 0;
        while (true) {
            $fieldInfoOffset = $numAnnotations + (-1) | 0;
            if ($numAnnotations <= 0)
                break;
            $currentAnnotationOffset = ooa_ClassReader_readTypeAnnotationTarget($this, $context, $currentAnnotationOffset);
            $annotationDescriptor = ooa_ClassReader_readUTF8($this, $currentAnnotationOffset, $charBuffer);
            $currentAnnotationOffset = $currentAnnotationOffset + 2 | 0;
            $currentAnnotationOffset = ooa_ClassReader_readElementValues($this, ooat_FieldNode_visitTypeAnnotation($fieldVisitor, $context.$currentTypeAnnotationTarget, $context.$currentTypeAnnotationTargetPath, $annotationDescriptor, 0), $currentAnnotationOffset, 1, $charBuffer);
            $numAnnotations = $fieldInfoOffset;
        }
    }
    while ($attributes !== null) {
        $nextAttribute = $attributes.$nextAttribute;
        $attributes.$nextAttribute = null;
        $fieldVisitor.$attrs0 = ooat_Util_add($fieldVisitor.$attrs0, $attributes);
        $attributes = $nextAttribute;
    }
    return $constantvalueIndex;
},
ooa_ClassReader_readMethod = ($this, $classVisitor, $context, $methodInfoOffset) => {
    let $charBuffer, $currentAnnotationOffset, var$6, $codeOffset, $exceptionsOffset, $exceptions, $synthetic, $signatureIndex, $runtimeVisibleAnnotationsOffset, $runtimeInvisibleAnnotationsOffset, $runtimeVisibleParameterAnnotationsOffset, $runtimeInvisibleParameterAnnotationsOffset, $runtimeVisibleTypeAnnotationsOffset, $runtimeInvisibleTypeAnnotationsOffset, $annotationDefaultOffset, $methodParametersOffset, $attributes, $attributesCount, $currentExceptionOffset, $numAnnotations, $attributeName, $attributeLength,
    $parametersCount, var$27, $i, $attribute, $methodVisitor, $methodWriter, $currentParameterOffset, $annotationVisitor, $annotationDescriptor, $nextAttribute;
    $charBuffer = $context.$charBuffer;
    $context.$currentMethodAccessFlags = ooa_ClassReader_readUnsignedShort($this, $methodInfoOffset);
    $context.$currentMethodName = ooa_ClassReader_readUTF8($this, $methodInfoOffset + 2 | 0, $charBuffer);
    $currentAnnotationOffset = $methodInfoOffset + 4 | 0;
    $context.$currentMethodDescriptor = ooa_ClassReader_readUTF8($this, $currentAnnotationOffset, $charBuffer);
    var$6 = $methodInfoOffset + 6 | 0;
    $codeOffset = 0;
    $exceptionsOffset = 0;
    $exceptions = null;
    $synthetic = 0;
    $signatureIndex = 0;
    $runtimeVisibleAnnotationsOffset = 0;
    $runtimeInvisibleAnnotationsOffset = 0;
    $runtimeVisibleParameterAnnotationsOffset = 0;
    $runtimeInvisibleParameterAnnotationsOffset = 0;
    $runtimeVisibleTypeAnnotationsOffset = 0;
    $runtimeInvisibleTypeAnnotationsOffset = 0;
    $annotationDefaultOffset = 0;
    $methodParametersOffset = 0;
    $attributes = null;
    $attributesCount = ooa_ClassReader_readUnsignedShort($this, var$6);
    $currentExceptionOffset = var$6 + 2 | 0;
    while (true) {
        $numAnnotations = $attributesCount + (-1) | 0;
        if ($attributesCount <= 0)
            break;
        a: {
            $attributeName = ooa_ClassReader_readUTF8($this, $currentExceptionOffset, $charBuffer);
            $attributeLength = ooa_ClassReader_readInt($this, $currentExceptionOffset + 2 | 0);
            $parametersCount = $currentExceptionOffset + 6 | 0;
            if (jl_String_equals($rt_s(560), $attributeName)) {
                if ($context.$parsingOptions & 1)
                    break a;
                $codeOffset = $parametersCount;
                break a;
            }
            if (jl_String_equals($rt_s(561), $attributeName)) {
                $exceptions = $rt_createArray(jl_String, ooa_ClassReader_readUnsignedShort($this, $parametersCount));
                var$27 = $exceptions.data;
                $currentExceptionOffset = $parametersCount + 2 | 0;
                $i = 0;
                $exceptionsOffset = var$27.length;
                while ($i < $exceptionsOffset) {
                    var$27[$i] = ooa_ClassReader_readStringish($this, $currentExceptionOffset, $charBuffer);
                    $currentExceptionOffset = $currentExceptionOffset + 2 | 0;
                    $i = $i + 1 | 0;
                }
                $exceptionsOffset = $parametersCount;
                break a;
            }
            if (jl_String_equals($rt_s(547), $attributeName)) {
                $signatureIndex = ooa_ClassReader_readUnsignedShort($this, $parametersCount);
                break a;
            }
            if (jl_String_equals($rt_s(550), $attributeName)) {
                $context.$currentMethodAccessFlags = $context.$currentMethodAccessFlags | 131072;
                break a;
            }
            if (jl_String_equals($rt_s(548), $attributeName)) {
                $runtimeVisibleAnnotationsOffset = $parametersCount;
                break a;
            }
            if (jl_String_equals($rt_s(549), $attributeName)) {
                $runtimeVisibleTypeAnnotationsOffset = $parametersCount;
                break a;
            }
            if (jl_String_equals($rt_s(562), $attributeName)) {
                $annotationDefaultOffset = $parametersCount;
                break a;
            }
            if (jl_String_equals($rt_s(551), $attributeName)) {
                $synthetic = 1;
                $context.$currentMethodAccessFlags = $context.$currentMethodAccessFlags | 4096;
                break a;
            }
            if (jl_String_equals($rt_s(553), $attributeName)) {
                $runtimeInvisibleAnnotationsOffset = $parametersCount;
                break a;
            }
            if (jl_String_equals($rt_s(554), $attributeName)) {
                $runtimeInvisibleTypeAnnotationsOffset = $parametersCount;
                break a;
            }
            if (jl_String_equals($rt_s(563), $attributeName)) {
                $runtimeVisibleParameterAnnotationsOffset = $parametersCount;
                break a;
            }
            if (jl_String_equals($rt_s(564), $attributeName)) {
                $runtimeInvisibleParameterAnnotationsOffset = $parametersCount;
                break a;
            }
            if (jl_String_equals($rt_s(565), $attributeName)) {
                $methodParametersOffset = $parametersCount;
                break a;
            }
            $attribute = ooa_ClassReader_readAttribute($this, $context.$attributePrototypes, $attributeName, $parametersCount, $attributeLength, $charBuffer, (-1), null);
            $attribute.$nextAttribute = $attributes;
            $attributes = $attribute;
        }
        $currentExceptionOffset = $parametersCount + $attributeLength | 0;
        $attributesCount = $numAnnotations;
    }
    $methodVisitor = ooat_MethodNode__init_($context.$currentMethodAccessFlags, $context.$currentMethodName, $context.$currentMethodDescriptor, $signatureIndex ? ooa_ClassReader_readUtf0($this, $signatureIndex, $charBuffer) : null, $exceptions);
    ju_ArrayList_add($classVisitor.$methods0, $methodVisitor);
    if ($methodVisitor instanceof ooa_MethodWriter) {
        $methodWriter = $methodVisitor;
        if (ooa_MethodWriter_canCopyMethodAttributes($methodWriter, $this, $synthetic, !($context.$currentMethodAccessFlags & 131072) ? 0 : 1, ooa_ClassReader_readUnsignedShort($this, $currentAnnotationOffset), $signatureIndex, $exceptionsOffset)) {
            $methodInfoOffset = $currentExceptionOffset - $methodInfoOffset | 0;
            $methodWriter.$sourceOffset = var$6;
            $methodWriter.$sourceLength = $methodInfoOffset - 6 | 0;
            return $currentExceptionOffset;
        }
    }
    b: {
        if ($methodParametersOffset && !($context.$parsingOptions & 2)) {
            $parametersCount = ooa_ClassReader_readByte($this, $methodParametersOffset);
            $currentParameterOffset = $methodParametersOffset + 1 | 0;
            while (true) {
                $methodInfoOffset = $parametersCount + (-1) | 0;
                if ($parametersCount <= 0)
                    break b;
                $classVisitor = ooa_ClassReader_readUTF8($this, $currentParameterOffset, $charBuffer);
                $parametersCount = ooa_ClassReader_readUnsignedShort($this, $currentParameterOffset + 2 | 0);
                if ($methodVisitor.$parameters === null)
                    $methodVisitor.$parameters = ju_ArrayList__init_0(5);
                $annotationVisitor = $methodVisitor.$parameters;
                $methodWriter = new ooat_ParameterNode;
                $methodWriter.$name15 = $classVisitor;
                $methodWriter.$access4 = $parametersCount;
                ju_ArrayList_add($annotationVisitor, $methodWriter);
                $currentParameterOffset = $currentParameterOffset + 4 | 0;
                $parametersCount = $methodInfoOffset;
            }
        }
    }
    if ($annotationDefaultOffset) {
        $annotationVisitor = ooat_MethodNode_visitAnnotationDefault($methodVisitor);
        ooa_ClassReader_readElementValue($this, $annotationVisitor, $annotationDefaultOffset, null, $charBuffer);
    }
    c: {
        if ($runtimeVisibleAnnotationsOffset) {
            $numAnnotations = ooa_ClassReader_readUnsignedShort($this, $runtimeVisibleAnnotationsOffset);
            $currentAnnotationOffset = $runtimeVisibleAnnotationsOffset + 2 | 0;
            while (true) {
                $parametersCount = $numAnnotations + (-1) | 0;
                if ($numAnnotations <= 0)
                    break c;
                $annotationDescriptor = ooa_ClassReader_readUTF8($this, $currentAnnotationOffset, $charBuffer);
                $currentParameterOffset = $currentAnnotationOffset + 2 | 0;
                $currentAnnotationOffset = ooa_ClassReader_readElementValues($this, ooat_MethodNode_visitAnnotation($methodVisitor, $annotationDescriptor, 1), $currentParameterOffset, 1, $charBuffer);
                $numAnnotations = $parametersCount;
            }
        }
    }
    d: {
        if ($runtimeInvisibleAnnotationsOffset) {
            $numAnnotations = ooa_ClassReader_readUnsignedShort($this, $runtimeInvisibleAnnotationsOffset);
            $currentAnnotationOffset = $runtimeInvisibleAnnotationsOffset + 2 | 0;
            while (true) {
                $methodInfoOffset = $numAnnotations + (-1) | 0;
                if ($numAnnotations <= 0)
                    break d;
                $annotationDescriptor = ooa_ClassReader_readUTF8($this, $currentAnnotationOffset, $charBuffer);
                $parametersCount = $currentAnnotationOffset + 2 | 0;
                $currentAnnotationOffset = ooa_ClassReader_readElementValues($this, ooat_MethodNode_visitAnnotation($methodVisitor, $annotationDescriptor, 0), $parametersCount, 1, $charBuffer);
                $numAnnotations = $methodInfoOffset;
            }
        }
    }
    e: {
        if ($runtimeVisibleTypeAnnotationsOffset) {
            $numAnnotations = ooa_ClassReader_readUnsignedShort($this, $runtimeVisibleTypeAnnotationsOffset);
            $currentAnnotationOffset = $runtimeVisibleTypeAnnotationsOffset + 2 | 0;
            while (true) {
                $methodInfoOffset = $numAnnotations + (-1) | 0;
                if ($numAnnotations <= 0)
                    break e;
                $parametersCount = ooa_ClassReader_readTypeAnnotationTarget($this, $context, $currentAnnotationOffset);
                $annotationDescriptor = ooa_ClassReader_readUTF8($this, $parametersCount, $charBuffer);
                $parametersCount = $parametersCount + 2 | 0;
                $currentAnnotationOffset = ooa_ClassReader_readElementValues($this, ooat_MethodNode_visitTypeAnnotation($methodVisitor, $context.$currentTypeAnnotationTarget, $context.$currentTypeAnnotationTargetPath, $annotationDescriptor, 1), $parametersCount, 1, $charBuffer);
                $numAnnotations = $methodInfoOffset;
            }
        }
    }
    f: {
        if ($runtimeInvisibleTypeAnnotationsOffset) {
            $numAnnotations = ooa_ClassReader_readUnsignedShort($this, $runtimeInvisibleTypeAnnotationsOffset);
            $currentAnnotationOffset = $runtimeInvisibleTypeAnnotationsOffset + 2 | 0;
            while (true) {
                $methodInfoOffset = $numAnnotations + (-1) | 0;
                if ($numAnnotations <= 0)
                    break f;
                $parametersCount = ooa_ClassReader_readTypeAnnotationTarget($this, $context, $currentAnnotationOffset);
                $annotationDescriptor = ooa_ClassReader_readUTF8($this, $parametersCount, $charBuffer);
                $parametersCount = $parametersCount + 2 | 0;
                $currentAnnotationOffset = ooa_ClassReader_readElementValues($this, ooat_MethodNode_visitTypeAnnotation($methodVisitor, $context.$currentTypeAnnotationTarget, $context.$currentTypeAnnotationTargetPath, $annotationDescriptor, 0), $parametersCount, 1, $charBuffer);
                $numAnnotations = $methodInfoOffset;
            }
        }
    }
    if ($runtimeVisibleParameterAnnotationsOffset)
        ooa_ClassReader_readParameterAnnotations($this, $methodVisitor, $context, $runtimeVisibleParameterAnnotationsOffset, 1);
    if ($runtimeInvisibleParameterAnnotationsOffset)
        ooa_ClassReader_readParameterAnnotations($this, $methodVisitor, $context, $runtimeInvisibleParameterAnnotationsOffset, 0);
    while ($attributes !== null) {
        $nextAttribute = $attributes.$nextAttribute;
        $attributes.$nextAttribute = null;
        ooat_MethodNode_visitAttribute($methodVisitor, $attributes);
        $attributes = $nextAttribute;
    }
    if ($codeOffset)
        ooa_ClassReader_readCode($this, $methodVisitor, $context, $codeOffset);
    return $currentExceptionOffset;
},
ooa_ClassReader_readCode = ($this, $methodVisitor, $context, $codeOffset) => {
    let $classBuffer, $charBuffer, $maxStack, $maxLocals, $codeLength, $typeAnnotationOffset, $bytecodeEndOffset, $typeTable, $low, $exceptionTableLength, $high, $start, $end, $handler, $catchType, var$19, $stackMapFrameOffset, $stackMapTableEndOffset, $compressedFrames, $localVariableTableOffset, $localVariableTypeTableOffset, $visibleTypeAnnotationOffsets, $invisibleTypeAnnotationOffsets, $attributes, $attributesCount, $attributeName, $attributeLength, $localVariableTableLength, $i, $numPairs, $startPc, $lineNumberTableLength,
    $lineNumber, $attribute, $expandFrames, $offset, $table, $potentialBytecodeOffset, $currentVisibleTypeAnnotationIndex, $currentVisibleTypeAnnotationBytecodeOffset, $currentInvisibleTypeAnnotationIndex, $currentInvisibleTypeAnnotationBytecodeOffset, $insertFrame, $wideJumpOpcodeDelta, $typeTableIndex, $length, $name, $descriptor, $index, $signature, $targetType, $annotationDescriptor, $nextAttribute, $currentBytecodeOffset, $currentLabel, $keys, $opcode, $defaultLabel, $defaultLabel_0, $values, $bootstrapMethodArguments,
    $cpInfoOffset, $nameAndTypeCpInfoOffset, $owner, $bootstrapMethodOffset, $handle, $target, $currentAnnotationOffset, $bytecodeOffset, $numTableEntries, $numSwitchCases;
    $classBuffer = $this.$classFileBuffer;
    $charBuffer = $context.$charBuffer;
    $maxStack = ooa_ClassReader_readUnsignedShort($this, $codeOffset);
    $maxLocals = ooa_ClassReader_readUnsignedShort($this, $codeOffset + 2 | 0);
    $codeLength = ooa_ClassReader_readInt($this, $codeOffset + 4 | 0);
    $typeAnnotationOffset = $codeOffset + 8 | 0;
    if ($codeLength > ($this.$classFileBuffer.data.length - $typeAnnotationOffset | 0))
        $rt_throw(jl_IllegalArgumentException__init_());
    $bytecodeEndOffset = $typeAnnotationOffset + $codeLength | 0;
    $typeTable = $rt_createArray(ooa_Label, $codeLength + 1 | 0);
    $context.$currentMethodLabels = $typeTable;
    $low = $typeAnnotationOffset;
    a: while (true) {
        if ($low >= $bytecodeEndOffset) {
            $exceptionTableLength = ooa_ClassReader_readUnsignedShort($this, $low);
            $low = $low + 2 | 0;
            while (true) {
                $high = $exceptionTableLength + (-1) | 0;
                if ($exceptionTableLength <= 0)
                    break;
                $start = ooa_ClassReader_createLabel($this, ooa_ClassReader_readUnsignedShort($this, $low), $typeTable);
                $end = ooa_ClassReader_createLabel($this, ooa_ClassReader_readUnsignedShort($this, $low + 2 | 0), $typeTable);
                $handler = ooa_ClassReader_createLabel($this, ooa_ClassReader_readUnsignedShort($this, $low + 4 | 0), $typeTable);
                $catchType = ooa_ClassReader_readUTF8($this, $this.$cpInfoOffsets.data[ooa_ClassReader_readUnsignedShort($this, $low + 6 | 0)], $charBuffer);
                $low = $low + 8 | 0;
                ooat_MethodNode_visitTryCatchBlock($methodVisitor, $start, $end, $handler, $catchType);
                $exceptionTableLength = $high;
            }
            var$19 = $typeTable.data;
            $stackMapFrameOffset = 0;
            $stackMapTableEndOffset = 0;
            $compressedFrames = 1;
            $localVariableTableOffset = 0;
            $localVariableTypeTableOffset = 0;
            $visibleTypeAnnotationOffsets = null;
            $invisibleTypeAnnotationOffsets = null;
            $attributes = null;
            $attributesCount = ooa_ClassReader_readUnsignedShort($this, $low);
            $low = $low + 2 | 0;
            while (true) {
                $high = $attributesCount + (-1) | 0;
                if ($attributesCount <= 0)
                    break;
                b: {
                    $attributeName = ooa_ClassReader_readUTF8($this, $low, $charBuffer);
                    $attributeLength = ooa_ClassReader_readInt($this, $low + 2 | 0);
                    $low = $low + 6 | 0;
                    if (jl_String_equals($rt_s(566), $attributeName)) {
                        if ($context.$parsingOptions & 2)
                            break b;
                        $localVariableTableLength = ooa_ClassReader_readUnsignedShort($this, $low);
                        $i = $low + 2 | 0;
                        while (true) {
                            $numPairs = $localVariableTableLength + (-1) | 0;
                            if ($localVariableTableLength <= 0)
                                break;
                            $startPc = ooa_ClassReader_readUnsignedShort($this, $i);
                            ooa_ClassReader_createDebugLabel($this, $startPc, $typeTable);
                            ooa_ClassReader_createDebugLabel($this, $startPc + ooa_ClassReader_readUnsignedShort($this, $i + 2 | 0) | 0, $typeTable);
                            $i = $i + 10 | 0;
                            $localVariableTableLength = $numPairs;
                        }
                        $localVariableTableOffset = $low;
                        break b;
                    }
                    if (jl_String_equals($rt_s(567), $attributeName)) {
                        $localVariableTypeTableOffset = $low;
                        break b;
                    }
                    if (jl_String_equals($rt_s(568), $attributeName)) {
                        if ($context.$parsingOptions & 2)
                            break b;
                        $lineNumberTableLength = ooa_ClassReader_readUnsignedShort($this, $low);
                        $i = $low + 2 | 0;
                        while (true) {
                            $numPairs = $lineNumberTableLength + (-1) | 0;
                            if ($lineNumberTableLength <= 0)
                                break;
                            $startPc = ooa_ClassReader_readUnsignedShort($this, $i);
                            $lineNumber = ooa_ClassReader_readUnsignedShort($this, $i + 2 | 0);
                            $i = $i + 4 | 0;
                            ooa_ClassReader_createDebugLabel($this, $startPc, $typeTable);
                            ooa_Label_addLineNumber(var$19[$startPc], $lineNumber);
                            $lineNumberTableLength = $numPairs;
                        }
                        break b;
                    }
                    if (jl_String_equals($rt_s(549), $attributeName)) {
                        $visibleTypeAnnotationOffsets = ooa_ClassReader_readTypeAnnotations($this, $methodVisitor, $context, $low, 1);
                        break b;
                    }
                    if (jl_String_equals($rt_s(554), $attributeName)) {
                        $invisibleTypeAnnotationOffsets = ooa_ClassReader_readTypeAnnotations($this, $methodVisitor, $context, $low, 0);
                        break b;
                    }
                    if (jl_String_equals($rt_s(569), $attributeName)) {
                        if ($context.$parsingOptions & 4)
                            break b;
                        $stackMapFrameOffset = $low + 2 | 0;
                        $stackMapTableEndOffset = $low + $attributeLength | 0;
                        break b;
                    }
                    if (!jl_String_equals($rt_s(570), $attributeName)) {
                        $attribute = ooa_ClassReader_readAttribute($this, $context.$attributePrototypes, $attributeName, $low, $attributeLength, $charBuffer, $codeOffset, $typeTable);
                        $attribute.$nextAttribute = $attributes;
                        $attributes = $attribute;
                        break b;
                    }
                    if ($context.$parsingOptions & 4)
                        break b;
                    $stackMapFrameOffset = $low + 2 | 0;
                    $stackMapTableEndOffset = $low + $attributeLength | 0;
                    $compressedFrames = 0;
                }
                $low = $low + $attributeLength | 0;
                $attributesCount = $high;
            }
            $expandFrames = !($context.$parsingOptions & 8) ? 0 : 1;
            c: {
                if ($stackMapFrameOffset) {
                    $context.$currentFrameOffset = (-1);
                    $context.$currentFrameType = 0;
                    $context.$currentFrameLocalCount = 0;
                    $context.$currentFrameLocalCountDelta = 0;
                    $context.$currentFrameLocalTypes = $rt_createArray(jl_Object, $maxLocals);
                    $context.$currentFrameStackCount = 0;
                    $context.$currentFrameStackTypes = $rt_createArray(jl_Object, $maxStack);
                    if ($expandFrames)
                        ooa_ClassReader_computeImplicitFrame($this, $context);
                    $offset = $stackMapFrameOffset;
                    while (true) {
                        if ($offset >= ($stackMapTableEndOffset - 2 | 0))
                            break c;
                        $table = $classBuffer.data;
                        if ($table[$offset] == 8) {
                            $potentialBytecodeOffset = ooa_ClassReader_readUnsignedShort($this, $offset + 1 | 0);
                            if ($potentialBytecodeOffset >= 0 && $potentialBytecodeOffset < $codeLength && ($table[$typeAnnotationOffset + $potentialBytecodeOffset | 0] & 255) == 187)
                                ooa_ClassReader_createLabel($this, $potentialBytecodeOffset, $typeTable);
                        }
                        $offset = $offset + 1 | 0;
                    }
                }
            }
            if ($expandFrames && $context.$parsingOptions & 256)
                ooat_MethodNode_visitFrame($methodVisitor, (-1), $maxLocals, null, 0, null);
            $currentVisibleTypeAnnotationIndex = 0;
            $currentVisibleTypeAnnotationBytecodeOffset = ooa_ClassReader_getTypeAnnotationBytecodeOffset($this, $visibleTypeAnnotationOffsets, 0);
            $currentInvisibleTypeAnnotationIndex = 0;
            $currentInvisibleTypeAnnotationBytecodeOffset = ooa_ClassReader_getTypeAnnotationBytecodeOffset($this, $invisibleTypeAnnotationOffsets, 0);
            $insertFrame = 0;
            $wideJumpOpcodeDelta = $context.$parsingOptions & 256 ? 0 : 33;
            $exceptionTableLength = $typeAnnotationOffset;
            d: while (true) {
                if ($exceptionTableLength >= $bytecodeEndOffset) {
                    if (var$19[$codeLength] !== null)
                        ooat_MethodNode_visitLabel($methodVisitor, var$19[$codeLength]);
                    e: {
                        if ($localVariableTableOffset && !($context.$parsingOptions & 2)) {
                            $typeTable = null;
                            if ($localVariableTypeTableOffset) {
                                $typeTable = $rt_createIntArray(ooa_ClassReader_readUnsignedShort($this, $localVariableTypeTableOffset) * 3 | 0);
                                $table = $typeTable.data;
                                $codeOffset = $localVariableTypeTableOffset + 2 | 0;
                                $typeTableIndex = $table.length;
                                while ($typeTableIndex > 0) {
                                    $bytecodeEndOffset = $typeTableIndex + (-1) | 0;
                                    $table[$bytecodeEndOffset] = $codeOffset + 6 | 0;
                                    $bytecodeEndOffset = $bytecodeEndOffset + (-1) | 0;
                                    $table[$bytecodeEndOffset] = ooa_ClassReader_readUnsignedShort($this, $codeOffset + 8 | 0);
                                    $typeTableIndex = $bytecodeEndOffset + (-1) | 0;
                                    $table[$typeTableIndex] = ooa_ClassReader_readUnsignedShort($this, $codeOffset);
                                    $codeOffset = $codeOffset + 10 | 0;
                                }
                            }
                            $localVariableTableLength = ooa_ClassReader_readUnsignedShort($this, $localVariableTableOffset);
                            $codeOffset = $localVariableTableOffset + 2 | 0;
                            while (true) {
                                $bytecodeEndOffset = $localVariableTableLength + (-1) | 0;
                                if ($localVariableTableLength <= 0)
                                    break e;
                                f: {
                                    $startPc = ooa_ClassReader_readUnsignedShort($this, $codeOffset);
                                    $length = ooa_ClassReader_readUnsignedShort($this, $codeOffset + 2 | 0);
                                    $name = ooa_ClassReader_readUTF8($this, $codeOffset + 4 | 0, $charBuffer);
                                    $descriptor = ooa_ClassReader_readUTF8($this, $codeOffset + 6 | 0, $charBuffer);
                                    $index = ooa_ClassReader_readUnsignedShort($this, $codeOffset + 8 | 0);
                                    $codeOffset = $codeOffset + 10 | 0;
                                    $signature = null;
                                    if ($typeTable !== null) {
                                        $i = 0;
                                        while (true) {
                                            $table = $typeTable.data;
                                            if ($i >= $table.length)
                                                break;
                                            if ($table[$i] == $startPc && $table[$i + 1 | 0] == $index) {
                                                $signature = ooa_ClassReader_readUTF8($this, $table[$i + 2 | 0], $charBuffer);
                                                break f;
                                            }
                                            $i = $i + 3 | 0;
                                        }
                                    }
                                }
                                ooat_MethodNode_visitLocalVariable($methodVisitor, $name, $descriptor, $signature, var$19[$startPc], var$19[$startPc + $length | 0], $index);
                                $localVariableTableLength = $bytecodeEndOffset;
                            }
                        }
                    }
                    g: {
                        if ($visibleTypeAnnotationOffsets !== null) {
                            $typeTable = $visibleTypeAnnotationOffsets.data;
                            $codeOffset = $typeTable.length;
                            $bytecodeEndOffset = 0;
                            while (true) {
                                if ($bytecodeEndOffset >= $codeOffset)
                                    break g;
                                $typeAnnotationOffset = $typeTable[$bytecodeEndOffset];
                                $targetType = ooa_ClassReader_readByte($this, $typeAnnotationOffset);
                                if (!($targetType != 64 && $targetType != 65)) {
                                    $low = ooa_ClassReader_readTypeAnnotationTarget($this, $context, $typeAnnotationOffset);
                                    $annotationDescriptor = ooa_ClassReader_readUTF8($this, $low, $charBuffer);
                                    $low = $low + 2 | 0;
                                    ooa_ClassReader_readElementValues($this, ooat_MethodNode_visitLocalVariableAnnotation($methodVisitor, $context.$currentTypeAnnotationTarget, $context.$currentTypeAnnotationTargetPath, $context.$currentLocalVariableAnnotationRangeStarts, $context.$currentLocalVariableAnnotationRangeEnds, $context.$currentLocalVariableAnnotationRangeIndices, $annotationDescriptor, 1), $low, 1, $charBuffer);
                                }
                                $bytecodeEndOffset = $bytecodeEndOffset + 1 | 0;
                            }
                        }
                    }
                    if ($invisibleTypeAnnotationOffsets !== null) {
                        $typeTable = $invisibleTypeAnnotationOffsets.data;
                        $bytecodeEndOffset = $typeTable.length;
                        $low = 0;
                        while ($low < $bytecodeEndOffset) {
                            $typeAnnotationOffset = $typeTable[$low];
                            $targetType = ooa_ClassReader_readByte($this, $typeAnnotationOffset);
                            if (!($targetType != 64 && $targetType != 65)) {
                                $codeOffset = ooa_ClassReader_readTypeAnnotationTarget($this, $context, $typeAnnotationOffset);
                                $annotationDescriptor = ooa_ClassReader_readUTF8($this, $codeOffset, $charBuffer);
                                $high = $codeOffset + 2 | 0;
                                ooa_ClassReader_readElementValues($this, ooat_MethodNode_visitLocalVariableAnnotation($methodVisitor, $context.$currentTypeAnnotationTarget, $context.$currentTypeAnnotationTargetPath, $context.$currentLocalVariableAnnotationRangeStarts, $context.$currentLocalVariableAnnotationRangeEnds, $context.$currentLocalVariableAnnotationRangeIndices, $annotationDescriptor, 0), $high, 1, $charBuffer);
                            }
                            $low = $low + 1 | 0;
                        }
                    }
                    while ($attributes !== null) {
                        $nextAttribute = $attributes.$nextAttribute;
                        $attributes.$nextAttribute = null;
                        ooat_MethodNode_visitAttribute($methodVisitor, $attributes);
                        $attributes = $nextAttribute;
                    }
                    ooat_MethodNode_visitMaxs($methodVisitor, $maxStack, $maxLocals);
                    return;
                }
                $currentBytecodeOffset = $exceptionTableLength - $typeAnnotationOffset | 0;
                ooa_ClassReader_readBytecodeInstructionOffset($this, $currentBytecodeOffset);
                $currentLabel = var$19[$currentBytecodeOffset];
                if ($currentLabel !== null)
                    ooa_Label_accept($currentLabel, $methodVisitor, $context.$parsingOptions & 2 ? 0 : 1);
                while ($stackMapFrameOffset) {
                    $codeOffset = $context.$currentFrameOffset;
                    if ($codeOffset != $currentBytecodeOffset && $codeOffset != (-1))
                        break;
                    if ($codeOffset != (-1)) {
                        if ($compressedFrames && !$expandFrames)
                            ooat_MethodNode_visitFrame($methodVisitor, $context.$currentFrameType, $context.$currentFrameLocalCountDelta, $context.$currentFrameLocalTypes, $context.$currentFrameStackCount, $context.$currentFrameStackTypes);
                        else
                            ooat_MethodNode_visitFrame($methodVisitor, (-1), $context.$currentFrameLocalCount, $context.$currentFrameLocalTypes, $context.$currentFrameStackCount, $context.$currentFrameStackTypes);
                        $insertFrame = 0;
                    }
                    if ($stackMapFrameOffset >= $stackMapTableEndOffset) {
                        $stackMapFrameOffset = 0;
                        continue;
                    }
                    $stackMapFrameOffset = ooa_ClassReader_readStackMapFrame($this, $stackMapFrameOffset, $compressedFrames, $expandFrames, $context);
                }
                if ($insertFrame) {
                    if ($context.$parsingOptions & 8)
                        ooat_MethodNode_visitFrame($methodVisitor, 256, 0, null, 0, null);
                    $insertFrame = 0;
                }
                h: {
                    $keys = $classBuffer.data;
                    $opcode = $keys[$exceptionTableLength] & 255;
                    switch ($opcode) {
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                        case 11:
                        case 12:
                        case 13:
                        case 14:
                        case 15:
                        case 46:
                        case 47:
                        case 48:
                        case 49:
                        case 50:
                        case 51:
                        case 52:
                        case 53:
                        case 79:
                        case 80:
                        case 81:
                        case 82:
                        case 83:
                        case 84:
                        case 85:
                        case 86:
                        case 87:
                        case 88:
                        case 89:
                        case 90:
                        case 91:
                        case 92:
                        case 93:
                        case 94:
                        case 95:
                        case 96:
                        case 97:
                        case 98:
                        case 99:
                        case 100:
                        case 101:
                        case 102:
                        case 103:
                        case 104:
                        case 105:
                        case 106:
                        case 107:
                        case 108:
                        case 109:
                        case 110:
                        case 111:
                        case 112:
                        case 113:
                        case 114:
                        case 115:
                        case 116:
                        case 117:
                        case 118:
                        case 119:
                        case 120:
                        case 121:
                        case 122:
                        case 123:
                        case 124:
                        case 125:
                        case 126:
                        case 127:
                        case 128:
                        case 129:
                        case 130:
                        case 131:
                        case 133:
                        case 134:
                        case 135:
                        case 136:
                        case 137:
                        case 138:
                        case 139:
                        case 140:
                        case 141:
                        case 142:
                        case 143:
                        case 144:
                        case 145:
                        case 146:
                        case 147:
                        case 148:
                        case 149:
                        case 150:
                        case 151:
                        case 152:
                        case 172:
                        case 173:
                        case 174:
                        case 175:
                        case 176:
                        case 177:
                        case 190:
                        case 191:
                        case 194:
                        case 195:
                            break;
                        case 16:
                        case 188:
                            ooat_MethodNode_visitIntInsn($methodVisitor, $opcode, $keys[$exceptionTableLength + 1 | 0]);
                            $exceptionTableLength = $exceptionTableLength + 2 | 0;
                            break h;
                        case 17:
                            ooat_MethodNode_visitIntInsn($methodVisitor, $opcode, ooa_ClassReader_readShort($this, $exceptionTableLength + 1 | 0));
                            $exceptionTableLength = $exceptionTableLength + 3 | 0;
                            break h;
                        case 18:
                            ooat_MethodNode_visitLdcInsn($methodVisitor, ooa_ClassReader_readConst($this, $keys[$exceptionTableLength + 1 | 0] & 255, $charBuffer));
                            $exceptionTableLength = $exceptionTableLength + 2 | 0;
                            break h;
                        case 19:
                        case 20:
                            ooat_MethodNode_visitLdcInsn($methodVisitor, ooa_ClassReader_readConst($this, ooa_ClassReader_readUnsignedShort($this, $exceptionTableLength + 1 | 0), $charBuffer));
                            $exceptionTableLength = $exceptionTableLength + 3 | 0;
                            break h;
                        case 21:
                        case 22:
                        case 23:
                        case 24:
                        case 25:
                        case 54:
                        case 55:
                        case 56:
                        case 57:
                        case 58:
                        case 169:
                            ooat_MethodNode_visitVarInsn($methodVisitor, $opcode, $keys[$exceptionTableLength + 1 | 0] & 255);
                            $exceptionTableLength = $exceptionTableLength + 2 | 0;
                            break h;
                        case 26:
                        case 27:
                        case 28:
                        case 29:
                        case 30:
                        case 31:
                        case 32:
                        case 33:
                        case 34:
                        case 35:
                        case 36:
                        case 37:
                        case 38:
                        case 39:
                        case 40:
                        case 41:
                        case 42:
                        case 43:
                        case 44:
                        case 45:
                            $codeOffset = $opcode + (-26) | 0;
                            ooat_MethodNode_visitVarInsn($methodVisitor, 21 + ($codeOffset >> 2) | 0, $codeOffset & 3);
                            $exceptionTableLength = $exceptionTableLength + 1 | 0;
                            break h;
                        case 59:
                        case 60:
                        case 61:
                        case 62:
                        case 63:
                        case 64:
                        case 65:
                        case 66:
                        case 67:
                        case 68:
                        case 69:
                        case 70:
                        case 71:
                        case 72:
                        case 73:
                        case 74:
                        case 75:
                        case 76:
                        case 77:
                        case 78:
                            $codeOffset = $opcode + (-59) | 0;
                            ooat_MethodNode_visitVarInsn($methodVisitor, 54 + ($codeOffset >> 2) | 0, $codeOffset & 3);
                            $exceptionTableLength = $exceptionTableLength + 1 | 0;
                            break h;
                        case 132:
                            ooat_MethodNode_visitIincInsn($methodVisitor, $keys[$exceptionTableLength + 1 | 0] & 255, $keys[$exceptionTableLength + 2 | 0]);
                            $exceptionTableLength = $exceptionTableLength + 3 | 0;
                            break h;
                        case 153:
                        case 154:
                        case 155:
                        case 156:
                        case 157:
                        case 158:
                        case 159:
                        case 160:
                        case 161:
                        case 162:
                        case 163:
                        case 164:
                        case 165:
                        case 166:
                        case 167:
                        case 168:
                        case 198:
                        case 199:
                            ooat_MethodNode_visitJumpInsn($methodVisitor, $opcode, var$19[$currentBytecodeOffset + ooa_ClassReader_readShort($this, $exceptionTableLength + 1 | 0) | 0]);
                            $exceptionTableLength = $exceptionTableLength + 3 | 0;
                            break h;
                        case 170:
                            $i = $exceptionTableLength + (4 - ($currentBytecodeOffset & 3) | 0) | 0;
                            $defaultLabel = var$19[$currentBytecodeOffset + ooa_ClassReader_readInt($this, $i) | 0];
                            $low = ooa_ClassReader_readInt($this, $i + 4 | 0);
                            $high = ooa_ClassReader_readInt($this, $i + 8 | 0);
                            $exceptionTableLength = $i + 12 | 0;
                            $table = $rt_createArray(ooa_Label, ($high - $low | 0) + 1 | 0);
                            $keys = $table.data;
                            $i = 0;
                            $codeOffset = $keys.length;
                            while ($i < $codeOffset) {
                                $keys[$i] = var$19[$currentBytecodeOffset + ooa_ClassReader_readInt($this, $exceptionTableLength) | 0];
                                $exceptionTableLength = $exceptionTableLength + 4 | 0;
                                $i = $i + 1 | 0;
                            }
                            ooat_MethodNode_visitTableSwitchInsn($methodVisitor, $low, $high, $defaultLabel, $table);
                            break h;
                        case 171:
                            $codeOffset = $exceptionTableLength + (4 - ($currentBytecodeOffset & 3) | 0) | 0;
                            $defaultLabel_0 = var$19[$currentBytecodeOffset + ooa_ClassReader_readInt($this, $codeOffset) | 0];
                            $numPairs = ooa_ClassReader_readInt($this, $codeOffset + 4 | 0);
                            $exceptionTableLength = $codeOffset + 8 | 0;
                            $keys = $rt_createIntArray($numPairs);
                            $table = $keys.data;
                            $values = $rt_createArray(ooa_Label, $numPairs);
                            $bootstrapMethodArguments = $values.data;
                            $i = 0;
                            while ($i < $numPairs) {
                                $table[$i] = ooa_ClassReader_readInt($this, $exceptionTableLength);
                                $bootstrapMethodArguments[$i] = var$19[$currentBytecodeOffset + ooa_ClassReader_readInt($this, $exceptionTableLength + 4 | 0) | 0];
                                $exceptionTableLength = $exceptionTableLength + 8 | 0;
                                $i = $i + 1 | 0;
                            }
                            ooat_MethodNode_visitLookupSwitchInsn($methodVisitor, $defaultLabel_0, $keys, $values);
                            break h;
                        case 178:
                        case 179:
                        case 180:
                        case 181:
                        case 182:
                        case 183:
                        case 184:
                        case 185:
                            $cpInfoOffset = $this.$cpInfoOffsets.data[ooa_ClassReader_readUnsignedShort($this, $exceptionTableLength + 1 | 0)];
                            $nameAndTypeCpInfoOffset = $this.$cpInfoOffsets.data[ooa_ClassReader_readUnsignedShort($this, $cpInfoOffset + 2 | 0)];
                            $owner = ooa_ClassReader_readClass($this, $cpInfoOffset, $charBuffer);
                            $name = ooa_ClassReader_readUTF8($this, $nameAndTypeCpInfoOffset, $charBuffer);
                            $descriptor = ooa_ClassReader_readUTF8($this, $nameAndTypeCpInfoOffset + 2 | 0, $charBuffer);
                            if ($opcode < 182)
                                ooat_MethodNode_visitFieldInsn($methodVisitor, $opcode, $owner, $name, $descriptor);
                            else
                                ooat_MethodNode_visitMethodInsn($methodVisitor, $opcode, $owner, $name, $descriptor, $keys[$cpInfoOffset - 1 | 0] != 11 ? 0 : 1);
                            if ($opcode != 185) {
                                $exceptionTableLength = $exceptionTableLength + 3 | 0;
                                break h;
                            }
                            $exceptionTableLength = $exceptionTableLength + 5 | 0;
                            break h;
                        case 186:
                            $cpInfoOffset = $this.$cpInfoOffsets.data[ooa_ClassReader_readUnsignedShort($this, $exceptionTableLength + 1 | 0)];
                            $nameAndTypeCpInfoOffset = $this.$cpInfoOffsets.data[ooa_ClassReader_readUnsignedShort($this, $cpInfoOffset + 2 | 0)];
                            $name = ooa_ClassReader_readUTF8($this, $nameAndTypeCpInfoOffset, $charBuffer);
                            $descriptor = ooa_ClassReader_readUTF8($this, $nameAndTypeCpInfoOffset + 2 | 0, $charBuffer);
                            $bootstrapMethodOffset = $this.$bootstrapMethodOffsets.data[ooa_ClassReader_readUnsignedShort($this, $cpInfoOffset)];
                            $handle = ooa_ClassReader_readConst($this, ooa_ClassReader_readUnsignedShort($this, $bootstrapMethodOffset), $charBuffer);
                            $bootstrapMethodArguments = $rt_createArray(jl_Object, ooa_ClassReader_readUnsignedShort($this, $bootstrapMethodOffset + 2 | 0));
                            $table = $bootstrapMethodArguments.data;
                            $codeOffset = $bootstrapMethodOffset + 4 | 0;
                            $i = 0;
                            $low = $table.length;
                            while ($i < $low) {
                                $table[$i] = ooa_ClassReader_readConst($this, ooa_ClassReader_readUnsignedShort($this, $codeOffset), $charBuffer);
                                $codeOffset = $codeOffset + 2 | 0;
                                $i = $i + 1 | 0;
                            }
                            ooat_MethodNode_visitInvokeDynamicInsn($methodVisitor, $name, $descriptor, $handle, $bootstrapMethodArguments);
                            $exceptionTableLength = $exceptionTableLength + 5 | 0;
                            break h;
                        case 187:
                        case 189:
                        case 192:
                        case 193:
                            ooat_MethodNode_visitTypeInsn($methodVisitor, $opcode, ooa_ClassReader_readClass($this, $exceptionTableLength + 1 | 0, $charBuffer));
                            $exceptionTableLength = $exceptionTableLength + 3 | 0;
                            break h;
                        case 196:
                            $codeOffset = $keys[$exceptionTableLength + 1 | 0] & 255;
                            if ($codeOffset != 132) {
                                ooat_MethodNode_visitVarInsn($methodVisitor, $codeOffset, ooa_ClassReader_readUnsignedShort($this, $exceptionTableLength + 2 | 0));
                                $exceptionTableLength = $exceptionTableLength + 4 | 0;
                                break h;
                            }
                            ooat_MethodNode_visitIincInsn($methodVisitor, ooa_ClassReader_readUnsignedShort($this, $exceptionTableLength + 2 | 0), ooa_ClassReader_readShort($this, $exceptionTableLength + 4 | 0));
                            $exceptionTableLength = $exceptionTableLength + 6 | 0;
                            break h;
                        case 197:
                            ooat_MethodNode_visitMultiANewArrayInsn($methodVisitor, ooa_ClassReader_readClass($this, $exceptionTableLength + 1 | 0, $charBuffer), $keys[$exceptionTableLength + 3 | 0] & 255);
                            $exceptionTableLength = $exceptionTableLength + 4 | 0;
                            break h;
                        case 200:
                        case 201:
                            ooat_MethodNode_visitJumpInsn($methodVisitor, $opcode - $wideJumpOpcodeDelta | 0, var$19[$currentBytecodeOffset + ooa_ClassReader_readInt($this, $exceptionTableLength + 1 | 0) | 0]);
                            $exceptionTableLength = $exceptionTableLength + 5 | 0;
                            break h;
                        case 202:
                        case 203:
                        case 204:
                        case 205:
                        case 206:
                        case 207:
                        case 208:
                        case 209:
                        case 210:
                        case 211:
                        case 212:
                        case 213:
                        case 214:
                        case 215:
                        case 216:
                        case 217:
                        case 218:
                        case 219:
                            $codeOffset = $opcode >= 218 ? $opcode - 20 | 0 : $opcode - 49 | 0;
                            $target = var$19[$currentBytecodeOffset + ooa_ClassReader_readUnsignedShort($this, $exceptionTableLength + 1 | 0) | 0];
                            $low = $rt_compare($codeOffset, 167);
                            if ($low && $codeOffset != 168) {
                                ooat_MethodNode_visitJumpInsn($methodVisitor, $low >= 0 ? $codeOffset ^ 1 : (($codeOffset + 1 | 0) ^ 1) - 1 | 0, ooa_ClassReader_createLabel($this, $currentBytecodeOffset + 3 | 0, $typeTable));
                                ooat_MethodNode_visitJumpInsn($methodVisitor, 200, $target);
                                $insertFrame = 1;
                            } else
                                ooat_MethodNode_visitJumpInsn($methodVisitor, $codeOffset + 33 | 0, $target);
                            $exceptionTableLength = $exceptionTableLength + 3 | 0;
                            break h;
                        case 220:
                            ooat_MethodNode_visitJumpInsn($methodVisitor, 200, var$19[$currentBytecodeOffset + ooa_ClassReader_readInt($this, $exceptionTableLength + 1 | 0) | 0]);
                            $insertFrame = 1;
                            $exceptionTableLength = $exceptionTableLength + 5 | 0;
                            break h;
                        default:
                            break d;
                    }
                    ooat_MethodNode_visitInsn($methodVisitor, $opcode);
                    $exceptionTableLength = $exceptionTableLength + 1 | 0;
                }
                i: {
                    while ($visibleTypeAnnotationOffsets !== null) {
                        $table = $visibleTypeAnnotationOffsets.data;
                        if ($currentVisibleTypeAnnotationIndex >= $table.length)
                            break i;
                        $codeOffset = $rt_compare($currentVisibleTypeAnnotationBytecodeOffset, $currentBytecodeOffset);
                        if ($codeOffset > 0)
                            break i;
                        if (!$codeOffset) {
                            $currentAnnotationOffset = ooa_ClassReader_readTypeAnnotationTarget($this, $context, $table[$currentVisibleTypeAnnotationIndex]);
                            $annotationDescriptor = ooa_ClassReader_readUTF8($this, $currentAnnotationOffset, $charBuffer);
                            $codeOffset = $currentAnnotationOffset + 2 | 0;
                            ooa_ClassReader_readElementValues($this, ooat_MethodNode_visitInsnAnnotation($methodVisitor, $context.$currentTypeAnnotationTarget, $context.$currentTypeAnnotationTargetPath, $annotationDescriptor, 1), $codeOffset, 1, $charBuffer);
                        }
                        $currentVisibleTypeAnnotationIndex = $currentVisibleTypeAnnotationIndex + 1 | 0;
                        $currentVisibleTypeAnnotationBytecodeOffset = ooa_ClassReader_getTypeAnnotationBytecodeOffset($this, $visibleTypeAnnotationOffsets, $currentVisibleTypeAnnotationIndex);
                    }
                }
                while ($invisibleTypeAnnotationOffsets !== null) {
                    $table = $invisibleTypeAnnotationOffsets.data;
                    if ($currentInvisibleTypeAnnotationIndex >= $table.length)
                        break;
                    $codeOffset = $rt_compare($currentInvisibleTypeAnnotationBytecodeOffset, $currentBytecodeOffset);
                    if ($codeOffset > 0)
                        break;
                    if (!$codeOffset) {
                        $currentAnnotationOffset = ooa_ClassReader_readTypeAnnotationTarget($this, $context, $table[$currentInvisibleTypeAnnotationIndex]);
                        $annotationDescriptor = ooa_ClassReader_readUTF8($this, $currentAnnotationOffset, $charBuffer);
                        $codeOffset = $currentAnnotationOffset + 2 | 0;
                        ooa_ClassReader_readElementValues($this, ooat_MethodNode_visitInsnAnnotation($methodVisitor, $context.$currentTypeAnnotationTarget, $context.$currentTypeAnnotationTargetPath, $annotationDescriptor, 0), $codeOffset, 1, $charBuffer);
                    }
                    $currentInvisibleTypeAnnotationIndex = $currentInvisibleTypeAnnotationIndex + 1 | 0;
                    $currentInvisibleTypeAnnotationBytecodeOffset = ooa_ClassReader_getTypeAnnotationBytecodeOffset($this, $invisibleTypeAnnotationOffsets, $currentInvisibleTypeAnnotationIndex);
                }
            }
            $rt_throw(jl_AssertionError__init_());
        }
        j: {
            $table = $classBuffer.data;
            $bytecodeOffset = $low - $typeAnnotationOffset | 0;
            switch ($table[$low] & 255) {
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                case 32:
                case 33:
                case 34:
                case 35:
                case 36:
                case 37:
                case 38:
                case 39:
                case 40:
                case 41:
                case 42:
                case 43:
                case 44:
                case 45:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 59:
                case 60:
                case 61:
                case 62:
                case 63:
                case 64:
                case 65:
                case 66:
                case 67:
                case 68:
                case 69:
                case 70:
                case 71:
                case 72:
                case 73:
                case 74:
                case 75:
                case 76:
                case 77:
                case 78:
                case 79:
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 116:
                case 117:
                case 118:
                case 119:
                case 120:
                case 121:
                case 122:
                case 123:
                case 124:
                case 125:
                case 126:
                case 127:
                case 128:
                case 129:
                case 130:
                case 131:
                case 133:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 140:
                case 141:
                case 142:
                case 143:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 190:
                case 191:
                case 194:
                case 195:
                    break;
                case 16:
                case 18:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 169:
                case 188:
                    $low = $low + 2 | 0;
                    break j;
                case 17:
                case 19:
                case 20:
                case 132:
                case 178:
                case 179:
                case 180:
                case 181:
                case 182:
                case 183:
                case 184:
                case 187:
                case 189:
                case 192:
                case 193:
                    $low = $low + 3 | 0;
                    break j;
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 158:
                case 159:
                case 160:
                case 161:
                case 162:
                case 163:
                case 164:
                case 165:
                case 166:
                case 167:
                case 168:
                case 198:
                case 199:
                    ooa_ClassReader_createLabel($this, $bytecodeOffset + ooa_ClassReader_readShort($this, $low + 1 | 0) | 0, $typeTable);
                    $low = $low + 3 | 0;
                    break j;
                case 170:
                    $low = $low + (4 - ($bytecodeOffset & 3) | 0) | 0;
                    ooa_ClassReader_createLabel($this, $bytecodeOffset + ooa_ClassReader_readInt($this, $low) | 0, $typeTable);
                    $numTableEntries = (ooa_ClassReader_readInt($this, $low + 8 | 0) - ooa_ClassReader_readInt($this, $low + 4 | 0) | 0) + 1 | 0;
                    $low = $low + 12 | 0;
                    while (true) {
                        $high = $numTableEntries + (-1) | 0;
                        if ($numTableEntries <= 0)
                            break;
                        ooa_ClassReader_createLabel($this, $bytecodeOffset + ooa_ClassReader_readInt($this, $low) | 0, $typeTable);
                        $low = $low + 4 | 0;
                        $numTableEntries = $high;
                    }
                    break j;
                case 171:
                    $low = $low + (4 - ($bytecodeOffset & 3) | 0) | 0;
                    ooa_ClassReader_createLabel($this, $bytecodeOffset + ooa_ClassReader_readInt($this, $low) | 0, $typeTable);
                    $numSwitchCases = ooa_ClassReader_readInt($this, $low + 4 | 0);
                    $low = $low + 8 | 0;
                    while (true) {
                        $high = $numSwitchCases + (-1) | 0;
                        if ($numSwitchCases <= 0)
                            break;
                        ooa_ClassReader_createLabel($this, $bytecodeOffset + ooa_ClassReader_readInt($this, $low + 4 | 0) | 0, $typeTable);
                        $low = $low + 8 | 0;
                        $numSwitchCases = $high;
                    }
                    break j;
                case 185:
                case 186:
                    $low = $low + 5 | 0;
                    break j;
                case 196:
                    switch ($table[$low + 1 | 0] & 255) {
                        case 21:
                        case 22:
                        case 23:
                        case 24:
                        case 25:
                        case 54:
                        case 55:
                        case 56:
                        case 57:
                        case 58:
                        case 169:
                            break;
                        case 132:
                            $low = $low + 6 | 0;
                            break j;
                        default:
                            $rt_throw(jl_IllegalArgumentException__init_());
                    }
                    $low = $low + 4 | 0;
                    break j;
                case 197:
                    $low = $low + 4 | 0;
                    break j;
                case 200:
                case 201:
                case 220:
                    ooa_ClassReader_createLabel($this, $bytecodeOffset + ooa_ClassReader_readInt($this, $low + 1 | 0) | 0, $typeTable);
                    $low = $low + 5 | 0;
                    break j;
                case 202:
                case 203:
                case 204:
                case 205:
                case 206:
                case 207:
                case 208:
                case 209:
                case 210:
                case 211:
                case 212:
                case 213:
                case 214:
                case 215:
                case 216:
                case 217:
                case 218:
                case 219:
                    ooa_ClassReader_createLabel($this, $bytecodeOffset + ooa_ClassReader_readUnsignedShort($this, $low + 1 | 0) | 0, $typeTable);
                    $low = $low + 3 | 0;
                    break j;
                default:
                    break a;
            }
            $low = $low + 1 | 0;
        }
    }
    $rt_throw(jl_IllegalArgumentException__init_());
},
ooa_ClassReader_readBytecodeInstructionOffset = ($this, $bytecodeOffset) => {
    return;
},
ooa_ClassReader_readLabel = ($this, $bytecodeOffset, $labels) => {
    $labels = $labels.data;
    if ($labels[$bytecodeOffset] === null)
        $labels[$bytecodeOffset] = new ooa_Label;
    return $labels[$bytecodeOffset];
},
ooa_ClassReader_createLabel = ($this, $bytecodeOffset, $labels) => {
    let $label;
    $label = ooa_ClassReader_readLabel($this, $bytecodeOffset, $labels);
    $label.$flags1 = ($label.$flags1 & (-2)) << 16 >> 16;
    return $label;
},
ooa_ClassReader_createDebugLabel = ($this, $bytecodeOffset, $labels) => {
    let var$3;
    if ($labels.data[$bytecodeOffset] === null) {
        var$3 = ooa_ClassReader_readLabel($this, $bytecodeOffset, $labels);
        var$3.$flags1 = (var$3.$flags1 | 1) << 16 >> 16;
    }
},
ooa_ClassReader_readTypeAnnotations = ($this, $methodVisitor, $context, $runtimeTypeAnnotationsOffset, $visible) => {
    let $charBuffer, $typeAnnotationsOffsets, var$7, $length, $i, var$10, $targetType, var$12, $tableLength, var$14, $pathLength, $startPc, $path, $annotationDescriptor, var$19, var$20;
    $charBuffer = $context.$charBuffer;
    $typeAnnotationsOffsets = $rt_createIntArray(ooa_ClassReader_readUnsignedShort($this, $runtimeTypeAnnotationsOffset));
    var$7 = $typeAnnotationsOffsets.data;
    $length = $runtimeTypeAnnotationsOffset + 2 | 0;
    $i = 0;
    var$10 = var$7.length;
    a: {
        while ($i < var$10) {
            b: {
                var$7[$i] = $length;
                $targetType = ooa_ClassReader_readInt($this, $length);
                var$12 = $targetType >>> 24 | 0;
                switch (var$12) {
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 19:
                    case 20:
                    case 21:
                    case 22:
                    case 24:
                    case 25:
                    case 26:
                    case 27:
                    case 28:
                    case 29:
                    case 30:
                    case 31:
                    case 32:
                    case 33:
                    case 34:
                    case 35:
                    case 36:
                    case 37:
                    case 38:
                    case 39:
                    case 40:
                    case 41:
                    case 42:
                    case 43:
                    case 44:
                    case 45:
                    case 46:
                    case 47:
                    case 48:
                    case 49:
                    case 50:
                    case 51:
                    case 52:
                    case 53:
                    case 54:
                    case 55:
                    case 56:
                    case 57:
                    case 58:
                    case 59:
                    case 60:
                    case 61:
                    case 62:
                    case 63:
                        break a;
                    case 16:
                    case 17:
                    case 18:
                    case 23:
                    case 66:
                    case 67:
                    case 68:
                    case 69:
                    case 70:
                        break;
                    case 64:
                    case 65:
                        $tableLength = ooa_ClassReader_readUnsignedShort($this, $length + 1 | 0);
                        var$14 = $length + 3 | 0;
                        while (true) {
                            $pathLength = $tableLength + (-1) | 0;
                            if ($tableLength <= 0)
                                break;
                            $startPc = ooa_ClassReader_readUnsignedShort($this, var$14);
                            $length = ooa_ClassReader_readUnsignedShort($this, var$14 + 2 | 0);
                            var$14 = var$14 + 6 | 0;
                            ooa_ClassReader_createLabel($this, $startPc, $context.$currentMethodLabels);
                            ooa_ClassReader_createLabel($this, $startPc + $length | 0, $context.$currentMethodLabels);
                            $tableLength = $pathLength;
                        }
                        break b;
                    case 71:
                    case 72:
                    case 73:
                    case 74:
                    case 75:
                        var$14 = $length + 4 | 0;
                        break b;
                    default:
                        break a;
                }
                var$14 = $length + 3 | 0;
            }
            $pathLength = ooa_ClassReader_readByte($this, var$14);
            if (var$12 != 66)
                $length = ooa_ClassReader_readElementValues($this, null, var$14 + (3 + (2 * $pathLength | 0) | 0) | 0, 1, $charBuffer);
            else {
                $path = !$pathLength ? null : ooa_TypePath__init_($this.$classFileBuffer, var$14);
                $runtimeTypeAnnotationsOffset = var$14 + (1 + (2 * $pathLength | 0) | 0) | 0;
                $annotationDescriptor = ooa_ClassReader_readUTF8($this, $runtimeTypeAnnotationsOffset, $charBuffer);
                $runtimeTypeAnnotationsOffset = $runtimeTypeAnnotationsOffset + 2 | 0;
                $length = $targetType & (-256);
                var$19 = ju_ArrayList_get($methodVisitor.$tryCatchBlocks, ($length & 16776960) >> 8);
                var$20 = ooat_TypeAnnotationNode__init_($length, $path, $annotationDescriptor);
                if (!$visible)
                    var$19.$invisibleTypeAnnotations = ooat_Util_add(var$19.$invisibleTypeAnnotations, var$20);
                else
                    var$19.$visibleTypeAnnotations1 = ooat_Util_add(var$19.$visibleTypeAnnotations1, var$20);
                $length = ooa_ClassReader_readElementValues($this, var$20, $runtimeTypeAnnotationsOffset, 1, $charBuffer);
            }
            $i = $i + 1 | 0;
        }
        return $typeAnnotationsOffsets;
    }
    $methodVisitor = new jl_IllegalArgumentException;
    jl_Throwable__init_($methodVisitor);
    $rt_throw($methodVisitor);
},
ooa_ClassReader_getTypeAnnotationBytecodeOffset = ($this, $typeAnnotationOffsets, $typeAnnotationIndex) => {
    if ($typeAnnotationOffsets !== null) {
        $typeAnnotationOffsets = $typeAnnotationOffsets.data;
        if ($typeAnnotationIndex < $typeAnnotationOffsets.length && ooa_ClassReader_readByte($this, $typeAnnotationOffsets[$typeAnnotationIndex]) >= 67)
            return ooa_ClassReader_readUnsignedShort($this, $typeAnnotationOffsets[$typeAnnotationIndex] + 1 | 0);
    }
    return (-1);
},
ooa_ClassReader_readTypeAnnotationTarget = ($this, $context, $typeAnnotationOffset) => {
    let $targetType, $tableLength, $i, $startPc, $length, $index, $pathLength;
    a: {
        $targetType = ooa_ClassReader_readInt($this, $typeAnnotationOffset);
        switch ($targetType >>> 24 | 0) {
            case 0:
            case 1:
            case 22:
                $targetType = $targetType & (-65536);
                $typeAnnotationOffset = $typeAnnotationOffset + 2 | 0;
                break a;
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 37:
            case 38:
            case 39:
            case 40:
            case 41:
            case 42:
            case 43:
            case 44:
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 63:
                break;
            case 16:
            case 17:
            case 18:
            case 23:
            case 66:
                $targetType = $targetType & (-256);
                $typeAnnotationOffset = $typeAnnotationOffset + 3 | 0;
                break a;
            case 19:
            case 20:
            case 21:
                $targetType = $targetType & (-16777216);
                $typeAnnotationOffset = $typeAnnotationOffset + 1 | 0;
                break a;
            case 64:
            case 65:
                $targetType = $targetType & (-16777216);
                $tableLength = ooa_ClassReader_readUnsignedShort($this, $typeAnnotationOffset + 1 | 0);
                $typeAnnotationOffset = $typeAnnotationOffset + 3 | 0;
                $context.$currentLocalVariableAnnotationRangeStarts = $rt_createArray(ooa_Label, $tableLength);
                $context.$currentLocalVariableAnnotationRangeEnds = $rt_createArray(ooa_Label, $tableLength);
                $context.$currentLocalVariableAnnotationRangeIndices = $rt_createIntArray($tableLength);
                $i = 0;
                while ($i < $tableLength) {
                    $startPc = ooa_ClassReader_readUnsignedShort($this, $typeAnnotationOffset);
                    $length = ooa_ClassReader_readUnsignedShort($this, $typeAnnotationOffset + 2 | 0);
                    $index = ooa_ClassReader_readUnsignedShort($this, $typeAnnotationOffset + 4 | 0);
                    $typeAnnotationOffset = $typeAnnotationOffset + 6 | 0;
                    $context.$currentLocalVariableAnnotationRangeStarts.data[$i] = ooa_ClassReader_createLabel($this, $startPc, $context.$currentMethodLabels);
                    $context.$currentLocalVariableAnnotationRangeEnds.data[$i] = ooa_ClassReader_createLabel($this, $startPc + $length | 0, $context.$currentMethodLabels);
                    $context.$currentLocalVariableAnnotationRangeIndices.data[$i] = $index;
                    $i = $i + 1 | 0;
                }
                break a;
            case 67:
            case 68:
            case 69:
            case 70:
                $targetType = $targetType & (-16777216);
                $typeAnnotationOffset = $typeAnnotationOffset + 3 | 0;
                break a;
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
                $targetType = $targetType & (-16776961);
                $typeAnnotationOffset = $typeAnnotationOffset + 4 | 0;
                break a;
            default:
        }
        $context = new jl_IllegalArgumentException;
        jl_Throwable__init_($context);
        $rt_throw($context);
    }
    $context.$currentTypeAnnotationTarget = $targetType;
    $pathLength = ooa_ClassReader_readByte($this, $typeAnnotationOffset);
    $context.$currentTypeAnnotationTargetPath = !$pathLength ? null : ooa_TypePath__init_($this.$classFileBuffer, $typeAnnotationOffset);
    return ($typeAnnotationOffset + 1 | 0) + (2 * $pathLength | 0) | 0;
},
ooa_ClassReader_readParameterAnnotations = ($this, $methodVisitor, $context, $runtimeParameterAnnotationsOffset, $visible) => {
    let $charBuffer, var$6, $numParameters, $i, $numAnnotations, var$10, $annotationDescriptor, var$12;
    $charBuffer = $this.$classFileBuffer.data;
    var$6 = $runtimeParameterAnnotationsOffset + 1 | 0;
    $numParameters = $charBuffer[$runtimeParameterAnnotationsOffset] & 255;
    if (!$visible)
        $methodVisitor.$invisibleAnnotableParameterCount = $numParameters;
    else
        $methodVisitor.$visibleAnnotableParameterCount = $numParameters;
    $charBuffer = $context.$charBuffer;
    $i = 0;
    while ($i < $numParameters) {
        $numAnnotations = ooa_ClassReader_readUnsignedShort($this, var$6);
        var$6 = var$6 + 2 | 0;
        while (true) {
            var$10 = $numAnnotations + (-1) | 0;
            if ($numAnnotations <= 0)
                break;
            $annotationDescriptor = ooa_ClassReader_readUTF8($this, var$6, $charBuffer);
            var$6 = var$6 + 2 | 0;
            $context = ooat_AnnotationNode__init_($annotationDescriptor);
            if (!$visible) {
                if ($methodVisitor.$invisibleParameterAnnotations === null)
                    $methodVisitor.$invisibleParameterAnnotations = $rt_createArray(ju_List, ooa_Type_getArgumentCount($methodVisitor.$desc1));
                var$12 = $methodVisitor.$invisibleParameterAnnotations.data;
                var$12[$i] = ooat_Util_add(var$12[$i], $context);
            } else {
                if ($methodVisitor.$visibleParameterAnnotations === null)
                    $methodVisitor.$visibleParameterAnnotations = $rt_createArray(ju_List, ooa_Type_getArgumentCount($methodVisitor.$desc1));
                var$12 = $methodVisitor.$visibleParameterAnnotations.data;
                var$12[$i] = ooat_Util_add(var$12[$i], $context);
            }
            var$6 = ooa_ClassReader_readElementValues($this, $context, var$6, 1, $charBuffer);
            $numAnnotations = var$10;
        }
        $i = $i + 1 | 0;
    }
},
ooa_ClassReader_readElementValues = ($this, $annotationVisitor, $annotationOffset, $named, $charBuffer) => {
    let $numElementValuePairs;
    $numElementValuePairs = ooa_ClassReader_readUnsignedShort($this, $annotationOffset);
    $annotationOffset = $annotationOffset + 2 | 0;
    if (!$named)
        while (true) {
            $named = $numElementValuePairs + (-1) | 0;
            if ($numElementValuePairs <= 0)
                break;
            $annotationOffset = ooa_ClassReader_readElementValue($this, $annotationVisitor, $annotationOffset, null, $charBuffer);
            $numElementValuePairs = $named;
        }
    else
        while (true) {
            $named = $numElementValuePairs + (-1) | 0;
            if ($numElementValuePairs <= 0)
                break;
            $annotationOffset = ooa_ClassReader_readElementValue($this, $annotationVisitor, $annotationOffset + 2 | 0, ooa_ClassReader_readUTF8($this, $annotationOffset, $charBuffer), $charBuffer);
            $numElementValuePairs = $named;
        }
    return $annotationOffset;
},
ooa_ClassReader_readElementValue = ($this, $annotationVisitor, $elementValueOffset, $elementName, $charBuffer) => {
    let $charValues, $i, var$7, $numValues, $byteValues, $doubleValues, $floatValues, $intValues, $longValues, $shortValues, $booleanValues;
    if ($annotationVisitor === null) {
        switch ($this.$classFileBuffer.data[$elementValueOffset] & 255) {
            case 64:
                return ooa_ClassReader_readElementValues($this, null, $elementValueOffset + 3 | 0, 1, $charBuffer);
            case 91:
                return ooa_ClassReader_readElementValues($this, null, $elementValueOffset + 1 | 0, 0, $charBuffer);
            case 101:
                break;
            default:
                return $elementValueOffset + 3 | 0;
        }
        return $elementValueOffset + 5 | 0;
    }
    a: {
        $charValues = $this.$classFileBuffer.data;
        $i = $elementValueOffset + 1 | 0;
        switch ($charValues[$elementValueOffset] & 255) {
            case 64:
                var$7 = ooa_ClassReader_readElementValues($this, ooat_AnnotationNode_visitAnnotation($annotationVisitor, $elementName, ooa_ClassReader_readUTF8($this, $i, $charBuffer)), $i + 2 | 0, 1, $charBuffer);
                break a;
            case 65:
            case 69:
            case 71:
            case 72:
            case 75:
            case 76:
            case 77:
            case 78:
            case 79:
            case 80:
            case 81:
            case 82:
            case 84:
            case 85:
            case 86:
            case 87:
            case 88:
            case 89:
            case 92:
            case 93:
            case 94:
            case 95:
            case 96:
            case 97:
            case 98:
            case 100:
            case 102:
            case 103:
            case 104:
            case 105:
            case 106:
            case 107:
            case 108:
            case 109:
            case 110:
            case 111:
            case 112:
            case 113:
            case 114:
                break;
            case 66:
                ooat_AnnotationNode_visit($annotationVisitor, $elementName, jl_Byte_valueOf(ooa_ClassReader_readInt($this, $this.$cpInfoOffsets.data[ooa_ClassReader_readUnsignedShort($this, $i)]) << 24 >> 24));
                var$7 = $i + 2 | 0;
                break a;
            case 67:
                ooat_AnnotationNode_visit($annotationVisitor, $elementName, jl_Character_valueOf(ooa_ClassReader_readInt($this, $this.$cpInfoOffsets.data[ooa_ClassReader_readUnsignedShort($this, $i)]) & 65535));
                var$7 = $i + 2 | 0;
                break a;
            case 68:
            case 70:
            case 73:
            case 74:
                ooat_AnnotationNode_visit($annotationVisitor, $elementName, ooa_ClassReader_readConst($this, ooa_ClassReader_readUnsignedShort($this, $i), $charBuffer));
                var$7 = $i + 2 | 0;
                break a;
            case 83:
                ooat_AnnotationNode_visit($annotationVisitor, $elementName, jl_Short_valueOf(ooa_ClassReader_readInt($this, $this.$cpInfoOffsets.data[ooa_ClassReader_readUnsignedShort($this, $i)]) << 16 >> 16));
                var$7 = $i + 2 | 0;
                break a;
            case 90:
                ooat_AnnotationNode_visit($annotationVisitor, $elementName, ooa_ClassReader_readInt($this, $this.$cpInfoOffsets.data[ooa_ClassReader_readUnsignedShort($this, $i)]) ? jl_Boolean_TRUE : jl_Boolean_FALSE);
                var$7 = $i + 2 | 0;
                break a;
            case 91:
                $numValues = ooa_ClassReader_readUnsignedShort($this, $i);
                var$7 = $i + 2 | 0;
                if (!$numValues)
                    return ooa_ClassReader_readElementValues($this, ooat_AnnotationNode_visitArray($annotationVisitor, $elementName), var$7 - 2 | 0, 0, $charBuffer);
                switch ($this.$classFileBuffer.data[var$7] & 255) {
                    case 66:
                        $byteValues = $rt_createByteArray($numValues);
                        $charValues = $byteValues.data;
                        $i = 0;
                        while ($i < $numValues) {
                            $charValues[$i] = ooa_ClassReader_readInt($this, $this.$cpInfoOffsets.data[ooa_ClassReader_readUnsignedShort($this, var$7 + 1 | 0)]) << 24 >> 24;
                            var$7 = var$7 + 3 | 0;
                            $i = $i + 1 | 0;
                        }
                        ooat_AnnotationNode_visit($annotationVisitor, $elementName, $byteValues);
                        break a;
                    case 67:
                        $charValues = $rt_createCharArray($numValues);
                        $doubleValues = $charValues.data;
                        $i = 0;
                        while ($i < $numValues) {
                            $doubleValues[$i] = ooa_ClassReader_readInt($this, $this.$cpInfoOffsets.data[ooa_ClassReader_readUnsignedShort($this, var$7 + 1 | 0)]) & 65535;
                            var$7 = var$7 + 3 | 0;
                            $i = $i + 1 | 0;
                        }
                        ooat_AnnotationNode_visit($annotationVisitor, $elementName, $charValues);
                        break a;
                    case 68:
                        $doubleValues = $rt_createDoubleArray($numValues);
                        $charValues = $doubleValues.data;
                        $i = 0;
                        while ($i < $numValues) {
                            $charValues[$i] = $rt_longBitsToDouble((ooa_ClassReader_readLong($this, $this.$cpInfoOffsets.data[ooa_ClassReader_readUnsignedShort($this, var$7 + 1 | 0)])));
                            var$7 = var$7 + 3 | 0;
                            $i = $i + 1 | 0;
                        }
                        ooat_AnnotationNode_visit($annotationVisitor, $elementName, $doubleValues);
                        break a;
                    case 69:
                    case 71:
                    case 72:
                    case 75:
                    case 76:
                    case 77:
                    case 78:
                    case 79:
                    case 80:
                    case 81:
                    case 82:
                    case 84:
                    case 85:
                    case 86:
                    case 87:
                    case 88:
                    case 89:
                        break;
                    case 70:
                        $floatValues = $rt_createFloatArray($numValues);
                        $charValues = $floatValues.data;
                        $i = 0;
                        while ($i < $numValues) {
                            $charValues[$i] = $rt_intBitsToFloat(ooa_ClassReader_readInt($this, $this.$cpInfoOffsets.data[ooa_ClassReader_readUnsignedShort($this, var$7 + 1 | 0)]));
                            var$7 = var$7 + 3 | 0;
                            $i = $i + 1 | 0;
                        }
                        ooat_AnnotationNode_visit($annotationVisitor, $elementName, $floatValues);
                        break a;
                    case 73:
                        $intValues = $rt_createIntArray($numValues);
                        $charValues = $intValues.data;
                        $i = 0;
                        while ($i < $numValues) {
                            $charValues[$i] = ooa_ClassReader_readInt($this, $this.$cpInfoOffsets.data[ooa_ClassReader_readUnsignedShort($this, var$7 + 1 | 0)]);
                            var$7 = var$7 + 3 | 0;
                            $i = $i + 1 | 0;
                        }
                        ooat_AnnotationNode_visit($annotationVisitor, $elementName, $intValues);
                        break a;
                    case 74:
                        $longValues = $rt_createLongArray($numValues);
                        $charValues = $longValues.data;
                        $i = 0;
                        while ($i < $numValues) {
                            $charValues[$i] = ooa_ClassReader_readLong($this, $this.$cpInfoOffsets.data[ooa_ClassReader_readUnsignedShort($this, var$7 + 1 | 0)]);
                            var$7 = var$7 + 3 | 0;
                            $i = $i + 1 | 0;
                        }
                        ooat_AnnotationNode_visit($annotationVisitor, $elementName, $longValues);
                        break a;
                    case 83:
                        $shortValues = $rt_createShortArray($numValues);
                        $charValues = $shortValues.data;
                        $i = 0;
                        while ($i < $numValues) {
                            $charValues[$i] = ooa_ClassReader_readInt($this, $this.$cpInfoOffsets.data[ooa_ClassReader_readUnsignedShort($this, var$7 + 1 | 0)]) << 16 >> 16;
                            var$7 = var$7 + 3 | 0;
                            $i = $i + 1 | 0;
                        }
                        ooat_AnnotationNode_visit($annotationVisitor, $elementName, $shortValues);
                        break a;
                    case 90:
                        $booleanValues = $rt_createBooleanArray($numValues);
                        $charValues = $booleanValues.data;
                        $i = 0;
                        while ($i < $numValues) {
                            $charValues[$i] = !ooa_ClassReader_readInt($this, $this.$cpInfoOffsets.data[ooa_ClassReader_readUnsignedShort($this, var$7 + 1 | 0)]) ? 0 : 1;
                            var$7 = var$7 + 3 | 0;
                            $i = $i + 1 | 0;
                        }
                        ooat_AnnotationNode_visit($annotationVisitor, $elementName, $booleanValues);
                        break a;
                    default:
                }
                var$7 = ooa_ClassReader_readElementValues($this, ooat_AnnotationNode_visitArray($annotationVisitor, $elementName), var$7 - 2 | 0, 0, $charBuffer);
                break a;
            case 99:
                ooat_AnnotationNode_visit($annotationVisitor, $elementName, ooa_Type_getType(ooa_ClassReader_readUTF8($this, $i, $charBuffer)));
                var$7 = $i + 2 | 0;
                break a;
            case 101:
                ooat_AnnotationNode_visitEnum($annotationVisitor, $elementName, ooa_ClassReader_readUTF8($this, $i, $charBuffer), ooa_ClassReader_readUTF8($this, $i + 2 | 0, $charBuffer));
                var$7 = $i + 4 | 0;
                break a;
            case 115:
                ooat_AnnotationNode_visit($annotationVisitor, $elementName, ooa_ClassReader_readUTF8($this, $i, $charBuffer));
                var$7 = $i + 2 | 0;
                break a;
            default:
        }
        $annotationVisitor = new jl_IllegalArgumentException;
        jl_Throwable__init_($annotationVisitor);
        $rt_throw($annotationVisitor);
    }
    return var$7;
},
ooa_ClassReader_computeImplicitFrame = ($this, $context) => {
    let $methodDescriptor, $locals, var$4, var$5, var$6, $currentMethodDescritorOffset, $currentMethodDescritorOffset_0, $numLocal, var$10;
    $methodDescriptor = $context.$currentMethodDescriptor;
    $locals = $context.$currentFrameLocalTypes;
    if ($context.$currentMethodAccessFlags & 8)
        var$4 = 0;
    else if (jl_String_equals($rt_s(78), $context.$currentMethodName)) {
        var$5 = $locals.data;
        var$4 = 1;
        ooa_Opcodes_$callClinit();
        var$5[0] = ooa_Opcodes_UNINITIALIZED_THIS;
    } else {
        var$6 = $locals.data;
        var$4 = 1;
        var$6[0] = ooa_ClassReader_readStringish($this, $this.$header + 2 | 0, $context.$charBuffer);
    }
    $currentMethodDescritorOffset = 1;
    a: while (true) {
        b: {
            $currentMethodDescritorOffset_0 = $currentMethodDescritorOffset + 1 | 0;
            switch (jl_String_charAt($methodDescriptor, $currentMethodDescritorOffset)) {
                case 66:
                case 67:
                case 73:
                case 83:
                case 90:
                    break;
                case 68:
                    var$5 = $locals.data;
                    $numLocal = var$4 + 1 | 0;
                    ooa_Opcodes_$callClinit();
                    var$5[var$4] = ooa_Opcodes_DOUBLE;
                    break b;
                case 69:
                case 71:
                case 72:
                case 75:
                case 77:
                case 78:
                case 79:
                case 80:
                case 81:
                case 82:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                    break a;
                case 70:
                    var$5 = $locals.data;
                    $numLocal = var$4 + 1 | 0;
                    ooa_Opcodes_$callClinit();
                    var$5[var$4] = ooa_Opcodes_FLOAT;
                    break b;
                case 74:
                    var$5 = $locals.data;
                    $numLocal = var$4 + 1 | 0;
                    ooa_Opcodes_$callClinit();
                    var$5[var$4] = ooa_Opcodes_LONG;
                    break b;
                case 76:
                    $currentMethodDescritorOffset = $currentMethodDescritorOffset_0;
                    while (jl_String_charAt($methodDescriptor, $currentMethodDescritorOffset) != 59) {
                        $currentMethodDescritorOffset = $currentMethodDescritorOffset + 1 | 0;
                    }
                    var$5 = $locals.data;
                    $numLocal = var$4 + 1 | 0;
                    var$10 = $currentMethodDescritorOffset + 1 | 0;
                    var$5[var$4] = jl_String_substring($methodDescriptor, $currentMethodDescritorOffset_0, $currentMethodDescritorOffset);
                    $currentMethodDescritorOffset_0 = var$10;
                    break b;
                case 91:
                    while (jl_String_charAt($methodDescriptor, $currentMethodDescritorOffset_0) == 91) {
                        $currentMethodDescritorOffset_0 = $currentMethodDescritorOffset_0 + 1 | 0;
                    }
                    if (jl_String_charAt($methodDescriptor, $currentMethodDescritorOffset_0) == 76) {
                        $currentMethodDescritorOffset_0 = $currentMethodDescritorOffset_0 + 1 | 0;
                        while (jl_String_charAt($methodDescriptor, $currentMethodDescritorOffset_0) != 59) {
                            $currentMethodDescritorOffset_0 = $currentMethodDescritorOffset_0 + 1 | 0;
                        }
                    }
                    var$5 = $locals.data;
                    $numLocal = var$4 + 1 | 0;
                    $currentMethodDescritorOffset_0 = $currentMethodDescritorOffset_0 + 1 | 0;
                    var$5[var$4] = jl_String_substring($methodDescriptor, $currentMethodDescritorOffset, $currentMethodDescritorOffset_0);
                    break b;
                default:
                    break a;
            }
            var$5 = $locals.data;
            $numLocal = var$4 + 1 | 0;
            ooa_Opcodes_$callClinit();
            var$5[var$4] = ooa_Opcodes_INTEGER;
        }
        $currentMethodDescritorOffset = $currentMethodDescritorOffset_0;
        var$4 = $numLocal;
    }
    $context.$currentFrameLocalCount = var$4;
},
ooa_ClassReader_readStackMapFrame = ($this, $stackMapFrameOffset, $compressed, $expand, $context) => {
    let $charBuffer, $labels, $offsetDelta, var$8, $offsetDelta_0, $numberOfLocals, $local, $numberOfStackItems, $stack, $k;
    $charBuffer = $context.$charBuffer;
    $labels = $context.$currentMethodLabels;
    if (!$compressed) {
        $offsetDelta = 255;
        $context.$currentFrameOffset = (-1);
    } else {
        var$8 = $this.$classFileBuffer.data;
        $compressed = $stackMapFrameOffset + 1 | 0;
        $offsetDelta = var$8[$stackMapFrameOffset] & 255;
        $stackMapFrameOffset = $compressed;
    }
    $context.$currentFrameLocalCountDelta = 0;
    if ($offsetDelta < 64) {
        $context.$currentFrameType = 3;
        $context.$currentFrameStackCount = 0;
    } else if ($offsetDelta < 128) {
        $offsetDelta = $offsetDelta - 64 | 0;
        $stackMapFrameOffset = ooa_ClassReader_readVerificationTypeInfo($this, $stackMapFrameOffset, $context.$currentFrameStackTypes, 0, $charBuffer, $labels);
        $context.$currentFrameType = 4;
        $context.$currentFrameStackCount = 1;
    } else {
        $compressed = $rt_compare($offsetDelta, 247);
        if ($compressed < 0) {
            $context = new jl_IllegalArgumentException;
            jl_Throwable__init_($context);
            $rt_throw($context);
        }
        $offsetDelta_0 = ooa_ClassReader_readUnsignedShort($this, $stackMapFrameOffset);
        $stackMapFrameOffset = $stackMapFrameOffset + 2 | 0;
        if (!$compressed) {
            $stackMapFrameOffset = ooa_ClassReader_readVerificationTypeInfo($this, $stackMapFrameOffset, $context.$currentFrameStackTypes, 0, $charBuffer, $labels);
            $context.$currentFrameType = 4;
            $context.$currentFrameStackCount = 1;
            $offsetDelta = $offsetDelta_0;
        } else if ($offsetDelta >= 248 && $offsetDelta < 251) {
            $context.$currentFrameType = 2;
            $compressed = 251 - $offsetDelta | 0;
            $context.$currentFrameLocalCountDelta = $compressed;
            $context.$currentFrameLocalCount = $context.$currentFrameLocalCount - $compressed | 0;
            $context.$currentFrameStackCount = 0;
            $offsetDelta = $offsetDelta_0;
        } else if ($offsetDelta == 251) {
            $context.$currentFrameType = 3;
            $context.$currentFrameStackCount = 0;
            $offsetDelta = $offsetDelta_0;
        } else if ($offsetDelta >= 255) {
            $numberOfLocals = ooa_ClassReader_readUnsignedShort($this, $stackMapFrameOffset);
            $stackMapFrameOffset = $stackMapFrameOffset + 2 | 0;
            $context.$currentFrameType = 0;
            $context.$currentFrameLocalCountDelta = $numberOfLocals;
            $context.$currentFrameLocalCount = $numberOfLocals;
            $local = 0;
            while ($local < $numberOfLocals) {
                $stackMapFrameOffset = ooa_ClassReader_readVerificationTypeInfo($this, $stackMapFrameOffset, $context.$currentFrameLocalTypes, $local, $charBuffer, $labels);
                $local = $local + 1 | 0;
            }
            $numberOfStackItems = ooa_ClassReader_readUnsignedShort($this, $stackMapFrameOffset);
            $stackMapFrameOffset = $stackMapFrameOffset + 2 | 0;
            $context.$currentFrameStackCount = $numberOfStackItems;
            $stack = 0;
            while ($stack < $numberOfStackItems) {
                $stackMapFrameOffset = ooa_ClassReader_readVerificationTypeInfo($this, $stackMapFrameOffset, $context.$currentFrameStackTypes, $stack, $charBuffer, $labels);
                $stack = $stack + 1 | 0;
            }
            $offsetDelta = $offsetDelta_0;
        } else {
            $local = !$expand ? 0 : $context.$currentFrameLocalCount;
            $compressed = $offsetDelta - 251 | 0;
            $k = $compressed;
            while ($k > 0) {
                var$8 = $context.$currentFrameLocalTypes;
                $expand = $local + 1 | 0;
                $stackMapFrameOffset = ooa_ClassReader_readVerificationTypeInfo($this, $stackMapFrameOffset, var$8, $local, $charBuffer, $labels);
                $k = $k + (-1) | 0;
                $local = $expand;
            }
            $context.$currentFrameType = 1;
            $context.$currentFrameLocalCountDelta = $compressed;
            $context.$currentFrameLocalCount = $context.$currentFrameLocalCount + $compressed | 0;
            $context.$currentFrameStackCount = 0;
            $offsetDelta = $offsetDelta_0;
        }
    }
    $compressed = $context.$currentFrameOffset + ($offsetDelta + 1 | 0) | 0;
    $context.$currentFrameOffset = $compressed;
    ooa_ClassReader_createLabel($this, $compressed, $labels);
    return $stackMapFrameOffset;
},
ooa_ClassReader_readVerificationTypeInfo = ($this, $verificationTypeInfoOffset, $frame, $index, $charBuffer, $labels) => {
    let var$6, var$7, var$8;
    a: {
        var$6 = $this.$classFileBuffer.data;
        var$7 = $verificationTypeInfoOffset + 1 | 0;
        switch (var$6[$verificationTypeInfoOffset] & 255) {
            case 0:
                break;
            case 1:
                $frame = $frame.data;
                ooa_Opcodes_$callClinit();
                $frame[$index] = ooa_Opcodes_INTEGER;
                break a;
            case 2:
                $frame = $frame.data;
                ooa_Opcodes_$callClinit();
                $frame[$index] = ooa_Opcodes_FLOAT;
                break a;
            case 3:
                $frame = $frame.data;
                ooa_Opcodes_$callClinit();
                $frame[$index] = ooa_Opcodes_DOUBLE;
                break a;
            case 4:
                $frame = $frame.data;
                ooa_Opcodes_$callClinit();
                $frame[$index] = ooa_Opcodes_LONG;
                break a;
            case 5:
                $frame = $frame.data;
                ooa_Opcodes_$callClinit();
                $frame[$index] = ooa_Opcodes_NULL;
                break a;
            case 6:
                $frame = $frame.data;
                ooa_Opcodes_$callClinit();
                $frame[$index] = ooa_Opcodes_UNINITIALIZED_THIS;
                break a;
            case 7:
                $frame.data[$index] = ooa_ClassReader_readStringish($this, var$7, $charBuffer);
                var$7 = var$7 + 2 | 0;
                break a;
            case 8:
                $frame.data[$index] = ooa_ClassReader_createLabel($this, ooa_ClassReader_readUnsignedShort($this, var$7), $labels);
                var$7 = var$7 + 2 | 0;
                break a;
            default:
                var$8 = new jl_IllegalArgumentException;
                jl_Throwable__init_(var$8);
                $rt_throw(var$8);
        }
        $frame = $frame.data;
        ooa_Opcodes_$callClinit();
        $frame[$index] = ooa_Opcodes_TOP;
    }
    return var$7;
},
ooa_ClassReader_getFirstAttributeOffset = $this => {
    let $fieldsCount, $currentOffset, $methodsCount, $attributesCount, $attributesCount_0;
    $fieldsCount = $this.$header;
    $currentOffset = ($fieldsCount + 8 | 0) + (ooa_ClassReader_readUnsignedShort($this, $fieldsCount + 6 | 0) * 2 | 0) | 0;
    $fieldsCount = ooa_ClassReader_readUnsignedShort($this, $currentOffset);
    $currentOffset = $currentOffset + 2 | 0;
    while (true) {
        $methodsCount = $fieldsCount + (-1) | 0;
        if ($fieldsCount <= 0)
            break;
        $attributesCount = ooa_ClassReader_readUnsignedShort($this, $currentOffset + 6 | 0);
        $currentOffset = $currentOffset + 8 | 0;
        while (true) {
            $fieldsCount = $attributesCount + (-1) | 0;
            if ($attributesCount <= 0)
                break;
            $currentOffset = $currentOffset + (6 + ooa_ClassReader_readInt($this, $currentOffset + 2 | 0) | 0) | 0;
            $attributesCount = $fieldsCount;
        }
        $fieldsCount = $methodsCount;
    }
    $methodsCount = ooa_ClassReader_readUnsignedShort($this, $currentOffset);
    $fieldsCount = $currentOffset + 2 | 0;
    while (true) {
        $attributesCount = $methodsCount + (-1) | 0;
        if ($methodsCount <= 0)
            break;
        $attributesCount_0 = ooa_ClassReader_readUnsignedShort($this, $fieldsCount + 6 | 0);
        $fieldsCount = $fieldsCount + 8 | 0;
        while (true) {
            $methodsCount = $attributesCount_0 + (-1) | 0;
            if ($attributesCount_0 <= 0)
                break;
            $fieldsCount = $fieldsCount + (6 + ooa_ClassReader_readInt($this, $fieldsCount + 2 | 0) | 0) | 0;
            $attributesCount_0 = $methodsCount;
        }
        $methodsCount = $attributesCount;
    }
    return $fieldsCount + 2 | 0;
},
ooa_ClassReader_readAttribute = ($this, $attributePrototypes, $type, $offset, $length, $charBuffer, $codeAttributeOffset, $labels) => {
    let var$8, var$9, var$10, $attributePrototype;
    $attributePrototypes = $attributePrototypes.data;
    var$8 = $attributePrototypes.length;
    var$9 = 0;
    while (true) {
        if (var$9 >= var$8) {
            var$10 = ooa_Attribute__init_($type);
            $type = ooa_Attribute__init_(var$10.$type2);
            $attributePrototypes = $rt_createByteArray($length);
            $type.$content = $attributePrototypes;
            jl_System_fastArraycopy($this.$classFileBuffer, $offset, $attributePrototypes, 0, $length);
            return $type;
        }
        $attributePrototype = $attributePrototypes[var$9];
        if (jl_String_equals($attributePrototype.$type2, $type))
            break;
        var$9 = var$9 + 1 | 0;
    }
    return $attributePrototype.$read1($this, $offset, $length, $charBuffer, $codeAttributeOffset, $labels);
},
ooa_ClassReader_readByte = ($this, $offset) => {
    return $this.$classFileBuffer.data[$offset] & 255;
},
ooa_ClassReader_readUnsignedShort = ($this, $offset) => {
    let $classBuffer;
    $classBuffer = $this.$classFileBuffer.data;
    return ($classBuffer[$offset] & 255) << 8 | $classBuffer[$offset + 1 | 0] & 255;
},
ooa_ClassReader_readShort = ($this, $offset) => {
    let $classBuffer;
    $classBuffer = $this.$classFileBuffer.data;
    return (($classBuffer[$offset] & 255) << 8 | $classBuffer[$offset + 1 | 0] & 255) << 16 >> 16;
},
ooa_ClassReader_readInt = ($this, $offset) => {
    let $classBuffer;
    $classBuffer = $this.$classFileBuffer.data;
    return ($classBuffer[$offset] & 255) << 24 | ($classBuffer[$offset + 1 | 0] & 255) << 16 | ($classBuffer[$offset + 2 | 0] & 255) << 8 | $classBuffer[$offset + 3 | 0] & 255;
},
ooa_ClassReader_readLong = ($this, $offset) => {
    return Long_or(Long_shl(Long_fromInt(ooa_ClassReader_readInt($this, $offset)), 32), Long_and(Long_fromInt(ooa_ClassReader_readInt($this, $offset + 4 | 0)), Long_create(4294967295, 0)));
},
ooa_ClassReader_readUTF8 = ($this, $offset, $charBuffer) => {
    let $constantPoolEntryIndex;
    $constantPoolEntryIndex = ooa_ClassReader_readUnsignedShort($this, $offset);
    if ($offset && $constantPoolEntryIndex)
        return ooa_ClassReader_readUtf0($this, $constantPoolEntryIndex, $charBuffer);
    return null;
},
ooa_ClassReader_readUtf0 = ($this, $constantPoolEntryIndex, $charBuffer) => {
    let var$3, $value, $cpInfoOffset;
    var$3 = $this.$constantUtf8Values.data;
    $value = var$3[$constantPoolEntryIndex];
    if ($value !== null)
        return $value;
    $cpInfoOffset = $this.$cpInfoOffsets.data[$constantPoolEntryIndex];
    $value = ooa_ClassReader_readUtf($this, $cpInfoOffset + 2 | 0, ooa_ClassReader_readUnsignedShort($this, $cpInfoOffset), $charBuffer);
    var$3[$constantPoolEntryIndex] = $value;
    return $value;
},
ooa_ClassReader_readUtf = ($this, $utfOffset, $utfLength, $charBuffer) => {
    let $endOffset, $strLength, $classBuffer, var$7, $currentByte, var$9, var$10;
    $endOffset = $utfOffset + $utfLength | 0;
    $strLength = 0;
    $classBuffer = $this.$classFileBuffer;
    while ($utfOffset < $endOffset) {
        var$7 = $classBuffer.data;
        $utfLength = $utfOffset + 1 | 0;
        $currentByte = var$7[$utfOffset];
        if (!($currentByte & 128)) {
            var$9 = $charBuffer.data;
            var$10 = $strLength + 1 | 0;
            var$9[$strLength] = $currentByte & 127 & 65535;
        } else if (($currentByte & 224) == 192) {
            var$9 = $charBuffer.data;
            var$10 = $strLength + 1 | 0;
            $utfOffset = ($currentByte & 31) << 6;
            $currentByte = $utfLength + 1 | 0;
            var$9[$strLength] = ($utfOffset + (var$7[$utfLength] & 63) | 0) & 65535;
            $utfLength = $currentByte;
        } else {
            var$9 = $charBuffer.data;
            var$10 = $strLength + 1 | 0;
            $utfOffset = ($currentByte & 15) << 12;
            $currentByte = $utfLength + 1 | 0;
            $utfOffset = $utfOffset + ((var$7[$utfLength] & 63) << 6) | 0;
            $utfLength = $currentByte + 1 | 0;
            var$9[$strLength] = ($utfOffset + (var$7[$currentByte] & 63) | 0) & 65535;
        }
        $utfOffset = $utfLength;
        $strLength = var$10;
    }
    return jl_String__init_($charBuffer, 0, $strLength);
},
ooa_ClassReader_readStringish = ($this, $offset, $charBuffer) => {
    return ooa_ClassReader_readUTF8($this, $this.$cpInfoOffsets.data[ooa_ClassReader_readUnsignedShort($this, $offset)], $charBuffer);
},
ooa_ClassReader_readClass = ($this, $offset, $charBuffer) => {
    return ooa_ClassReader_readStringish($this, $offset, $charBuffer);
},
ooa_ClassReader_readConst = ($this, $constantPoolEntryIndex, $charBuffer) => {
    let var$3, $cpInfoOffset, var$5, $referenceKind, $referenceCpInfoOffset, $nameAndTypeCpInfoOffset, $owner, $name, $descriptor, $isInterface, var$13;
    a: {
        var$3 = $this.$cpInfoOffsets.data;
        $cpInfoOffset = var$3[$constantPoolEntryIndex];
        switch ($this.$classFileBuffer.data[$cpInfoOffset - 1 | 0]) {
            case 3:
                return jl_Integer_valueOf(ooa_ClassReader_readInt($this, $cpInfoOffset));
            case 4:
                return jl_Float_valueOf($rt_intBitsToFloat(ooa_ClassReader_readInt($this, $cpInfoOffset)));
            case 5:
                return jl_Long_valueOf(ooa_ClassReader_readLong($this, $cpInfoOffset));
            case 6:
                return jl_Double_valueOf($rt_longBitsToDouble((ooa_ClassReader_readLong($this, $cpInfoOffset))));
            case 7:
                var$5 = ooa_ClassReader_readUTF8($this, $cpInfoOffset, $charBuffer);
                return ooa_Type__init_(jl_String_charAt(var$5, 0) != 91 ? 12 : 9, var$5, 0, var$5.$nativeString.length);
            case 8:
                break;
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
                break a;
            case 15:
                $referenceKind = ooa_ClassReader_readByte($this, $cpInfoOffset);
                $referenceCpInfoOffset = $this.$cpInfoOffsets.data[ooa_ClassReader_readUnsignedShort($this, $cpInfoOffset + 1 | 0)];
                $nameAndTypeCpInfoOffset = $this.$cpInfoOffsets.data[ooa_ClassReader_readUnsignedShort($this, $referenceCpInfoOffset + 2 | 0)];
                $owner = ooa_ClassReader_readStringish($this, $referenceCpInfoOffset, $charBuffer);
                $name = ooa_ClassReader_readUTF8($this, $nameAndTypeCpInfoOffset, $charBuffer);
                $descriptor = ooa_ClassReader_readUTF8($this, $nameAndTypeCpInfoOffset + 2 | 0, $charBuffer);
                $isInterface = $this.$classFileBuffer.data[$referenceCpInfoOffset - 1 | 0] != 11 ? 0 : 1;
                var$5 = new ooa_Handle;
                var$5.$tag = $referenceKind;
                var$5.$owner1 = $owner;
                var$5.$name3 = $name;
                var$5.$descriptor = $descriptor;
                var$5.$isInterface = $isInterface;
                return var$5;
            case 16:
                return ooa_Type_getMethodType(ooa_ClassReader_readUTF8($this, $cpInfoOffset, $charBuffer));
            case 17:
                var$5 = $this.$constantDynamicValues.data[$constantPoolEntryIndex];
                if (var$5 === null) {
                    $referenceKind = var$3[$constantPoolEntryIndex];
                    $cpInfoOffset = var$3[ooa_ClassReader_readUnsignedShort($this, $referenceKind + 2 | 0)];
                    $owner = ooa_ClassReader_readUTF8($this, $cpInfoOffset, $charBuffer);
                    $name = ooa_ClassReader_readUTF8($this, $cpInfoOffset + 2 | 0, $charBuffer);
                    $referenceKind = $this.$bootstrapMethodOffsets.data[ooa_ClassReader_readUnsignedShort($this, $referenceKind)];
                    $descriptor = ooa_ClassReader_readConst($this, ooa_ClassReader_readUnsignedShort($this, $referenceKind), $charBuffer);
                    var$3 = $rt_createArray(jl_Object, ooa_ClassReader_readUnsignedShort($this, $referenceKind + 2 | 0));
                    var$13 = var$3.data;
                    $referenceKind = $referenceKind + 4 | 0;
                    $cpInfoOffset = 0;
                    $isInterface = var$13.length;
                    while ($cpInfoOffset < $isInterface) {
                        var$13[$cpInfoOffset] = ooa_ClassReader_readConst($this, ooa_ClassReader_readUnsignedShort($this, $referenceKind), $charBuffer);
                        $referenceKind = $referenceKind + 2 | 0;
                        $cpInfoOffset = $cpInfoOffset + 1 | 0;
                    }
                    $charBuffer = $this.$constantDynamicValues.data;
                    var$5 = new ooa_ConstantDynamic;
                    var$5.$name4 = $owner;
                    var$5.$descriptor0 = $name;
                    var$5.$bootstrapMethod = $descriptor;
                    var$5.$bootstrapMethodArguments = var$3;
                    $charBuffer[$constantPoolEntryIndex] = var$5;
                }
                return var$5;
            default:
                break a;
        }
        return ooa_ClassReader_readUTF8($this, $cpInfoOffset, $charBuffer);
    }
    var$5 = new jl_IllegalArgumentException;
    jl_Throwable__init_(var$5);
    $rt_throw(var$5);
};
function ooa_ClassVisitor() {
    let a = this; jl_Object.call(a);
    a.$api2 = 0;
    a.$cv = null;
}
function ooat_ClassNode() {
    let a = this; ooa_ClassVisitor.call(a);
    a.$version = 0;
    a.$access = 0;
    a.$name11 = null;
    a.$signature2 = null;
    a.$superName = null;
    a.$interfaces0 = null;
    a.$sourceFile = null;
    a.$sourceDebug = null;
    a.$module = null;
    a.$outerClass = null;
    a.$outerMethod = null;
    a.$outerMethodDesc = null;
    a.$visibleAnnotations0 = null;
    a.$invisibleAnnotations1 = null;
    a.$visibleTypeAnnotations2 = null;
    a.$invisibleTypeAnnotations0 = null;
    a.$attrs2 = null;
    a.$innerClasses = null;
    a.$nestHostClass = null;
    a.$nestMembers = null;
    a.$permittedSubclasses = null;
    a.$recordComponents = null;
    a.$fields0 = null;
    a.$methods0 = null;
}
let ooat_ClassNode_visit = ($this, $version, $access, $name, $signature, $superName, $interfaces) => {
    $this.$version = $version;
    $this.$access = $access;
    $this.$name11 = $name;
    $this.$signature2 = $signature;
    $this.$superName = $superName;
    $this.$interfaces0 = ooat_Util_asArrayList($interfaces);
},
ooat_ClassNode_visitSource = ($this, $file, $debug) => {
    $this.$sourceFile = $file;
    $this.$sourceDebug = $debug;
},
ooat_ClassNode_visitNestHost = ($this, $nestHost) => {
    $this.$nestHostClass = $nestHost;
},
ooat_ClassNode_visitOuterClass = ($this, $owner, $name, $descriptor) => {
    $this.$outerClass = $owner;
    $this.$outerMethod = $name;
    $this.$outerMethodDesc = $descriptor;
},
ooat_ClassNode_visitAnnotation = ($this, $descriptor, $visible) => {
    let $annotation;
    $annotation = ooat_AnnotationNode__init_($descriptor);
    if (!$visible)
        $this.$invisibleAnnotations1 = ooat_Util_add($this.$invisibleAnnotations1, $annotation);
    else
        $this.$visibleAnnotations0 = ooat_Util_add($this.$visibleAnnotations0, $annotation);
    return $annotation;
},
ooat_ClassNode_visitTypeAnnotation = ($this, $typeRef, $typePath, $descriptor, $visible) => {
    let $typeAnnotation;
    $typeAnnotation = ooat_TypeAnnotationNode__init_($typeRef, $typePath, $descriptor);
    if (!$visible)
        $this.$invisibleTypeAnnotations0 = ooat_Util_add($this.$invisibleTypeAnnotations0, $typeAnnotation);
    else
        $this.$visibleTypeAnnotations2 = ooat_Util_add($this.$visibleTypeAnnotations2, $typeAnnotation);
    return $typeAnnotation;
},
ooat_ClassNode_visitAttribute = ($this, $attribute) => {
    $this.$attrs2 = ooat_Util_add($this.$attrs2, $attribute);
},
ooat_ClassNode_visitNestMember = ($this, $nestMember) => {
    $this.$nestMembers = ooat_Util_add($this.$nestMembers, $nestMember);
},
ooat_ClassNode_visitPermittedSubclass = ($this, $permittedSubclass) => {
    $this.$permittedSubclasses = ooat_Util_add($this.$permittedSubclasses, $permittedSubclass);
},
ooat_ClassNode_visitInnerClass = ($this, $name, $outerName, $innerName, $access) => {
    let $innerClass;
    $innerClass = new ooat_InnerClassNode;
    $innerClass.$name23 = $name;
    $innerClass.$outerName = $outerName;
    $innerClass.$innerName = $innerName;
    $innerClass.$access5 = $access;
    ju_ArrayList_add($this.$innerClasses, $innerClass);
},
ooat_ClassNode_visitEnd = $this => {
    return;
};
function ooa_FieldVisitor() {
    let a = this; jl_Object.call(a);
    a.$api1 = 0;
    a.$fv = null;
}
function ooat_FieldNode() {
    let a = this; ooa_FieldVisitor.call(a);
    a.$access0 = 0;
    a.$name12 = null;
    a.$desc2 = null;
    a.$signature = null;
    a.$value11 = null;
    a.$visibleAnnotations2 = null;
    a.$invisibleAnnotations0 = null;
    a.$visibleTypeAnnotations3 = null;
    a.$invisibleTypeAnnotations2 = null;
    a.$attrs0 = null;
}
let ooat_FieldNode_visitAnnotation = ($this, $descriptor, $visible) => {
    let $annotation;
    $annotation = ooat_AnnotationNode__init_($descriptor);
    if (!$visible)
        $this.$invisibleAnnotations0 = ooat_Util_add($this.$invisibleAnnotations0, $annotation);
    else
        $this.$visibleAnnotations2 = ooat_Util_add($this.$visibleAnnotations2, $annotation);
    return $annotation;
},
ooat_FieldNode_visitTypeAnnotation = ($this, $typeRef, $typePath, $descriptor, $visible) => {
    let $typeAnnotation;
    $typeAnnotation = ooat_TypeAnnotationNode__init_($typeRef, $typePath, $descriptor);
    if (!$visible)
        $this.$invisibleTypeAnnotations2 = ooat_Util_add($this.$invisibleTypeAnnotations2, $typeAnnotation);
    else
        $this.$visibleTypeAnnotations3 = ooat_Util_add($this.$visibleTypeAnnotations3, $typeAnnotation);
    return $typeAnnotation;
},
igbcat_ClassType = $rt_classWithoutFields(jl_Enum),
igbcat_ClassType_CLASS = null,
igbcat_ClassType_ENUM = null,
igbcat_ClassType_INTERFACE = null,
igbcat_ClassType_RECORD = null,
igbcat_ClassType_$VALUES = null,
igbcat_ClassType_values = () => {
    return igbcat_ClassType_$VALUES.$clone0();
},
igbcat_ClassType__clinit_ = () => {
    let var$1, var$2, var$3;
    var$1 = new igbcat_ClassType;
    jl_Enum__init_(var$1, $rt_s(571), 0);
    igbcat_ClassType_CLASS = var$1;
    var$1 = new igbcat_ClassType;
    jl_Enum__init_(var$1, $rt_s(572), 1);
    igbcat_ClassType_ENUM = var$1;
    var$1 = new igbcat_ClassType;
    jl_Enum__init_(var$1, $rt_s(573), 2);
    igbcat_ClassType_INTERFACE = var$1;
    var$1 = new igbcat_ClassType;
    jl_Enum__init_(var$1, $rt_s(574), 3);
    igbcat_ClassType_RECORD = var$1;
    var$2 = $rt_createArray(igbcat_ClassType, 4);
    var$3 = var$2.data;
    var$3[0] = igbcat_ClassType_CLASS;
    var$3[1] = igbcat_ClassType_ENUM;
    var$3[2] = igbcat_ClassType_INTERFACE;
    var$3[3] = var$1;
    igbcat_ClassType_$VALUES = var$2;
};
function ooa_ConstantDynamic() {
    let a = this; jl_Object.call(a);
    a.$name4 = null;
    a.$descriptor0 = null;
    a.$bootstrapMethod = null;
    a.$bootstrapMethodArguments = null;
}
let ooa_ConstantDynamic_equals = ($this, $object) => {
    let $constantDynamic, var$3, var$4, var$5, var$6, var$7;
    if ($object === $this)
        return 1;
    if (!($object instanceof ooa_ConstantDynamic))
        return 0;
    a: {
        $constantDynamic = $object;
        if (jl_String_equals($this.$name4, $constantDynamic.$name4) && jl_String_equals($this.$descriptor0, $constantDynamic.$descriptor0) && ooa_Handle_equals($this.$bootstrapMethod, $constantDynamic.$bootstrapMethod)) {
            b: {
                var$3 = $this.$bootstrapMethodArguments;
                var$4 = $constantDynamic.$bootstrapMethodArguments;
                if (var$3 === var$4)
                    var$5 = 1;
                else {
                    if (var$3 !== null && var$4 !== null) {
                        var$3 = var$3.data;
                        var$4 = var$4.data;
                        var$5 = var$3.length;
                        if (var$5 == var$4.length) {
                            var$6 = 0;
                            c: {
                                while (true) {
                                    if (var$6 >= var$5) {
                                        var$6 = (-1);
                                        break c;
                                    }
                                    var$7 = var$6 + 0 | 0;
                                    if (!ju_Objects_equals(var$3[var$7], var$4[var$7]))
                                        break;
                                    var$6 = var$6 + 1 | 0;
                                }
                            }
                            var$5 = var$6 >= 0 ? 0 : 1;
                            break b;
                        }
                    }
                    var$5 = 0;
                }
            }
            if (var$5) {
                var$5 = 1;
                break a;
            }
        }
        var$5 = 0;
    }
    return var$5;
},
ooa_ConstantDynamic_toString = $this => {
    let var$1, var$2, var$3, var$4, var$5;
    var$1 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$1);
    jl_AbstractStringBuilder_append0(var$1, $this.$name4);
    jl_AbstractStringBuilder_append0(var$1, $rt_s(575));
    jl_AbstractStringBuilder_append0(var$1, $this.$descriptor0);
    jl_AbstractStringBuilder_append(var$1, 32);
    var$1 = jl_StringBuilder_append(var$1, $this.$bootstrapMethod);
    jl_AbstractStringBuilder_append(var$1, 32);
    var$2 = $this.$bootstrapMethodArguments;
    if (var$2 === null)
        var$3 = $rt_s(15);
    else {
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_AbstractStringBuilder_append0(var$3, $rt_s(105));
        var$4 = 0;
        while (true) {
            var$5 = var$2.data;
            if (var$4 >= var$5.length)
                break;
            if (var$4 > 0)
                jl_AbstractStringBuilder_append0(var$3, $rt_s(74));
            jl_StringBuilder_append(var$3, var$5[var$4]);
            var$4 = var$4 + 1 | 0;
        }
        jl_AbstractStringBuilder_append0(var$3, $rt_s(458));
        var$3 = jl_AbstractStringBuilder_toString(var$3);
    }
    jl_AbstractStringBuilder_append0(var$1, var$3);
    return jl_AbstractStringBuilder_toString(var$1);
};
function jusi_SimpleStreamImpl$collect$lambda$_26_0() {
    let a = this; jl_Object.call(a);
    a.$_00 = null;
    a.$_1 = null;
}
let jusi_SimpleStreamImpl$collect$lambda$_26_0__init_ = (var$0, var$1, var$2) => {
    var$0.$_00 = var$1;
    var$0.$_1 = var$2;
},
jusi_SimpleStreamImpl$collect$lambda$_26_0__init_0 = (var_0, var_1) => {
    let var_2 = new jusi_SimpleStreamImpl$collect$lambda$_26_0();
    jusi_SimpleStreamImpl$collect$lambda$_26_0__init_(var_2, var_0, var_1);
    return var_2;
},
jusi_SimpleStreamImpl$collect$lambda$_26_0_test = (var$0, var$1) => {
    let var$2, var$3;
    var$2 = var$0.$_00;
    var$3 = var$0.$_1;
    var$1 = var$1;
    var$2 = var$2.$_06;
    if (var$3.$length0 > 0)
        jl_AbstractStringBuilder_append1(var$3, var$2);
    jl_AbstractStringBuilder_append1(var$3, var$1);
    return 1;
};
function jusi_MappingStreamImpl() {
    jusi_WrappingStreamImpl.call(this);
    this.$mapper = null;
}
let jusi_MappingStreamImpl_wrap = ($this, $consumer) => {
    let var$2;
    var$2 = new jusi_MappingStreamImpl$wrap$lambda$_1_0;
    var$2.$_02 = $this;
    var$2.$_11 = $consumer;
    return var$2;
};
function jusi_FindFirstConsumer() {
    jl_Object.call(this);
    this.$result = null;
}
let jusi_FindFirstConsumer_test = ($this, $t) => {
    $this.$result = $t;
    return 0;
},
igbca_APIMethod$compileDesc$lambda$_3_0 = $rt_classWithoutFields(),
igbca_APIMethod$compileDesc$lambda$_3_0_apply = (var$0, var$1) => {
    return igbcat_Argument_compile(var$1);
},
igbca_APIMethod$compileDesc$lambda$_3_1 = $rt_classWithoutFields(),
igbca_APIMethod$compileDesc$lambda$_3_1_apply = (var$0, var$1) => {
    return $rt_createArray(ooa_Type, var$1);
},
ju_Spliterator = $rt_classWithoutFields(0);
function jusi_SpliteratorOverCollection() {
    let a = this; jl_Object.call(a);
    a.$collection = null;
    a.$iterator0 = null;
}
function ju_HashMap$2() {
    ju_AbstractCollection.call(this);
    this.$this$08 = null;
}
let juz_DataFormatException = $rt_classWithoutFields(jl_Exception),
jusi_SimpleStreamImpl$toArray$lambda$_20_0 = $rt_classWithoutFields(),
jusi_SimpleStreamImpl$toArray$lambda$_20_0_apply = (var$0, var$1) => {
    return $rt_createArray(jl_Object, var$1);
};
function jnci_BufferedEncoder() {
    let a = this; jnc_CharsetEncoder.call(a);
    a.$inArray0 = null;
    a.$outArray = null;
}
let jnci_BufferedEncoder_encodeLoop = ($this, $in, $out) => {
    let $inArray, $inPos, $inSize, $outArray, $i, var$8, $outSize, $result, $controller;
    $inArray = $this.$inArray0;
    $inPos = 0;
    $inSize = 0;
    $outArray = $this.$outArray;
    a: {
        while (true) {
            if (($inPos + 32 | 0) > $inSize && jn_Buffer_hasRemaining($in)) {
                $i = $inPos;
                while ($i < $inSize) {
                    var$8 = $inArray.data;
                    var$8[$i - $inPos | 0] = var$8[$i];
                    $i = $i + 1 | 0;
                }
                var$8 = $inArray.data;
                $outSize = $inSize - $inPos | 0;
                $inSize = jl_Math_min(jn_Buffer_remaining($in) + $outSize | 0, var$8.length);
                jn_CharBuffer_get($in, $inArray, $outSize, $inSize - $outSize | 0);
                $inPos = 0;
            }
            if (!jn_Buffer_hasRemaining($out)) {
                $result = !jn_Buffer_hasRemaining($in) && $inPos >= $inSize ? jnc_CoderResult_UNDERFLOW : jnc_CoderResult_OVERFLOW;
                break a;
            }
            var$8 = $outArray.data;
            $outSize = jl_Math_min(jn_Buffer_remaining($out), var$8.length);
            $controller = new jnci_BufferedEncoder$Controller;
            $controller.$in1 = $in;
            $controller.$out0 = $out;
            $result = jnci_UTF8Encoder_arrayEncode($this, $inArray, $inPos, $inSize, $outArray, 0, $outSize, $controller);
            $inPos = $controller.$inPosition0;
            $outSize = $controller.$outPosition0;
            if ($result === null) {
                if (!jn_Buffer_hasRemaining($in) && $inPos >= $inSize)
                    $result = jnc_CoderResult_UNDERFLOW;
                else if (!jn_Buffer_hasRemaining($out) && $inPos >= $inSize)
                    $result = jnc_CoderResult_OVERFLOW;
            }
            jn_ByteBuffer_put($out, $outArray, 0, $outSize);
            if ($result !== null)
                break;
        }
    }
    jn_Buffer_position($in, $in.$position0 - ($inSize - $inPos | 0) | 0);
    return $result;
},
jnci_UTF8Encoder = $rt_classWithoutFields(jnci_BufferedEncoder),
jnci_UTF8Encoder_arrayEncode = ($this, $inArray, $inPos, $inSize, $outArray, $outPos, $outSize, $controller) => {
    let $result, var$9, var$10, $ch, $low, var$13, $codePoint;
    $result = null;
    a: {
        while ($inPos < $inSize) {
            if ($outPos >= $outSize) {
                var$9 = $inPos;
                break a;
            }
            var$10 = $inArray.data;
            var$9 = $inPos + 1 | 0;
            $ch = var$10[$inPos];
            if ($ch < 128) {
                var$10 = $outArray.data;
                $low = $outPos + 1 | 0;
                var$10[$outPos] = $ch << 24 >> 24;
            } else if ($ch < 2048) {
                if (($outPos + 2 | 0) > $outSize) {
                    var$9 = var$9 + (-1) | 0;
                    if (jnci_BufferedEncoder$Controller_hasMoreOutput($controller, 2))
                        break a;
                    $result = jnc_CoderResult_OVERFLOW;
                    break a;
                }
                var$10 = $outArray.data;
                $inPos = $outPos + 1 | 0;
                var$10[$outPos] = (192 | $ch >> 6) << 24 >> 24;
                $low = $inPos + 1 | 0;
                var$10[$inPos] = (128 | $ch & 63) << 24 >> 24;
            } else if (!jl_Character_isSurrogate($ch)) {
                if (($outPos + 3 | 0) > $outSize) {
                    var$9 = var$9 + (-1) | 0;
                    if (jnci_BufferedEncoder$Controller_hasMoreOutput($controller, 3))
                        break a;
                    $result = jnc_CoderResult_OVERFLOW;
                    break a;
                }
                var$10 = $outArray.data;
                var$13 = $outPos + 1 | 0;
                var$10[$outPos] = (224 | $ch >> 12) << 24 >> 24;
                $inPos = var$13 + 1 | 0;
                var$10[var$13] = (128 | $ch >> 6 & 63) << 24 >> 24;
                $low = $inPos + 1 | 0;
                var$10[$inPos] = (128 | $ch & 63) << 24 >> 24;
            } else {
                if (!jl_Character_isHighSurrogate($ch)) {
                    $result = jnc_CoderResult_malformedForLength(1);
                    break a;
                }
                if (var$9 >= $inSize) {
                    if (jn_Buffer_hasRemaining($controller.$in1))
                        break a;
                    $result = jnc_CoderResult_UNDERFLOW;
                    break a;
                }
                $inPos = var$9 + 1 | 0;
                $low = var$10[var$9];
                if (!jl_Character_isLowSurrogate($low)) {
                    var$9 = $inPos + (-2) | 0;
                    $result = jnc_CoderResult_malformedForLength(1);
                    break a;
                }
                if (($outPos + 4 | 0) > $outSize) {
                    var$9 = $inPos + (-2) | 0;
                    if (jnci_BufferedEncoder$Controller_hasMoreOutput($controller, 4))
                        break a;
                    $result = jnc_CoderResult_OVERFLOW;
                    break a;
                }
                var$10 = $outArray.data;
                $codePoint = jl_Character_toCodePoint($ch, $low);
                $low = $outPos + 1 | 0;
                var$10[$outPos] = (240 | $codePoint >> 18) << 24 >> 24;
                var$13 = $low + 1 | 0;
                var$10[$low] = (128 | $codePoint >> 12 & 63) << 24 >> 24;
                $outPos = var$13 + 1 | 0;
                var$10[var$13] = (128 | $codePoint >> 6 & 63) << 24 >> 24;
                $low = $outPos + 1 | 0;
                var$10[$outPos] = (128 | $codePoint & 63) << 24 >> 24;
                var$9 = $inPos;
            }
            $inPos = var$9;
            $outPos = $low;
        }
        var$9 = $inPos;
    }
    $controller.$inPosition0 = var$9;
    $controller.$outPosition0 = $outPos;
    return $result;
};
function ooa_Attribute() {
    let a = this; jl_Object.call(a);
    a.$type2 = null;
    a.$content = null;
    a.$nextAttribute = null;
}
let ooa_Attribute__init_0 = ($this, $type) => {
    $this.$type2 = $type;
},
ooa_Attribute__init_ = var_0 => {
    let var_1 = new ooa_Attribute();
    ooa_Attribute__init_0(var_1, var_0);
    return var_1;
},
jl_AbstractStringBuilder$Constants = $rt_classWithoutFields(),
jl_AbstractStringBuilder$Constants_longLogPowersOfTen = null,
jl_AbstractStringBuilder$Constants_doubleAnalysisResult = null,
jl_AbstractStringBuilder$Constants_floatAnalysisResult = null,
jl_AbstractStringBuilder$Constants__clinit_ = () => {
    jl_AbstractStringBuilder$Constants_longLogPowersOfTen = $rt_createLongArrayFromData([Long_fromInt(1), Long_fromInt(10), Long_fromInt(100), Long_fromInt(10000), Long_fromInt(100000000), Long_create(1874919424, 2328306)]);
    jl_AbstractStringBuilder$Constants_doubleAnalysisResult = new otcit_DoubleAnalyzer$Result;
    jl_AbstractStringBuilder$Constants_floatAnalysisResult = new otcit_FloatAnalyzer$Result;
};
function otcit_FloatAnalyzer$Result() {
    let a = this; jl_Object.call(a);
    a.$mantissa = 0;
    a.$exponent0 = 0;
    a.$sign0 = 0;
}
function otcic_JsConsolePrintStream$ByteEncoder() {
    let a = this; jl_Object.call(a);
    a.$buffer0 = null;
    a.$outChars = null;
    a.$outBuffer = null;
    a.$decoder = null;
    a.$this$00 = null;
}
function jusi_SimpleStreamImpl$ArrayFillingConsumer() {
    let a = this; jl_Object.call(a);
    a.$array3 = null;
    a.$index5 = 0;
}
let jusi_SimpleStreamImpl$ArrayFillingConsumer_test = ($this, $t) => {
    let var$2, var$3;
    var$2 = $this.$array3.data;
    var$3 = $this.$index5;
    $this.$index5 = var$3 + 1 | 0;
    var$2[var$3] = $t;
    return 1;
};
function jusi_SimpleStreamImpl$toArray$lambda$_21_0() {
    jl_Object.call(this);
    this.$_05 = null;
}
let jusi_SimpleStreamImpl$toArray$lambda$_21_0_test = (var$0, var$1) => {
    return ju_ArrayList_add(var$0.$_05, var$1);
};
function ju_HashMap$AbstractMapIterator() {
    let a = this; jl_Object.call(a);
    a.$position1 = 0;
    a.$expectedModCount = 0;
    a.$futureEntry = null;
    a.$currentEntry0 = null;
    a.$prevEntry = null;
    a.$associatedMap = null;
}
let ju_HashMap$AbstractMapIterator_hasNext = $this => {
    let var$1, var$2;
    if ($this.$futureEntry !== null)
        return 1;
    while (true) {
        var$1 = $this.$position1;
        var$2 = $this.$associatedMap.$elementData.data;
        if (var$1 >= var$2.length)
            break;
        if (var$2[var$1] !== null)
            return 1;
        $this.$position1 = var$1 + 1 | 0;
    }
    return 0;
},
ju_HashMap$ValueIterator = $rt_classWithoutFields(ju_HashMap$AbstractMapIterator);
function jnci_BufferedEncoder$Controller() {
    let a = this; jl_Object.call(a);
    a.$in1 = null;
    a.$out0 = null;
    a.$inPosition0 = 0;
    a.$outPosition0 = 0;
}
let jnci_BufferedEncoder$Controller_hasMoreOutput = ($this, $sz) => {
    return jn_Buffer_remaining($this.$out0) < $sz ? 0 : 1;
};
function jusi_AnyMatchConsumer() {
    let a = this; jl_Object.call(a);
    a.$matched = 0;
    a.$predicate = null;
}
let jusi_AnyMatchConsumer_test = ($this, $t) => {
    let var$2;
    var$2 = $t instanceof igbcaci_ReturnCode;
    $this.$matched = var$2;
    return var$2 ? 0 : 1;
};
function ooa_Context() {
    let a = this; jl_Object.call(a);
    a.$attributePrototypes = null;
    a.$parsingOptions = 0;
    a.$charBuffer = null;
    a.$currentMethodAccessFlags = 0;
    a.$currentMethodName = null;
    a.$currentMethodDescriptor = null;
    a.$currentMethodLabels = null;
    a.$currentTypeAnnotationTarget = 0;
    a.$currentTypeAnnotationTargetPath = null;
    a.$currentLocalVariableAnnotationRangeStarts = null;
    a.$currentLocalVariableAnnotationRangeEnds = null;
    a.$currentLocalVariableAnnotationRangeIndices = null;
    a.$currentFrameOffset = 0;
    a.$currentFrameType = 0;
    a.$currentFrameLocalCount = 0;
    a.$currentFrameLocalCountDelta = 0;
    a.$currentFrameLocalTypes = null;
    a.$currentFrameStackCount = 0;
    a.$currentFrameStackTypes = null;
}
let ooa_Context__init_0 = $this => {
    return;
},
ooa_Context__init_ = () => {
    let var_0 = new ooa_Context();
    ooa_Context__init_0(var_0);
    return var_0;
};
function ooa_Label() {
    let a = this; jl_Object.call(a);
    a.$info = null;
    a.$flags1 = 0;
    a.$lineNumber = 0;
    a.$otherLineNumbers = null;
}
let ooa_Label_EMPTY_LIST = null,
ooa_Label_addLineNumber = ($this, $lineNumber) => {
    let var$2, var$3, $newLineNumbers, var$5, var$6;
    var$2 = $this.$flags1;
    if (!(var$2 & 128)) {
        $this.$flags1 = (var$2 | 128) << 16 >> 16;
        $this.$lineNumber = $lineNumber << 16 >> 16;
    } else {
        if ($this.$otherLineNumbers === null)
            $this.$otherLineNumbers = $rt_createIntArray(4);
        var$3 = $this.$otherLineNumbers;
        $newLineNumbers = var$3.data;
        var$5 = $newLineNumbers[0] + 1 | 0;
        $newLineNumbers[0] = var$5;
        var$6 = $newLineNumbers.length;
        if (var$5 >= var$6) {
            $newLineNumbers = $rt_createIntArray(var$6 + 4 | 0);
            jl_System_fastArraycopy(var$3, 0, $newLineNumbers, 0, var$6);
            $this.$otherLineNumbers = $newLineNumbers;
        }
        $this.$otherLineNumbers.data[var$5] = $lineNumber;
    }
},
ooa_Label_accept = ($this, $methodVisitor, $visitLineNumbers) => {
    let $i, var$4;
    a: {
        ooat_MethodNode_visitLabel($methodVisitor, $this);
        if ($visitLineNumbers && $this.$flags1 & 128) {
            ooat_MethodNode_visitLineNumber($methodVisitor, $this.$lineNumber & 65535, $this);
            if ($this.$otherLineNumbers !== null) {
                $i = 1;
                while (true) {
                    var$4 = $this.$otherLineNumbers.data;
                    if ($i > var$4[0])
                        break a;
                    ooat_MethodNode_visitLineNumber($methodVisitor, var$4[$i], $this);
                    $i = $i + 1 | 0;
                }
            }
        }
    }
},
ooa_Label_toString = $this => {
    let var$1;
    var$1 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$1);
    jl_AbstractStringBuilder_append0(var$1, $rt_s(576));
    return jl_AbstractStringBuilder_toString(jl_StringBuilder_append0(var$1, jl_Object_identity($this)));
},
ooa_Label__clinit_ = () => {
    ooa_Label_EMPTY_LIST = new ooa_Label;
};
function ooa_TypePath() {
    let a = this; jl_Object.call(a);
    a.$typePathContainer = null;
    a.$typePathOffset = 0;
}
let ooa_TypePath__init_0 = ($this, $typePathContainer, $typePathOffset) => {
    $this.$typePathContainer = $typePathContainer;
    $this.$typePathOffset = $typePathOffset;
},
ooa_TypePath__init_ = (var_0, var_1) => {
    let var_2 = new ooa_TypePath();
    ooa_TypePath__init_0(var_2, var_0, var_1);
    return var_2;
};
function ooa_MethodWriter() {
    let a = this; ooa_MethodVisitor.call(a);
    a.$symbolTable = null;
    a.$accessFlags = 0;
    a.$descriptorIndex = 0;
    a.$numberOfExceptions = 0;
    a.$exceptionIndexTable = null;
    a.$signatureIndex = 0;
    a.$sourceOffset = 0;
    a.$sourceLength = 0;
}
let ooa_MethodWriter_STACK_SIZE_DELTA = null,
ooa_MethodWriter_canCopyMethodAttributes = ($this, $source, $hasSyntheticAttribute, $hasDeprecatedAttribute, $descriptorIndex, $signatureIndex, $exceptionsOffset) => {
    let var$7, $currentExceptionOffset, $i;
    var$7 = $this.$symbolTable;
    if ($source === var$7.$sourceClassReader && $descriptorIndex == $this.$descriptorIndex && $signatureIndex == $this.$signatureIndex) {
        $descriptorIndex = $this.$accessFlags;
        if ($hasDeprecatedAttribute == (!($descriptorIndex & 131072) ? 0 : 1)) {
            if ($hasSyntheticAttribute != (var$7.$majorVersion < 49 && $descriptorIndex & 4096 ? 1 : 0))
                return 0;
            a: {
                if (!$exceptionsOffset) {
                    if (!$this.$numberOfExceptions)
                        break a;
                    return 0;
                }
                if (ooa_ClassReader_readUnsignedShort($source, $exceptionsOffset) == $this.$numberOfExceptions) {
                    $currentExceptionOffset = $exceptionsOffset + 2 | 0;
                    $i = 0;
                    while (true) {
                        if ($i >= $this.$numberOfExceptions)
                            break a;
                        if (ooa_ClassReader_readUnsignedShort($source, $currentExceptionOffset) != $this.$exceptionIndexTable.data[$i])
                            return 0;
                        $currentExceptionOffset = $currentExceptionOffset + 2 | 0;
                        $i = $i + 1 | 0;
                    }
                }
            }
            return 1;
        }
    }
    return 0;
},
ooa_MethodWriter__clinit_ = () => {
    ooa_MethodWriter_STACK_SIZE_DELTA = $rt_createIntArrayFromData([0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 2, 1, 1, 1, 0, 0, 1, 2, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (-1), 0, (-1), 0, (-1), (-1), (-1), (-1), (-1), (-2), (-1), (-2), (-1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (-3), (-4), (-3), (-4), (-3), (-3), (-3), (-3), (-1), (-2), 1, 1, 1, 2, 2, 2, 0, (-1), (-2), (-1), (-2), (-1), (-2), (-1), (-2), (-1), (-2), (-1), (-2), (-1), (-2), (-1), (-2),
    (-1), (-2), (-1), (-2), 0, 0, 0, 0, (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-2), (-1), (-2), (-1), (-2), 0, 1, 0, 1, (-1), (-1), 0, 0, 1, 1, (-1), 0, (-1), 0, 0, 0, (-3), (-1), (-1), (-3), (-3), (-1), (-1), (-1), (-1), (-1), (-1), (-2), (-2), (-2), (-2), (-2), (-2), (-2), (-2), 0, 1, 0, (-1), (-1), (-1), (-2), (-1), (-2), (-1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, (-1), (-1), 0, 0, (-1), (-1), 0, 0]);
};
function cjj_Inflate$Return() {
    let a = this; jl_Exception.call(a);
    a.$r = 0;
    a.$this$027 = null;
}
let cjj_Inflate$Return__init_0 = ($this, var$1, $r) => {
    $this.$this$027 = var$1;
    jl_Throwable__init_($this);
    $this.$r = $r;
},
cjj_Inflate$Return__init_ = (var_0, var_1) => {
    let var_2 = new cjj_Inflate$Return();
    cjj_Inflate$Return__init_0(var_2, var_0, var_1);
    return var_2;
};
function cjj_GZIPHeader() {
    let a = this; jl_Object.call(a);
    a.$text = 0;
    a.$fhcrc = 0;
    a.$time0 = Long_ZERO;
    a.$xflags = 0;
    a.$os = 0;
    a.$extra = null;
    a.$name6 = null;
    a.$comment = null;
    a.$hcrc = 0;
    a.$crc1 = Long_ZERO;
    a.$done = 0;
    a.$mtime = Long_ZERO;
}
let cjj_GZIPHeader__init_0 = $this => {
    $this.$text = 0;
    $this.$fhcrc = 0;
    $this.$os = 255;
    $this.$done = 0;
    $this.$mtime = Long_ZERO;
},
cjj_GZIPHeader__init_ = () => {
    let var_0 = new cjj_GZIPHeader();
    cjj_GZIPHeader__init_0(var_0);
    return var_0;
};
function ooa_ModuleVisitor() {
    let a = this; jl_Object.call(a);
    a.$api3 = 0;
    a.$mv0 = null;
}
function jl_Byte() {
    jl_Number.call(this);
    this.$value6 = 0;
}
let jl_Byte_TYPE = null,
jl_Byte_byteCache = null,
jl_Byte_valueOf = $i => {
    return jl_Byte_byteCache.data[$i + 128 | 0];
},
jl_Byte_toString = $this => {
    let var$1, var$2;
    var$1 = $this.$value6;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    return jl_AbstractStringBuilder_toString(jl_StringBuilder_append0(var$2, var$1));
},
jl_Byte_equals = ($this, $other) => {
    return $other instanceof jl_Byte && $other.$value6 == $this.$value6 ? 1 : 0;
},
jl_Byte__clinit_ = () => {
    let var$1, var$2, var$3, var$4, var$5;
    jl_Byte_TYPE = $rt_cls($rt_bytecls);
    var$1 = $rt_createArray(jl_Byte, 256);
    var$2 = var$1.data;
    var$3 = 0;
    var$4 = var$2.length;
    while (var$3 < var$4) {
        var$5 = new jl_Byte;
        var$5.$value6 = (var$3 - 128 | 0) << 24 >> 24;
        var$2[var$3] = var$5;
        var$3 = var$3 + 1 | 0;
    }
    jl_Byte_byteCache = var$1;
};
function jl_Short() {
    jl_Number.call(this);
    this.$value4 = 0;
}
let jl_Short_TYPE = null,
jl_Short_shortCache = null,
jl_Short__init_0 = ($this, $value) => {
    $this.$value4 = $value;
},
jl_Short__init_ = var_0 => {
    let var_1 = new jl_Short();
    jl_Short__init_0(var_1, var_0);
    return var_1;
},
jl_Short_valueOf = $i => {
    let var$2, var$3;
    if ($i >= (-128) && $i <= 127) {
        a: {
            if (jl_Short_shortCache === null) {
                jl_Short_shortCache = $rt_createArray(jl_Short, 256);
                var$2 = 0;
                while (true) {
                    var$3 = jl_Short_shortCache.data;
                    if (var$2 >= var$3.length)
                        break a;
                    var$3[var$2] = jl_Short__init_((var$2 - 128 | 0) << 16 >> 16);
                    var$2 = var$2 + 1 | 0;
                }
            }
        }
        return jl_Short_shortCache.data[$i + 128 | 0];
    }
    return jl_Short__init_($i);
},
jl_Short_toString = $this => {
    let var$1, var$2;
    var$1 = $this.$value4;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    return jl_AbstractStringBuilder_toString(jl_StringBuilder_append0(var$2, var$1));
},
jl_Short_equals = ($this, $other) => {
    return $other instanceof jl_Short && $other.$value4 == $this.$value4 ? 1 : 0;
},
jl_Short__clinit_ = () => {
    jl_Short_TYPE = $rt_cls($rt_shortcls);
};
function ooa_AnnotationVisitor() {
    let a = this; jl_Object.call(a);
    a.$api4 = 0;
    a.$av = null;
}
let ooa_AnnotationVisitor__init_ = ($this, $api) => {
    let var$2, var$3;
    var$2 = null;
    if ($api != 589824 && $api != 524288 && $api != 458752 && $api != 393216 && $api != 327680 && $api != 262144 && $api != 17432576) {
        var$3 = new jl_IllegalArgumentException;
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        jl_AbstractStringBuilder_append0(var$2, $rt_s(577));
        jl_Throwable__init_0(var$3, jl_AbstractStringBuilder_toString(jl_StringBuilder_append0(var$2, $api)));
        $rt_throw(var$3);
    }
    if ($api == 17432576)
        ooa_Constants_checkAsmExperimental($this);
    $this.$api4 = $api;
    $this.$av = var$2;
};
function ooa_RecordComponentVisitor() {
    let a = this; jl_Object.call(a);
    a.$api0 = 0;
    a.$delegate = null;
}
function ooa_SymbolTable() {
    let a = this; jl_Object.call(a);
    a.$sourceClassReader = null;
    a.$majorVersion = 0;
}
function ooa_Handle() {
    let a = this; jl_Object.call(a);
    a.$tag = 0;
    a.$owner1 = null;
    a.$name3 = null;
    a.$descriptor = null;
    a.$isInterface = 0;
}
let ooa_Handle_equals = ($this, $object) => {
    let $handle;
    if ($object === $this)
        return 1;
    if (!($object instanceof ooa_Handle))
        return 0;
    $handle = $object;
    return $this.$tag == $handle.$tag && $this.$isInterface == $handle.$isInterface && jl_String_equals($this.$owner1, $handle.$owner1) && jl_String_equals($this.$name3, $handle.$name3) && jl_String_equals($this.$descriptor, $handle.$descriptor) ? 1 : 0;
},
ooa_Handle_toString = $this => {
    let var$1;
    var$1 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$1);
    jl_AbstractStringBuilder_append0(var$1, $this.$owner1);
    jl_AbstractStringBuilder_append(var$1, 46);
    jl_AbstractStringBuilder_append0(var$1, $this.$name3);
    jl_AbstractStringBuilder_append0(var$1, $this.$descriptor);
    jl_AbstractStringBuilder_append0(var$1, $rt_s(578));
    var$1 = jl_StringBuilder_append0(var$1, $this.$tag);
    jl_AbstractStringBuilder_append0(var$1, !$this.$isInterface ? $rt_s(2) : $rt_s(579));
    jl_AbstractStringBuilder_append(var$1, 41);
    return jl_AbstractStringBuilder_toString(var$1);
};
function jusi_MappingStreamImpl$wrap$lambda$_1_0() {
    let a = this; jl_Object.call(a);
    a.$_02 = null;
    a.$_11 = null;
}
let jusi_MappingStreamImpl$wrap$lambda$_1_0_test = (var$0, var$1) => {
    let var$2;
    var$2 = var$0.$_02;
    return var$0.$_11.$test(var$2.$mapper.$apply(var$1));
};
function otcic_JsConsolePrintStream$ByteEncoder$postponeFlush$lambda$_3_0() {
    jl_Object.call(this);
    this.$_010 = null;
}
function jusi_FilteringStreamImpl$wrap$lambda$_1_0() {
    let a = this; jl_Object.call(a);
    a.$_07 = null;
    a.$_12 = null;
}
let jusi_FilteringStreamImpl$wrap$lambda$_1_0_test = (var$0, var$1) => {
    let var$2, var$3;
    var$2 = var$0.$_07;
    var$3 = var$0.$_12;
    return var$2.$filter0.$test(var$1) ? var$3.$test(var$1) : 1;
};
function jusi_StreamOverSpliterator$AdapterAction() {
    let a = this; jl_Object.call(a);
    a.$consumer = null;
    a.$wantsMore = 0;
}
function ooat_AnnotationNode() {
    let a = this; ooa_AnnotationVisitor.call(a);
    a.$desc = null;
    a.$values = null;
}
let ooat_AnnotationNode__init_3 = ($this, $descriptor) => {
    ooat_AnnotationNode__init_0($this, 589824, $descriptor);
    if (jl_Object_getClass($this) === $rt_cls(ooat_AnnotationNode))
        return;
    $descriptor = new jl_IllegalStateException;
    jl_Throwable__init_($descriptor);
    $rt_throw($descriptor);
},
ooat_AnnotationNode__init_ = var_0 => {
    let var_1 = new ooat_AnnotationNode();
    ooat_AnnotationNode__init_3(var_1, var_0);
    return var_1;
},
ooat_AnnotationNode__init_0 = ($this, $api, $descriptor) => {
    ooa_AnnotationVisitor__init_($this, $api);
    $this.$desc = $descriptor;
},
ooat_AnnotationNode__init_4 = (var_0, var_1) => {
    let var_2 = new ooat_AnnotationNode();
    ooat_AnnotationNode__init_0(var_2, var_0, var_1);
    return var_2;
},
ooat_AnnotationNode__init_1 = ($this, $values) => {
    ooa_AnnotationVisitor__init_($this, 589824);
    $this.$values = $values;
},
ooat_AnnotationNode__init_2 = var_0 => {
    let var_1 = new ooat_AnnotationNode();
    ooat_AnnotationNode__init_1(var_1, var_0);
    return var_1;
},
ooat_AnnotationNode_visit = ($this, $name, $value) => {
    let var$3, var$4, var$5;
    if ($this.$values === null)
        $this.$values = ju_ArrayList__init_0($this.$desc === null ? 1 : 2);
    if ($this.$desc !== null)
        $this.$values.$add($name);
    a: {
        if ($rt_isInstance($value, $rt_arraycls($rt_bytecls))) {
            $name = $this.$values;
            var$3 = $value;
            if (var$3 === null)
                $value = ju_ArrayList__init_();
            else {
                var$3 = var$3.data;
                $value = new ju_ArrayList;
                var$4 = var$3.length;
                ju_ArrayList__init_1($value, var$4);
                var$5 = 0;
                while (var$5 < var$4) {
                    ju_ArrayList_add($value, jl_Byte_valueOf(var$3[var$5]));
                    var$5 = var$5 + 1 | 0;
                }
            }
            $name.$add($value);
            break a;
        }
        if ($rt_isInstance($value, $rt_arraycls($rt_booleancls))) {
            $name = $this.$values;
            var$3 = $value;
            if (var$3 === null)
                $value = ju_ArrayList__init_();
            else {
                var$3 = var$3.data;
                $value = new ju_ArrayList;
                var$4 = var$3.length;
                ju_ArrayList__init_1($value, var$4);
                var$5 = 0;
                while (var$5 < var$4) {
                    ju_ArrayList_add($value, jl_Boolean_valueOf(var$3[var$5]));
                    var$5 = var$5 + 1 | 0;
                }
            }
            $name.$add($value);
            break a;
        }
        if ($rt_isInstance($value, $rt_arraycls($rt_shortcls))) {
            $name = $this.$values;
            var$3 = $value;
            if (var$3 === null)
                $value = ju_ArrayList__init_();
            else {
                var$3 = var$3.data;
                $value = new ju_ArrayList;
                var$4 = var$3.length;
                ju_ArrayList__init_1($value, var$4);
                var$5 = 0;
                while (var$5 < var$4) {
                    ju_ArrayList_add($value, jl_Short_valueOf(var$3[var$5]));
                    var$5 = var$5 + 1 | 0;
                }
            }
            $name.$add($value);
            break a;
        }
        if ($rt_isInstance($value, $rt_arraycls($rt_charcls))) {
            $name = $this.$values;
            var$3 = $value;
            if (var$3 === null)
                $value = ju_ArrayList__init_();
            else {
                var$3 = var$3.data;
                $value = new ju_ArrayList;
                var$4 = var$3.length;
                ju_ArrayList__init_1($value, var$4);
                var$5 = 0;
                while (var$5 < var$4) {
                    ju_ArrayList_add($value, jl_Character_valueOf(var$3[var$5]));
                    var$5 = var$5 + 1 | 0;
                }
            }
            $name.$add($value);
            break a;
        }
        if ($rt_isInstance($value, $rt_arraycls($rt_intcls))) {
            $this.$values.$add(ooat_Util_asArrayList1($value));
            break a;
        }
        if ($rt_isInstance($value, $rt_arraycls($rt_longcls))) {
            $name = $this.$values;
            var$3 = $value;
            if (var$3 === null)
                $value = ju_ArrayList__init_();
            else {
                var$3 = var$3.data;
                $value = new ju_ArrayList;
                var$4 = var$3.length;
                ju_ArrayList__init_1($value, var$4);
                var$5 = 0;
                while (var$5 < var$4) {
                    ju_ArrayList_add($value, jl_Long_valueOf(var$3[var$5]));
                    var$5 = var$5 + 1 | 0;
                }
            }
            $name.$add($value);
            break a;
        }
        if ($rt_isInstance($value, $rt_arraycls($rt_floatcls))) {
            $name = $this.$values;
            var$3 = $value;
            if (var$3 === null)
                $value = ju_ArrayList__init_();
            else {
                var$3 = var$3.data;
                $value = new ju_ArrayList;
                var$4 = var$3.length;
                ju_ArrayList__init_1($value, var$4);
                var$5 = 0;
                while (var$5 < var$4) {
                    ju_ArrayList_add($value, jl_Float_valueOf(var$3[var$5]));
                    var$5 = var$5 + 1 | 0;
                }
            }
            $name.$add($value);
            break a;
        }
        if (!$rt_isInstance($value, $rt_arraycls($rt_doublecls))) {
            $this.$values.$add($value);
            break a;
        }
        $name = $this.$values;
        var$3 = $value;
        if (var$3 === null)
            $value = ju_ArrayList__init_();
        else {
            var$3 = var$3.data;
            $value = new ju_ArrayList;
            var$4 = var$3.length;
            ju_ArrayList__init_1($value, var$4);
            var$5 = 0;
            while (var$5 < var$4) {
                ju_ArrayList_add($value, jl_Double_valueOf(var$3[var$5]));
                var$5 = var$5 + 1 | 0;
            }
        }
        $name.$add($value);
    }
},
ooat_AnnotationNode_visitEnum = ($this, $name, $descriptor, $value) => {
    if ($this.$values === null)
        $this.$values = ju_ArrayList__init_0($this.$desc === null ? 1 : 2);
    if ($this.$desc !== null)
        $this.$values.$add($name);
    $this.$values.$add($rt_wrapArray(jl_String, [$descriptor, $value]));
},
ooat_AnnotationNode_visitAnnotation = ($this, $name, $descriptor) => {
    let $annotation;
    if ($this.$values === null)
        $this.$values = ju_ArrayList__init_0($this.$desc === null ? 1 : 2);
    if ($this.$desc !== null)
        $this.$values.$add($name);
    $annotation = ooat_AnnotationNode__init_($descriptor);
    $this.$values.$add($annotation);
    return $annotation;
},
ooat_AnnotationNode_visitArray = ($this, $name) => {
    let $array;
    if ($this.$values === null)
        $this.$values = ju_ArrayList__init_0($this.$desc === null ? 1 : 2);
    if ($this.$desc !== null)
        $this.$values.$add($name);
    $array = ju_ArrayList__init_();
    $this.$values.$add($array);
    return ooat_AnnotationNode__init_2($array);
},
ooat_AnnotationNode_visitEnd = $this => {
    return;
};
function ooat_TypeAnnotationNode() {
    let a = this; ooat_AnnotationNode.call(a);
    a.$typeRef = 0;
    a.$typePath = null;
}
let ooat_TypeAnnotationNode__init_1 = ($this, $typeRef, $typePath, $descriptor) => {
    ooat_TypeAnnotationNode__init_0($this, 589824, $typeRef, $typePath, $descriptor);
    if (jl_Object_getClass($this) === $rt_cls(ooat_TypeAnnotationNode))
        return;
    $typePath = new jl_IllegalStateException;
    jl_Throwable__init_($typePath);
    $rt_throw($typePath);
},
ooat_TypeAnnotationNode__init_ = (var_0, var_1, var_2) => {
    let var_3 = new ooat_TypeAnnotationNode();
    ooat_TypeAnnotationNode__init_1(var_3, var_0, var_1, var_2);
    return var_3;
},
ooat_TypeAnnotationNode__init_0 = ($this, $api, $typeRef, $typePath, $descriptor) => {
    ooat_AnnotationNode__init_0($this, $api, $descriptor);
    $this.$typeRef = $typeRef;
    $this.$typePath = $typePath;
},
ooat_TypeAnnotationNode__init_2 = (var_0, var_1, var_2, var_3) => {
    let var_4 = new ooat_TypeAnnotationNode();
    ooat_TypeAnnotationNode__init_0(var_4, var_0, var_1, var_2, var_3);
    return var_4;
};
function ooat_InnerClassNode() {
    let a = this; jl_Object.call(a);
    a.$name23 = null;
    a.$outerName = null;
    a.$innerName = null;
    a.$access5 = 0;
}
function ooat_ModuleNode() {
    let a = this; ooa_ModuleVisitor.call(a);
    a.$name21 = null;
    a.$access9 = 0;
    a.$version1 = null;
    a.$mainClass = null;
    a.$packages = null;
    a.$requires = null;
    a.$exports = null;
    a.$opens = null;
    a.$uses = null;
    a.$provides = null;
}
let ooat_ModuleNode_visitProvide = ($this, $service, $providers) => {
    let var$3, var$4, var$5;
    if ($this.$provides === null)
        $this.$provides = ju_ArrayList__init_0(5);
    var$3 = $this.$provides;
    var$4 = new ooat_ModuleProvideNode;
    var$5 = ooat_Util_asArrayList($providers);
    var$4.$service = $service;
    var$4.$providers = var$5;
    ju_ArrayList_add(var$3, var$4);
};
function ooat_RecordComponentNode() {
    let a = this; ooa_RecordComponentVisitor.call(a);
    a.$name14 = null;
    a.$descriptor1 = null;
    a.$signature1 = null;
    a.$visibleAnnotations1 = null;
    a.$invisibleAnnotations = null;
    a.$visibleTypeAnnotations0 = null;
    a.$invisibleTypeAnnotations1 = null;
    a.$attrs = null;
}
let ooat_RecordComponentNode_visitAnnotation = ($this, $descriptor, $visible) => {
    let $annotation;
    $annotation = ooat_AnnotationNode__init_($descriptor);
    if (!$visible)
        $this.$invisibleAnnotations = ooat_Util_add($this.$invisibleAnnotations, $annotation);
    else
        $this.$visibleAnnotations1 = ooat_Util_add($this.$visibleAnnotations1, $annotation);
    return $annotation;
},
ooat_RecordComponentNode_visitTypeAnnotation = ($this, $typeRef, $typePath, $descriptor, $visible) => {
    let $typeAnnotation;
    $typeAnnotation = ooat_TypeAnnotationNode__init_($typeRef, $typePath, $descriptor);
    if (!$visible)
        $this.$invisibleTypeAnnotations1 = ooat_Util_add($this.$invisibleTypeAnnotations1, $typeAnnotation);
    else
        $this.$visibleTypeAnnotations0 = ooat_Util_add($this.$visibleTypeAnnotations0, $typeAnnotation);
    return $typeAnnotation;
};
function ooat_ModuleRequireNode() {
    let a = this; jl_Object.call(a);
    a.$module0 = null;
    a.$access8 = 0;
    a.$version0 = null;
}
function ooat_ModuleExportNode() {
    let a = this; jl_Object.call(a);
    a.$packaze0 = null;
    a.$access3 = 0;
    a.$modules = null;
}
function ooat_ModuleOpenNode() {
    let a = this; jl_Object.call(a);
    a.$packaze = null;
    a.$access6 = 0;
    a.$modules0 = null;
}
function ooat_ModuleProvideNode() {
    let a = this; jl_Object.call(a);
    a.$service = null;
    a.$providers = null;
}
function ooat_ParameterNode() {
    let a = this; jl_Object.call(a);
    a.$name15 = null;
    a.$access4 = 0;
}
function ooat_MethodNode$1() {
    ju_ArrayList.call(this);
    this.$this$03 = null;
}
let ooat_MethodNode$1_add = ($this, $o) => {
    $this.$this$03.$annotationDefault = $o;
    return ju_ArrayList_add($this, $o);
};
function ooat_AbstractInsnNode() {
    let a = this; jl_Object.call(a);
    a.$opcode = 0;
    a.$visibleTypeAnnotations = null;
    a.$invisibleTypeAnnotations4 = null;
    a.$previousInsn = null;
    a.$nextInsn = null;
    a.$index7 = 0;
}
let ooat_AbstractInsnNode__init_ = ($this, $opcode) => {
    $this.$opcode = $opcode;
    $this.$index7 = (-1);
},
ooat_AbstractInsnNode_getOpcode = $this => {
    return $this.$opcode;
},
ooat_AbstractInsnNode_getPrevious = $this => {
    return $this.$previousInsn;
};
function ooat_LineNumberNode() {
    let a = this; ooat_AbstractInsnNode.call(a);
    a.$line = 0;
    a.$start8 = null;
}
function ooat_TryCatchBlockNode() {
    let a = this; jl_Object.call(a);
    a.$start7 = null;
    a.$end7 = null;
    a.$handler = null;
    a.$type3 = null;
    a.$visibleTypeAnnotations1 = null;
    a.$invisibleTypeAnnotations = null;
}
function ooat_FrameNode() {
    let a = this; ooat_AbstractInsnNode.call(a);
    a.$type5 = 0;
    a.$local = null;
    a.$stack = null;
}
let ooat_InsnNode = $rt_classWithoutFields(ooat_AbstractInsnNode);
function ooat_IntInsnNode() {
    ooat_AbstractInsnNode.call(this);
    this.$operand = 0;
}
function ooat_LdcInsnNode() {
    ooat_AbstractInsnNode.call(this);
    this.$cst = null;
}
function ooat_VarInsnNode() {
    ooat_AbstractInsnNode.call(this);
    this.$var = 0;
}
function ooat_IincInsnNode() {
    let a = this; ooat_AbstractInsnNode.call(a);
    a.$var0 = 0;
    a.$incr = 0;
}
function ooat_JumpInsnNode() {
    ooat_AbstractInsnNode.call(this);
    this.$label = null;
}
function ooat_TypeInsnNode() {
    ooat_AbstractInsnNode.call(this);
    this.$desc7 = null;
}
function ooat_MultiANewArrayInsnNode() {
    let a = this; ooat_AbstractInsnNode.call(a);
    a.$desc8 = null;
    a.$dims = 0;
}
function ooat_InvokeDynamicInsnNode() {
    let a = this; ooat_AbstractInsnNode.call(a);
    a.$name16 = null;
    a.$desc5 = null;
    a.$bsm = null;
    a.$bsmArgs = null;
}
function ooat_FieldInsnNode() {
    let a = this; ooat_AbstractInsnNode.call(a);
    a.$owner5 = null;
    a.$name13 = null;
    a.$desc6 = null;
}
function ooat_MethodInsnNode() {
    let a = this; ooat_AbstractInsnNode.call(a);
    a.$owner6 = null;
    a.$name19 = null;
    a.$desc10 = null;
    a.$itf = 0;
}
function ooat_LookupSwitchInsnNode() {
    let a = this; ooat_AbstractInsnNode.call(a);
    a.$dflt0 = null;
    a.$keys = null;
    a.$labels0 = null;
}
function ooat_TableSwitchInsnNode() {
    let a = this; ooat_AbstractInsnNode.call(a);
    a.$min1 = 0;
    a.$max1 = 0;
    a.$dflt = null;
    a.$labels = null;
}
function ooat_LocalVariableNode() {
    let a = this; jl_Object.call(a);
    a.$name18 = null;
    a.$desc9 = null;
    a.$signature0 = null;
    a.$start9 = null;
    a.$end5 = null;
    a.$index9 = 0;
}
function ooat_LocalVariableAnnotationNode() {
    let a = this; ooat_TypeAnnotationNode.call(a);
    a.$start10 = null;
    a.$end6 = null;
    a.$index8 = null;
}
let ooat_LabelNode = $rt_classWithoutFields(ooat_AbstractInsnNode),
jus_IntStream = $rt_classWithoutFields(0),
jusi_SimpleIntStreamImpl = $rt_classWithoutFields();
function jusi_StringCharsStream() {
    let a = this; jusi_SimpleIntStreamImpl.call(a);
    a.$string4 = null;
    a.$index10 = 0;
}
function jusi_WrappingIntStreamImpl() {
    jusi_SimpleIntStreamImpl.call(this);
    this.$sourceStream0 = null;
}
function jusi_FilteringIntStreamImpl() {
    jusi_WrappingIntStreamImpl.call(this);
    this.$filter1 = null;
}
function jusi_CountingIntConsumer() {
    jl_Object.call(this);
    this.$count2 = 0;
}
function jusi_FilteringIntStreamImpl$wrap$lambda$_1_0() {
    let a = this; jl_Object.call(a);
    a.$_014 = null;
    a.$_14 = null;
}
$rt_packages([-1, "com", 0, "jcraft", 1, "jzlib", -1, "java", 3, "util", 4, "zip", 4, "random", 4, "regex", 4, "stream", 8, "impl", 8, "intimpl", 4, "function", 3, "nio", 12, "charset", 13, "impl", 3, "io", 3, "lang", 16, "reflect", -1, "org", 18, "objectweb", 19, "asm", 20, "tree", 18, "teavm", 22, "jso", 23, "core", 23, "impl", 23, "dom", 26, "xml", 26, "html", 26, "events", 22, "interop", 22, "classlib", 31, "impl", 32, "console", 32, "unicode", 32, "text", 22, "runtime", 22, "platform", 37, "plugin", -1,
"io", 39, "github", 40, "betterclient", 41, "compiler", 42, "exception", 42, "symbol", 42, "method", 45, "code", 42, "util", 42, "web", 48, "proxy", 42, "api", 50, "code", 51, "impl", 52, "get", 53, "call", 53, "pre", 53, "load", 50, "util", 50, "type", 42, "storage"
]);
$rt_metadata([jl_Object, "Object", 16, 0, [], 0, 3, 0, 0, ["$hashCode", $rt_wrapFunction0(jl_Object_hashCode), "$equals", $rt_wrapFunction1(jl_Object_equals), "$toString", $rt_wrapFunction0(jl_Object_toString)],
igbc_CompilerMain, "CompilerMain", 42, jl_Object, [], 0, 3, 0, igbc_CompilerMain_$callClinit, 0,
jlr_AnnotatedElement, "AnnotatedElement", 17, jl_Object, [], 3, 3, 0, 0, 0,
jlr_Type, "Type", 17, jl_Object, [], 3, 3, 0, 0, 0,
jl_Class, "Class", 16, jl_Object, [jlr_AnnotatedElement, jlr_Type], 0, 3, 0, 0, 0,
otji_JS, "JS", 25, jl_Object, [], 4, 0, 0, 0, 0,
otp_Platform, "Platform", 37, jl_Object, [], 4, 3, 0, 0, 0,
jl_Throwable, "Throwable", 16, jl_Object, [], 0, 3, 0, 0, ["$getMessage", $rt_wrapFunction0(jl_Throwable_getMessage)],
jl_Exception, "Exception", 16, jl_Throwable, [], 0, 3, 0, 0, 0,
jl_RuntimeException, "RuntimeException", 16, jl_Exception, [], 0, 3, 0, 0, 0,
jl_ClassCastException, "ClassCastException", 16, jl_RuntimeException, [], 0, 3, 0, 0, 0,
ji_Serializable, "Serializable", 15, jl_Object, [], 3, 3, 0, 0, 0,
jl_Comparable, "Comparable", 16, jl_Object, [], 3, 3, 0, 0, 0,
jl_CharSequence, "CharSequence", 16, jl_Object, [], 3, 3, 0, 0, 0,
jl_String, "String", 16, jl_Object, [ji_Serializable, jl_Comparable, jl_CharSequence], 0, 3, 0, 0, ["$toString", $rt_wrapFunction0(jl_String_toString), "$equals", $rt_wrapFunction1(jl_String_equals), "$hashCode", $rt_wrapFunction0(jl_String_hashCode)],
jl_Number, "Number", 16, jl_Object, [ji_Serializable], 1, 3, 0, 0, 0,
jl_Integer, "Integer", 16, jl_Number, [jl_Comparable], 0, 3, 0, 0, ["$toString", $rt_wrapFunction0(jl_Integer_toString0), "$equals", $rt_wrapFunction1(jl_Integer_equals)],
jl_AbstractStringBuilder, "AbstractStringBuilder", 16, jl_Object, [ji_Serializable, jl_CharSequence], 0, 0, 0, 0, ["$ensureCapacity", $rt_wrapFunction1(jl_AbstractStringBuilder_ensureCapacity), "$toString", $rt_wrapFunction0(jl_AbstractStringBuilder_toString)],
jl_Appendable, "Appendable", 16, jl_Object, [], 3, 3, 0, 0, 0,
jl_StringBuilder, "StringBuilder", 16, jl_AbstractStringBuilder, [jl_Appendable], 0, 3, 0, 0, ["$insert3", $rt_wrapFunction4(jl_StringBuilder_insert0), "$append5", $rt_wrapFunction3(jl_StringBuilder_append4), "$insert2", $rt_wrapFunction4(jl_StringBuilder_insert2), "$append4", $rt_wrapFunction3(jl_StringBuilder_append3), "$toString", $rt_wrapFunction0(jl_StringBuilder_toString), "$ensureCapacity", $rt_wrapFunction1(jl_StringBuilder_ensureCapacity), "$insert1", $rt_wrapFunction2(jl_StringBuilder_insert1), "$insert",
$rt_wrapFunction2(jl_StringBuilder_insert3)],
jl_System, "System", 16, jl_Object, [], 4, 3, 0, 0, 0,
jl_AutoCloseable, "AutoCloseable", 16, jl_Object, [], 3, 3, 0, 0, 0,
ji_Closeable, "Closeable", 15, jl_Object, [jl_AutoCloseable], 3, 3, 0, 0, 0,
ji_Flushable, "Flushable", 15, jl_Object, [], 3, 3, 0, 0, 0,
ji_OutputStream, "OutputStream", 15, jl_Object, [ji_Closeable, ji_Flushable], 1, 3, 0, 0, 0,
ji_FilterOutputStream, "FilterOutputStream", 15, ji_OutputStream, [], 0, 3, 0, 0, 0,
ji_PrintStream, "PrintStream", 15, ji_FilterOutputStream, [jl_Appendable], 0, 3, 0, 0, ["$write", $rt_wrapFunction3(ji_PrintStream_write), "$print0", $rt_wrapFunction3(ji_PrintStream_print), "$print1", $rt_wrapFunction1(ji_PrintStream_print0), "$println0", $rt_wrapFunction1(ji_PrintStream_println), "$println", $rt_wrapFunction1(ji_PrintStream_println0)],
igbc_CompilerMain$1, "CompilerMain$1", 42, ji_OutputStream, [], 0, 0, 0, 0, ["$write", $rt_wrapFunction3(igbc_CompilerMain$1_write)],
otj_JSObject, "JSObject", 23, jl_Object, [], 3, 3, 0, 0, 0,
otjdx_Node, "Node", 27, jl_Object, [otj_JSObject], 3, 3, 0, 0, 0,
otjdx_Document, "Document", 27, jl_Object, [otjdx_Node], 3, 3, 0, 0, 0,
otjde_EventTarget, "EventTarget", 29, jl_Object, [otj_JSObject], 3, 3, 0, 0, 0,
otjdh_HTMLDocument, "HTMLDocument", 28, jl_Object, [otjdx_Document, otjde_EventTarget], 1, 3, 0, 0, 0,
otjde_EventListener, "EventListener", 29, jl_Object, [otj_JSObject], 3, 3, 0, 0, 0,
igbc_CompilerMain$main$lambda$_1_0, "CompilerMain$main$lambda$_1_0", 42, jl_Object, [otjde_EventListener], 0, 3, 0, 0, ["$handleEvent$exported$0", $rt_wrapFunction1(igbc_CompilerMain$main$lambda$_1_0_handleEvent$exported$0)],
otci_IntegerUtil, "IntegerUtil", 32, jl_Object, [], 4, 3, 0, 0, 0,
otcic_JsConsolePrintStream, "JsConsolePrintStream", 33, ji_PrintStream, [], 1, 3, 0, 0, ["$println0", $rt_wrapFunction1(otcic_JsConsolePrintStream_println0), "$print1", $rt_wrapFunction1(otcic_JsConsolePrintStream_print), "$println", $rt_wrapFunction1(otcic_JsConsolePrintStream_println), "$write", $rt_wrapFunction3(otcic_JsConsolePrintStream_write), "$print0", $rt_wrapFunction3(otcic_JsConsolePrintStream_print0)],
otcic_JSStdoutPrintStream, "JSStdoutPrintStream", 33, otcic_JsConsolePrintStream, [], 0, 3, 0, 0, ["$print", $rt_wrapFunction1(otcic_JSStdoutPrintStream_print)],
ju_Comparator, "Comparator", 4, jl_Object, [], 3, 3, 0, 0, 0,
jl_String$_clinit_$lambda$_115_0, "String$<clinit>$lambda$_115_0", 16, jl_Object, [ju_Comparator], 0, 3, 0, 0, 0,
jl_Character, "Character", 16, jl_Object, [jl_Comparable], 0, 3, 0, 0, ["$toString", $rt_wrapFunction0(jl_Character_toString0), "$equals", $rt_wrapFunction1(jl_Character_equals)],
jnc_Charset, "Charset", 13, jl_Object, [jl_Comparable], 1, 3, 0, 0, 0,
jnci_UTF8Charset, "UTF8Charset", 14, jnc_Charset, [], 0, 3, 0, 0, ["$newDecoder", $rt_wrapFunction0(jnci_UTF8Charset_newDecoder)],
ju_Objects, "Objects", 4, jl_Object, [], 4, 3, 0, 0, 0,
ji_ByteArrayOutputStream, "ByteArrayOutputStream", 15, ji_OutputStream, [], 0, 3, 0, 0, ["$write", $rt_wrapFunction3(ji_ByteArrayOutputStream_write)],
jl_IndexOutOfBoundsException, "IndexOutOfBoundsException", 16, jl_RuntimeException, [], 0, 3, 0, 0, 0,
jl_IllegalArgumentException, "IllegalArgumentException", 16, jl_RuntimeException, [], 0, 3, 0, 0, 0,
jnc_IllegalCharsetNameException, "IllegalCharsetNameException", 13, jl_IllegalArgumentException, [], 0, 3, 0, 0, 0,
jl_Cloneable, "Cloneable", 16, jl_Object, [], 3, 3, 0, 0, 0,
jl_CloneNotSupportedException, "CloneNotSupportedException", 16, jl_Exception, [], 0, 3, 0, 0, 0]);
$rt_metadata([jl_StringIndexOutOfBoundsException, "StringIndexOutOfBoundsException", 16, jl_IndexOutOfBoundsException, [], 0, 3, 0, 0, 0,
jl_Runnable, "Runnable", 16, jl_Object, [], 3, 3, 0, 0, 0,
jl_Thread, "Thread", 16, jl_Object, [jl_Runnable], 0, 3, 0, 0, 0,
igbc_CompilerMain$lambda$main$0$lambda$_6_0, "CompilerMain$lambda$main$0$lambda$_6_0", 42, jl_Object, [jl_Runnable], 0, 3, 0, 0, 0,
jl_Thread$UncaughtExceptionHandler, "Thread$UncaughtExceptionHandler", 16, jl_Object, [], 3, 3, 0, 0, 0,
jl_DefaultUncaughtExceptionHandler, "DefaultUncaughtExceptionHandler", 16, jl_Object, [jl_Thread$UncaughtExceptionHandler], 0, 3, 0, 0, 0,
otp_PlatformRunnable, "PlatformRunnable", 37, jl_Object, [], 3, 3, 0, 0, 0,
jl_Thread$start$lambda$_4_0, "Thread$start$lambda$_4_0", 16, jl_Object, [otp_PlatformRunnable], 0, 3, 0, 0, ["$run", $rt_wrapFunction0(jl_Thread$start$lambda$_4_0_run)],
jl_Math, "Math", 16, jl_Object, [], 4, 3, 0, 0, 0,
ju_Arrays, "Arrays", 4, jl_Object, [], 0, 3, 0, 0, 0,
jl_Object$Monitor, "Object$Monitor", 16, jl_Object, [], 0, 0, 0, 0, 0,
jl_IllegalMonitorStateException, "IllegalMonitorStateException", 16, jl_RuntimeException, [], 0, 3, 0, 0, 0,
otp_PlatformQueue, "PlatformQueue", 37, jl_Object, [otj_JSObject], 1, 3, 0, 0, 0,
otr_EventQueue$Event, "EventQueue$Event", 36, jl_Object, [], 3, 3, 0, 0, 0,
jl_Object$NotifyListener, "Object$NotifyListener", 16, jl_Object, [otp_PlatformRunnable, otr_EventQueue$Event], 3, 0, 0, 0, 0,
jl_IllegalStateException, "IllegalStateException", 16, jl_RuntimeException, [], 0, 3, 0, 0, 0,
otji_JSWrapper, "JSWrapper", 25, jl_Object, [], 4, 3, 0, otji_JSWrapper_$callClinit, 0,
jl_Object$monitorExit$lambda$_8_0, "Object$monitorExit$lambda$_8_0", 16, jl_Object, [otp_PlatformRunnable], 0, 3, 0, 0, ["$run", $rt_wrapFunction0(jl_Object$monitorExit$lambda$_8_0_run)],
otjc_JSWeakRef, "JSWeakRef", 24, jl_Object, [otj_JSObject], 1, 3, 0, 0, 0,
otjc_JSFinalizationRegistryConsumer, "JSFinalizationRegistryConsumer", 24, jl_Object, [otj_JSObject], 3, 3, 0, 0, 0,
otji_JSWrapper$_clinit_$lambda$_33_0, "JSWrapper$<clinit>$lambda$_33_0", 25, jl_Object, [otjc_JSFinalizationRegistryConsumer], 0, 3, 0, 0, ["$accept$exported$0", $rt_wrapFunction1(otji_JSWrapper$_clinit_$lambda$_33_0_accept$exported$0)],
otji_JSWrapper$_clinit_$lambda$_33_1, "JSWrapper$<clinit>$lambda$_33_1", 25, jl_Object, [otjc_JSFinalizationRegistryConsumer], 0, 3, 0, 0, ["$accept$exported$0", $rt_wrapFunction1(otji_JSWrapper$_clinit_$lambda$_33_1_accept$exported$0)],
otjc_JSObjects, "JSObjects", 24, jl_Object, [], 4, 3, 0, 0, 0,
otjc_JSUndefined, "JSUndefined", 24, jl_Object, [otj_JSObject], 0, 3, 0, 0, 0,
oti_AsyncCallback, "AsyncCallback", 30, jl_Object, [], 3, 3, 0, 0, 0,
otpp_AsyncCallbackWrapper, "AsyncCallbackWrapper", 38, jl_Object, [oti_AsyncCallback], 0, 0, 0, 0, ["$complete", $rt_wrapFunction1(otpp_AsyncCallbackWrapper_complete), "$error", $rt_wrapFunction1(otpp_AsyncCallbackWrapper_error)],
jl_Object$monitorEnterWait$lambda$_6_0, "Object$monitorEnterWait$lambda$_6_0", 16, jl_Object, [otp_PlatformRunnable], 0, 3, 0, 0, 0,
igbcs_JavaStandardLibrariesUtil, "JavaStandardLibrariesUtil", 59, jl_Object, [], 0, 3, 0, 0, 0,
igbc_Compiler, "Compiler", 42, jl_Object, [], 0, 3, 0, 0, 0,
igbcw_CodeRunner, "CodeRunner", 48, jl_Object, [], 0, 3, 0, 0, 0,
jl_Iterable, "Iterable", 16, jl_Object, [], 3, 3, 0, 0, 0,
ju_Collection, "Collection", 4, jl_Object, [jl_Iterable], 3, 3, 0, 0, 0,
ju_AbstractCollection, "AbstractCollection", 4, jl_Object, [ju_Collection], 1, 3, 0, 0, 0,
ju_SequencedCollection, "SequencedCollection", 4, jl_Object, [ju_Collection], 3, 3, 0, 0, 0,
ju_List, "List", 4, jl_Object, [ju_SequencedCollection], 3, 3, 0, 0, 0,
ju_AbstractList, "AbstractList", 4, ju_AbstractCollection, [ju_List], 1, 3, 0, 0, ["$remove", $rt_wrapFunction1(ju_AbstractList_remove), "$equals", $rt_wrapFunction1(ju_AbstractList_equals)],
ju_RandomAccess, "RandomAccess", 4, jl_Object, [], 3, 3, 0, 0, 0,
ju_ArrayList, "ArrayList", 4, ju_AbstractList, [jl_Cloneable, ji_Serializable, ju_RandomAccess], 0, 3, 0, 0, ["$get0", $rt_wrapFunction1(ju_ArrayList_get), "$size", $rt_wrapFunction0(ju_ArrayList_size), "$add", $rt_wrapFunction1(ju_ArrayList_add), "$remove", $rt_wrapFunction1(ju_ArrayList_remove), "$toString", $rt_wrapFunction0(ju_ArrayList_toString)],
ju_Base64, "Base64", 4, jl_Object, [], 4, 3, 0, 0, 0,
igbca_APIClass, "APIClass", 50, jl_Object, [], 0, 3, 0, 0, 0,
jl_Error, "Error", 16, jl_Throwable, [], 0, 3, 0, 0, 0,
jl_AssertionError, "AssertionError", 16, jl_Error, [], 0, 3, 0, 0, 0,
ooa_MethodVisitor, "MethodVisitor", 20, jl_Object, [], 1, 3, 0, 0, 0,
ooat_MethodNode, "MethodNode", 21, ooa_MethodVisitor, [], 0, 3, 0, 0, 0,
igbca_APIMethod, "APIMethod", 50, jl_Object, [], 0, 3, 0, 0, 0,
igbca_APIField, "APIField", 50, jl_Object, [], 0, 3, 0, 0, 0,
jl_Record, "Record", 16, jl_Object, [], 1, 3, 0, 0, 0,
igbcat_AccessType, "AccessType", 58, jl_Record, [], 32772, 3, 0, 0, 0,
jl_Enum, "Enum", 16, jl_Object, [jl_Comparable, ji_Serializable], 1, 3, 0, 0, ["$toString", $rt_wrapFunction0(jl_Enum_toString), "$equals", $rt_wrapFunction1(jl_Enum_equals)],
igbcat_VisibilityType, "VisibilityType", 58, jl_Enum, [], 12, 3, 0, 0, 0]);
$rt_metadata([ooa_Opcodes, "Opcodes", 20, jl_Object, [], 3, 3, 0, ooa_Opcodes_$callClinit, 0,
igbcac_APIMethodCode, "APIMethodCode", 51, jl_Object, [ooa_Opcodes], 1, 3, 0, 0, 0,
igbcaci_ReturnCode, "ReturnCode", 52, igbcac_APIMethodCode, [], 0, 3, 0, 0, 0,
ju_Base64$Decoder, "Base64$Decoder", 4, jl_Object, [], 0, 3, 0, 0, 0,
otci_Base64Impl, "Base64Impl", 32, jl_Object, [], 4, 3, 0, 0, 0,
ji_InputStream, "InputStream", 15, jl_Object, [ji_Closeable], 1, 3, 0, 0, ["$read0", $rt_wrapFunction1(ji_InputStream_read)],
ji_FilterInputStream, "FilterInputStream", 15, ji_InputStream, [], 0, 3, 0, 0, ["$read0", $rt_wrapFunction1(ji_FilterInputStream_read)],
juz_InflaterInputStream, "InflaterInputStream", 5, ji_FilterInputStream, [], 0, 3, 0, 0, 0,
juz_ZipConstants, "ZipConstants", 5, jl_Object, [], 3, 0, 0, 0, 0,
juz_ZipInputStream, "ZipInputStream", 5, juz_InflaterInputStream, [juz_ZipConstants], 0, 3, 0, 0, 0,
ji_ByteArrayInputStream, "ByteArrayInputStream", 15, ji_InputStream, [], 0, 3, 0, 0, ["$read", $rt_wrapFunction3(ji_ByteArrayInputStream_read), "$close", $rt_wrapFunction0(ji_ByteArrayInputStream_close)],
igbca_APILoader, "APILoader", 50, jl_Object, [], 0, 3, 0, 0, 0,
ooa_Type, "Type", 20, jl_Object, [], 4, 3, 0, 0, ["$equals", $rt_wrapFunction1(ooa_Type_equals), "$toString", $rt_wrapFunction0(ooa_Type_toString)],
igbcat_Argument, "Argument", 58, jl_Object, [], 0, 3, 0, 0, 0,
igbcau_ASMUtil, "ASMUtil", 57, jl_Object, [], 0, 3, 0, 0, 0,
jlr_Modifier, "Modifier", 17, jl_Object, [], 0, 3, 0, 0, 0,
ju_Map, "Map", 4, jl_Object, [], 3, 3, 0, 0, 0,
ju_AbstractMap, "AbstractMap", 4, jl_Object, [ju_Map], 1, 3, 0, 0, 0,
ju_HashMap, "HashMap", 4, ju_AbstractMap, [jl_Cloneable, ji_Serializable], 0, 3, 0, 0, 0,
igbcacig_ValueReturnCode, "ValueReturnCode", 53, igbcac_APIMethodCode, [], 1, 3, 0, 0, 0,
igbcaci_DisbandReturn, "DisbandReturn", 52, igbcacig_ValueReturnCode, [], 0, 3, 0, 0, 0,
igbcacigl_SetFieldCode, "SetFieldCode", 56, igbcacig_ValueReturnCode, [], 0, 3, 0, 0, 0,
igbcw_SetRunner, "SetRunner", 48, jl_Object, [], 0, 3, 0, 0, 0,
igbcacigc_MethodCallCode, "MethodCallCode", 54, igbcacig_ValueReturnCode, [], 0, 3, 0, 0, 0,
igbcw_CallRunner, "CallRunner", 48, jl_Object, [], 0, 3, 0, 0, 0,
igbcacigl_LoadConstantCode, "LoadConstantCode", 56, igbcacig_ValueReturnCode, [], 0, 3, 0, 0, 0,
igbcacigc_FieldGetCode, "FieldGetCode", 54, igbcacig_ValueReturnCode, [], 0, 3, 0, 0, 0,
igbcw_GetRunner, "GetRunner", 48, jl_Object, [], 0, 3, 0, 0, 0,
igbcaci_IfStatementCode, "IfStatementCode", 52, igbcac_APIMethodCode, [], 0, 3, 0, 0, 0,
igbcw_IfStatementHandler, "IfStatementHandler", 48, jl_Object, [], 0, 3, 0, 0, 0,
ji_PushbackInputStream, "PushbackInputStream", 15, ji_FilterInputStream, [], 0, 3, 0, 0, ["$close", $rt_wrapFunction0(ji_PushbackInputStream_close), "$read", $rt_wrapFunction3(ji_PushbackInputStream_read)],
juz_Inflater, "Inflater", 5, jl_Object, [], 0, 3, 0, 0, 0,
juz_Checksum, "Checksum", 5, jl_Object, [], 3, 3, 0, 0, 0,
juz_CRC32, "CRC32", 5, jl_Object, [juz_Checksum], 0, 3, 0, 0, 0,
jl_NullPointerException, "NullPointerException", 16, jl_RuntimeException, [], 0, 3, 0, 0, 0,
juz_ZipEntry, "ZipEntry", 5, jl_Object, [juz_ZipConstants, jl_Cloneable], 0, 3, 0, 0, 0,
ooat_Util, "Util", 21, jl_Object, [], 4, 0, 0, 0, 0,
ooat_InsnList, "InsnList", 21, jl_Object, [jl_Iterable], 0, 3, 0, 0, 0,
jl_UnsupportedOperationException, "UnsupportedOperationException", 16, jl_RuntimeException, [], 0, 3, 0, 0, 0,
juf_Function, "Function", 11, jl_Object, [], 3, 3, 0, 0, 0,
igbcw_CallRunner$run$lambda$_1_0, "CallRunner$run$lambda$_1_0", 48, jl_Object, [juf_Function], 0, 3, 0, 0, ["$apply", $rt_wrapFunction1(igbcw_CallRunner$run$lambda$_1_0_apply)],
igbcwp_SupportedMethodCalls, "SupportedMethodCalls", 49, jl_Object, [], 0, 3, 0, 0, 0,
igbcwp_FailedToRunCodeException, "FailedToRunCodeException", 49, jl_RuntimeException, [], 0, 3, 0, 0, 0,
igbcwp_SupportedFieldGets, "SupportedFieldGets", 49, jl_Object, [], 0, 3, 0, 0, 0,
jl_Boolean, "Boolean", 16, jl_Object, [ji_Serializable, jl_Comparable], 0, 3, 0, 0, ["$toString", $rt_wrapFunction0(jl_Boolean_toString), "$equals", $rt_wrapFunction1(jl_Boolean_equals)],
cjj_ZStream, "ZStream", 2, jl_Object, [], 128, 3, 0, 0, 0,
cjj_Inflater, "Inflater", 2, cjj_ZStream, [], 4, 3, 0, 0, 0,
ji_IOException, "IOException", 15, jl_Exception, [], 0, 3, 0, 0, 0,
cjj_GZIPException, "GZIPException", 2, ji_IOException, [], 0, 3, 0, 0, 0,
cjj_Checksum, "Checksum", 2, jl_Object, [], 3, 0, 0, 0, 0]);
$rt_metadata([cjj_CRC32, "CRC32", 2, jl_Object, [cjj_Checksum], 4, 3, 0, 0, ["$update", $rt_wrapFunction3(cjj_CRC32_update), "$reset0", $rt_wrapFunction0(cjj_CRC32_reset), "$reset1", $rt_wrapFunction1(cjj_CRC32_reset0), "$getValue", $rt_wrapFunction0(cjj_CRC32_getValue)],
jn_Buffer, "Buffer", 12, jl_Object, [], 1, 3, 0, 0, 0,
jn_ByteBuffer, "ByteBuffer", 12, jn_Buffer, [jl_Comparable], 1, 3, 0, 0, 0,
jl_Readable, "Readable", 16, jl_Object, [], 3, 3, 0, 0, 0,
jn_CharBuffer, "CharBuffer", 12, jn_Buffer, [jl_Comparable, jl_Appendable, jl_CharSequence, jl_Readable], 1, 3, 0, 0, 0,
jl_ReflectiveOperationException, "ReflectiveOperationException", 16, jl_Exception, [], 0, 3, 0, 0, 0,
jl_ClassNotFoundException, "ClassNotFoundException", 16, jl_ReflectiveOperationException, [], 0, 3, 0, 0, 0,
jn_ByteBufferImpl, "ByteBufferImpl", 12, jn_ByteBuffer, [], 0, 0, 0, 0, 0,
jnc_CodingErrorAction, "CodingErrorAction", 13, jl_Object, [], 0, 3, 0, 0, 0,
jnc_CharsetDecoder, "CharsetDecoder", 13, jl_Object, [], 1, 3, 0, 0, 0,
jnc_CharacterCodingException, "CharacterCodingException", 13, ji_IOException, [], 0, 3, 0, 0, 0,
ooa_Constants, "Constants", 20, jl_Object, [], 4, 0, 0, 0, 0,
jl_Long, "Long", 16, jl_Number, [jl_Comparable], 0, 3, 0, 0, ["$toString", $rt_wrapFunction0(jl_Long_toString), "$equals", $rt_wrapFunction1(jl_Long_equals)],
otcic_JSStderrPrintStream, "JSStderrPrintStream", 33, otcic_JsConsolePrintStream, [], 0, 3, 0, 0, ["$print", $rt_wrapFunction1(otcic_JSStderrPrintStream_print)],
jl_ConsoleInputStream, "ConsoleInputStream", 16, ji_InputStream, [], 0, 0, 0, 0, 0,
cjj_Adler32, "Adler32", 2, jl_Object, [cjj_Checksum], 4, 3, 0, 0, ["$reset1", $rt_wrapFunction1(cjj_Adler32_reset), "$reset0", $rt_wrapFunction0(cjj_Adler32_reset0), "$getValue", $rt_wrapFunction0(cjj_Adler32_getValue), "$update", $rt_wrapFunction3(cjj_Adler32_update)],
cjj_Inflate, "Inflate", 2, jl_Object, [], 4, 0, 0, 0, 0,
jn_ByteOrder, "ByteOrder", 12, jl_Object, [], 4, 3, 0, 0, 0,
jn_CharBufferImpl, "CharBufferImpl", 12, jn_CharBuffer, [], 1, 0, 0, 0, 0,
jn_CharBufferOverArray, "CharBufferOverArray", 12, jn_CharBufferImpl, [], 0, 0, 0, 0, 0,
jnc_CoderResult, "CoderResult", 13, jl_Object, [], 0, 3, 0, 0, 0,
jnc_CoderMalfunctionError, "CoderMalfunctionError", 13, jl_Error, [], 0, 3, 0, 0, 0,
jur_Pattern, "Pattern", 7, jl_Object, [ji_Serializable], 4, 3, 0, 0, 0,
jl_ClassLoader, "ClassLoader", 16, jl_Object, [], 1, 3, 0, jl_ClassLoader_$callClinit, 0,
ji_DataInput, "DataInput", 15, jl_Object, [], 3, 3, 0, 0, 0,
ji_DataInputStream, "DataInputStream", 15, ji_FilterInputStream, [ji_DataInput], 0, 3, 0, 0, 0,
ju_Dictionary, "Dictionary", 4, jl_Object, [], 1, 3, 0, 0, 0,
ju_Hashtable, "Hashtable", 4, ju_Dictionary, [ju_Map, jl_Cloneable, ji_Serializable], 0, 3, 0, 0, 0,
ju_Properties, "Properties", 4, ju_Hashtable, [], 0, 3, 0, 0, 0,
cjj_InfBlocks, "InfBlocks", 2, jl_Object, [], 4, 0, 0, 0, 0,
jur_MatchResult, "MatchResult", 7, jl_Object, [], 3, 3, 0, 0, 0,
jur_Matcher, "Matcher", 7, jl_Object, [jur_MatchResult], 4, 3, 0, 0, 0,
ji_EOFException, "EOFException", 15, ji_IOException, [], 0, 3, 0, 0, 0,
cjj_InfTree, "InfTree", 2, jl_Object, [], 4, 0, 0, 0, 0,
cjj_InfCodes, "InfCodes", 2, jl_Object, [], 4, 0, 0, 0, 0,
jl_SystemClassLoader, "SystemClassLoader", 16, jl_ClassLoader, [], 0, 0, 0, 0, 0,
ju_Enumeration, "Enumeration", 4, jl_Object, [], 3, 3, 0, 0, 0,
ju_Hashtable$1, "Hashtable$1", 4, jl_Object, [ju_Enumeration], 0, 0, 0, 0, 0,
ju_Iterator, "Iterator", 4, jl_Object, [], 3, 3, 0, 0, 0,
ju_Hashtable$2, "Hashtable$2", 4, jl_Object, [ju_Iterator], 0, 0, 0, 0, 0,
jur_AbstractSet, "AbstractSet", 7, jl_Object, [], 1, 0, 0, 0, ["$find0", $rt_wrapFunction3(jur_AbstractSet_find), "$findBack", $rt_wrapFunction4(jur_AbstractSet_findBack), "$getType1", $rt_wrapFunction0(jur_AbstractSet_getType), "$toString", $rt_wrapFunction0(jur_AbstractSet_toString), "$setNext", $rt_wrapFunction1(jur_AbstractSet_setNext), "$first", $rt_wrapFunction1(jur_AbstractSet_first), "$processBackRefReplacement", $rt_wrapFunction0(jur_AbstractSet_processBackRefReplacement), "$processSecondPass", $rt_wrapFunction0(jur_AbstractSet_processSecondPass)],
jur_MatchResultImpl, "MatchResultImpl", 7, jl_Object, [jur_MatchResult], 0, 0, 0, 0, 0,
jur_FSet, "FSet", 7, jur_AbstractSet, [], 0, 0, 0, jur_FSet_$callClinit, ["$matches1", $rt_wrapFunction3(jur_FSet_matches), "$getName", $rt_wrapFunction0(jur_FSet_getName), "$hasConsumed", $rt_wrapFunction1(jur_FSet_hasConsumed)],
jur_Lexer, "Lexer", 7, jl_Object, [], 0, 0, 0, 0, 0,
jur_PatternSyntaxException, "PatternSyntaxException", 7, jl_IllegalArgumentException, [], 0, 3, 0, 0, ["$getMessage", $rt_wrapFunction0(jur_PatternSyntaxException_getMessage)],
ju_Map$Entry, "Map$Entry", 4, jl_Object, [], 3, 3, 0, 0, 0,
ju_MapEntry, "MapEntry", 4, jl_Object, [ju_Map$Entry, jl_Cloneable], 0, 0, 0, 0, 0,
ju_Hashtable$Entry, "Hashtable$Entry", 4, ju_MapEntry, [], 0, 0, 0, 0, 0,
jur_NonCapFSet, "NonCapFSet", 7, jur_FSet, [], 0, 0, 0, 0, ["$matches1", $rt_wrapFunction3(jur_NonCapFSet_matches), "$getName", $rt_wrapFunction0(jur_NonCapFSet_getName), "$hasConsumed", $rt_wrapFunction1(jur_NonCapFSet_hasConsumed)],
jur_AheadFSet, "AheadFSet", 7, jur_FSet, [], 0, 0, 0, 0, ["$matches1", $rt_wrapFunction3(jur_AheadFSet_matches), "$getName", $rt_wrapFunction0(jur_AheadFSet_getName)]]);
$rt_metadata([jur_BehindFSet, "BehindFSet", 7, jur_FSet, [], 0, 0, 0, 0, ["$matches1", $rt_wrapFunction3(jur_BehindFSet_matches), "$getName", $rt_wrapFunction0(jur_BehindFSet_getName)],
jur_AtomicFSet, "AtomicFSet", 7, jur_FSet, [], 0, 0, 0, 0, ["$matches1", $rt_wrapFunction3(jur_AtomicFSet_matches), "$getName", $rt_wrapFunction0(jur_AtomicFSet_getName), "$hasConsumed", $rt_wrapFunction1(jur_AtomicFSet_hasConsumed)],
jur_FinalSet, "FinalSet", 7, jur_FSet, [], 0, 0, 0, 0, ["$matches1", $rt_wrapFunction3(jur_FinalSet_matches), "$getName", $rt_wrapFunction0(jur_FinalSet_getName)],
jur_LeafSet, "LeafSet", 7, jur_AbstractSet, [], 1, 0, 0, 0, ["$matches1", $rt_wrapFunction3(jur_LeafSet_matches), "$charCount", $rt_wrapFunction0(jur_LeafSet_charCount), "$hasConsumed", $rt_wrapFunction1(jur_LeafSet_hasConsumed)],
jur_EmptySet, "EmptySet", 7, jur_LeafSet, [], 0, 0, 0, 0, ["$accepts", $rt_wrapFunction2(jur_EmptySet_accepts), "$find0", $rt_wrapFunction3(jur_EmptySet_find), "$findBack", $rt_wrapFunction4(jur_EmptySet_findBack), "$getName", $rt_wrapFunction0(jur_EmptySet_getName), "$hasConsumed", $rt_wrapFunction1(jur_EmptySet_hasConsumed)],
jur_JointSet, "JointSet", 7, jur_AbstractSet, [], 0, 0, 0, 0, ["$matches1", $rt_wrapFunction3(jur_JointSet_matches), "$setNext", $rt_wrapFunction1(jur_JointSet_setNext), "$getName", $rt_wrapFunction0(jur_JointSet_getName), "$first", $rt_wrapFunction1(jur_JointSet_first), "$hasConsumed", $rt_wrapFunction1(jur_JointSet_hasConsumed), "$processSecondPass", $rt_wrapFunction0(jur_JointSet_processSecondPass)],
jur_NonCapJointSet, "NonCapJointSet", 7, jur_JointSet, [], 0, 0, 0, 0, ["$matches1", $rt_wrapFunction3(jur_NonCapJointSet_matches), "$getName", $rt_wrapFunction0(jur_NonCapJointSet_getName), "$hasConsumed", $rt_wrapFunction1(jur_NonCapJointSet_hasConsumed)],
jur_AtomicJointSet, "AtomicJointSet", 7, jur_NonCapJointSet, [], 0, 0, 0, 0, ["$matches1", $rt_wrapFunction3(jur_AtomicJointSet_matches), "$setNext", $rt_wrapFunction1(jur_AtomicJointSet_setNext), "$getName", $rt_wrapFunction0(jur_AtomicJointSet_getName)],
jur_PositiveLookAhead, "PositiveLookAhead", 7, jur_AtomicJointSet, [], 0, 0, 0, 0, ["$matches1", $rt_wrapFunction3(jur_PositiveLookAhead_matches), "$hasConsumed", $rt_wrapFunction1(jur_PositiveLookAhead_hasConsumed), "$getName", $rt_wrapFunction0(jur_PositiveLookAhead_getName)],
jur_NegativeLookAhead, "NegativeLookAhead", 7, jur_AtomicJointSet, [], 0, 0, 0, 0, ["$matches1", $rt_wrapFunction3(jur_NegativeLookAhead_matches), "$hasConsumed", $rt_wrapFunction1(jur_NegativeLookAhead_hasConsumed), "$getName", $rt_wrapFunction0(jur_NegativeLookAhead_getName)],
jur_PositiveLookBehind, "PositiveLookBehind", 7, jur_AtomicJointSet, [], 0, 0, 0, 0, ["$matches1", $rt_wrapFunction3(jur_PositiveLookBehind_matches), "$hasConsumed", $rt_wrapFunction1(jur_PositiveLookBehind_hasConsumed), "$getName", $rt_wrapFunction0(jur_PositiveLookBehind_getName)],
jur_NegativeLookBehind, "NegativeLookBehind", 7, jur_AtomicJointSet, [], 0, 0, 0, 0, ["$matches1", $rt_wrapFunction3(jur_NegativeLookBehind_matches), "$hasConsumed", $rt_wrapFunction1(jur_NegativeLookBehind_hasConsumed), "$getName", $rt_wrapFunction0(jur_NegativeLookBehind_getName)],
jur_SingleSet, "SingleSet", 7, jur_JointSet, [], 0, 0, 0, 0, ["$matches1", $rt_wrapFunction3(jur_SingleSet_matches), "$find0", $rt_wrapFunction3(jur_SingleSet_find), "$findBack", $rt_wrapFunction4(jur_SingleSet_findBack), "$first", $rt_wrapFunction1(jur_SingleSet_first), "$processBackRefReplacement", $rt_wrapFunction0(jur_SingleSet_processBackRefReplacement), "$processSecondPass", $rt_wrapFunction0(jur_SingleSet_processSecondPass)],
jlr_Array, "Array", 17, jl_Object, [], 4, 3, 0, 0, 0,
jl_ArrayStoreException, "ArrayStoreException", 16, jl_RuntimeException, [], 0, 3, 0, 0, 0,
jur_SpecialToken, "SpecialToken", 7, jl_Object, [], 1, 0, 0, 0, 0,
jur_AbstractCharClass, "AbstractCharClass", 7, jur_SpecialToken, [], 1, 0, 0, 0, ["$getBits", $rt_wrapFunction0(jur_AbstractCharClass_getBits), "$getLowHighSurrogates", $rt_wrapFunction0(jur_AbstractCharClass_getLowHighSurrogates), "$getInstance0", $rt_wrapFunction0(jur_AbstractCharClass_getInstance), "$hasUCI", $rt_wrapFunction0(jur_AbstractCharClass_hasUCI)],
ju_MissingResourceException, "MissingResourceException", 4, jl_RuntimeException, [], 0, 3, 0, 0, 0,
jur_CharClass, "CharClass", 7, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_CharClass_contains), "$getBits", $rt_wrapFunction0(jur_CharClass_getBits), "$getLowHighSurrogates", $rt_wrapFunction0(jur_CharClass_getLowHighSurrogates), "$getInstance0", $rt_wrapFunction0(jur_CharClass_getInstance), "$toString", $rt_wrapFunction0(jur_CharClass_toString), "$hasUCI", $rt_wrapFunction0(jur_CharClass_hasUCI)],
jur_QuantifierSet, "QuantifierSet", 7, jur_AbstractSet, [], 1, 0, 0, 0, ["$first", $rt_wrapFunction1(jur_QuantifierSet_first), "$hasConsumed", $rt_wrapFunction1(jur_QuantifierSet_hasConsumed), "$processSecondPass", $rt_wrapFunction0(jur_QuantifierSet_processSecondPass)],
jur_LeafQuantifierSet, "LeafQuantifierSet", 7, jur_QuantifierSet, [], 0, 0, 0, 0, ["$matches1", $rt_wrapFunction3(jur_LeafQuantifierSet_matches), "$getName", $rt_wrapFunction0(jur_LeafQuantifierSet_getName)],
jur_CompositeQuantifierSet, "CompositeQuantifierSet", 7, jur_LeafQuantifierSet, [], 0, 0, 0, 0, ["$matches1", $rt_wrapFunction3(jur_CompositeQuantifierSet_matches), "$getName", $rt_wrapFunction0(jur_CompositeQuantifierSet_getName)],
jur_GroupQuantifierSet, "GroupQuantifierSet", 7, jur_QuantifierSet, [], 0, 0, 0, 0, ["$matches1", $rt_wrapFunction3(jur_GroupQuantifierSet_matches), "$getName", $rt_wrapFunction0(jur_GroupQuantifierSet_getName)],
jur_AltQuantifierSet, "AltQuantifierSet", 7, jur_LeafQuantifierSet, [], 0, 0, 0, 0, ["$matches1", $rt_wrapFunction3(jur_AltQuantifierSet_matches), "$setNext", $rt_wrapFunction1(jur_AltQuantifierSet_setNext)],
jur_UnifiedQuantifierSet, "UnifiedQuantifierSet", 7, jur_LeafQuantifierSet, [], 0, 0, 0, 0, ["$matches1", $rt_wrapFunction3(jur_UnifiedQuantifierSet_matches), "$find0", $rt_wrapFunction3(jur_UnifiedQuantifierSet_find)],
jur_AbstractCharClass$PredefinedCharacterClasses, "AbstractCharClass$PredefinedCharacterClasses", 7, jl_Object, [], 4, 0, 0, 0, 0,
jur_AbstractCharClass$LazyCharClass, "AbstractCharClass$LazyCharClass", 7, jl_Object, [], 1, 0, 0, 0, 0,
jl_NumberFormatException, "NumberFormatException", 16, jl_IllegalArgumentException, [], 0, 3, 0, 0, 0,
jur_Quantifier, "Quantifier", 7, jur_SpecialToken, [jl_Cloneable], 0, 0, 0, 0, ["$toString", $rt_wrapFunction0(jur_Quantifier_toString)],
jur_FSet$PossessiveFSet, "FSet$PossessiveFSet", 7, jur_AbstractSet, [], 0, 0, 0, 0, ["$matches1", $rt_wrapFunction3(jur_FSet$PossessiveFSet_matches), "$getName", $rt_wrapFunction0(jur_FSet$PossessiveFSet_getName), "$hasConsumed", $rt_wrapFunction1(jur_FSet$PossessiveFSet_hasConsumed)],
ju_BitSet, "BitSet", 4, jl_Object, [jl_Cloneable, ji_Serializable], 0, 3, 0, 0, 0,
jur_LowHighSurrogateRangeSet, "LowHighSurrogateRangeSet", 7, jur_JointSet, [], 0, 0, 0, 0, ["$getName", $rt_wrapFunction0(jur_LowHighSurrogateRangeSet_getName)],
jur_CompositeRangeSet, "CompositeRangeSet", 7, jur_JointSet, [], 0, 0, 0, 0, ["$matches1", $rt_wrapFunction3(jur_CompositeRangeSet_matches), "$setNext", $rt_wrapFunction1(jur_CompositeRangeSet_setNext), "$getName", $rt_wrapFunction0(jur_CompositeRangeSet_getName), "$hasConsumed", $rt_wrapFunction1(jur_CompositeRangeSet_hasConsumed), "$first", $rt_wrapFunction1(jur_CompositeRangeSet_first)],
jur_SupplRangeSet, "SupplRangeSet", 7, jur_JointSet, [], 0, 0, 0, 0, ["$matches1", $rt_wrapFunction3(jur_SupplRangeSet_matches), "$getName", $rt_wrapFunction0(jur_SupplRangeSet_getName), "$contains1", $rt_wrapFunction1(jur_SupplRangeSet_contains), "$first", $rt_wrapFunction1(jur_SupplRangeSet_first), "$setNext", $rt_wrapFunction1(jur_SupplRangeSet_setNext), "$hasConsumed", $rt_wrapFunction1(jur_SupplRangeSet_hasConsumed)],
jur_UCISupplRangeSet, "UCISupplRangeSet", 7, jur_SupplRangeSet, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_UCISupplRangeSet_contains), "$getName", $rt_wrapFunction0(jur_UCISupplRangeSet_getName)],
jur_UCIRangeSet, "UCIRangeSet", 7, jur_LeafSet, [], 0, 0, 0, 0, ["$accepts", $rt_wrapFunction2(jur_UCIRangeSet_accepts), "$getName", $rt_wrapFunction0(jur_UCIRangeSet_getName)],
jur_RangeSet, "RangeSet", 7, jur_LeafSet, [], 0, 0, 0, 0, ["$accepts", $rt_wrapFunction2(jur_RangeSet_accepts), "$getName", $rt_wrapFunction0(jur_RangeSet_getName), "$first", $rt_wrapFunction1(jur_RangeSet_first)],
jur_HangulDecomposedCharSet, "HangulDecomposedCharSet", 7, jur_JointSet, [], 0, 0, 0, 0, ["$setNext", $rt_wrapFunction1(jur_HangulDecomposedCharSet_setNext), "$getName", $rt_wrapFunction0(jur_HangulDecomposedCharSet_getName), "$matches1", $rt_wrapFunction3(jur_HangulDecomposedCharSet_matches), "$first", $rt_wrapFunction1(jur_HangulDecomposedCharSet_first), "$hasConsumed", $rt_wrapFunction1(jur_HangulDecomposedCharSet_hasConsumed)],
jur_CharSet, "CharSet", 7, jur_LeafSet, [], 0, 0, 0, 0, ["$charCount", $rt_wrapFunction0(jur_CharSet_charCount), "$accepts", $rt_wrapFunction2(jur_CharSet_accepts), "$find0", $rt_wrapFunction3(jur_CharSet_find), "$findBack", $rt_wrapFunction4(jur_CharSet_findBack), "$getName", $rt_wrapFunction0(jur_CharSet_getName), "$first", $rt_wrapFunction1(jur_CharSet_first)],
jur_UCICharSet, "UCICharSet", 7, jur_LeafSet, [], 0, 0, 0, 0, ["$accepts", $rt_wrapFunction2(jur_UCICharSet_accepts), "$getName", $rt_wrapFunction0(jur_UCICharSet_getName)],
jur_CICharSet, "CICharSet", 7, jur_LeafSet, [], 0, 0, 0, 0, ["$accepts", $rt_wrapFunction2(jur_CICharSet_accepts), "$getName", $rt_wrapFunction0(jur_CICharSet_getName)],
jur_DecomposedCharSet, "DecomposedCharSet", 7, jur_JointSet, [], 0, 0, 0, 0, ["$setNext", $rt_wrapFunction1(jur_DecomposedCharSet_setNext), "$matches1", $rt_wrapFunction3(jur_DecomposedCharSet_matches), "$getName", $rt_wrapFunction0(jur_DecomposedCharSet_getName), "$first", $rt_wrapFunction1(jur_DecomposedCharSet_first), "$hasConsumed", $rt_wrapFunction1(jur_DecomposedCharSet_hasConsumed)],
jur_UCIDecomposedCharSet, "UCIDecomposedCharSet", 7, jur_DecomposedCharSet, [], 0, 0, 0, 0, 0,
jur_CIDecomposedCharSet, "CIDecomposedCharSet", 7, jur_DecomposedCharSet, [], 0, 0, 0, 0, 0,
jur_PossessiveGroupQuantifierSet, "PossessiveGroupQuantifierSet", 7, jur_GroupQuantifierSet, [], 0, 0, 0, 0, ["$matches1", $rt_wrapFunction3(jur_PossessiveGroupQuantifierSet_matches)],
jur_PosPlusGroupQuantifierSet, "PosPlusGroupQuantifierSet", 7, jur_GroupQuantifierSet, [], 0, 0, 0, 0, ["$matches1", $rt_wrapFunction3(jur_PosPlusGroupQuantifierSet_matches)],
jur_AltGroupQuantifierSet, "AltGroupQuantifierSet", 7, jur_GroupQuantifierSet, [], 0, 0, 0, 0, ["$matches1", $rt_wrapFunction3(jur_AltGroupQuantifierSet_matches), "$setNext", $rt_wrapFunction1(jur_AltGroupQuantifierSet_setNext)],
jur_PosAltGroupQuantifierSet, "PosAltGroupQuantifierSet", 7, jur_AltGroupQuantifierSet, [], 0, 0, 0, 0, ["$matches1", $rt_wrapFunction3(jur_PosAltGroupQuantifierSet_matches), "$setNext", $rt_wrapFunction1(jur_PosAltGroupQuantifierSet_setNext)],
jur_CompositeGroupQuantifierSet, "CompositeGroupQuantifierSet", 7, jur_GroupQuantifierSet, [], 0, 0, 0, 0, ["$matches1", $rt_wrapFunction3(jur_CompositeGroupQuantifierSet_matches), "$getName", $rt_wrapFunction0(jur_CompositeGroupQuantifierSet_getName)],
jur_PosCompositeGroupQuantifierSet, "PosCompositeGroupQuantifierSet", 7, jur_CompositeGroupQuantifierSet, [], 0, 0, 0, 0, ["$matches1", $rt_wrapFunction3(jur_PosCompositeGroupQuantifierSet_matches)]]);
$rt_metadata([jur_ReluctantGroupQuantifierSet, "ReluctantGroupQuantifierSet", 7, jur_GroupQuantifierSet, [], 0, 0, 0, 0, ["$matches1", $rt_wrapFunction3(jur_ReluctantGroupQuantifierSet_matches)],
jur_RelAltGroupQuantifierSet, "RelAltGroupQuantifierSet", 7, jur_AltGroupQuantifierSet, [], 0, 0, 0, 0, ["$matches1", $rt_wrapFunction3(jur_RelAltGroupQuantifierSet_matches)],
jur_RelCompositeGroupQuantifierSet, "RelCompositeGroupQuantifierSet", 7, jur_CompositeGroupQuantifierSet, [], 0, 0, 0, 0, ["$matches1", $rt_wrapFunction3(jur_RelCompositeGroupQuantifierSet_matches)],
jur_DotAllQuantifierSet, "DotAllQuantifierSet", 7, jur_QuantifierSet, [], 0, 0, 0, 0, ["$matches1", $rt_wrapFunction3(jur_DotAllQuantifierSet_matches), "$find0", $rt_wrapFunction3(jur_DotAllQuantifierSet_find), "$getName", $rt_wrapFunction0(jur_DotAllQuantifierSet_getName)],
jur_DotQuantifierSet, "DotQuantifierSet", 7, jur_QuantifierSet, [], 0, 0, 0, 0, ["$matches1", $rt_wrapFunction3(jur_DotQuantifierSet_matches), "$find0", $rt_wrapFunction3(jur_DotQuantifierSet_find), "$getName", $rt_wrapFunction0(jur_DotQuantifierSet_getName)],
jur_AbstractLineTerminator, "AbstractLineTerminator", 7, jl_Object, [], 1, 0, 0, 0, 0,
jur_PossessiveQuantifierSet, "PossessiveQuantifierSet", 7, jur_LeafQuantifierSet, [], 0, 0, 0, 0, ["$matches1", $rt_wrapFunction3(jur_PossessiveQuantifierSet_matches)],
jur_PossessiveAltQuantifierSet, "PossessiveAltQuantifierSet", 7, jur_AltQuantifierSet, [], 0, 0, 0, 0, ["$matches1", $rt_wrapFunction3(jur_PossessiveAltQuantifierSet_matches)],
jur_PossessiveCompositeQuantifierSet, "PossessiveCompositeQuantifierSet", 7, jur_CompositeQuantifierSet, [], 0, 0, 0, 0, ["$matches1", $rt_wrapFunction3(jur_PossessiveCompositeQuantifierSet_matches)],
jur_ReluctantQuantifierSet, "ReluctantQuantifierSet", 7, jur_LeafQuantifierSet, [], 0, 0, 0, 0, ["$matches1", $rt_wrapFunction3(jur_ReluctantQuantifierSet_matches)],
jur_ReluctantAltQuantifierSet, "ReluctantAltQuantifierSet", 7, jur_AltQuantifierSet, [], 0, 0, 0, 0, ["$matches1", $rt_wrapFunction3(jur_ReluctantAltQuantifierSet_matches)],
jur_ReluctantCompositeQuantifierSet, "ReluctantCompositeQuantifierSet", 7, jur_CompositeQuantifierSet, [], 0, 0, 0, 0, ["$matches1", $rt_wrapFunction3(jur_ReluctantCompositeQuantifierSet_matches)],
jur_SOLSet, "SOLSet", 7, jur_AbstractSet, [], 4, 0, 0, 0, ["$matches1", $rt_wrapFunction3(jur_SOLSet_matches), "$hasConsumed", $rt_wrapFunction1(jur_SOLSet_hasConsumed), "$getName", $rt_wrapFunction0(jur_SOLSet_getName)],
jur_WordBoundary, "WordBoundary", 7, jur_AbstractSet, [], 0, 0, 0, 0, ["$matches1", $rt_wrapFunction3(jur_WordBoundary_matches), "$hasConsumed", $rt_wrapFunction1(jur_WordBoundary_hasConsumed), "$getName", $rt_wrapFunction0(jur_WordBoundary_getName)],
jur_PreviousMatch, "PreviousMatch", 7, jur_AbstractSet, [], 0, 0, 0, 0, ["$matches1", $rt_wrapFunction3(jur_PreviousMatch_matches), "$hasConsumed", $rt_wrapFunction1(jur_PreviousMatch_hasConsumed), "$getName", $rt_wrapFunction0(jur_PreviousMatch_getName)],
jur_EOLSet, "EOLSet", 7, jur_AbstractSet, [], 4, 0, 0, 0, ["$matches1", $rt_wrapFunction3(jur_EOLSet_matches), "$hasConsumed", $rt_wrapFunction1(jur_EOLSet_hasConsumed), "$getName", $rt_wrapFunction0(jur_EOLSet_getName)],
jur_EOISet, "EOISet", 7, jur_AbstractSet, [], 0, 0, 0, 0, ["$matches1", $rt_wrapFunction3(jur_EOISet_matches), "$hasConsumed", $rt_wrapFunction1(jur_EOISet_hasConsumed), "$getName", $rt_wrapFunction0(jur_EOISet_getName)],
jur_MultiLineSOLSet, "MultiLineSOLSet", 7, jur_AbstractSet, [], 0, 0, 0, 0, ["$matches1", $rt_wrapFunction3(jur_MultiLineSOLSet_matches), "$hasConsumed", $rt_wrapFunction1(jur_MultiLineSOLSet_hasConsumed), "$getName", $rt_wrapFunction0(jur_MultiLineSOLSet_getName)],
jur_DotAllSet, "DotAllSet", 7, jur_JointSet, [], 0, 0, 0, 0, ["$matches1", $rt_wrapFunction3(jur_DotAllSet_matches), "$getName", $rt_wrapFunction0(jur_DotAllSet_getName), "$setNext", $rt_wrapFunction1(jur_DotAllSet_setNext), "$getType1", $rt_wrapFunction0(jur_DotAllSet_getType), "$hasConsumed", $rt_wrapFunction1(jur_DotAllSet_hasConsumed)],
jur_DotSet, "DotSet", 7, jur_JointSet, [], 4, 0, 0, 0, ["$matches1", $rt_wrapFunction3(jur_DotSet_matches), "$getName", $rt_wrapFunction0(jur_DotSet_getName), "$setNext", $rt_wrapFunction1(jur_DotSet_setNext), "$getType1", $rt_wrapFunction0(jur_DotSet_getType), "$hasConsumed", $rt_wrapFunction1(jur_DotSet_hasConsumed)],
jur_UEOLSet, "UEOLSet", 7, jur_AbstractSet, [], 4, 0, 0, 0, ["$matches1", $rt_wrapFunction3(jur_UEOLSet_matches), "$hasConsumed", $rt_wrapFunction1(jur_UEOLSet_hasConsumed), "$getName", $rt_wrapFunction0(jur_UEOLSet_getName)],
jur_UMultiLineEOLSet, "UMultiLineEOLSet", 7, jur_AbstractSet, [], 0, 0, 0, 0, ["$matches1", $rt_wrapFunction3(jur_UMultiLineEOLSet_matches), "$hasConsumed", $rt_wrapFunction1(jur_UMultiLineEOLSet_hasConsumed), "$getName", $rt_wrapFunction0(jur_UMultiLineEOLSet_getName)],
jur_MultiLineEOLSet, "MultiLineEOLSet", 7, jur_AbstractSet, [], 0, 0, 0, 0, ["$matches1", $rt_wrapFunction3(jur_MultiLineEOLSet_matches), "$hasConsumed", $rt_wrapFunction1(jur_MultiLineEOLSet_hasConsumed), "$getName", $rt_wrapFunction0(jur_MultiLineEOLSet_getName)],
jur_CIBackReferenceSet, "CIBackReferenceSet", 7, jur_JointSet, [], 0, 0, 0, 0, ["$matches1", $rt_wrapFunction3(jur_CIBackReferenceSet_matches), "$setNext", $rt_wrapFunction1(jur_CIBackReferenceSet_setNext), "$getName", $rt_wrapFunction0(jur_CIBackReferenceSet_getName), "$hasConsumed", $rt_wrapFunction1(jur_CIBackReferenceSet_hasConsumed)],
jur_BackReferenceSet, "BackReferenceSet", 7, jur_CIBackReferenceSet, [], 0, 0, 0, 0, ["$matches1", $rt_wrapFunction3(jur_BackReferenceSet_matches), "$find0", $rt_wrapFunction3(jur_BackReferenceSet_find), "$findBack", $rt_wrapFunction4(jur_BackReferenceSet_findBack), "$first", $rt_wrapFunction1(jur_BackReferenceSet_first), "$getName", $rt_wrapFunction0(jur_BackReferenceSet_getName)],
jur_UCIBackReferenceSet, "UCIBackReferenceSet", 7, jur_CIBackReferenceSet, [], 0, 0, 0, 0, ["$matches1", $rt_wrapFunction3(jur_UCIBackReferenceSet_matches), "$getName", $rt_wrapFunction0(jur_UCIBackReferenceSet_getName)],
jl_StringBuffer, "StringBuffer", 16, jl_AbstractStringBuilder, [jl_Appendable], 0, 3, 0, 0, ["$insert3", $rt_wrapFunction4(jl_StringBuffer_insert0), "$append5", $rt_wrapFunction3(jl_StringBuffer_append), "$insert2", $rt_wrapFunction4(jl_StringBuffer_insert1), "$append4", $rt_wrapFunction3(jl_StringBuffer_append0), "$ensureCapacity", $rt_wrapFunction1(jl_StringBuffer_ensureCapacity), "$insert1", $rt_wrapFunction2(jl_StringBuffer_insert2), "$insert", $rt_wrapFunction2(jl_StringBuffer_insert)],
jur_SequenceSet, "SequenceSet", 7, jur_LeafSet, [], 0, 0, 0, 0, ["$accepts", $rt_wrapFunction2(jur_SequenceSet_accepts), "$find0", $rt_wrapFunction3(jur_SequenceSet_find), "$findBack", $rt_wrapFunction4(jur_SequenceSet_findBack), "$getName", $rt_wrapFunction0(jur_SequenceSet_getName), "$first", $rt_wrapFunction1(jur_SequenceSet_first)],
jur_UCISequenceSet, "UCISequenceSet", 7, jur_LeafSet, [], 0, 0, 0, 0, ["$accepts", $rt_wrapFunction2(jur_UCISequenceSet_accepts), "$getName", $rt_wrapFunction0(jur_UCISequenceSet_getName)],
jur_CISequenceSet, "CISequenceSet", 7, jur_LeafSet, [], 0, 0, 0, 0, ["$accepts", $rt_wrapFunction2(jur_CISequenceSet_accepts), "$getName", $rt_wrapFunction0(jur_CISequenceSet_getName)],
jur_UCISupplCharSet, "UCISupplCharSet", 7, jur_LeafSet, [], 0, 0, 0, 0, ["$accepts", $rt_wrapFunction2(jur_UCISupplCharSet_accepts), "$getName", $rt_wrapFunction0(jur_UCISupplCharSet_getName)],
jur_LowSurrogateCharSet, "LowSurrogateCharSet", 7, jur_JointSet, [], 0, 0, 0, 0, ["$setNext", $rt_wrapFunction1(jur_LowSurrogateCharSet_setNext), "$matches1", $rt_wrapFunction3(jur_LowSurrogateCharSet_matches), "$find0", $rt_wrapFunction3(jur_LowSurrogateCharSet_find), "$findBack", $rt_wrapFunction4(jur_LowSurrogateCharSet_findBack), "$getName", $rt_wrapFunction0(jur_LowSurrogateCharSet_getName), "$first", $rt_wrapFunction1(jur_LowSurrogateCharSet_first), "$hasConsumed", $rt_wrapFunction1(jur_LowSurrogateCharSet_hasConsumed)],
jur_HighSurrogateCharSet, "HighSurrogateCharSet", 7, jur_JointSet, [], 0, 0, 0, 0, ["$setNext", $rt_wrapFunction1(jur_HighSurrogateCharSet_setNext), "$matches1", $rt_wrapFunction3(jur_HighSurrogateCharSet_matches), "$find0", $rt_wrapFunction3(jur_HighSurrogateCharSet_find), "$findBack", $rt_wrapFunction4(jur_HighSurrogateCharSet_findBack), "$getName", $rt_wrapFunction0(jur_HighSurrogateCharSet_getName), "$first", $rt_wrapFunction1(jur_HighSurrogateCharSet_first), "$hasConsumed", $rt_wrapFunction1(jur_HighSurrogateCharSet_hasConsumed)],
jur_SupplCharSet, "SupplCharSet", 7, jur_LeafSet, [], 0, 0, 0, 0, ["$accepts", $rt_wrapFunction2(jur_SupplCharSet_accepts), "$find0", $rt_wrapFunction3(jur_SupplCharSet_find), "$findBack", $rt_wrapFunction4(jur_SupplCharSet_findBack), "$getName", $rt_wrapFunction0(jur_SupplCharSet_getName), "$first", $rt_wrapFunction1(jur_SupplCharSet_first)],
jur_AbstractLineTerminator$1, "AbstractLineTerminator$1", 7, jur_AbstractLineTerminator, [], 0, 0, 0, 0, ["$isLineTerminator", $rt_wrapFunction1(jur_AbstractLineTerminator$1_isLineTerminator), "$isAfterLineTerminator", $rt_wrapFunction2(jur_AbstractLineTerminator$1_isAfterLineTerminator)],
jur_AbstractLineTerminator$2, "AbstractLineTerminator$2", 7, jur_AbstractLineTerminator, [], 0, 0, 0, 0, ["$isLineTerminator", $rt_wrapFunction1(jur_AbstractLineTerminator$2_isLineTerminator), "$isAfterLineTerminator", $rt_wrapFunction2(jur_AbstractLineTerminator$2_isAfterLineTerminator)],
jur_SequenceSet$IntHash, "SequenceSet$IntHash", 7, jl_Object, [], 0, 0, 0, 0, 0,
jur_AbstractCharClass$LazySpace, "AbstractCharClass$LazySpace", 7, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazySpace_computeValue)],
jur_AbstractCharClass$LazyDigit, "AbstractCharClass$LazyDigit", 7, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyDigit_computeValue)],
jur_AbstractCharClass$LazyLower, "AbstractCharClass$LazyLower", 7, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyLower_computeValue)],
jur_AbstractCharClass$LazyUpper, "AbstractCharClass$LazyUpper", 7, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyUpper_computeValue)],
jur_AbstractCharClass$LazyASCII, "AbstractCharClass$LazyASCII", 7, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyASCII_computeValue)],
jur_AbstractCharClass$LazyAlpha, "AbstractCharClass$LazyAlpha", 7, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyAlpha_computeValue)],
jur_AbstractCharClass$LazyAlnum, "AbstractCharClass$LazyAlnum", 7, jur_AbstractCharClass$LazyAlpha, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyAlnum_computeValue)],
jur_AbstractCharClass$LazyPunct, "AbstractCharClass$LazyPunct", 7, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyPunct_computeValue)],
jur_AbstractCharClass$LazyGraph, "AbstractCharClass$LazyGraph", 7, jur_AbstractCharClass$LazyAlnum, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyGraph_computeValue)],
jur_AbstractCharClass$LazyPrint, "AbstractCharClass$LazyPrint", 7, jur_AbstractCharClass$LazyGraph, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyPrint_computeValue)],
jur_AbstractCharClass$LazyBlank, "AbstractCharClass$LazyBlank", 7, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyBlank_computeValue)],
jur_AbstractCharClass$LazyCntrl, "AbstractCharClass$LazyCntrl", 7, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyCntrl_computeValue)],
jur_AbstractCharClass$LazyXDigit, "AbstractCharClass$LazyXDigit", 7, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyXDigit_computeValue)]]);
$rt_metadata([jur_AbstractCharClass$LazyJavaLowerCase, "AbstractCharClass$LazyJavaLowerCase", 7, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaLowerCase_computeValue)],
jur_AbstractCharClass$LazyJavaUpperCase, "AbstractCharClass$LazyJavaUpperCase", 7, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaUpperCase_computeValue)],
jur_AbstractCharClass$LazyJavaWhitespace, "AbstractCharClass$LazyJavaWhitespace", 7, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaWhitespace_computeValue)],
jur_AbstractCharClass$LazyJavaMirrored, "AbstractCharClass$LazyJavaMirrored", 7, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaMirrored_computeValue)],
jur_AbstractCharClass$LazyJavaDefined, "AbstractCharClass$LazyJavaDefined", 7, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaDefined_computeValue)],
jur_AbstractCharClass$LazyJavaDigit, "AbstractCharClass$LazyJavaDigit", 7, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaDigit_computeValue)],
jur_AbstractCharClass$LazyJavaIdentifierIgnorable, "AbstractCharClass$LazyJavaIdentifierIgnorable", 7, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaIdentifierIgnorable_computeValue)],
jur_AbstractCharClass$LazyJavaISOControl, "AbstractCharClass$LazyJavaISOControl", 7, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaISOControl_computeValue)],
jur_AbstractCharClass$LazyJavaJavaIdentifierPart, "AbstractCharClass$LazyJavaJavaIdentifierPart", 7, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaJavaIdentifierPart_computeValue)],
jur_AbstractCharClass$LazyJavaJavaIdentifierStart, "AbstractCharClass$LazyJavaJavaIdentifierStart", 7, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaJavaIdentifierStart_computeValue)],
jur_AbstractCharClass$LazyJavaLetter, "AbstractCharClass$LazyJavaLetter", 7, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaLetter_computeValue)],
jur_AbstractCharClass$LazyJavaLetterOrDigit, "AbstractCharClass$LazyJavaLetterOrDigit", 7, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaLetterOrDigit_computeValue)],
jur_AbstractCharClass$LazyJavaSpaceChar, "AbstractCharClass$LazyJavaSpaceChar", 7, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaSpaceChar_computeValue)],
jur_AbstractCharClass$LazyJavaTitleCase, "AbstractCharClass$LazyJavaTitleCase", 7, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaTitleCase_computeValue)],
jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart, "AbstractCharClass$LazyJavaUnicodeIdentifierPart", 7, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart_computeValue)],
jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart, "AbstractCharClass$LazyJavaUnicodeIdentifierStart", 7, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart_computeValue)],
jur_AbstractCharClass$LazyWord, "AbstractCharClass$LazyWord", 7, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyWord_computeValue)],
jur_AbstractCharClass$LazyNonWord, "AbstractCharClass$LazyNonWord", 7, jur_AbstractCharClass$LazyWord, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyNonWord_computeValue)],
jur_AbstractCharClass$LazyNonSpace, "AbstractCharClass$LazyNonSpace", 7, jur_AbstractCharClass$LazySpace, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyNonSpace_computeValue)],
jur_AbstractCharClass$LazyNonDigit, "AbstractCharClass$LazyNonDigit", 7, jur_AbstractCharClass$LazyDigit, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyNonDigit_computeValue)],
jur_AbstractCharClass$LazyRange, "AbstractCharClass$LazyRange", 7, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyRange_computeValue)],
jur_AbstractCharClass$LazySpecialsBlock, "AbstractCharClass$LazySpecialsBlock", 7, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazySpecialsBlock_computeValue)],
jur_AbstractCharClass$LazyCategory, "AbstractCharClass$LazyCategory", 7, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyCategory_computeValue)],
jur_AbstractCharClass$LazyCategoryScope, "AbstractCharClass$LazyCategoryScope", 7, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyCategoryScope_computeValue)],
jl_NegativeArraySizeException, "NegativeArraySizeException", 16, jl_RuntimeException, [], 0, 3, 0, 0, 0,
jur_IntHash, "IntHash", 7, jl_Object, [], 0, 0, 0, 0, 0,
otpp_ResourceAccessor, "ResourceAccessor", 38, jl_Object, [], 4, 0, 0, 0, 0,
otciu_UnicodeHelper, "UnicodeHelper", 34, jl_Object, [], 4, 3, 0, 0, 0,
otciu_CharMapping, "CharMapping", 34, jl_Object, [], 0, 3, 0, 0, 0,
otciu_UnicodeHelper$Range, "UnicodeHelper$Range", 34, jl_Object, [], 0, 3, 0, 0, 0,
otci_CharFlow, "CharFlow", 32, jl_Object, [], 0, 3, 0, 0, 0,
otci_Base46, "Base46", 32, jl_Object, [], 4, 3, 0, 0, 0,
ju_AbstractList$1, "AbstractList$1", 4, jl_Object, [ju_Iterator], 0, 0, 0, 0, 0,
jl_ArrayIndexOutOfBoundsException, "ArrayIndexOutOfBoundsException", 16, jl_IndexOutOfBoundsException, [], 0, 3, 0, 0, 0,
jn_ReadOnlyBufferException, "ReadOnlyBufferException", 12, jl_UnsupportedOperationException, [], 0, 3, 0, 0, 0,
jn_BufferOverflowException, "BufferOverflowException", 12, jl_RuntimeException, [], 0, 3, 0, 0, 0,
jnc_BufferUnderflowException, "BufferUnderflowException", 13, jl_RuntimeException, [], 0, 3, 0, 0, 0,
jnc_BufferOverflowException, "BufferOverflowException", 13, jl_RuntimeException, [], 0, 3, 0, 0, 0,
jnc_MalformedInputException, "MalformedInputException", 13, jnc_CharacterCodingException, [], 0, 3, 0, 0, ["$getMessage", $rt_wrapFunction0(jnc_MalformedInputException_getMessage)],
jnc_UnmappableCharacterException, "UnmappableCharacterException", 13, jnc_CharacterCodingException, [], 0, 3, 0, 0, ["$getMessage", $rt_wrapFunction0(jnc_UnmappableCharacterException_getMessage)],
juf_UnaryOperator, "UnaryOperator", 11, jl_Object, [juf_Function], 3, 3, 0, 0, 0,
igbc_Compiler$compile$lambda$_2_0, "Compiler$compile$lambda$_2_0", 42, jl_Object, [juf_UnaryOperator], 0, 3, 0, 0, ["$apply", $rt_wrapFunction1(igbc_Compiler$compile$lambda$_2_0_apply)],
igbc_Compiler$compile$lambda$_2_1, "Compiler$compile$lambda$_2_1", 42, jl_Object, [juf_UnaryOperator], 0, 3, 0, 0, ["$apply", $rt_wrapFunction1(igbc_Compiler$compile$lambda$_2_1_apply)],
juf_Predicate, "Predicate", 11, jl_Object, [], 3, 3, 0, 0, 0,
igbc_Compiler$compile$lambda$_2_2, "Compiler$compile$lambda$_2_2", 42, jl_Object, [juf_Predicate], 0, 3, 0, 0, 0,
igbc_Compiler$compile$lambda$_2_3, "Compiler$compile$lambda$_2_3", 42, jl_Object, [juf_UnaryOperator], 0, 3, 0, 0, ["$apply", $rt_wrapFunction1(igbc_Compiler$compile$lambda$_2_3_apply)],
igbcu_CommentUtils, "CommentUtils", 47, jl_Object, [], 0, 3, 0, 0, 0,
igbcu_BracketUtil, "BracketUtil", 47, jl_Object, [], 0, 3, 0, 0, 0,
igbcu_SymbolParser, "SymbolParser", 47, jl_Object, [], 0, 3, 0, 0, 0,
igbcs_Symbol, "Symbol", 44, jl_Object, [], 1, 3, 0, 0, 0]);
$rt_metadata([igbcs_UsesSymbol, "UsesSymbol", 44, igbcs_Symbol, [], 0, 3, 0, 0, ["$applyChanges", $rt_wrapFunction2(igbcs_UsesSymbol_applyChanges)],
igbce_CompilerException, "CompilerException", 43, jl_RuntimeException, [], 0, 3, 0, 0, 0,
igbcm_MethodCompiler, "MethodCompiler", 45, jl_Object, [], 0, 3, 0, 0, 0,
juz_ZipException, "ZipException", 5, ji_IOException, [], 0, 3, 0, 0, 0,
jnci_BufferedDecoder, "BufferedDecoder", 14, jnc_CharsetDecoder, [], 1, 3, 0, 0, 0,
jnci_UTF8Decoder, "UTF8Decoder", 14, jnci_BufferedDecoder, [], 0, 3, 0, 0, ["$arrayDecode", function(var_1, var_2, var_3, var_4, var_5, var_6, var_7) { return jnci_UTF8Decoder_arrayDecode(this, var_1, var_2, var_3, var_4, var_5, var_6, var_7); }],
ju_HashMap$HashEntry, "HashMap$HashEntry", 4, ju_MapEntry, [], 0, 0, 0, 0, 0,
jur_AbstractCharClass$1, "AbstractCharClass$1", 7, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_AbstractCharClass$1_contains)],
jur_AbstractCharClass$2, "AbstractCharClass$2", 7, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_AbstractCharClass$2_contains)],
jur_CharClass$18, "CharClass$18", 7, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_CharClass$18_contains), "$toString", $rt_wrapFunction0(jur_CharClass$18_toString)],
jur_CharClass$1, "CharClass$1", 7, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_CharClass$1_contains)],
jur_CharClass$3, "CharClass$3", 7, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_CharClass$3_contains)],
jur_CharClass$2, "CharClass$2", 7, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_CharClass$2_contains)],
jur_CharClass$5, "CharClass$5", 7, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_CharClass$5_contains)],
jur_CharClass$4, "CharClass$4", 7, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_CharClass$4_contains)],
jur_CharClass$7, "CharClass$7", 7, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_CharClass$7_contains)],
jur_CharClass$6, "CharClass$6", 7, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_CharClass$6_contains)],
jur_CharClass$9, "CharClass$9", 7, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_CharClass$9_contains)],
jur_CharClass$8, "CharClass$8", 7, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_CharClass$8_contains)],
jur_CharClass$11, "CharClass$11", 7, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_CharClass$11_contains)],
jur_CharClass$10, "CharClass$10", 7, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_CharClass$10_contains)],
jur_CharClass$13, "CharClass$13", 7, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_CharClass$13_contains)],
jur_CharClass$12, "CharClass$12", 7, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_CharClass$12_contains)],
jur_CharClass$15, "CharClass$15", 7, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_CharClass$15_contains)],
jur_CharClass$14, "CharClass$14", 7, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_CharClass$14_contains)],
jur_CharClass$17, "CharClass$17", 7, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_CharClass$17_contains)],
jur_CharClass$16, "CharClass$16", 7, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_CharClass$16_contains)],
ju_TemplateCollections$AbstractImmutableList, "TemplateCollections$AbstractImmutableList", 4, ju_AbstractList, [ju_RandomAccess], 1, 0, 0, 0, 0,
ju_TemplateCollections$ImmutableArrayList, "TemplateCollections$ImmutableArrayList", 4, ju_TemplateCollections$AbstractImmutableList, [ju_RandomAccess], 0, 3, 0, 0, ["$get0", $rt_wrapFunction1(ju_TemplateCollections$ImmutableArrayList_get), "$size", $rt_wrapFunction0(ju_TemplateCollections$ImmutableArrayList_size), "$remove", $rt_wrapFunction1(ju_TemplateCollections$ImmutableArrayList_remove)],
igbce_WrongIndentationException, "WrongIndentationException", 43, igbce_CompilerException, [], 0, 3, 0, 0, 0,
igbce_WrongBracketUsageException, "WrongBracketUsageException", 43, igbce_CompilerException, [], 0, 3, 0, 0, 0,
igbcu_SymbolParser$parseSymbols$lambda$_1_0, "SymbolParser$parseSymbols$lambda$_1_0", 47, jl_Object, [juf_Predicate], 0, 3, 0, 0, ["$test", $rt_wrapFunction1(igbcu_SymbolParser$parseSymbols$lambda$_1_0_test)],
jus_Collectors, "Collectors", 8, jl_Object, [], 4, 3, 0, 0, 0,
igbcs_ImplementingSymbol, "ImplementingSymbol", 44, igbcs_Symbol, [], 0, 3, 0, 0, ["$applyChanges", $rt_wrapFunction2(igbcs_ImplementingSymbol_applyChanges)],
igbcs_ExtendingSymbol, "ExtendingSymbol", 44, igbcs_Symbol, [], 0, 3, 0, 0, ["$applyChanges", $rt_wrapFunction2(igbcs_ExtendingSymbol_applyChanges)],
igbcs_FieldSymbol, "FieldSymbol", 44, igbcs_Symbol, [], 0, 3, 0, 0, ["$applyChanges", $rt_wrapFunction2(igbcs_FieldSymbol_applyChanges)],
igbcm_MethodCodeCompiler, "MethodCodeCompiler", 45, jl_Record, [], 32772, 3, 0, 0, 0,
jus_BaseStream, "BaseStream", 8, jl_Object, [jl_AutoCloseable], 3, 3, 0, 0, 0,
jus_Stream, "Stream", 8, jl_Object, [jus_BaseStream], 3, 3, 0, 0, 0,
jusi_SimpleStreamImpl, "SimpleStreamImpl", 9, jl_Object, [jus_Stream], 1, 3, 0, 0, 0,
jusi_ArrayStreamImpl, "ArrayStreamImpl", 9, jusi_SimpleStreamImpl, [], 0, 3, 0, 0, ["$next1", $rt_wrapFunction1(jusi_ArrayStreamImpl_next), "$estimateSize", $rt_wrapFunction0(jusi_ArrayStreamImpl_estimateSize)],
juf_IntPredicate, "IntPredicate", 11, jl_Object, [], 3, 3, 0, 0, 0,
igbcs_ImplementingSymbol$_init_$lambda$_0_0, "ImplementingSymbol$<init>$lambda$_0_0", 44, jl_Object, [juf_IntPredicate], 0, 3, 0, 0, 0,
igbce_StandardCodeExceptions, "StandardCodeExceptions", 43, jl_Object, [], 0, 3, 0, 0, 0,
igbcm_MethodCodeCompiler$compile$lambda$_1_0, "MethodCodeCompiler$compile$lambda$_1_0", 45, jl_Object, [juf_Predicate], 0, 3, 0, 0, 0,
jnc_Charset$Charsets, "Charset$Charsets", 13, jl_Object, [], 0, 0, 0, jnc_Charset$Charsets_$callClinit, 0,
jnc_UnsupportedCharsetException, "UnsupportedCharsetException", 13, jl_IllegalArgumentException, [], 0, 3, 0, 0, 0,
jur_Matcher$1, "Matcher$1", 7, jl_Object, [], 0, 0, 0, 0, ["$toString", $rt_wrapFunction0(jur_Matcher$1_toString)],
juf_BiConsumer, "BiConsumer", 11, jl_Object, [], 3, 3, 0, 0, 0,
jus_Collectors$joining$lambda$_8_0, "Collectors$joining$lambda$_8_0", 8, jl_Object, [juf_BiConsumer], 0, 3, 0, 0, 0]);
$rt_metadata([juf_BiFunction, "BiFunction", 11, jl_Object, [], 3, 3, 0, 0, 0,
juf_BinaryOperator, "BinaryOperator", 11, jl_Object, [juf_BiFunction], 3, 3, 0, 0, 0,
jus_Collectors$joining$lambda$_8_1, "Collectors$joining$lambda$_8_1", 8, jl_Object, [juf_BinaryOperator], 0, 3, 0, 0, 0,
juf_Supplier, "Supplier", 11, jl_Object, [], 3, 3, 0, 0, 0,
jus_Collectors$joining$lambda$_8_2, "Collectors$joining$lambda$_8_2", 8, jl_Object, [juf_Supplier], 0, 3, 0, 0, 0,
jus_Collectors$joining$lambda$_8_3, "Collectors$joining$lambda$_8_3", 8, jl_Object, [juf_Function], 0, 3, 0, 0, 0,
jus_Collector$Characteristics, "Collector$Characteristics", 8, jl_Enum, [], 12, 3, 0, 0, 0,
jus_Collector, "Collector", 8, jl_Object, [], 3, 3, 0, 0, 0,
igbce_SymbolNotFoundException, "SymbolNotFoundException", 43, igbce_CompilerException, [], 0, 3, 0, 0, 0,
juf_Consumer, "Consumer", 11, jl_Object, [], 3, 3, 0, 0, 0,
igbcm_MethodCodeCompiler$recursiveCompilation$lambda$_2_0, "MethodCodeCompiler$recursiveCompilation$lambda$_2_0", 45, jl_Object, [juf_Consumer], 0, 3, 0, 0, 0,
igbce_NoReturnException, "NoReturnException", 43, igbce_CompilerException, [], 0, 3, 0, 0, 0,
ju_Set, "Set", 4, jl_Object, [ju_Collection], 3, 3, 0, 0, 0,
ju_AbstractSet, "AbstractSet", 4, ju_AbstractCollection, [ju_Set], 1, 3, 0, 0, 0,
ju_EnumSet, "EnumSet", 4, ju_AbstractSet, [jl_Cloneable, ji_Serializable], 1, 3, 0, 0, 0,
jus_CollectorImpl, "CollectorImpl", 8, jl_Object, [jus_Collector], 0, 0, 0, 0, 0,
igbcmc_StatementCompiler, "StatementCompiler", 46, jl_Record, [], 32772, 3, 0, 0, 0,
igbcm_IfStatementHandler, "IfStatementHandler", 45, jl_Record, [], 32772, 3, 0, 0, 0,
jnc_StandardCharsets, "StandardCharsets", 13, jl_Object, [], 4, 3, 0, jnc_StandardCharsets_$callClinit, 0,
ju_GenericEnumSet, "GenericEnumSet", 4, ju_EnumSet, [], 0, 0, 0, 0, ["$add", $rt_wrapFunction1(ju_GenericEnumSet_add)],
ju_Arrays$ArrayAsList, "Arrays$ArrayAsList", 4, ju_AbstractList, [ju_RandomAccess], 0, 0, 0, 0, ["$get0", $rt_wrapFunction1(ju_Arrays$ArrayAsList_get), "$size", $rt_wrapFunction0(ju_Arrays$ArrayAsList_size)],
igbcu_StringParser, "StringParser", 47, jl_Object, [], 0, 3, 0, 0, 0,
igbcmc_StringConstantMethodCompiler, "StringConstantMethodCompiler", 46, jl_Record, [], 32772, 3, 0, 0, 0,
igbcmc_FieldGetCompiler, "FieldGetCompiler", 46, jl_Record, [], 32772, 3, 0, 0, 0,
igbcu_CodeCompilerUtils, "CodeCompilerUtils", 47, jl_Record, [], 32772, 3, 0, 0, 0,
igbcmc_MethodCallCompiler, "MethodCallCompiler", 46, jl_Record, [], 32772, 3, 0, 0, 0,
igbcmc_FieldSetCompiler, "FieldSetCompiler", 46, jl_Record, [], 32772, 3, 0, 0, 0,
juf_IntFunction, "IntFunction", 11, jl_Object, [], 3, 3, 0, 0, 0,
igbcm_IfStatementHandler$compile$lambda$_1_0, "IfStatementHandler$compile$lambda$_1_0", 45, jl_Object, [juf_IntFunction], 0, 3, 0, 0, 0,
igbcacigp_NullCode, "NullCode", 55, igbcacig_ValueReturnCode, [], 0, 3, 0, 0, 0,
igbcacigl_GetArgumentCode, "GetArgumentCode", 56, igbcacig_ValueReturnCode, [], 0, 3, 0, 0, 0,
igbcacigp_ThisCode, "ThisCode", 55, igbcacig_ValueReturnCode, [], 0, 3, 0, 0, 0,
jnci_AsciiCharset, "AsciiCharset", 14, jnc_Charset, [], 0, 3, 0, 0, ["$newDecoder", $rt_wrapFunction0(jnci_AsciiCharset_newDecoder)],
jnci_Iso8859Charset, "Iso8859Charset", 14, jnc_Charset, [], 0, 3, 0, 0, ["$newDecoder", $rt_wrapFunction0(jnci_Iso8859Charset_newDecoder)],
jnci_UTF16Charset, "UTF16Charset", 14, jnc_Charset, [], 0, 3, 0, 0, ["$newDecoder", $rt_wrapFunction0(jnci_UTF16Charset_newDecoder)],
jur_RandomGenerator, "RandomGenerator", 6, jl_Object, [], 3, 3, 0, 0, 0,
ju_Random, "Random", 4, jl_Object, [jur_RandomGenerator, ji_Serializable], 0, 3, 0, 0, 0,
igbcau_Either, "Either", 57, jl_Object, [], 0, 3, 0, 0, 0,
igbca_APILoader$get$lambda$_2_0, "APILoader$get$lambda$_2_0", 50, jl_Object, [juf_Predicate], 0, 3, 0, 0, ["$test", $rt_wrapFunction1(igbca_APILoader$get$lambda$_2_0_test)],
ju_Optional, "Optional", 4, jl_Object, [], 4, 3, 0, 0, 0,
jl_Float, "Float", 16, jl_Number, [jl_Comparable], 0, 3, 0, 0, ["$toString", $rt_wrapFunction0(jl_Float_toString), "$equals", $rt_wrapFunction1(jl_Float_equals)],
jl_Double, "Double", 16, jl_Number, [jl_Comparable], 0, 3, 0, 0, ["$toString", $rt_wrapFunction0(jl_Double_toString), "$equals", $rt_wrapFunction1(jl_Double_equals)],
igbcu_DefaultFunctions, "DefaultFunctions", 47, jl_Object, [], 0, 3, 0, 0, 0,
igbcacigc_NewInstanceCode, "NewInstanceCode", 54, igbcacigc_MethodCallCode, [], 0, 3, 0, 0, 0,
otcit_FloatSynthesizer, "FloatSynthesizer", 35, jl_Object, [], 4, 3, 0, 0, 0,
otcit_DoubleSynthesizer, "DoubleSynthesizer", 35, jl_Object, [], 4, 3, 0, 0, 0,
otcit_FloatAnalyzer, "FloatAnalyzer", 35, jl_Object, [], 4, 3, 0, 0, 0,
otcit_DoubleAnalyzer, "DoubleAnalyzer", 35, jl_Object, [], 4, 3, 0, 0, 0,
igbca_APILoader$getOrMake$lambda$_1_0, "APILoader$getOrMake$lambda$_1_0", 50, jl_Object, [juf_Predicate], 0, 3, 0, 0, ["$test", $rt_wrapFunction1(igbca_APILoader$getOrMake$lambda$_1_0_test)],
igbca_APILoader$getOrMake$lambda$_1_1, "APILoader$getOrMake$lambda$_1_1", 50, jl_Object, [juf_Supplier], 0, 3, 0, 0, 0]);
$rt_metadata([otcit_DoubleAnalyzer$Result, "DoubleAnalyzer$Result", 35, jl_Object, [], 0, 3, 0, 0, 0,
jur_BackReferencedSingleSet, "BackReferencedSingleSet", 7, jur_SingleSet, [], 0, 0, 0, 0, ["$find0", $rt_wrapFunction3(jur_BackReferencedSingleSet_find), "$findBack", $rt_wrapFunction4(jur_BackReferencedSingleSet_findBack), "$processBackRefReplacement", $rt_wrapFunction0(jur_BackReferencedSingleSet_processBackRefReplacement)],
jnci_BufferedDecoder$Controller, "BufferedDecoder$Controller", 14, jl_Object, [], 0, 3, 0, 0, 0,
jusi_WrappingStreamImpl, "WrappingStreamImpl", 9, jusi_SimpleStreamImpl, [], 1, 3, 0, 0, ["$next1", $rt_wrapFunction1(jusi_WrappingStreamImpl_next), "$estimateSize", $rt_wrapFunction0(jusi_WrappingStreamImpl_estimateSize)],
jusi_FilteringStreamImpl, "FilteringStreamImpl", 9, jusi_WrappingStreamImpl, [], 0, 3, 0, 0, ["$wrap4", $rt_wrapFunction1(jusi_FilteringStreamImpl_wrap)],
jusi_StreamOverSpliterator, "StreamOverSpliterator", 9, jusi_SimpleStreamImpl, [], 0, 3, 0, 0, ["$next1", $rt_wrapFunction1(jusi_StreamOverSpliterator_next), "$estimateSize", $rt_wrapFunction0(jusi_StreamOverSpliterator_estimateSize)],
jn_BufferUnderflowException, "BufferUnderflowException", 12, jl_RuntimeException, [], 0, 3, 0, 0, 0,
jur_AbstractCharClass$LazyJavaLowerCase$1, "AbstractCharClass$LazyJavaLowerCase$1", 7, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaLowerCase$1_contains)],
jur_AbstractCharClass$LazyJavaUpperCase$1, "AbstractCharClass$LazyJavaUpperCase$1", 7, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaUpperCase$1_contains)],
jur_AbstractCharClass$LazyJavaWhitespace$1, "AbstractCharClass$LazyJavaWhitespace$1", 7, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaWhitespace$1_contains)],
jur_AbstractCharClass$LazyJavaMirrored$1, "AbstractCharClass$LazyJavaMirrored$1", 7, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaMirrored$1_contains)],
jur_AbstractCharClass$LazyJavaDefined$1, "AbstractCharClass$LazyJavaDefined$1", 7, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaDefined$1_contains)],
jur_AbstractCharClass$LazyJavaDigit$1, "AbstractCharClass$LazyJavaDigit$1", 7, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaDigit$1_contains)],
jur_AbstractCharClass$LazyJavaIdentifierIgnorable$1, "AbstractCharClass$LazyJavaIdentifierIgnorable$1", 7, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaIdentifierIgnorable$1_contains)],
jur_AbstractCharClass$LazyJavaISOControl$1, "AbstractCharClass$LazyJavaISOControl$1", 7, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaISOControl$1_contains)],
jur_AbstractCharClass$LazyJavaJavaIdentifierPart$1, "AbstractCharClass$LazyJavaJavaIdentifierPart$1", 7, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaJavaIdentifierPart$1_contains)],
jur_AbstractCharClass$LazyJavaJavaIdentifierStart$1, "AbstractCharClass$LazyJavaJavaIdentifierStart$1", 7, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaJavaIdentifierStart$1_contains)],
jur_AbstractCharClass$LazyJavaLetter$1, "AbstractCharClass$LazyJavaLetter$1", 7, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaLetter$1_contains)],
jur_AbstractCharClass$LazyJavaLetterOrDigit$1, "AbstractCharClass$LazyJavaLetterOrDigit$1", 7, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaLetterOrDigit$1_contains)],
jur_AbstractCharClass$LazyJavaSpaceChar$1, "AbstractCharClass$LazyJavaSpaceChar$1", 7, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaSpaceChar$1_contains)],
jur_AbstractCharClass$LazyJavaTitleCase$1, "AbstractCharClass$LazyJavaTitleCase$1", 7, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaTitleCase$1_contains)],
jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart$1, "AbstractCharClass$LazyJavaUnicodeIdentifierPart$1", 7, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart$1_contains)],
jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart$1, "AbstractCharClass$LazyJavaUnicodeIdentifierStart$1", 7, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart$1_contains)],
jur_UnicodeCategory, "UnicodeCategory", 7, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_UnicodeCategory_contains)],
jur_UnicodeCategoryScope, "UnicodeCategoryScope", 7, jur_UnicodeCategory, [], 0, 0, 0, 0, ["$contains1", $rt_wrapFunction1(jur_UnicodeCategoryScope_contains)],
jnci_Iso8859Decoder, "Iso8859Decoder", 14, jnci_BufferedDecoder, [], 0, 3, 0, 0, ["$arrayDecode", function(var_1, var_2, var_3, var_4, var_5, var_6, var_7) { return jnci_Iso8859Decoder_arrayDecode(this, var_1, var_2, var_3, var_4, var_5, var_6, var_7); }],
jnci_UTF16Decoder, "UTF16Decoder", 14, jnci_BufferedDecoder, [], 0, 3, 0, 0, ["$arrayDecode", function(var_1, var_2, var_3, var_4, var_5, var_6, var_7) { return jnci_UTF16Decoder_arrayDecode(this, var_1, var_2, var_3, var_4, var_5, var_6, var_7); }],
jnci_AsciiDecoder, "AsciiDecoder", 14, jnci_BufferedDecoder, [], 0, 3, 0, 0, ["$arrayDecode", function(var_1, var_2, var_3, var_4, var_5, var_6, var_7) { return jnci_AsciiDecoder_arrayDecode(this, var_1, var_2, var_3, var_4, var_5, var_6, var_7); }],
ju_ConcurrentModificationException, "ConcurrentModificationException", 4, jl_RuntimeException, [], 0, 3, 0, 0, 0,
ju_NoSuchElementException, "NoSuchElementException", 4, jl_RuntimeException, [], 0, 3, 0, 0, 0,
jnc_CharsetEncoder, "CharsetEncoder", 13, jl_Object, [], 1, 3, 0, 0, 0,
jur_IntArrHash, "IntArrHash", 7, jl_Object, [], 0, 0, 0, 0, 0,
ooa_ClassReader, "ClassReader", 20, jl_Object, [], 0, 3, 0, 0, 0,
ooa_ClassVisitor, "ClassVisitor", 20, jl_Object, [], 1, 3, 0, 0, 0,
ooat_ClassNode, "ClassNode", 21, ooa_ClassVisitor, [], 0, 3, 0, 0, 0,
ooa_FieldVisitor, "FieldVisitor", 20, jl_Object, [], 1, 3, 0, 0, 0,
ooat_FieldNode, "FieldNode", 21, ooa_FieldVisitor, [], 0, 3, 0, 0, 0,
igbcat_ClassType, "ClassType", 58, jl_Enum, [], 12, 3, 0, 0, 0,
ooa_ConstantDynamic, "ConstantDynamic", 20, jl_Object, [], 4, 3, 0, 0, ["$equals", $rt_wrapFunction1(ooa_ConstantDynamic_equals), "$toString", $rt_wrapFunction0(ooa_ConstantDynamic_toString)],
jusi_SimpleStreamImpl$collect$lambda$_26_0, "SimpleStreamImpl$collect$lambda$_26_0", 9, jl_Object, [juf_Predicate], 0, 3, 0, 0, ["$test", $rt_wrapFunction1(jusi_SimpleStreamImpl$collect$lambda$_26_0_test)],
jusi_MappingStreamImpl, "MappingStreamImpl", 9, jusi_WrappingStreamImpl, [], 0, 3, 0, 0, ["$wrap4", $rt_wrapFunction1(jusi_MappingStreamImpl_wrap)],
jusi_FindFirstConsumer, "FindFirstConsumer", 9, jl_Object, [juf_Predicate], 0, 3, 0, 0, ["$test", $rt_wrapFunction1(jusi_FindFirstConsumer_test)],
igbca_APIMethod$compileDesc$lambda$_3_0, "APIMethod$compileDesc$lambda$_3_0", 50, jl_Object, [juf_Function], 0, 3, 0, 0, ["$apply", $rt_wrapFunction1(igbca_APIMethod$compileDesc$lambda$_3_0_apply)],
igbca_APIMethod$compileDesc$lambda$_3_1, "APIMethod$compileDesc$lambda$_3_1", 50, jl_Object, [juf_IntFunction], 0, 3, 0, 0, ["$apply0", $rt_wrapFunction1(igbca_APIMethod$compileDesc$lambda$_3_1_apply)],
ju_Spliterator, "Spliterator", 4, jl_Object, [], 3, 3, 0, 0, 0,
jusi_SpliteratorOverCollection, "SpliteratorOverCollection", 9, jl_Object, [ju_Spliterator], 0, 3, 0, 0, 0,
ju_HashMap$2, "HashMap$2", 4, ju_AbstractCollection, [], 0, 0, 0, 0, 0,
juz_DataFormatException, "DataFormatException", 5, jl_Exception, [], 0, 3, 0, 0, 0,
jusi_SimpleStreamImpl$toArray$lambda$_20_0, "SimpleStreamImpl$toArray$lambda$_20_0", 9, jl_Object, [juf_IntFunction], 0, 3, 0, 0, ["$apply0", $rt_wrapFunction1(jusi_SimpleStreamImpl$toArray$lambda$_20_0_apply)],
jnci_BufferedEncoder, "BufferedEncoder", 14, jnc_CharsetEncoder, [], 1, 3, 0, 0, 0]);
$rt_metadata([jnci_UTF8Encoder, "UTF8Encoder", 14, jnci_BufferedEncoder, [], 0, 3, 0, 0, 0,
ooa_Attribute, "Attribute", 20, jl_Object, [], 0, 3, 0, 0, 0,
jl_AbstractStringBuilder$Constants, "AbstractStringBuilder$Constants", 16, jl_Object, [], 0, 0, 0, 0, 0,
otcit_FloatAnalyzer$Result, "FloatAnalyzer$Result", 35, jl_Object, [], 0, 3, 0, 0, 0,
otcic_JsConsolePrintStream$ByteEncoder, "JsConsolePrintStream$ByteEncoder", 33, jl_Object, [], 0, 0, 0, 0, 0,
jusi_SimpleStreamImpl$ArrayFillingConsumer, "SimpleStreamImpl$ArrayFillingConsumer", 9, jl_Object, [juf_Predicate], 0, 0, 0, 0, ["$test", $rt_wrapFunction1(jusi_SimpleStreamImpl$ArrayFillingConsumer_test)],
jusi_SimpleStreamImpl$toArray$lambda$_21_0, "SimpleStreamImpl$toArray$lambda$_21_0", 9, jl_Object, [juf_Predicate], 0, 3, 0, 0, ["$test", $rt_wrapFunction1(jusi_SimpleStreamImpl$toArray$lambda$_21_0_test)],
ju_HashMap$AbstractMapIterator, "HashMap$AbstractMapIterator", 4, jl_Object, [], 0, 0, 0, 0, 0,
ju_HashMap$ValueIterator, "HashMap$ValueIterator", 4, ju_HashMap$AbstractMapIterator, [ju_Iterator], 0, 0, 0, 0, 0,
jnci_BufferedEncoder$Controller, "BufferedEncoder$Controller", 14, jl_Object, [], 0, 3, 0, 0, 0,
jusi_AnyMatchConsumer, "AnyMatchConsumer", 9, jl_Object, [juf_Predicate], 0, 3, 0, 0, ["$test", $rt_wrapFunction1(jusi_AnyMatchConsumer_test)],
ooa_Context, "Context", 20, jl_Object, [], 4, 0, 0, 0, 0,
ooa_Label, "Label", 20, jl_Object, [], 0, 3, 0, 0, ["$toString", $rt_wrapFunction0(ooa_Label_toString)],
ooa_TypePath, "TypePath", 20, jl_Object, [], 4, 3, 0, 0, 0,
ooa_MethodWriter, "MethodWriter", 20, ooa_MethodVisitor, [], 4, 0, 0, 0, 0,
cjj_Inflate$Return, "Inflate$Return", 2, jl_Exception, [], 0, 0, 0, 0, 0,
cjj_GZIPHeader, "GZIPHeader", 2, jl_Object, [jl_Cloneable], 0, 3, 0, 0, 0,
ooa_ModuleVisitor, "ModuleVisitor", 20, jl_Object, [], 1, 3, 0, 0, 0,
jl_Byte, "Byte", 16, jl_Number, [jl_Comparable], 0, 3, 0, 0, ["$toString", $rt_wrapFunction0(jl_Byte_toString), "$equals", $rt_wrapFunction1(jl_Byte_equals)],
jl_Short, "Short", 16, jl_Number, [jl_Comparable], 0, 3, 0, 0, ["$toString", $rt_wrapFunction0(jl_Short_toString), "$equals", $rt_wrapFunction1(jl_Short_equals)],
ooa_AnnotationVisitor, "AnnotationVisitor", 20, jl_Object, [], 1, 3, 0, 0, 0,
ooa_RecordComponentVisitor, "RecordComponentVisitor", 20, jl_Object, [], 1, 3, 0, 0, 0,
ooa_SymbolTable, "SymbolTable", 20, jl_Object, [], 4, 0, 0, 0, 0,
ooa_Handle, "Handle", 20, jl_Object, [], 4, 3, 0, 0, ["$equals", $rt_wrapFunction1(ooa_Handle_equals), "$toString", $rt_wrapFunction0(ooa_Handle_toString)],
jusi_MappingStreamImpl$wrap$lambda$_1_0, "MappingStreamImpl$wrap$lambda$_1_0", 9, jl_Object, [juf_Predicate], 0, 3, 0, 0, ["$test", $rt_wrapFunction1(jusi_MappingStreamImpl$wrap$lambda$_1_0_test)],
otcic_JsConsolePrintStream$ByteEncoder$postponeFlush$lambda$_3_0, "JsConsolePrintStream$ByteEncoder$postponeFlush$lambda$_3_0", 33, jl_Object, [jl_Runnable], 0, 3, 0, 0, 0,
jusi_FilteringStreamImpl$wrap$lambda$_1_0, "FilteringStreamImpl$wrap$lambda$_1_0", 9, jl_Object, [juf_Predicate], 0, 3, 0, 0, ["$test", $rt_wrapFunction1(jusi_FilteringStreamImpl$wrap$lambda$_1_0_test)],
jusi_StreamOverSpliterator$AdapterAction, "StreamOverSpliterator$AdapterAction", 9, jl_Object, [juf_Consumer], 0, 0, 0, 0, 0,
ooat_AnnotationNode, "AnnotationNode", 21, ooa_AnnotationVisitor, [], 0, 3, 0, 0, 0,
ooat_TypeAnnotationNode, "TypeAnnotationNode", 21, ooat_AnnotationNode, [], 0, 3, 0, 0, 0,
ooat_InnerClassNode, "InnerClassNode", 21, jl_Object, [], 0, 3, 0, 0, 0,
ooat_ModuleNode, "ModuleNode", 21, ooa_ModuleVisitor, [], 0, 3, 0, 0, 0,
ooat_RecordComponentNode, "RecordComponentNode", 21, ooa_RecordComponentVisitor, [], 0, 3, 0, 0, 0,
ooat_ModuleRequireNode, "ModuleRequireNode", 21, jl_Object, [], 0, 3, 0, 0, 0,
ooat_ModuleExportNode, "ModuleExportNode", 21, jl_Object, [], 0, 3, 0, 0, 0,
ooat_ModuleOpenNode, "ModuleOpenNode", 21, jl_Object, [], 0, 3, 0, 0, 0,
ooat_ModuleProvideNode, "ModuleProvideNode", 21, jl_Object, [], 0, 3, 0, 0, 0,
ooat_ParameterNode, "ParameterNode", 21, jl_Object, [], 0, 3, 0, 0, 0,
ooat_MethodNode$1, "MethodNode$1", 21, ju_ArrayList, [], 0, 0, 0, 0, ["$add", $rt_wrapFunction1(ooat_MethodNode$1_add)],
ooat_AbstractInsnNode, "AbstractInsnNode", 21, jl_Object, [], 1, 3, 0, 0, 0,
ooat_LineNumberNode, "LineNumberNode", 21, ooat_AbstractInsnNode, [], 0, 3, 0, 0, 0,
ooat_TryCatchBlockNode, "TryCatchBlockNode", 21, jl_Object, [], 0, 3, 0, 0, 0,
ooat_FrameNode, "FrameNode", 21, ooat_AbstractInsnNode, [], 0, 3, 0, 0, 0,
ooat_InsnNode, "InsnNode", 21, ooat_AbstractInsnNode, [], 0, 3, 0, 0, 0,
ooat_IntInsnNode, "IntInsnNode", 21, ooat_AbstractInsnNode, [], 0, 3, 0, 0, 0,
ooat_LdcInsnNode, "LdcInsnNode", 21, ooat_AbstractInsnNode, [], 0, 3, 0, 0, 0,
ooat_VarInsnNode, "VarInsnNode", 21, ooat_AbstractInsnNode, [], 0, 3, 0, 0, 0,
ooat_IincInsnNode, "IincInsnNode", 21, ooat_AbstractInsnNode, [], 0, 3, 0, 0, 0,
ooat_JumpInsnNode, "JumpInsnNode", 21, ooat_AbstractInsnNode, [], 0, 3, 0, 0, 0,
ooat_TypeInsnNode, "TypeInsnNode", 21, ooat_AbstractInsnNode, [], 0, 3, 0, 0, 0]);
$rt_metadata([ooat_MultiANewArrayInsnNode, "MultiANewArrayInsnNode", 21, ooat_AbstractInsnNode, [], 0, 3, 0, 0, 0,
ooat_InvokeDynamicInsnNode, "InvokeDynamicInsnNode", 21, ooat_AbstractInsnNode, [], 0, 3, 0, 0, 0,
ooat_FieldInsnNode, "FieldInsnNode", 21, ooat_AbstractInsnNode, [], 0, 3, 0, 0, 0,
ooat_MethodInsnNode, "MethodInsnNode", 21, ooat_AbstractInsnNode, [], 0, 3, 0, 0, 0,
ooat_LookupSwitchInsnNode, "LookupSwitchInsnNode", 21, ooat_AbstractInsnNode, [], 0, 3, 0, 0, 0,
ooat_TableSwitchInsnNode, "TableSwitchInsnNode", 21, ooat_AbstractInsnNode, [], 0, 3, 0, 0, 0,
ooat_LocalVariableNode, "LocalVariableNode", 21, jl_Object, [], 0, 3, 0, 0, 0,
ooat_LocalVariableAnnotationNode, "LocalVariableAnnotationNode", 21, ooat_TypeAnnotationNode, [], 0, 3, 0, 0, 0,
ooat_LabelNode, "LabelNode", 21, ooat_AbstractInsnNode, [], 0, 3, 0, 0, 0,
jus_IntStream, "IntStream", 8, jl_Object, [jus_BaseStream], 3, 3, 0, 0, 0,
jusi_SimpleIntStreamImpl, "SimpleIntStreamImpl", 10, jl_Object, [jus_IntStream], 1, 3, 0, 0, 0,
jusi_StringCharsStream, "StringCharsStream", 10, jusi_SimpleIntStreamImpl, [], 0, 3, 0, 0, 0,
jusi_WrappingIntStreamImpl, "WrappingIntStreamImpl", 10, jusi_SimpleIntStreamImpl, [], 1, 3, 0, 0, 0,
jusi_FilteringIntStreamImpl, "FilteringIntStreamImpl", 10, jusi_WrappingIntStreamImpl, [], 0, 3, 0, 0, 0,
jusi_CountingIntConsumer, "CountingIntConsumer", 10, jl_Object, [juf_IntPredicate], 0, 3, 0, 0, 0,
jusi_FilteringIntStreamImpl$wrap$lambda$_1_0, "FilteringIntStreamImpl$wrap$lambda$_1_0", 10, jl_Object, [juf_IntPredicate], 0, 3, 0, 0, 0]);
let $rt_booleanArrayCls = $rt_arraycls($rt_booleancls),
$rt_charArrayCls = $rt_arraycls($rt_charcls),
$rt_byteArrayCls = $rt_arraycls($rt_bytecls),
$rt_shortArrayCls = $rt_arraycls($rt_shortcls),
$rt_intArrayCls = $rt_arraycls($rt_intcls),
$rt_longArrayCls = $rt_arraycls($rt_longcls),
$rt_floatArrayCls = $rt_arraycls($rt_floatcls),
$rt_doubleArrayCls = $rt_arraycls($rt_doublecls);
$rt_stringPool(["Can\'t enter monitor from another thread synchronously", "0", "", ": ", "\n", "\tat ", "Caused by: ", "Should never been thrown", "String is null", "String is empty", "String contains invalid digits: ", "String contains digits out of radix ", "The value is too big for integer type", "The value is too big for int type: ", "Illegal radix: ", "null", "Either src or dest is null", "Action must be non-null", "Replacement preconditions do not hold", "Index out of bounds", "UTF-8", "Main", "Error: ",
"\n error class: ", "main", "object", "function", "string", "number", "undefined", "classpath.map", "Zip is broken.", " ", "C", "E", "M", "1", "F", "\"", "(default package) \"", "Compiling class: ", "Comment is not closed (end of file)", "UsesSymbol.validate took ", " seconds", "Compilation successful!\n", " couldn\'t be found in classpath", "Running your code!\n", "([Ljava/lang/String;)V", "Cannot set fields not owned (only in web)", "No instance method access in web.", "Unable to run your code -> Failed to find class \"",
" . ", " is unsupported.", "clearProperty", "getProperty", "currentTimeMillis", "nanoTime", "java.version", "1.8", "os.name", "TeaVM", "file.separator", "/", "path.separator", ":", "line.separator", "java.io.tmpdir", "/tmp", "java.vm.version", "user.home", "java.lang.System . ", "() is unsupported.", "[]", "(this Collection)", ", ", "java/lang/Object", "Method not found", "Field not found", "<init>", "()V", "INVOKESPECIAL/STATIC on interfaces requires ASM5", "PUBLIC", "PRIVATE", "PACKAGE_PRIVATE", "PROTECTED",
"Pushback buffer full", "Stream is closed", "Length out of bounds: ", "Offset out of bounds: ", "Failed to create new class!", "java/lang/Enum", "java/lang/Record", "Invalid descriptor: ", "boolean", "char", "byte", "short", "int", "float", "long", "double", "void", "VZCBSIFJD", "[\\[\\]]", "arg", "[", "J", "D", "S", "B", "Z", "V", ".", "I", "If Returned null", "Error occurred: ", "Unable to execute ", "toString", "concat", "equals", "trim", "substring", "replace", "java.lang.String . ", "println", "print",
"java.io.PrintStream . ", "in", "err", "out", "false", "true", "New position ", " is outside of range [0;", "The last byte in src ", " is outside of array of size ", "Length ", " must be non-negative", "Offset ", "Capacity is negative: ", "The last char in dst ", "Start ", "The last char in src ", " is outside of string of size ", " must be before end ", "IGNORE", "REPLACE", "REPORT", "newAction must be non-null", "org/objectweb/asm/", "Test$", "org/objectweb/asm/util/Trace", "(Annotation|Class|Field|Method|Module|RecordComponent|Signature)",
"Visitor(\\$.*)?", "org/objectweb/asm/util/Check", "Adapter(\\$.*)?", ".class", "Bytecode not available, can\'t check class version", "ASM9_EXPERIMENTAL can only be used by classes compiled with --enable-preview", "I/O error, can\'t check class version", "need dictionary", "unknown compression method", "unknown header flags set", "incorrect data check", "incorrect length check", "incorrect header check", "invalid window size", "bad extra field length", "header crc mismatch", "BIG_ENDIAN", "LITTLE_ENDIAN", "Patter is null",
"invalid stored block lengths", "invalid block type", "too many length or distance symbols", "invalid bit length repeat", "oversubscribed dynamic bit lengths tree", "incomplete dynamic bit lengths tree", "oversubscribed distance tree", "incomplete distance tree", "empty distance tree with lengths", "oversubscribed literal/length tree", "incomplete literal/length tree", "invalid distance code", "invalid literal/length code", "fSet", "Is", "In", "NonCapFSet", "AheadFSet", "BehindFSet", "AtomicFSet", "FinalSet",
"<Empty set>", "JointSet", "NonCapJointSet", "PosLookaheadJointSet", "NegLookaheadJointSet", "PosBehindJointSet", "NegBehindJointSet", "<Quant>", "<GroupQuant>", "Lower", "Upper", "ASCII", "Alpha", "Digit", "Alnum", "Punct", "Graph", "Print", "Blank", "Cntrl", "XDigit", "javaLowerCase", "javaUpperCase", "javaWhitespace", "javaMirrored", "javaDefined", "javaDigit", "javaIdentifierIgnorable", "javaISOControl", "javaJavaIdentifierPart", "javaJavaIdentifierStart", "javaLetter", "javaLetterOrDigit", "javaSpaceChar",
"javaTitleCase", "javaUnicodeIdentifierPart", "javaUnicodeIdentifierStart", "Space", "w", "W", "s", "d", "BasicLatin", "Latin-1Supplement", "LatinExtended-A", "LatinExtended-B", "IPAExtensions", "SpacingModifierLetters", "CombiningDiacriticalMarks", "Greek", "Cyrillic", "CyrillicSupplement", "Armenian", "Hebrew", "Arabic", "Syriac", "ArabicSupplement", "Thaana", "Devanagari", "Bengali", "Gurmukhi", "Gujarati", "Oriya", "Tamil", "Telugu", "Kannada", "Malayalam", "Sinhala", "Thai", "Lao", "Tibetan", "Myanmar",
"Georgian", "HangulJamo", "Ethiopic", "EthiopicSupplement", "Cherokee", "UnifiedCanadianAboriginalSyllabics", "Ogham", "Runic", "Tagalog", "Hanunoo", "Buhid", "Tagbanwa", "Khmer", "Mongolian", "Limbu", "TaiLe", "NewTaiLue", "KhmerSymbols", "Buginese", "PhoneticExtensions", "PhoneticExtensionsSupplement", "CombiningDiacriticalMarksSupplement", "LatinExtendedAdditional", "GreekExtended", "GeneralPunctuation", "SuperscriptsandSubscripts", "CurrencySymbols", "CombiningMarksforSymbols", "LetterlikeSymbols", "NumberForms",
"Arrows", "MathematicalOperators", "MiscellaneousTechnical", "ControlPictures", "OpticalCharacterRecognition", "EnclosedAlphanumerics", "BoxDrawing", "BlockElements", "GeometricShapes", "MiscellaneousSymbols", "Dingbats", "MiscellaneousMathematicalSymbols-A", "SupplementalArrows-A", "BraillePatterns", "SupplementalArrows-B", "MiscellaneousMathematicalSymbols-B", "SupplementalMathematicalOperators", "MiscellaneousSymbolsandArrows", "Glagolitic", "Coptic", "GeorgianSupplement", "Tifinagh", "EthiopicExtended",
"SupplementalPunctuation", "CJKRadicalsSupplement", "KangxiRadicals", "IdeographicDescriptionCharacters", "CJKSymbolsandPunctuation", "Hiragana", "Katakana", "Bopomofo", "HangulCompatibilityJamo", "Kanbun", "BopomofoExtended", "CJKStrokes", "KatakanaPhoneticExtensions", "EnclosedCJKLettersandMonths", "CJKCompatibility", "CJKUnifiedIdeographsExtensionA", "YijingHexagramSymbols", "CJKUnifiedIdeographs", "YiSyllables", "YiRadicals", "ModifierToneLetters", "SylotiNagri", "HangulSyllables", "HighSurrogates", "HighPrivateUseSurrogates",
"LowSurrogates", "PrivateUseArea", "CJKCompatibilityIdeographs", "AlphabeticPresentationForms", "ArabicPresentationForms-A", "VariationSelectors", "VerticalForms", "CombiningHalfMarks", "CJKCompatibilityForms", "SmallFormVariants", "ArabicPresentationForms-B", "HalfwidthandFullwidthForms", "all", "Specials", "Cn", "IsL", "Lu", "Ll", "Lt", "Lm", "Lo", "IsM", "Mn", "Me", "Mc", "N", "Nd", "Nl", "No", "IsZ", "Zs", "Zl", "Zp", "IsC", "Cc", "Cf", "Co", "Cs", "IsP", "Pd", "Ps", "Pe", "Pc", "Po", "IsS", "Sm", "Sc",
"Sk", "So", "Pi", "Pf", "posFSet", "^ ", "range:", "CompositeRangeSet:  <nonsurrogate> ", " <surrogate> ", "UCI range:", "decomposed Hangul syllable:", "UCI ", "CI ", "decomposed char:", "<DotAllQuant>", "<DotQuant>", "<SOL>", "WordBoundary", "PreviousMatch", "<EOL>", "EOI", "^", "DotAll", "<Unix MultiLine $>", "<MultiLine $>", "CI back reference: ", "back reference: ", "UCI back reference: ", "sequence: ", "UCI sequence: ", "CI sequence: ", "Malformed input of length ", "Unmappable characters of length ", "\r",
";", "{", "{\n", "}", "\n}\n", "Unclosed brackets.", "^\\s+", "Closed non-existent bracket", "using", "\"using\" should be the first statement in the code.", "Found ", " imports.", "implements", "Only allowed to have 1 implement.", " interfaces to implement.", "extend", "Only allowed to have 1 extend.", "Found superclass", "java/lang/", " couldn\'t be found in uses", "[Ljava/lang/String;", "args", "  ", "static", "final", "private", "package-private", "protected", "\\b([a-zA-Z_$][a-zA-Z\\d_$]*)\\s+([a-zA-Z_$][a-zA-Z\\d_$]*)\\b",
"Compiling method \"", "�", "averageCharsPerByte must be positive. Actual value is ", "maxCharsPerByte must be positive. Actual value is ", "The last byte in dst ", "]", ",", "extend=", "=", "Parsed field ", "if", "!", "Unable to figure out: ", "Method ", " doesn\'t have a return statement.", "CONCURRENT", "UNORDERED", "IDENTITY_FINISH", "(", "Not valid statement: ", "java/lang/String", "this.", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", "\\(", "^([a-zA-Z0-9_.]+)\\.([a-zA-Z0-9_]+)$", "^([a-zA-Z0-9_.]+)\\.([a-zA-Z0-9_]+)\\((.*)\\)$",
"^([a-zA-Z0-9_]+)\\((.*)\\)$", "^([a-zA-Z0-9_.]+)\\s*=\\s*(.+)$", "this", "US-ASCII", "ISO-8859-1", "UTF-16", "UTF-16BE", "UTF-16LE", "\\\\", "\\", "\\\"", "\\\'", "\'", "\\t", "\t", "\\b", "\u0008", "\\n", "\\r", "\\f", "\u000c", "Ljava/lang/Object;", "\"this\" doesn\'t exist in a static method.", "Hello! Edge case exception for ", " (report this please)", "Trying to get a field from a primitive", "length", " couldn\'t be found", " wasn\'t found in class: ", "Ljava/lang/String;", "f", ")", " wasn\'t found in class",
"java/lang/Double", "java/lang/Float", "java/lang/Integer", "java/lang/Long", "java/lang/Short", "java/lang/Boolean", "java/lang/Character", "an exception will occur in 3..2...1....", "No support for array method calls yet.", "Trying to call primitives?", "Impossible.", "(Ljava/lang/String;)", "java/io/PrintStream", "(Ljava/lang/String;)V", "java/lang/System", "Ljava/io/PrintStream;", "catch me!", ". ", "(Ljava/lang/Object;)Z", "Cannot call non-static method(", ") from static method(", ") without an instance.",
"\\.", "Cannot set field: ", " to ", "nuh uh", "Class not found", "Unsupported class file major version ", "BootstrapMethods", "SourceFile", "InnerClasses", "EnclosingMethod", "NestHost", "NestMembers", "PermittedSubclasses", "Signature", "RuntimeVisibleAnnotations", "RuntimeVisibleTypeAnnotations", "Deprecated", "Synthetic", "SourceDebugExtension", "RuntimeInvisibleAnnotations", "RuntimeInvisibleTypeAnnotations", "Record", "Module", "ModuleMainClass", "ModulePackages", "ConstantValue", "Code", "Exceptions",
"AnnotationDefault", "RuntimeVisibleParameterAnnotations", "RuntimeInvisibleParameterAnnotations", "MethodParameters", "LocalVariableTable", "LocalVariableTypeTable", "LineNumberTable", "StackMapTable", "StackMap", "CLASS", "ENUM", "INTERFACE", "RECORD", " : ", "L", "Unsupported api ", " (", " itf"]);
jl_String.prototype.toString = function() {
    return $rt_ustr(this);
};
jl_String.prototype.valueOf = jl_String.prototype.toString;
jl_Object.prototype.toString = function() {
    return $rt_ustr(jl_Object_toString(this));
};
jl_Object.prototype.__teavm_class__ = function() {
    return $dbg_class(this);
};
let $rt_export_main = $rt_mainStarter(igbc_CompilerMain_main);
$rt_export_main.javaException = $rt_javaException;
let $rt_jso_marker = Symbol('jsoClass');
(() => {
    let c;
    c = igbc_CompilerMain$main$lambda$_1_0.prototype;
    c[$rt_jso_marker] = true;
    c.handleEvent = c.$handleEvent$exported$0;
    c = otji_JSWrapper$_clinit_$lambda$_33_0.prototype;
    c[$rt_jso_marker] = true;
    c.accept = c.$accept$exported$0;
    c = otji_JSWrapper$_clinit_$lambda$_33_1.prototype;
    c[$rt_jso_marker] = true;
    c.accept = c.$accept$exported$0;
})();
$rt_exports.main = $rt_export_main;
}));
